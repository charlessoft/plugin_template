function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}

function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}

function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}

function _typeof$1(o) {
  "@babel/helpers - typeof";

  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof$1(o);
}

function toPrimitive(t, r) {
  if ("object" != _typeof$1(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof$1(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof$1(i) ? i : i + "";
}

function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}

function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var regeneratorRuntime$1 = {exports: {}};

var _typeof = {exports: {}};

var hasRequired_typeof;

function require_typeof () {
	if (hasRequired_typeof) return _typeof.exports;
	hasRequired_typeof = 1;
	(function (module) {
		function _typeof(o) {
		  "@babel/helpers - typeof";

		  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
		    return typeof o;
		  } : function (o) {
		    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
		}
		module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (_typeof));
	return _typeof.exports;
}

var hasRequiredRegeneratorRuntime;

function requireRegeneratorRuntime () {
	if (hasRequiredRegeneratorRuntime) return regeneratorRuntime$1.exports;
	hasRequiredRegeneratorRuntime = 1;
	(function (module) {
		var _typeof = require_typeof()["default"];
		function _regeneratorRuntime() {
		  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
		    return e;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  var t,
		    e = {},
		    r = Object.prototype,
		    n = r.hasOwnProperty,
		    o = Object.defineProperty || function (t, e, r) {
		      t[e] = r.value;
		    },
		    i = "function" == typeof Symbol ? Symbol : {},
		    a = i.iterator || "@@iterator",
		    c = i.asyncIterator || "@@asyncIterator",
		    u = i.toStringTag || "@@toStringTag";
		  function define(t, e, r) {
		    return Object.defineProperty(t, e, {
		      value: r,
		      enumerable: !0,
		      configurable: !0,
		      writable: !0
		    }), t[e];
		  }
		  try {
		    define({}, "");
		  } catch (t) {
		    define = function define(t, e, r) {
		      return t[e] = r;
		    };
		  }
		  function wrap(t, e, r, n) {
		    var i = e && e.prototype instanceof Generator ? e : Generator,
		      a = Object.create(i.prototype),
		      c = new Context(n || []);
		    return o(a, "_invoke", {
		      value: makeInvokeMethod(t, r, c)
		    }), a;
		  }
		  function tryCatch(t, e, r) {
		    try {
		      return {
		        type: "normal",
		        arg: t.call(e, r)
		      };
		    } catch (t) {
		      return {
		        type: "throw",
		        arg: t
		      };
		    }
		  }
		  e.wrap = wrap;
		  var h = "suspendedStart",
		    l = "suspendedYield",
		    f = "executing",
		    s = "completed",
		    y = {};
		  function Generator() {}
		  function GeneratorFunction() {}
		  function GeneratorFunctionPrototype() {}
		  var p = {};
		  define(p, a, function () {
		    return this;
		  });
		  var d = Object.getPrototypeOf,
		    v = d && d(d(values([])));
		  v && v !== r && n.call(v, a) && (p = v);
		  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
		  function defineIteratorMethods(t) {
		    ["next", "throw", "return"].forEach(function (e) {
		      define(t, e, function (t) {
		        return this._invoke(e, t);
		      });
		    });
		  }
		  function AsyncIterator(t, e) {
		    function invoke(r, o, i, a) {
		      var c = tryCatch(t[r], t, o);
		      if ("throw" !== c.type) {
		        var u = c.arg,
		          h = u.value;
		        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
		          invoke("next", t, i, a);
		        }, function (t) {
		          invoke("throw", t, i, a);
		        }) : e.resolve(h).then(function (t) {
		          u.value = t, i(u);
		        }, function (t) {
		          return invoke("throw", t, i, a);
		        });
		      }
		      a(c.arg);
		    }
		    var r;
		    o(this, "_invoke", {
		      value: function value(t, n) {
		        function callInvokeWithMethodAndArg() {
		          return new e(function (e, r) {
		            invoke(t, n, e, r);
		          });
		        }
		        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
		      }
		    });
		  }
		  function makeInvokeMethod(e, r, n) {
		    var o = h;
		    return function (i, a) {
		      if (o === f) throw Error("Generator is already running");
		      if (o === s) {
		        if ("throw" === i) throw a;
		        return {
		          value: t,
		          done: !0
		        };
		      }
		      for (n.method = i, n.arg = a;;) {
		        var c = n.delegate;
		        if (c) {
		          var u = maybeInvokeDelegate(c, n);
		          if (u) {
		            if (u === y) continue;
		            return u;
		          }
		        }
		        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
		          if (o === h) throw o = s, n.arg;
		          n.dispatchException(n.arg);
		        } else "return" === n.method && n.abrupt("return", n.arg);
		        o = f;
		        var p = tryCatch(e, r, n);
		        if ("normal" === p.type) {
		          if (o = n.done ? s : l, p.arg === y) continue;
		          return {
		            value: p.arg,
		            done: n.done
		          };
		        }
		        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
		      }
		    };
		  }
		  function maybeInvokeDelegate(e, r) {
		    var n = r.method,
		      o = e.iterator[n];
		    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
		    var i = tryCatch(o, e.iterator, r.arg);
		    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
		    var a = i.arg;
		    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
		  }
		  function pushTryEntry(t) {
		    var e = {
		      tryLoc: t[0]
		    };
		    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
		  }
		  function resetTryEntry(t) {
		    var e = t.completion || {};
		    e.type = "normal", delete e.arg, t.completion = e;
		  }
		  function Context(t) {
		    this.tryEntries = [{
		      tryLoc: "root"
		    }], t.forEach(pushTryEntry, this), this.reset(!0);
		  }
		  function values(e) {
		    if (e || "" === e) {
		      var r = e[a];
		      if (r) return r.call(e);
		      if ("function" == typeof e.next) return e;
		      if (!isNaN(e.length)) {
		        var o = -1,
		          i = function next() {
		            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
		            return next.value = t, next.done = !0, next;
		          };
		        return i.next = i;
		      }
		    }
		    throw new TypeError(_typeof(e) + " is not iterable");
		  }
		  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
		    value: GeneratorFunctionPrototype,
		    configurable: !0
		  }), o(GeneratorFunctionPrototype, "constructor", {
		    value: GeneratorFunction,
		    configurable: !0
		  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
		    var e = "function" == typeof t && t.constructor;
		    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
		  }, e.mark = function (t) {
		    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
		  }, e.awrap = function (t) {
		    return {
		      __await: t
		    };
		  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
		    return this;
		  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
		    void 0 === i && (i = Promise);
		    var a = new AsyncIterator(wrap(t, r, n, o), i);
		    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
		      return t.done ? t.value : a.next();
		    });
		  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
		    return this;
		  }), define(g, "toString", function () {
		    return "[object Generator]";
		  }), e.keys = function (t) {
		    var e = Object(t),
		      r = [];
		    for (var n in e) r.push(n);
		    return r.reverse(), function next() {
		      for (; r.length;) {
		        var t = r.pop();
		        if (t in e) return next.value = t, next.done = !1, next;
		      }
		      return next.done = !0, next;
		    };
		  }, e.values = values, Context.prototype = {
		    constructor: Context,
		    reset: function reset(e) {
		      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
		    },
		    stop: function stop() {
		      this.done = !0;
		      var t = this.tryEntries[0].completion;
		      if ("throw" === t.type) throw t.arg;
		      return this.rval;
		    },
		    dispatchException: function dispatchException(e) {
		      if (this.done) throw e;
		      var r = this;
		      function handle(n, o) {
		        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
		      }
		      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
		        var i = this.tryEntries[o],
		          a = i.completion;
		        if ("root" === i.tryLoc) return handle("end");
		        if (i.tryLoc <= this.prev) {
		          var c = n.call(i, "catchLoc"),
		            u = n.call(i, "finallyLoc");
		          if (c && u) {
		            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
		            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
		          } else if (c) {
		            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
		          } else {
		            if (!u) throw Error("try statement without catch or finally");
		            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
		          }
		        }
		      }
		    },
		    abrupt: function abrupt(t, e) {
		      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
		        var o = this.tryEntries[r];
		        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
		          var i = o;
		          break;
		        }
		      }
		      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
		      var a = i ? i.completion : {};
		      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
		    },
		    complete: function complete(t, e) {
		      if ("throw" === t.type) throw t.arg;
		      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
		    },
		    finish: function finish(t) {
		      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
		        var r = this.tryEntries[e];
		        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
		      }
		    },
		    "catch": function _catch(t) {
		      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
		        var r = this.tryEntries[e];
		        if (r.tryLoc === t) {
		          var n = r.completion;
		          if ("throw" === n.type) {
		            var o = n.arg;
		            resetTryEntry(r);
		          }
		          return o;
		        }
		      }
		      throw Error("illegal catch attempt");
		    },
		    delegateYield: function delegateYield(e, r, n) {
		      return this.delegate = {
		        iterator: values(e),
		        resultName: r,
		        nextLoc: n
		      }, "next" === this.method && (this.arg = t), y;
		    }
		  }, e;
		}
		module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (regeneratorRuntime$1));
	return regeneratorRuntime$1.exports;
}

var regenerator;
var hasRequiredRegenerator;

function requireRegenerator () {
	if (hasRequiredRegenerator) return regenerator;
	hasRequiredRegenerator = 1;
	// TODO(Babel 8): Remove this file.

	var runtime = requireRegeneratorRuntime()();
	regenerator = runtime;

	// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  if (typeof globalThis === "object") {
	    globalThis.regeneratorRuntime = runtime;
	  } else {
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	}
	return regenerator;
}

var regeneratorExports = requireRegenerator();
var _regeneratorRuntime = /*@__PURE__*/getDefaultExportFromCjs(regeneratorExports);

var lodash$1 = {exports: {}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
var lodash = lodash$1.exports;

var hasRequiredLodash;

function requireLodash () {
	if (hasRequiredLodash) return lodash$1.exports;
	hasRequiredLodash = 1;
	(function (module, exports) {
(function() {

		  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
		  var undefined$1;

		  /** Used as the semantic version number. */
		  var VERSION = '4.17.21';

		  /** Used as the size to enable large array optimizations. */
		  var LARGE_ARRAY_SIZE = 200;

		  /** Error message constants. */
		  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
		      FUNC_ERROR_TEXT = 'Expected a function',
		      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

		  /** Used to stand-in for `undefined` hash values. */
		  var HASH_UNDEFINED = '__lodash_hash_undefined__';

		  /** Used as the maximum memoize cache size. */
		  var MAX_MEMOIZE_SIZE = 500;

		  /** Used as the internal argument placeholder. */
		  var PLACEHOLDER = '__lodash_placeholder__';

		  /** Used to compose bitmasks for cloning. */
		  var CLONE_DEEP_FLAG = 1,
		      CLONE_FLAT_FLAG = 2,
		      CLONE_SYMBOLS_FLAG = 4;

		  /** Used to compose bitmasks for value comparisons. */
		  var COMPARE_PARTIAL_FLAG = 1,
		      COMPARE_UNORDERED_FLAG = 2;

		  /** Used to compose bitmasks for function metadata. */
		  var WRAP_BIND_FLAG = 1,
		      WRAP_BIND_KEY_FLAG = 2,
		      WRAP_CURRY_BOUND_FLAG = 4,
		      WRAP_CURRY_FLAG = 8,
		      WRAP_CURRY_RIGHT_FLAG = 16,
		      WRAP_PARTIAL_FLAG = 32,
		      WRAP_PARTIAL_RIGHT_FLAG = 64,
		      WRAP_ARY_FLAG = 128,
		      WRAP_REARG_FLAG = 256,
		      WRAP_FLIP_FLAG = 512;

		  /** Used as default options for `_.truncate`. */
		  var DEFAULT_TRUNC_LENGTH = 30,
		      DEFAULT_TRUNC_OMISSION = '...';

		  /** Used to detect hot functions by number of calls within a span of milliseconds. */
		  var HOT_COUNT = 800,
		      HOT_SPAN = 16;

		  /** Used to indicate the type of lazy iteratees. */
		  var LAZY_FILTER_FLAG = 1,
		      LAZY_MAP_FLAG = 2,
		      LAZY_WHILE_FLAG = 3;

		  /** Used as references for various `Number` constants. */
		  var INFINITY = 1 / 0,
		      MAX_SAFE_INTEGER = 9007199254740991,
		      MAX_INTEGER = 1.7976931348623157e+308,
		      NAN = 0 / 0;

		  /** Used as references for the maximum length and index of an array. */
		  var MAX_ARRAY_LENGTH = 4294967295,
		      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
		      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

		  /** Used to associate wrap methods with their bit flags. */
		  var wrapFlags = [
		    ['ary', WRAP_ARY_FLAG],
		    ['bind', WRAP_BIND_FLAG],
		    ['bindKey', WRAP_BIND_KEY_FLAG],
		    ['curry', WRAP_CURRY_FLAG],
		    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
		    ['flip', WRAP_FLIP_FLAG],
		    ['partial', WRAP_PARTIAL_FLAG],
		    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
		    ['rearg', WRAP_REARG_FLAG]
		  ];

		  /** `Object#toString` result references. */
		  var argsTag = '[object Arguments]',
		      arrayTag = '[object Array]',
		      asyncTag = '[object AsyncFunction]',
		      boolTag = '[object Boolean]',
		      dateTag = '[object Date]',
		      domExcTag = '[object DOMException]',
		      errorTag = '[object Error]',
		      funcTag = '[object Function]',
		      genTag = '[object GeneratorFunction]',
		      mapTag = '[object Map]',
		      numberTag = '[object Number]',
		      nullTag = '[object Null]',
		      objectTag = '[object Object]',
		      promiseTag = '[object Promise]',
		      proxyTag = '[object Proxy]',
		      regexpTag = '[object RegExp]',
		      setTag = '[object Set]',
		      stringTag = '[object String]',
		      symbolTag = '[object Symbol]',
		      undefinedTag = '[object Undefined]',
		      weakMapTag = '[object WeakMap]',
		      weakSetTag = '[object WeakSet]';

		  var arrayBufferTag = '[object ArrayBuffer]',
		      dataViewTag = '[object DataView]',
		      float32Tag = '[object Float32Array]',
		      float64Tag = '[object Float64Array]',
		      int8Tag = '[object Int8Array]',
		      int16Tag = '[object Int16Array]',
		      int32Tag = '[object Int32Array]',
		      uint8Tag = '[object Uint8Array]',
		      uint8ClampedTag = '[object Uint8ClampedArray]',
		      uint16Tag = '[object Uint16Array]',
		      uint32Tag = '[object Uint32Array]';

		  /** Used to match empty string literals in compiled template source. */
		  var reEmptyStringLeading = /\b__p \+= '';/g,
		      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
		      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

		  /** Used to match HTML entities and HTML characters. */
		  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
		      reUnescapedHtml = /[&<>"']/g,
		      reHasEscapedHtml = RegExp(reEscapedHtml.source),
		      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

		  /** Used to match template delimiters. */
		  var reEscape = /<%-([\s\S]+?)%>/g,
		      reEvaluate = /<%([\s\S]+?)%>/g,
		      reInterpolate = /<%=([\s\S]+?)%>/g;

		  /** Used to match property names within property paths. */
		  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		      reIsPlainProp = /^\w*$/,
		      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		  /**
		   * Used to match `RegExp`
		   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		   */
		  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
		      reHasRegExpChar = RegExp(reRegExpChar.source);

		  /** Used to match leading whitespace. */
		  var reTrimStart = /^\s+/;

		  /** Used to match a single whitespace character. */
		  var reWhitespace = /\s/;

		  /** Used to match wrap detail comments. */
		  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
		      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
		      reSplitDetails = /,? & /;

		  /** Used to match words composed of alphanumeric characters. */
		  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

		  /**
		   * Used to validate the `validate` option in `_.template` variable.
		   *
		   * Forbids characters which could potentially change the meaning of the function argument definition:
		   * - "()," (modification of function parameters)
		   * - "=" (default value)
		   * - "[]{}" (destructuring of function parameters)
		   * - "/" (beginning of a comment)
		   * - whitespace
		   */
		  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

		  /** Used to match backslashes in property paths. */
		  var reEscapeChar = /\\(\\)?/g;

		  /**
		   * Used to match
		   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
		   */
		  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

		  /** Used to match `RegExp` flags from their coerced string values. */
		  var reFlags = /\w*$/;

		  /** Used to detect bad signed hexadecimal string values. */
		  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

		  /** Used to detect binary string values. */
		  var reIsBinary = /^0b[01]+$/i;

		  /** Used to detect host constructors (Safari). */
		  var reIsHostCtor = /^\[object .+?Constructor\]$/;

		  /** Used to detect octal string values. */
		  var reIsOctal = /^0o[0-7]+$/i;

		  /** Used to detect unsigned integer values. */
		  var reIsUint = /^(?:0|[1-9]\d*)$/;

		  /** Used to match Latin Unicode letters (excluding mathematical operators). */
		  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

		  /** Used to ensure capturing order of template delimiters. */
		  var reNoMatch = /($^)/;

		  /** Used to match unescaped characters in compiled string literals. */
		  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

		  /** Used to compose unicode character classes. */
		  var rsAstralRange = '\\ud800-\\udfff',
		      rsComboMarksRange = '\\u0300-\\u036f',
		      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
		      rsComboSymbolsRange = '\\u20d0-\\u20ff',
		      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
		      rsDingbatRange = '\\u2700-\\u27bf',
		      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
		      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
		      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
		      rsPunctuationRange = '\\u2000-\\u206f',
		      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
		      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
		      rsVarRange = '\\ufe0e\\ufe0f',
		      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

		  /** Used to compose unicode capture groups. */
		  var rsApos = "['\u2019]",
		      rsAstral = '[' + rsAstralRange + ']',
		      rsBreak = '[' + rsBreakRange + ']',
		      rsCombo = '[' + rsComboRange + ']',
		      rsDigits = '\\d+',
		      rsDingbat = '[' + rsDingbatRange + ']',
		      rsLower = '[' + rsLowerRange + ']',
		      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
		      rsFitz = '\\ud83c[\\udffb-\\udfff]',
		      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
		      rsNonAstral = '[^' + rsAstralRange + ']',
		      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
		      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
		      rsUpper = '[' + rsUpperRange + ']',
		      rsZWJ = '\\u200d';

		  /** Used to compose unicode regexes. */
		  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
		      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
		      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
		      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
		      reOptMod = rsModifier + '?',
		      rsOptVar = '[' + rsVarRange + ']?',
		      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
		      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
		      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
		      rsSeq = rsOptVar + reOptMod + rsOptJoin,
		      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
		      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

		  /** Used to match apostrophes. */
		  var reApos = RegExp(rsApos, 'g');

		  /**
		   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
		   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
		   */
		  var reComboMark = RegExp(rsCombo, 'g');

		  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
		  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

		  /** Used to match complex or compound words. */
		  var reUnicodeWord = RegExp([
		    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
		    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
		    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
		    rsUpper + '+' + rsOptContrUpper,
		    rsOrdUpper,
		    rsOrdLower,
		    rsDigits,
		    rsEmoji
		  ].join('|'), 'g');

		  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
		  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

		  /** Used to detect strings that need a more robust regexp to match words. */
		  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

		  /** Used to assign default `context` object properties. */
		  var contextProps = [
		    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
		    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
		    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
		    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
		    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
		  ];

		  /** Used to make template sourceURLs easier to identify. */
		  var templateCounter = -1;

		  /** Used to identify `toStringTag` values of typed arrays. */
		  var typedArrayTags = {};
		  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		  typedArrayTags[uint32Tag] = true;
		  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		  typedArrayTags[setTag] = typedArrayTags[stringTag] =
		  typedArrayTags[weakMapTag] = false;

		  /** Used to identify `toStringTag` values supported by `_.clone`. */
		  var cloneableTags = {};
		  cloneableTags[argsTag] = cloneableTags[arrayTag] =
		  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
		  cloneableTags[boolTag] = cloneableTags[dateTag] =
		  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
		  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
		  cloneableTags[int32Tag] = cloneableTags[mapTag] =
		  cloneableTags[numberTag] = cloneableTags[objectTag] =
		  cloneableTags[regexpTag] = cloneableTags[setTag] =
		  cloneableTags[stringTag] = cloneableTags[symbolTag] =
		  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
		  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		  cloneableTags[errorTag] = cloneableTags[funcTag] =
		  cloneableTags[weakMapTag] = false;

		  /** Used to map Latin Unicode letters to basic Latin letters. */
		  var deburredLetters = {
		    // Latin-1 Supplement block.
		    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
		    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
		    '\xc7': 'C',  '\xe7': 'c',
		    '\xd0': 'D',  '\xf0': 'd',
		    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
		    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
		    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
		    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
		    '\xd1': 'N',  '\xf1': 'n',
		    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
		    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
		    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
		    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
		    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
		    '\xc6': 'Ae', '\xe6': 'ae',
		    '\xde': 'Th', '\xfe': 'th',
		    '\xdf': 'ss',
		    // Latin Extended-A block.
		    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
		    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
		    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
		    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
		    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
		    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
		    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
		    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
		    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
		    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
		    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
		    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
		    '\u0134': 'J',  '\u0135': 'j',
		    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
		    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
		    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
		    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
		    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
		    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
		    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
		    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
		    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
		    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
		    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
		    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
		    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
		    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
		    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
		    '\u0174': 'W',  '\u0175': 'w',
		    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
		    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
		    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
		    '\u0132': 'IJ', '\u0133': 'ij',
		    '\u0152': 'Oe', '\u0153': 'oe',
		    '\u0149': "'n", '\u017f': 's'
		  };

		  /** Used to map characters to HTML entities. */
		  var htmlEscapes = {
		    '&': '&amp;',
		    '<': '&lt;',
		    '>': '&gt;',
		    '"': '&quot;',
		    "'": '&#39;'
		  };

		  /** Used to map HTML entities to characters. */
		  var htmlUnescapes = {
		    '&amp;': '&',
		    '&lt;': '<',
		    '&gt;': '>',
		    '&quot;': '"',
		    '&#39;': "'"
		  };

		  /** Used to escape characters for inclusion in compiled string literals. */
		  var stringEscapes = {
		    '\\': '\\',
		    "'": "'",
		    '\n': 'n',
		    '\r': 'r',
		    '\u2028': 'u2028',
		    '\u2029': 'u2029'
		  };

		  /** Built-in method references without a dependency on `root`. */
		  var freeParseFloat = parseFloat,
		      freeParseInt = parseInt;

		  /** Detect free variable `global` from Node.js. */
		  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		  /** Detect free variable `self`. */
		  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		  /** Used as a reference to the global object. */
		  var root = freeGlobal || freeSelf || Function('return this')();

		  /** Detect free variable `exports`. */
		  var freeExports = exports && !exports.nodeType && exports;

		  /** Detect free variable `module`. */
		  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		  /** Detect the popular CommonJS extension `module.exports`. */
		  var moduleExports = freeModule && freeModule.exports === freeExports;

		  /** Detect free variable `process` from Node.js. */
		  var freeProcess = moduleExports && freeGlobal.process;

		  /** Used to access faster Node.js helpers. */
		  var nodeUtil = (function() {
		    try {
		      // Use `util.types` for Node.js 10+.
		      var types = freeModule && freeModule.require && freeModule.require('util').types;

		      if (types) {
		        return types;
		      }

		      // Legacy `process.binding('util')` for Node.js < 10.
		      return freeProcess && freeProcess.binding && freeProcess.binding('util');
		    } catch (e) {}
		  }());

		  /* Node.js helper references. */
		  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
		      nodeIsDate = nodeUtil && nodeUtil.isDate,
		      nodeIsMap = nodeUtil && nodeUtil.isMap,
		      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
		      nodeIsSet = nodeUtil && nodeUtil.isSet,
		      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		  /*--------------------------------------------------------------------------*/

		  /**
		   * A faster alternative to `Function#apply`, this function invokes `func`
		   * with the `this` binding of `thisArg` and the arguments of `args`.
		   *
		   * @private
		   * @param {Function} func The function to invoke.
		   * @param {*} thisArg The `this` binding of `func`.
		   * @param {Array} args The arguments to invoke `func` with.
		   * @returns {*} Returns the result of `func`.
		   */
		  function apply(func, thisArg, args) {
		    switch (args.length) {
		      case 0: return func.call(thisArg);
		      case 1: return func.call(thisArg, args[0]);
		      case 2: return func.call(thisArg, args[0], args[1]);
		      case 3: return func.call(thisArg, args[0], args[1], args[2]);
		    }
		    return func.apply(thisArg, args);
		  }

		  /**
		   * A specialized version of `baseAggregator` for arrays.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} setter The function to set `accumulator` values.
		   * @param {Function} iteratee The iteratee to transform keys.
		   * @param {Object} accumulator The initial aggregated object.
		   * @returns {Function} Returns `accumulator`.
		   */
		  function arrayAggregator(array, setter, iteratee, accumulator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      var value = array[index];
		      setter(accumulator, value, iteratee(value), array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.forEach` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEach(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (iteratee(array[index], index, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.forEachRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEachRight(array, iteratee) {
		    var length = array == null ? 0 : array.length;

		    while (length--) {
		      if (iteratee(array[length], length, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.every` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if all elements pass the predicate check,
		   *  else `false`.
		   */
		  function arrayEvery(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (!predicate(array[index], index, array)) {
		        return false;
		      }
		    }
		    return true;
		  }

		  /**
		   * A specialized version of `_.filter` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {Array} Returns the new filtered array.
		   */
		  function arrayFilter(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (predicate(value, index, array)) {
		        result[resIndex++] = value;
		      }
		    }
		    return result;
		  }

		  /**
		   * A specialized version of `_.includes` for arrays without support for
		   * specifying an index to search from.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludes(array, value) {
		    var length = array == null ? 0 : array.length;
		    return !!length && baseIndexOf(array, value, 0) > -1;
		  }

		  /**
		   * This function is like `arrayIncludes` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludesWith(array, value, comparator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (comparator(value, array[index])) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * A specialized version of `_.map` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the new mapped array.
		   */
		  function arrayMap(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        result = Array(length);

		    while (++index < length) {
		      result[index] = iteratee(array[index], index, array);
		    }
		    return result;
		  }

		  /**
		   * Appends the elements of `values` to `array`.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {Array} values The values to append.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayPush(array, values) {
		    var index = -1,
		        length = values.length,
		        offset = array.length;

		    while (++index < length) {
		      array[offset + index] = values[index];
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.reduce` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the first element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduce(array, iteratee, accumulator, initAccum) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    if (initAccum && length) {
		      accumulator = array[++index];
		    }
		    while (++index < length) {
		      accumulator = iteratee(accumulator, array[index], index, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.reduceRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the last element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
		    var length = array == null ? 0 : array.length;
		    if (initAccum && length) {
		      accumulator = array[--length];
		    }
		    while (length--) {
		      accumulator = iteratee(accumulator, array[length], length, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.some` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if any element passes the predicate check,
		   *  else `false`.
		   */
		  function arraySome(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (predicate(array[index], index, array)) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * Gets the size of an ASCII `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  var asciiSize = baseProperty('length');

		  /**
		   * Converts an ASCII `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function asciiToArray(string) {
		    return string.split('');
		  }

		  /**
		   * Splits an ASCII `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function asciiWords(string) {
		    return string.match(reAsciiWord) || [];
		  }

		  /**
		   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
		   * without support for iteratee shorthands, which iterates over `collection`
		   * using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the found element or its key, else `undefined`.
		   */
		  function baseFindKey(collection, predicate, eachFunc) {
		    var result;
		    eachFunc(collection, function(value, key, collection) {
		      if (predicate(value, key, collection)) {
		        result = key;
		        return false;
		      }
		    });
		    return result;
		  }

		  /**
		   * The base implementation of `_.findIndex` and `_.findLastIndex` without
		   * support for iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {number} fromIndex The index to search from.
		   * @param {boolean} [fromRight] Specify iterating from right to left.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseFindIndex(array, predicate, fromIndex, fromRight) {
		    var length = array.length,
		        index = fromIndex + (fromRight ? 1 : -1);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (predicate(array[index], index, array)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOf(array, value, fromIndex) {
		    return value === value
		      ? strictIndexOf(array, value, fromIndex)
		      : baseFindIndex(array, baseIsNaN, fromIndex);
		  }

		  /**
		   * This function is like `baseIndexOf` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOfWith(array, value, fromIndex, comparator) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (comparator(array[index], value)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.isNaN` without support for number objects.
		   *
		   * @private
		   * @param {*} value The value to check.
		   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		   */
		  function baseIsNaN(value) {
		    return value !== value;
		  }

		  /**
		   * The base implementation of `_.mean` and `_.meanBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the mean.
		   */
		  function baseMean(array, iteratee) {
		    var length = array == null ? 0 : array.length;
		    return length ? (baseSum(array, iteratee) / length) : NAN;
		  }

		  /**
		   * The base implementation of `_.property` without support for deep paths.
		   *
		   * @private
		   * @param {string} key The key of the property to get.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function baseProperty(key) {
		    return function(object) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.propertyOf` without support for deep paths.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function basePropertyOf(object) {
		    return function(key) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.reduce` and `_.reduceRight`, without support
		   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} accumulator The initial value.
		   * @param {boolean} initAccum Specify using the first or last element of
		   *  `collection` as the initial value.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the accumulated value.
		   */
		  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
		    eachFunc(collection, function(value, index, collection) {
		      accumulator = initAccum
		        ? (initAccum = false, value)
		        : iteratee(accumulator, value, index, collection);
		    });
		    return accumulator;
		  }

		  /**
		   * The base implementation of `_.sortBy` which uses `comparer` to define the
		   * sort order of `array` and replaces criteria objects with their corresponding
		   * values.
		   *
		   * @private
		   * @param {Array} array The array to sort.
		   * @param {Function} comparer The function to define sort order.
		   * @returns {Array} Returns `array`.
		   */
		  function baseSortBy(array, comparer) {
		    var length = array.length;

		    array.sort(comparer);
		    while (length--) {
		      array[length] = array[length].value;
		    }
		    return array;
		  }

		  /**
		   * The base implementation of `_.sum` and `_.sumBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the sum.
		   */
		  function baseSum(array, iteratee) {
		    var result,
		        index = -1,
		        length = array.length;

		    while (++index < length) {
		      var current = iteratee(array[index]);
		      if (current !== undefined$1) {
		        result = result === undefined$1 ? current : (result + current);
		      }
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.times` without support for iteratee shorthands
		   * or max array length checks.
		   *
		   * @private
		   * @param {number} n The number of times to invoke `iteratee`.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the array of results.
		   */
		  function baseTimes(n, iteratee) {
		    var index = -1,
		        result = Array(n);

		    while (++index < n) {
		      result[index] = iteratee(index);
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
		   * of key-value pairs for `object` corresponding to the property names of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the key-value pairs.
		   */
		  function baseToPairs(object, props) {
		    return arrayMap(props, function(key) {
		      return [key, object[key]];
		    });
		  }

		  /**
		   * The base implementation of `_.trim`.
		   *
		   * @private
		   * @param {string} string The string to trim.
		   * @returns {string} Returns the trimmed string.
		   */
		  function baseTrim(string) {
		    return string
		      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
		      : string;
		  }

		  /**
		   * The base implementation of `_.unary` without support for storing metadata.
		   *
		   * @private
		   * @param {Function} func The function to cap arguments for.
		   * @returns {Function} Returns the new capped function.
		   */
		  function baseUnary(func) {
		    return function(value) {
		      return func(value);
		    };
		  }

		  /**
		   * The base implementation of `_.values` and `_.valuesIn` which creates an
		   * array of `object` property values corresponding to the property names
		   * of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the array of property values.
		   */
		  function baseValues(object, props) {
		    return arrayMap(props, function(key) {
		      return object[key];
		    });
		  }

		  /**
		   * Checks if a `cache` value for `key` exists.
		   *
		   * @private
		   * @param {Object} cache The cache to query.
		   * @param {string} key The key of the entry to check.
		   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		   */
		  function cacheHas(cache, key) {
		    return cache.has(key);
		  }

		  /**
		   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the first unmatched string symbol.
		   */
		  function charsStartIndex(strSymbols, chrSymbols) {
		    var index = -1,
		        length = strSymbols.length;

		    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the last unmatched string symbol.
		   */
		  function charsEndIndex(strSymbols, chrSymbols) {
		    var index = strSymbols.length;

		    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Gets the number of `placeholder` occurrences in `array`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} placeholder The placeholder to search for.
		   * @returns {number} Returns the placeholder count.
		   */
		  function countHolders(array, placeholder) {
		    var length = array.length,
		        result = 0;

		    while (length--) {
		      if (array[length] === placeholder) {
		        ++result;
		      }
		    }
		    return result;
		  }

		  /**
		   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
		   * letters to basic Latin letters.
		   *
		   * @private
		   * @param {string} letter The matched letter to deburr.
		   * @returns {string} Returns the deburred letter.
		   */
		  var deburrLetter = basePropertyOf(deburredLetters);

		  /**
		   * Used by `_.escape` to convert characters to HTML entities.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  var escapeHtmlChar = basePropertyOf(htmlEscapes);

		  /**
		   * Used by `_.template` to escape characters for inclusion in compiled string literals.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  function escapeStringChar(chr) {
		    return '\\' + stringEscapes[chr];
		  }

		  /**
		   * Gets the value at `key` of `object`.
		   *
		   * @private
		   * @param {Object} [object] The object to query.
		   * @param {string} key The key of the property to get.
		   * @returns {*} Returns the property value.
		   */
		  function getValue(object, key) {
		    return object == null ? undefined$1 : object[key];
		  }

		  /**
		   * Checks if `string` contains Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
		   */
		  function hasUnicode(string) {
		    return reHasUnicode.test(string);
		  }

		  /**
		   * Checks if `string` contains a word composed of Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a word is found, else `false`.
		   */
		  function hasUnicodeWord(string) {
		    return reHasUnicodeWord.test(string);
		  }

		  /**
		   * Converts `iterator` to an array.
		   *
		   * @private
		   * @param {Object} iterator The iterator to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function iteratorToArray(iterator) {
		    var data,
		        result = [];

		    while (!(data = iterator.next()).done) {
		      result.push(data.value);
		    }
		    return result;
		  }

		  /**
		   * Converts `map` to its key-value pairs.
		   *
		   * @private
		   * @param {Object} map The map to convert.
		   * @returns {Array} Returns the key-value pairs.
		   */
		  function mapToArray(map) {
		    var index = -1,
		        result = Array(map.size);

		    map.forEach(function(value, key) {
		      result[++index] = [key, value];
		    });
		    return result;
		  }

		  /**
		   * Creates a unary function that invokes `func` with its argument transformed.
		   *
		   * @private
		   * @param {Function} func The function to wrap.
		   * @param {Function} transform The argument transform.
		   * @returns {Function} Returns the new function.
		   */
		  function overArg(func, transform) {
		    return function(arg) {
		      return func(transform(arg));
		    };
		  }

		  /**
		   * Replaces all `placeholder` elements in `array` with an internal placeholder
		   * and returns an array of their indexes.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {*} placeholder The placeholder to replace.
		   * @returns {Array} Returns the new array of placeholder indexes.
		   */
		  function replaceHolders(array, placeholder) {
		    var index = -1,
		        length = array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (value === placeholder || value === PLACEHOLDER) {
		        array[index] = PLACEHOLDER;
		        result[resIndex++] = index;
		      }
		    }
		    return result;
		  }

		  /**
		   * Converts `set` to an array of its values.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the values.
		   */
		  function setToArray(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = value;
		    });
		    return result;
		  }

		  /**
		   * Converts `set` to its value-value pairs.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the value-value pairs.
		   */
		  function setToPairs(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = [value, value];
		    });
		    return result;
		  }

		  /**
		   * A specialized version of `_.indexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictIndexOf(array, value, fromIndex) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * A specialized version of `_.lastIndexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictLastIndexOf(array, value, fromIndex) {
		    var index = fromIndex + 1;
		    while (index--) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return index;
		  }

		  /**
		   * Gets the number of symbols in `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the string size.
		   */
		  function stringSize(string) {
		    return hasUnicode(string)
		      ? unicodeSize(string)
		      : asciiSize(string);
		  }

		  /**
		   * Converts `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function stringToArray(string) {
		    return hasUnicode(string)
		      ? unicodeToArray(string)
		      : asciiToArray(string);
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
		   * character of `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the index of the last non-whitespace character.
		   */
		  function trimmedEndIndex(string) {
		    var index = string.length;

		    while (index-- && reWhitespace.test(string.charAt(index))) {}
		    return index;
		  }

		  /**
		   * Used by `_.unescape` to convert HTML entities to characters.
		   *
		   * @private
		   * @param {string} chr The matched character to unescape.
		   * @returns {string} Returns the unescaped character.
		   */
		  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

		  /**
		   * Gets the size of a Unicode `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  function unicodeSize(string) {
		    var result = reUnicode.lastIndex = 0;
		    while (reUnicode.test(string)) {
		      ++result;
		    }
		    return result;
		  }

		  /**
		   * Converts a Unicode `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function unicodeToArray(string) {
		    return string.match(reUnicode) || [];
		  }

		  /**
		   * Splits a Unicode `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function unicodeWords(string) {
		    return string.match(reUnicodeWord) || [];
		  }

		  /*--------------------------------------------------------------------------*/

		  /**
		   * Create a new pristine `lodash` function using the `context` object.
		   *
		   * @static
		   * @memberOf _
		   * @since 1.1.0
		   * @category Util
		   * @param {Object} [context=root] The context object.
		   * @returns {Function} Returns a new `lodash` function.
		   * @example
		   *
		   * _.mixin({ 'foo': _.constant('foo') });
		   *
		   * var lodash = _.runInContext();
		   * lodash.mixin({ 'bar': lodash.constant('bar') });
		   *
		   * _.isFunction(_.foo);
		   * // => true
		   * _.isFunction(_.bar);
		   * // => false
		   *
		   * lodash.isFunction(lodash.foo);
		   * // => false
		   * lodash.isFunction(lodash.bar);
		   * // => true
		   *
		   * // Create a suped-up `defer` in Node.js.
		   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
		   */
		  var runInContext = (function runInContext(context) {
		    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

		    /** Built-in constructor references. */
		    var Array = context.Array,
		        Date = context.Date,
		        Error = context.Error,
		        Function = context.Function,
		        Math = context.Math,
		        Object = context.Object,
		        RegExp = context.RegExp,
		        String = context.String,
		        TypeError = context.TypeError;

		    /** Used for built-in method references. */
		    var arrayProto = Array.prototype,
		        funcProto = Function.prototype,
		        objectProto = Object.prototype;

		    /** Used to detect overreaching core-js shims. */
		    var coreJsData = context['__core-js_shared__'];

		    /** Used to resolve the decompiled source of functions. */
		    var funcToString = funcProto.toString;

		    /** Used to check objects for own properties. */
		    var hasOwnProperty = objectProto.hasOwnProperty;

		    /** Used to generate unique IDs. */
		    var idCounter = 0;

		    /** Used to detect methods masquerading as native. */
		    var maskSrcKey = (function() {
		      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		      return uid ? ('Symbol(src)_1.' + uid) : '';
		    }());

		    /**
		     * Used to resolve the
		     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		     * of values.
		     */
		    var nativeObjectToString = objectProto.toString;

		    /** Used to infer the `Object` constructor. */
		    var objectCtorString = funcToString.call(Object);

		    /** Used to restore the original `_` reference in `_.noConflict`. */
		    var oldDash = root._;

		    /** Used to detect if a method is native. */
		    var reIsNative = RegExp('^' +
		      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		    );

		    /** Built-in value references. */
		    var Buffer = moduleExports ? context.Buffer : undefined$1,
		        Symbol = context.Symbol,
		        Uint8Array = context.Uint8Array,
		        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
		        getPrototype = overArg(Object.getPrototypeOf, Object),
		        objectCreate = Object.create,
		        propertyIsEnumerable = objectProto.propertyIsEnumerable,
		        splice = arrayProto.splice,
		        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
		        symIterator = Symbol ? Symbol.iterator : undefined$1,
		        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

		    var defineProperty = (function() {
		      try {
		        var func = getNative(Object, 'defineProperty');
		        func({}, '', {});
		        return func;
		      } catch (e) {}
		    }());

		    /** Mocked built-ins. */
		    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
		        ctxNow = Date && Date.now !== root.Date.now && Date.now,
		        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

		    /* Built-in method references for those with the same name as other `lodash` methods. */
		    var nativeCeil = Math.ceil,
		        nativeFloor = Math.floor,
		        nativeGetSymbols = Object.getOwnPropertySymbols,
		        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
		        nativeIsFinite = context.isFinite,
		        nativeJoin = arrayProto.join,
		        nativeKeys = overArg(Object.keys, Object),
		        nativeMax = Math.max,
		        nativeMin = Math.min,
		        nativeNow = Date.now,
		        nativeParseInt = context.parseInt,
		        nativeRandom = Math.random,
		        nativeReverse = arrayProto.reverse;

		    /* Built-in method references that are verified to be native. */
		    var DataView = getNative(context, 'DataView'),
		        Map = getNative(context, 'Map'),
		        Promise = getNative(context, 'Promise'),
		        Set = getNative(context, 'Set'),
		        WeakMap = getNative(context, 'WeakMap'),
		        nativeCreate = getNative(Object, 'create');

		    /** Used to store function metadata. */
		    var metaMap = WeakMap && new WeakMap;

		    /** Used to lookup unminified function names. */
		    var realNames = {};

		    /** Used to detect maps, sets, and weakmaps. */
		    var dataViewCtorString = toSource(DataView),
		        mapCtorString = toSource(Map),
		        promiseCtorString = toSource(Promise),
		        setCtorString = toSource(Set),
		        weakMapCtorString = toSource(WeakMap);

		    /** Used to convert symbols to primitives and strings. */
		    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
		        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
		        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` object which wraps `value` to enable implicit method
		     * chain sequences. Methods that operate on and return arrays, collections,
		     * and functions can be chained together. Methods that retrieve a single value
		     * or may return a primitive value will automatically end the chain sequence
		     * and return the unwrapped value. Otherwise, the value must be unwrapped
		     * with `_#value`.
		     *
		     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
		     * enabled using `_.chain`.
		     *
		     * The execution of chained methods is lazy, that is, it's deferred until
		     * `_#value` is implicitly or explicitly called.
		     *
		     * Lazy evaluation allows several methods to support shortcut fusion.
		     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
		     * the creation of intermediate arrays and can greatly reduce the number of
		     * iteratee executions. Sections of a chain sequence qualify for shortcut
		     * fusion if the section is applied to an array and iteratees accept only
		     * one argument. The heuristic for whether a section qualifies for shortcut
		     * fusion is subject to change.
		     *
		     * Chaining is supported in custom builds as long as the `_#value` method is
		     * directly or indirectly included in the build.
		     *
		     * In addition to lodash methods, wrappers have `Array` and `String` methods.
		     *
		     * The wrapper `Array` methods are:
		     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
		     *
		     * The wrapper `String` methods are:
		     * `replace` and `split`
		     *
		     * The wrapper methods that support shortcut fusion are:
		     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
		     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
		     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
		     *
		     * The chainable wrapper methods are:
		     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
		     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
		     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
		     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
		     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
		     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
		     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
		     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
		     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
		     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
		     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
		     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
		     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
		     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
		     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
		     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
		     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
		     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
		     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
		     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
		     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
		     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
		     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
		     * `zipObject`, `zipObjectDeep`, and `zipWith`
		     *
		     * The wrapper methods that are **not** chainable by default are:
		     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
		     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
		     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
		     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
		     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
		     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
		     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
		     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
		     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
		     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
		     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
		     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
		     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
		     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
		     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
		     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
		     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
		     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
		     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
		     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
		     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
		     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
		     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
		     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
		     * `upperFirst`, `value`, and `words`
		     *
		     * @name _
		     * @constructor
		     * @category Seq
		     * @param {*} value The value to wrap in a `lodash` instance.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2, 3]);
		     *
		     * // Returns an unwrapped value.
		     * wrapped.reduce(_.add);
		     * // => 6
		     *
		     * // Returns a wrapped value.
		     * var squares = wrapped.map(square);
		     *
		     * _.isArray(squares);
		     * // => false
		     *
		     * _.isArray(squares.value());
		     * // => true
		     */
		    function lodash(value) {
		      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
		        if (value instanceof LodashWrapper) {
		          return value;
		        }
		        if (hasOwnProperty.call(value, '__wrapped__')) {
		          return wrapperClone(value);
		        }
		      }
		      return new LodashWrapper(value);
		    }

		    /**
		     * The base implementation of `_.create` without support for assigning
		     * properties to the created object.
		     *
		     * @private
		     * @param {Object} proto The object to inherit from.
		     * @returns {Object} Returns the new object.
		     */
		    var baseCreate = (function() {
		      function object() {}
		      return function(proto) {
		        if (!isObject(proto)) {
		          return {};
		        }
		        if (objectCreate) {
		          return objectCreate(proto);
		        }
		        object.prototype = proto;
		        var result = new object;
		        object.prototype = undefined$1;
		        return result;
		      };
		    }());

		    /**
		     * The function whose prototype chain sequence wrappers inherit from.
		     *
		     * @private
		     */
		    function baseLodash() {
		      // No operation performed.
		    }

		    /**
		     * The base constructor for creating `lodash` wrapper objects.
		     *
		     * @private
		     * @param {*} value The value to wrap.
		     * @param {boolean} [chainAll] Enable explicit method chain sequences.
		     */
		    function LodashWrapper(value, chainAll) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__chain__ = !!chainAll;
		      this.__index__ = 0;
		      this.__values__ = undefined$1;
		    }

		    /**
		     * By default, the template delimiters used by lodash are like those in
		     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
		     * following template settings to use alternative delimiters.
		     *
		     * @static
		     * @memberOf _
		     * @type {Object}
		     */
		    lodash.templateSettings = {

		      /**
		       * Used to detect `data` property values to be HTML-escaped.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'escape': reEscape,

		      /**
		       * Used to detect code to be evaluated.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'evaluate': reEvaluate,

		      /**
		       * Used to detect `data` property values to inject.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'interpolate': reInterpolate,

		      /**
		       * Used to reference the data object in the template text.
		       *
		       * @memberOf _.templateSettings
		       * @type {string}
		       */
		      'variable': '',

		      /**
		       * Used to import variables into the compiled template.
		       *
		       * @memberOf _.templateSettings
		       * @type {Object}
		       */
		      'imports': {

		        /**
		         * A reference to the `lodash` function.
		         *
		         * @memberOf _.templateSettings.imports
		         * @type {Function}
		         */
		        '_': lodash
		      }
		    };

		    // Ensure wrappers are instances of `baseLodash`.
		    lodash.prototype = baseLodash.prototype;
		    lodash.prototype.constructor = lodash;

		    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
		    LodashWrapper.prototype.constructor = LodashWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
		     *
		     * @private
		     * @constructor
		     * @param {*} value The value to wrap.
		     */
		    function LazyWrapper(value) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__dir__ = 1;
		      this.__filtered__ = false;
		      this.__iteratees__ = [];
		      this.__takeCount__ = MAX_ARRAY_LENGTH;
		      this.__views__ = [];
		    }

		    /**
		     * Creates a clone of the lazy wrapper object.
		     *
		     * @private
		     * @name clone
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the cloned `LazyWrapper` object.
		     */
		    function lazyClone() {
		      var result = new LazyWrapper(this.__wrapped__);
		      result.__actions__ = copyArray(this.__actions__);
		      result.__dir__ = this.__dir__;
		      result.__filtered__ = this.__filtered__;
		      result.__iteratees__ = copyArray(this.__iteratees__);
		      result.__takeCount__ = this.__takeCount__;
		      result.__views__ = copyArray(this.__views__);
		      return result;
		    }

		    /**
		     * Reverses the direction of lazy iteration.
		     *
		     * @private
		     * @name reverse
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the new reversed `LazyWrapper` object.
		     */
		    function lazyReverse() {
		      if (this.__filtered__) {
		        var result = new LazyWrapper(this);
		        result.__dir__ = -1;
		        result.__filtered__ = true;
		      } else {
		        result = this.clone();
		        result.__dir__ *= -1;
		      }
		      return result;
		    }

		    /**
		     * Extracts the unwrapped value from its lazy wrapper.
		     *
		     * @private
		     * @name value
		     * @memberOf LazyWrapper
		     * @returns {*} Returns the unwrapped value.
		     */
		    function lazyValue() {
		      var array = this.__wrapped__.value(),
		          dir = this.__dir__,
		          isArr = isArray(array),
		          isRight = dir < 0,
		          arrLength = isArr ? array.length : 0,
		          view = getView(0, arrLength, this.__views__),
		          start = view.start,
		          end = view.end,
		          length = end - start,
		          index = isRight ? end : (start - 1),
		          iteratees = this.__iteratees__,
		          iterLength = iteratees.length,
		          resIndex = 0,
		          takeCount = nativeMin(length, this.__takeCount__);

		      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
		        return baseWrapperValue(array, this.__actions__);
		      }
		      var result = [];

		      outer:
		      while (length-- && resIndex < takeCount) {
		        index += dir;

		        var iterIndex = -1,
		            value = array[index];

		        while (++iterIndex < iterLength) {
		          var data = iteratees[iterIndex],
		              iteratee = data.iteratee,
		              type = data.type,
		              computed = iteratee(value);

		          if (type == LAZY_MAP_FLAG) {
		            value = computed;
		          } else if (!computed) {
		            if (type == LAZY_FILTER_FLAG) {
		              continue outer;
		            } else {
		              break outer;
		            }
		          }
		        }
		        result[resIndex++] = value;
		      }
		      return result;
		    }

		    // Ensure `LazyWrapper` is an instance of `baseLodash`.
		    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
		    LazyWrapper.prototype.constructor = LazyWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a hash object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Hash(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the hash.
		     *
		     * @private
		     * @name clear
		     * @memberOf Hash
		     */
		    function hashClear() {
		      this.__data__ = nativeCreate ? nativeCreate(null) : {};
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the hash.
		     *
		     * @private
		     * @name delete
		     * @memberOf Hash
		     * @param {Object} hash The hash to modify.
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function hashDelete(key) {
		      var result = this.has(key) && delete this.__data__[key];
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the hash value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Hash
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function hashGet(key) {
		      var data = this.__data__;
		      if (nativeCreate) {
		        var result = data[key];
		        return result === HASH_UNDEFINED ? undefined$1 : result;
		      }
		      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
		    }

		    /**
		     * Checks if a hash value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Hash
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function hashHas(key) {
		      var data = this.__data__;
		      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
		    }

		    /**
		     * Sets the hash `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Hash
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the hash instance.
		     */
		    function hashSet(key, value) {
		      var data = this.__data__;
		      this.size += this.has(key) ? 0 : 1;
		      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
		      return this;
		    }

		    // Add methods to `Hash`.
		    Hash.prototype.clear = hashClear;
		    Hash.prototype['delete'] = hashDelete;
		    Hash.prototype.get = hashGet;
		    Hash.prototype.has = hashHas;
		    Hash.prototype.set = hashSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an list cache object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function ListCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the list cache.
		     *
		     * @private
		     * @name clear
		     * @memberOf ListCache
		     */
		    function listCacheClear() {
		      this.__data__ = [];
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the list cache.
		     *
		     * @private
		     * @name delete
		     * @memberOf ListCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function listCacheDelete(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        return false;
		      }
		      var lastIndex = data.length - 1;
		      if (index == lastIndex) {
		        data.pop();
		      } else {
		        splice.call(data, index, 1);
		      }
		      --this.size;
		      return true;
		    }

		    /**
		     * Gets the list cache value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf ListCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function listCacheGet(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      return index < 0 ? undefined$1 : data[index][1];
		    }

		    /**
		     * Checks if a list cache value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf ListCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function listCacheHas(key) {
		      return assocIndexOf(this.__data__, key) > -1;
		    }

		    /**
		     * Sets the list cache `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf ListCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the list cache instance.
		     */
		    function listCacheSet(key, value) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        ++this.size;
		        data.push([key, value]);
		      } else {
		        data[index][1] = value;
		      }
		      return this;
		    }

		    // Add methods to `ListCache`.
		    ListCache.prototype.clear = listCacheClear;
		    ListCache.prototype['delete'] = listCacheDelete;
		    ListCache.prototype.get = listCacheGet;
		    ListCache.prototype.has = listCacheHas;
		    ListCache.prototype.set = listCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a map cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function MapCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the map.
		     *
		     * @private
		     * @name clear
		     * @memberOf MapCache
		     */
		    function mapCacheClear() {
		      this.size = 0;
		      this.__data__ = {
		        'hash': new Hash,
		        'map': new (Map || ListCache),
		        'string': new Hash
		      };
		    }

		    /**
		     * Removes `key` and its value from the map.
		     *
		     * @private
		     * @name delete
		     * @memberOf MapCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function mapCacheDelete(key) {
		      var result = getMapData(this, key)['delete'](key);
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the map value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf MapCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function mapCacheGet(key) {
		      return getMapData(this, key).get(key);
		    }

		    /**
		     * Checks if a map value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf MapCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function mapCacheHas(key) {
		      return getMapData(this, key).has(key);
		    }

		    /**
		     * Sets the map `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf MapCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the map cache instance.
		     */
		    function mapCacheSet(key, value) {
		      var data = getMapData(this, key),
		          size = data.size;

		      data.set(key, value);
		      this.size += data.size == size ? 0 : 1;
		      return this;
		    }

		    // Add methods to `MapCache`.
		    MapCache.prototype.clear = mapCacheClear;
		    MapCache.prototype['delete'] = mapCacheDelete;
		    MapCache.prototype.get = mapCacheGet;
		    MapCache.prototype.has = mapCacheHas;
		    MapCache.prototype.set = mapCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     *
		     * Creates an array cache object to store unique values.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [values] The values to cache.
		     */
		    function SetCache(values) {
		      var index = -1,
		          length = values == null ? 0 : values.length;

		      this.__data__ = new MapCache;
		      while (++index < length) {
		        this.add(values[index]);
		      }
		    }

		    /**
		     * Adds `value` to the array cache.
		     *
		     * @private
		     * @name add
		     * @memberOf SetCache
		     * @alias push
		     * @param {*} value The value to cache.
		     * @returns {Object} Returns the cache instance.
		     */
		    function setCacheAdd(value) {
		      this.__data__.set(value, HASH_UNDEFINED);
		      return this;
		    }

		    /**
		     * Checks if `value` is in the array cache.
		     *
		     * @private
		     * @name has
		     * @memberOf SetCache
		     * @param {*} value The value to search for.
		     * @returns {number} Returns `true` if `value` is found, else `false`.
		     */
		    function setCacheHas(value) {
		      return this.__data__.has(value);
		    }

		    // Add methods to `SetCache`.
		    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		    SetCache.prototype.has = setCacheHas;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a stack cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Stack(entries) {
		      var data = this.__data__ = new ListCache(entries);
		      this.size = data.size;
		    }

		    /**
		     * Removes all key-value entries from the stack.
		     *
		     * @private
		     * @name clear
		     * @memberOf Stack
		     */
		    function stackClear() {
		      this.__data__ = new ListCache;
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the stack.
		     *
		     * @private
		     * @name delete
		     * @memberOf Stack
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function stackDelete(key) {
		      var data = this.__data__,
		          result = data['delete'](key);

		      this.size = data.size;
		      return result;
		    }

		    /**
		     * Gets the stack value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Stack
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function stackGet(key) {
		      return this.__data__.get(key);
		    }

		    /**
		     * Checks if a stack value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Stack
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function stackHas(key) {
		      return this.__data__.has(key);
		    }

		    /**
		     * Sets the stack `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Stack
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the stack cache instance.
		     */
		    function stackSet(key, value) {
		      var data = this.__data__;
		      if (data instanceof ListCache) {
		        var pairs = data.__data__;
		        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		          pairs.push([key, value]);
		          this.size = ++data.size;
		          return this;
		        }
		        data = this.__data__ = new MapCache(pairs);
		      }
		      data.set(key, value);
		      this.size = data.size;
		      return this;
		    }

		    // Add methods to `Stack`.
		    Stack.prototype.clear = stackClear;
		    Stack.prototype['delete'] = stackDelete;
		    Stack.prototype.get = stackGet;
		    Stack.prototype.has = stackHas;
		    Stack.prototype.set = stackSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of the enumerable property names of the array-like `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @param {boolean} inherited Specify returning inherited property names.
		     * @returns {Array} Returns the array of property names.
		     */
		    function arrayLikeKeys(value, inherited) {
		      var isArr = isArray(value),
		          isArg = !isArr && isArguments(value),
		          isBuff = !isArr && !isArg && isBuffer(value),
		          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		          skipIndexes = isArr || isArg || isBuff || isType,
		          result = skipIndexes ? baseTimes(value.length, String) : [],
		          length = result.length;

		      for (var key in value) {
		        if ((inherited || hasOwnProperty.call(value, key)) &&
		            !(skipIndexes && (
		               // Safari 9 has enumerable `arguments.length` in strict mode.
		               key == 'length' ||
		               // Node.js 0.10 has enumerable non-index properties on buffers.
		               (isBuff && (key == 'offset' || key == 'parent')) ||
		               // PhantomJS 2 has enumerable non-index properties on typed arrays.
		               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		               // Skip index properties.
		               isIndex(key, length)
		            ))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `_.sample` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @returns {*} Returns the random element.
		     */
		    function arraySample(array) {
		      var length = array.length;
		      return length ? array[baseRandom(0, length - 1)] : undefined$1;
		    }

		    /**
		     * A specialized version of `_.sampleSize` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function arraySampleSize(array, n) {
		      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
		    }

		    /**
		     * A specialized version of `_.shuffle` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function arrayShuffle(array) {
		      return shuffleSelf(copyArray(array));
		    }

		    /**
		     * This function is like `assignValue` except that it doesn't assign
		     * `undefined` values.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignMergeValue(object, key, value) {
		      if ((value !== undefined$1 && !eq(object[key], value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Assigns `value` to `key` of `object` if the existing value is not equivalent
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignValue(object, key, value) {
		      var objValue = object[key];
		      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Gets the index at which the `key` is found in `array` of key-value pairs.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {*} key The key to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     */
		    function assocIndexOf(array, key) {
		      var length = array.length;
		      while (length--) {
		        if (eq(array[length][0], key)) {
		          return length;
		        }
		      }
		      return -1;
		    }

		    /**
		     * Aggregates elements of `collection` on `accumulator` with keys transformed
		     * by `iteratee` and values set by `setter`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform keys.
		     * @param {Object} accumulator The initial aggregated object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseAggregator(collection, setter, iteratee, accumulator) {
		      baseEach(collection, function(value, key, collection) {
		        setter(accumulator, value, iteratee(value), collection);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.assign` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssign(object, source) {
		      return object && copyObject(source, keys(source), object);
		    }

		    /**
		     * The base implementation of `_.assignIn` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssignIn(object, source) {
		      return object && copyObject(source, keysIn(source), object);
		    }

		    /**
		     * The base implementation of `assignValue` and `assignMergeValue` without
		     * value checks.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function baseAssignValue(object, key, value) {
		      if (key == '__proto__' && defineProperty) {
		        defineProperty(object, key, {
		          'configurable': true,
		          'enumerable': true,
		          'value': value,
		          'writable': true
		        });
		      } else {
		        object[key] = value;
		      }
		    }

		    /**
		     * The base implementation of `_.at` without support for individual paths.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Array} Returns the picked elements.
		     */
		    function baseAt(object, paths) {
		      var index = -1,
		          length = paths.length,
		          result = Array(length),
		          skip = object == null;

		      while (++index < length) {
		        result[index] = skip ? undefined$1 : get(object, paths[index]);
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.clamp` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     */
		    function baseClamp(number, lower, upper) {
		      if (number === number) {
		        if (upper !== undefined$1) {
		          number = number <= upper ? number : upper;
		        }
		        if (lower !== undefined$1) {
		          number = number >= lower ? number : lower;
		        }
		      }
		      return number;
		    }

		    /**
		     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
		     * traversed objects.
		     *
		     * @private
		     * @param {*} value The value to clone.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Deep clone
		     *  2 - Flatten inherited properties
		     *  4 - Clone symbols
		     * @param {Function} [customizer] The function to customize cloning.
		     * @param {string} [key] The key of `value`.
		     * @param {Object} [object] The parent object of `value`.
		     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
		     * @returns {*} Returns the cloned value.
		     */
		    function baseClone(value, bitmask, customizer, key, object, stack) {
		      var result,
		          isDeep = bitmask & CLONE_DEEP_FLAG,
		          isFlat = bitmask & CLONE_FLAT_FLAG,
		          isFull = bitmask & CLONE_SYMBOLS_FLAG;

		      if (customizer) {
		        result = object ? customizer(value, key, object, stack) : customizer(value);
		      }
		      if (result !== undefined$1) {
		        return result;
		      }
		      if (!isObject(value)) {
		        return value;
		      }
		      var isArr = isArray(value);
		      if (isArr) {
		        result = initCloneArray(value);
		        if (!isDeep) {
		          return copyArray(value, result);
		        }
		      } else {
		        var tag = getTag(value),
		            isFunc = tag == funcTag || tag == genTag;

		        if (isBuffer(value)) {
		          return cloneBuffer(value, isDeep);
		        }
		        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
		          result = (isFlat || isFunc) ? {} : initCloneObject(value);
		          if (!isDeep) {
		            return isFlat
		              ? copySymbolsIn(value, baseAssignIn(result, value))
		              : copySymbols(value, baseAssign(result, value));
		          }
		        } else {
		          if (!cloneableTags[tag]) {
		            return object ? value : {};
		          }
		          result = initCloneByTag(value, tag, isDeep);
		        }
		      }
		      // Check for circular references and return its corresponding clone.
		      stack || (stack = new Stack);
		      var stacked = stack.get(value);
		      if (stacked) {
		        return stacked;
		      }
		      stack.set(value, result);

		      if (isSet(value)) {
		        value.forEach(function(subValue) {
		          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
		        });
		      } else if (isMap(value)) {
		        value.forEach(function(subValue, key) {
		          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
		        });
		      }

		      var keysFunc = isFull
		        ? (isFlat ? getAllKeysIn : getAllKeys)
		        : (isFlat ? keysIn : keys);

		      var props = isArr ? undefined$1 : keysFunc(value);
		      arrayEach(props || value, function(subValue, key) {
		        if (props) {
		          key = subValue;
		          subValue = value[key];
		        }
		        // Recursively populate clone (susceptible to call stack limits).
		        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.conforms` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseConforms(source) {
		      var props = keys(source);
		      return function(object) {
		        return baseConformsTo(object, source, props);
		      };
		    }

		    /**
		     * The base implementation of `_.conformsTo` which accepts `props` to check.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     */
		    function baseConformsTo(object, source, props) {
		      var length = props.length;
		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (length--) {
		        var key = props[length],
		            predicate = source[key],
		            value = object[key];

		        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.delay` and `_.defer` which accepts `args`
		     * to provide to `func`.
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {Array} args The arguments to provide to `func`.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    function baseDelay(func, wait, args) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
		    }

		    /**
		     * The base implementation of methods like `_.difference` without support
		     * for excluding multiple arrays or iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Array} values The values to exclude.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     */
		    function baseDifference(array, values, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          isCommon = true,
		          length = array.length,
		          result = [],
		          valuesLength = values.length;

		      if (!length) {
		        return result;
		      }
		      if (iteratee) {
		        values = arrayMap(values, baseUnary(iteratee));
		      }
		      if (comparator) {
		        includes = arrayIncludesWith;
		        isCommon = false;
		      }
		      else if (values.length >= LARGE_ARRAY_SIZE) {
		        includes = cacheHas;
		        isCommon = false;
		        values = new SetCache(values);
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee == null ? value : iteratee(value);

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var valuesIndex = valuesLength;
		          while (valuesIndex--) {
		            if (values[valuesIndex] === computed) {
		              continue outer;
		            }
		          }
		          result.push(value);
		        }
		        else if (!includes(values, computed, comparator)) {
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.forEach` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEach = createBaseEach(baseForOwn);

		    /**
		     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEachRight = createBaseEach(baseForOwnRight, true);

		    /**
		     * The base implementation of `_.every` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`
		     */
		    function baseEvery(collection, predicate) {
		      var result = true;
		      baseEach(collection, function(value, index, collection) {
		        result = !!predicate(value, index, collection);
		        return result;
		      });
		      return result;
		    }

		    /**
		     * The base implementation of methods like `_.max` and `_.min` which accepts a
		     * `comparator` to determine the extremum value.
		     *
		     * @private
		     * @param {Array} array The array to iterate over.
		     * @param {Function} iteratee The iteratee invoked per iteration.
		     * @param {Function} comparator The comparator used to compare values.
		     * @returns {*} Returns the extremum value.
		     */
		    function baseExtremum(array, iteratee, comparator) {
		      var index = -1,
		          length = array.length;

		      while (++index < length) {
		        var value = array[index],
		            current = iteratee(value);

		        if (current != null && (computed === undefined$1
		              ? (current === current && !isSymbol(current))
		              : comparator(current, computed)
		            )) {
		          var computed = current,
		              result = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.fill` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     */
		    function baseFill(array, value, start, end) {
		      var length = array.length;

		      start = toInteger(start);
		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = (end === undefined$1 || end > length) ? length : toInteger(end);
		      if (end < 0) {
		        end += length;
		      }
		      end = start > end ? 0 : toLength(end);
		      while (start < end) {
		        array[start++] = value;
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.filter` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     */
		    function baseFilter(collection, predicate) {
		      var result = [];
		      baseEach(collection, function(value, index, collection) {
		        if (predicate(value, index, collection)) {
		          result.push(value);
		        }
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.flatten` with support for restricting flattening.
		     *
		     * @private
		     * @param {Array} array The array to flatten.
		     * @param {number} depth The maximum recursion depth.
		     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
		     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
		     * @param {Array} [result=[]] The initial result value.
		     * @returns {Array} Returns the new flattened array.
		     */
		    function baseFlatten(array, depth, predicate, isStrict, result) {
		      var index = -1,
		          length = array.length;

		      predicate || (predicate = isFlattenable);
		      result || (result = []);

		      while (++index < length) {
		        var value = array[index];
		        if (depth > 0 && predicate(value)) {
		          if (depth > 1) {
		            // Recursively flatten arrays (susceptible to call stack limits).
		            baseFlatten(value, depth - 1, predicate, isStrict, result);
		          } else {
		            arrayPush(result, value);
		          }
		        } else if (!isStrict) {
		          result[result.length] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `baseForOwn` which iterates over `object`
		     * properties returned by `keysFunc` and invokes `iteratee` for each property.
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseFor = createBaseFor();

		    /**
		     * This function is like `baseFor` except that it iterates over properties
		     * in the opposite order.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseForRight = createBaseFor(true);

		    /**
		     * The base implementation of `_.forOwn` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwn(object, iteratee) {
		      return object && baseFor(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwnRight(object, iteratee) {
		      return object && baseForRight(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.functions` which creates an array of
		     * `object` function property names filtered from `props`.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Array} props The property names to filter.
		     * @returns {Array} Returns the function names.
		     */
		    function baseFunctions(object, props) {
		      return arrayFilter(props, function(key) {
		        return isFunction(object[key]);
		      });
		    }

		    /**
		     * The base implementation of `_.get` without support for default values.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseGet(object, path) {
		      path = castPath(path, object);

		      var index = 0,
		          length = path.length;

		      while (object != null && index < length) {
		        object = object[toKey(path[index++])];
		      }
		      return (index && index == length) ? object : undefined$1;
		    }

		    /**
		     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @param {Function} symbolsFunc The function to get the symbols of `object`.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		      var result = keysFunc(object);
		      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		    }

		    /**
		     * The base implementation of `getTag` without fallbacks for buggy environments.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    function baseGetTag(value) {
		      if (value == null) {
		        return value === undefined$1 ? undefinedTag : nullTag;
		      }
		      return (symToStringTag && symToStringTag in Object(value))
		        ? getRawTag(value)
		        : objectToString(value);
		    }

		    /**
		     * The base implementation of `_.gt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     */
		    function baseGt(value, other) {
		      return value > other;
		    }

		    /**
		     * The base implementation of `_.has` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHas(object, key) {
		      return object != null && hasOwnProperty.call(object, key);
		    }

		    /**
		     * The base implementation of `_.hasIn` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHasIn(object, key) {
		      return object != null && key in Object(object);
		    }

		    /**
		     * The base implementation of `_.inRange` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to check.
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     */
		    function baseInRange(number, start, end) {
		      return number >= nativeMin(start, end) && number < nativeMax(start, end);
		    }

		    /**
		     * The base implementation of methods like `_.intersection`, without support
		     * for iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of shared values.
		     */
		    function baseIntersection(arrays, iteratee, comparator) {
		      var includes = comparator ? arrayIncludesWith : arrayIncludes,
		          length = arrays[0].length,
		          othLength = arrays.length,
		          othIndex = othLength,
		          caches = Array(othLength),
		          maxLength = Infinity,
		          result = [];

		      while (othIndex--) {
		        var array = arrays[othIndex];
		        if (othIndex && iteratee) {
		          array = arrayMap(array, baseUnary(iteratee));
		        }
		        maxLength = nativeMin(array.length, maxLength);
		        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
		          ? new SetCache(othIndex && array)
		          : undefined$1;
		      }
		      array = arrays[0];

		      var index = -1,
		          seen = caches[0];

		      outer:
		      while (++index < length && result.length < maxLength) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (!(seen
		              ? cacheHas(seen, computed)
		              : includes(result, computed, comparator)
		            )) {
		          othIndex = othLength;
		          while (--othIndex) {
		            var cache = caches[othIndex];
		            if (!(cache
		                  ? cacheHas(cache, computed)
		                  : includes(arrays[othIndex], computed, comparator))
		                ) {
		              continue outer;
		            }
		          }
		          if (seen) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.invert` and `_.invertBy` which inverts
		     * `object` with values transformed by `iteratee` and set by `setter`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform values.
		     * @param {Object} accumulator The initial inverted object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseInverter(object, setter, iteratee, accumulator) {
		      baseForOwn(object, function(value, key, object) {
		        setter(accumulator, iteratee(value), key, object);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.invoke` without support for individual
		     * method arguments.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {Array} args The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     */
		    function baseInvoke(object, path, args) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      var func = object == null ? object : object[toKey(last(path))];
		      return func == null ? undefined$1 : apply(func, object, args);
		    }

		    /**
		     * The base implementation of `_.isArguments`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     */
		    function baseIsArguments(value) {
		      return isObjectLike(value) && baseGetTag(value) == argsTag;
		    }

		    /**
		     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     */
		    function baseIsArrayBuffer(value) {
		      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
		    }

		    /**
		     * The base implementation of `_.isDate` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     */
		    function baseIsDate(value) {
		      return isObjectLike(value) && baseGetTag(value) == dateTag;
		    }

		    /**
		     * The base implementation of `_.isEqual` which supports partial comparisons
		     * and tracks traversed objects.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Unordered comparison
		     *  2 - Partial comparison
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     */
		    function baseIsEqual(value, other, bitmask, customizer, stack) {
		      if (value === other) {
		        return true;
		      }
		      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
		        return value !== value && other !== other;
		      }
		      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		    }

		    /**
		     * A specialized version of `baseIsEqual` for arrays and objects which performs
		     * deep comparisons and tracks traversed objects enabling objects with circular
		     * references to be compared.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
		      var objIsArr = isArray(object),
		          othIsArr = isArray(other),
		          objTag = objIsArr ? arrayTag : getTag(object),
		          othTag = othIsArr ? arrayTag : getTag(other);

		      objTag = objTag == argsTag ? objectTag : objTag;
		      othTag = othTag == argsTag ? objectTag : othTag;

		      var objIsObj = objTag == objectTag,
		          othIsObj = othTag == objectTag,
		          isSameTag = objTag == othTag;

		      if (isSameTag && isBuffer(object)) {
		        if (!isBuffer(other)) {
		          return false;
		        }
		        objIsArr = true;
		        objIsObj = false;
		      }
		      if (isSameTag && !objIsObj) {
		        stack || (stack = new Stack);
		        return (objIsArr || isTypedArray(object))
		          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
		          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
		      }
		      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
		        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		        if (objIsWrapped || othIsWrapped) {
		          var objUnwrapped = objIsWrapped ? object.value() : object,
		              othUnwrapped = othIsWrapped ? other.value() : other;

		          stack || (stack = new Stack);
		          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
		        }
		      }
		      if (!isSameTag) {
		        return false;
		      }
		      stack || (stack = new Stack);
		      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		    }

		    /**
		     * The base implementation of `_.isMap` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     */
		    function baseIsMap(value) {
		      return isObjectLike(value) && getTag(value) == mapTag;
		    }

		    /**
		     * The base implementation of `_.isMatch` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Array} matchData The property names, values, and compare flags to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     */
		    function baseIsMatch(object, source, matchData, customizer) {
		      var index = matchData.length,
		          length = index,
		          noCustomizer = !customizer;

		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (index--) {
		        var data = matchData[index];
		        if ((noCustomizer && data[2])
		              ? data[1] !== object[data[0]]
		              : !(data[0] in object)
		            ) {
		          return false;
		        }
		      }
		      while (++index < length) {
		        data = matchData[index];
		        var key = data[0],
		            objValue = object[key],
		            srcValue = data[1];

		        if (noCustomizer && data[2]) {
		          if (objValue === undefined$1 && !(key in object)) {
		            return false;
		          }
		        } else {
		          var stack = new Stack;
		          if (customizer) {
		            var result = customizer(objValue, srcValue, key, object, source, stack);
		          }
		          if (!(result === undefined$1
		                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
		                : result
		              )) {
		            return false;
		          }
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.isNative` without bad shim checks.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     */
		    function baseIsNative(value) {
		      if (!isObject(value) || isMasked(value)) {
		        return false;
		      }
		      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		      return pattern.test(toSource(value));
		    }

		    /**
		     * The base implementation of `_.isRegExp` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     */
		    function baseIsRegExp(value) {
		      return isObjectLike(value) && baseGetTag(value) == regexpTag;
		    }

		    /**
		     * The base implementation of `_.isSet` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     */
		    function baseIsSet(value) {
		      return isObjectLike(value) && getTag(value) == setTag;
		    }

		    /**
		     * The base implementation of `_.isTypedArray` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     */
		    function baseIsTypedArray(value) {
		      return isObjectLike(value) &&
		        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		    }

		    /**
		     * The base implementation of `_.iteratee`.
		     *
		     * @private
		     * @param {*} [value=_.identity] The value to convert to an iteratee.
		     * @returns {Function} Returns the iteratee.
		     */
		    function baseIteratee(value) {
		      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
		      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
		      if (typeof value == 'function') {
		        return value;
		      }
		      if (value == null) {
		        return identity;
		      }
		      if (typeof value == 'object') {
		        return isArray(value)
		          ? baseMatchesProperty(value[0], value[1])
		          : baseMatches(value);
		      }
		      return property(value);
		    }

		    /**
		     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeys(object) {
		      if (!isPrototype(object)) {
		        return nativeKeys(object);
		      }
		      var result = [];
		      for (var key in Object(object)) {
		        if (hasOwnProperty.call(object, key) && key != 'constructor') {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeysIn(object) {
		      if (!isObject(object)) {
		        return nativeKeysIn(object);
		      }
		      var isProto = isPrototype(object),
		          result = [];

		      for (var key in object) {
		        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.lt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     */
		    function baseLt(value, other) {
		      return value < other;
		    }

		    /**
		     * The base implementation of `_.map` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     */
		    function baseMap(collection, iteratee) {
		      var index = -1,
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value, key, collection) {
		        result[++index] = iteratee(value, key, collection);
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.matches` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatches(source) {
		      var matchData = getMatchData(source);
		      if (matchData.length == 1 && matchData[0][2]) {
		        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
		      }
		      return function(object) {
		        return object === source || baseIsMatch(object, source, matchData);
		      };
		    }

		    /**
		     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
		     *
		     * @private
		     * @param {string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatchesProperty(path, srcValue) {
		      if (isKey(path) && isStrictComparable(srcValue)) {
		        return matchesStrictComparable(toKey(path), srcValue);
		      }
		      return function(object) {
		        var objValue = get(object, path);
		        return (objValue === undefined$1 && objValue === srcValue)
		          ? hasIn(object, path)
		          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
		      };
		    }

		    /**
		     * The base implementation of `_.merge` without support for multiple sources.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} [customizer] The function to customize merged values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMerge(object, source, srcIndex, customizer, stack) {
		      if (object === source) {
		        return;
		      }
		      baseFor(source, function(srcValue, key) {
		        stack || (stack = new Stack);
		        if (isObject(srcValue)) {
		          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
		        }
		        else {
		          var newValue = customizer
		            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
		            : undefined$1;

		          if (newValue === undefined$1) {
		            newValue = srcValue;
		          }
		          assignMergeValue(object, key, newValue);
		        }
		      }, keysIn);
		    }

		    /**
		     * A specialized version of `baseMerge` for arrays and objects which performs
		     * deep merges and tracks traversed objects enabling objects with circular
		     * references to be merged.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {string} key The key of the value to merge.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} mergeFunc The function to merge values.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
		      var objValue = safeGet(object, key),
		          srcValue = safeGet(source, key),
		          stacked = stack.get(srcValue);

		      if (stacked) {
		        assignMergeValue(object, key, stacked);
		        return;
		      }
		      var newValue = customizer
		        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
		        : undefined$1;

		      var isCommon = newValue === undefined$1;

		      if (isCommon) {
		        var isArr = isArray(srcValue),
		            isBuff = !isArr && isBuffer(srcValue),
		            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

		        newValue = srcValue;
		        if (isArr || isBuff || isTyped) {
		          if (isArray(objValue)) {
		            newValue = objValue;
		          }
		          else if (isArrayLikeObject(objValue)) {
		            newValue = copyArray(objValue);
		          }
		          else if (isBuff) {
		            isCommon = false;
		            newValue = cloneBuffer(srcValue, true);
		          }
		          else if (isTyped) {
		            isCommon = false;
		            newValue = cloneTypedArray(srcValue, true);
		          }
		          else {
		            newValue = [];
		          }
		        }
		        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
		          newValue = objValue;
		          if (isArguments(objValue)) {
		            newValue = toPlainObject(objValue);
		          }
		          else if (!isObject(objValue) || isFunction(objValue)) {
		            newValue = initCloneObject(srcValue);
		          }
		        }
		        else {
		          isCommon = false;
		        }
		      }
		      if (isCommon) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, newValue);
		        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
		        stack['delete'](srcValue);
		      }
		      assignMergeValue(object, key, newValue);
		    }

		    /**
		     * The base implementation of `_.nth` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {number} n The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     */
		    function baseNth(array, n) {
		      var length = array.length;
		      if (!length) {
		        return;
		      }
		      n += n < 0 ? length : 0;
		      return isIndex(n, length) ? array[n] : undefined$1;
		    }

		    /**
		     * The base implementation of `_.orderBy` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
		     * @param {string[]} orders The sort orders of `iteratees`.
		     * @returns {Array} Returns the new sorted array.
		     */
		    function baseOrderBy(collection, iteratees, orders) {
		      if (iteratees.length) {
		        iteratees = arrayMap(iteratees, function(iteratee) {
		          if (isArray(iteratee)) {
		            return function(value) {
		              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
		            }
		          }
		          return iteratee;
		        });
		      } else {
		        iteratees = [identity];
		      }

		      var index = -1;
		      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

		      var result = baseMap(collection, function(value, key, collection) {
		        var criteria = arrayMap(iteratees, function(iteratee) {
		          return iteratee(value);
		        });
		        return { 'criteria': criteria, 'index': ++index, 'value': value };
		      });

		      return baseSortBy(result, function(object, other) {
		        return compareMultiple(object, other, orders);
		      });
		    }

		    /**
		     * The base implementation of `_.pick` without support for individual
		     * property identifiers.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Object} Returns the new object.
		     */
		    function basePick(object, paths) {
		      return basePickBy(object, paths, function(value, path) {
		        return hasIn(object, path);
		      });
		    }

		    /**
		     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @param {Function} predicate The function invoked per property.
		     * @returns {Object} Returns the new object.
		     */
		    function basePickBy(object, paths, predicate) {
		      var index = -1,
		          length = paths.length,
		          result = {};

		      while (++index < length) {
		        var path = paths[index],
		            value = baseGet(object, path);

		        if (predicate(value, path)) {
		          baseSet(result, castPath(path, object), value);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `baseProperty` which supports deep paths.
		     *
		     * @private
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     */
		    function basePropertyDeep(path) {
		      return function(object) {
		        return baseGet(object, path);
		      };
		    }

		    /**
		     * The base implementation of `_.pullAllBy` without support for iteratee
		     * shorthands.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAll(array, values, iteratee, comparator) {
		      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
		          index = -1,
		          length = values.length,
		          seen = array;

		      if (array === values) {
		        values = copyArray(values);
		      }
		      if (iteratee) {
		        seen = arrayMap(array, baseUnary(iteratee));
		      }
		      while (++index < length) {
		        var fromIndex = 0,
		            value = values[index],
		            computed = iteratee ? iteratee(value) : value;

		        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
		          if (seen !== array) {
		            splice.call(seen, fromIndex, 1);
		          }
		          splice.call(array, fromIndex, 1);
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.pullAt` without support for individual
		     * indexes or capturing the removed elements.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {number[]} indexes The indexes of elements to remove.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAt(array, indexes) {
		      var length = array ? indexes.length : 0,
		          lastIndex = length - 1;

		      while (length--) {
		        var index = indexes[length];
		        if (length == lastIndex || index !== previous) {
		          var previous = index;
		          if (isIndex(index)) {
		            splice.call(array, index, 1);
		          } else {
		            baseUnset(array, index);
		          }
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.random` without support for returning
		     * floating-point numbers.
		     *
		     * @private
		     * @param {number} lower The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the random number.
		     */
		    function baseRandom(lower, upper) {
		      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
		    }

		    /**
		     * The base implementation of `_.range` and `_.rangeRight` which doesn't
		     * coerce arguments.
		     *
		     * @private
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} step The value to increment or decrement by.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the range of numbers.
		     */
		    function baseRange(start, end, step, fromRight) {
		      var index = -1,
		          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
		          result = Array(length);

		      while (length--) {
		        result[fromRight ? length : ++index] = start;
		        start += step;
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.repeat` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {string} string The string to repeat.
		     * @param {number} n The number of times to repeat the string.
		     * @returns {string} Returns the repeated string.
		     */
		    function baseRepeat(string, n) {
		      var result = '';
		      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
		        return result;
		      }
		      // Leverage the exponentiation by squaring algorithm for a faster repeat.
		      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
		      do {
		        if (n % 2) {
		          result += string;
		        }
		        n = nativeFloor(n / 2);
		        if (n) {
		          string += string;
		        }
		      } while (n);

		      return result;
		    }

		    /**
		     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     */
		    function baseRest(func, start) {
		      return setToString(overRest(func, start, identity), func + '');
		    }

		    /**
		     * The base implementation of `_.sample`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     */
		    function baseSample(collection) {
		      return arraySample(values(collection));
		    }

		    /**
		     * The base implementation of `_.sampleSize` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function baseSampleSize(collection, n) {
		      var array = values(collection);
		      return shuffleSelf(array, baseClamp(n, 0, array.length));
		    }

		    /**
		     * The base implementation of `_.set`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseSet(object, path, value, customizer) {
		      if (!isObject(object)) {
		        return object;
		      }
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          lastIndex = length - 1,
		          nested = object;

		      while (nested != null && ++index < length) {
		        var key = toKey(path[index]),
		            newValue = value;

		        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
		          return object;
		        }

		        if (index != lastIndex) {
		          var objValue = nested[key];
		          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
		          if (newValue === undefined$1) {
		            newValue = isObject(objValue)
		              ? objValue
		              : (isIndex(path[index + 1]) ? [] : {});
		          }
		        }
		        assignValue(nested, key, newValue);
		        nested = nested[key];
		      }
		      return object;
		    }

		    /**
		     * The base implementation of `setData` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetData = !metaMap ? identity : function(func, data) {
		      metaMap.set(func, data);
		      return func;
		    };

		    /**
		     * The base implementation of `setToString` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetToString = !defineProperty ? identity : function(func, string) {
		      return defineProperty(func, 'toString', {
		        'configurable': true,
		        'enumerable': false,
		        'value': constant(string),
		        'writable': true
		      });
		    };

		    /**
		     * The base implementation of `_.shuffle`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function baseShuffle(collection) {
		      return shuffleSelf(values(collection));
		    }

		    /**
		     * The base implementation of `_.slice` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseSlice(array, start, end) {
		      var index = -1,
		          length = array.length;

		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = end > length ? length : end;
		      if (end < 0) {
		        end += length;
		      }
		      length = start > end ? 0 : ((end - start) >>> 0);
		      start >>>= 0;

		      var result = Array(length);
		      while (++index < length) {
		        result[index] = array[index + start];
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.some` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     */
		    function baseSome(collection, predicate) {
		      var result;

		      baseEach(collection, function(value, index, collection) {
		        result = predicate(value, index, collection);
		        return !result;
		      });
		      return !!result;
		    }

		    /**
		     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
		     * performs a binary search of `array` to determine the index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndex(array, value, retHighest) {
		      var low = 0,
		          high = array == null ? low : array.length;

		      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
		        while (low < high) {
		          var mid = (low + high) >>> 1,
		              computed = array[mid];

		          if (computed !== null && !isSymbol(computed) &&
		              (retHighest ? (computed <= value) : (computed < value))) {
		            low = mid + 1;
		          } else {
		            high = mid;
		          }
		        }
		        return high;
		      }
		      return baseSortedIndexBy(array, value, identity, retHighest);
		    }

		    /**
		     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
		     * which invokes `iteratee` for `value` and each element of `array` to compute
		     * their sort ranking. The iteratee is invoked with one argument; (value).
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} iteratee The iteratee invoked per element.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndexBy(array, value, iteratee, retHighest) {
		      var low = 0,
		          high = array == null ? 0 : array.length;
		      if (high === 0) {
		        return 0;
		      }

		      value = iteratee(value);
		      var valIsNaN = value !== value,
		          valIsNull = value === null,
		          valIsSymbol = isSymbol(value),
		          valIsUndefined = value === undefined$1;

		      while (low < high) {
		        var mid = nativeFloor((low + high) / 2),
		            computed = iteratee(array[mid]),
		            othIsDefined = computed !== undefined$1,
		            othIsNull = computed === null,
		            othIsReflexive = computed === computed,
		            othIsSymbol = isSymbol(computed);

		        if (valIsNaN) {
		          var setLow = retHighest || othIsReflexive;
		        } else if (valIsUndefined) {
		          setLow = othIsReflexive && (retHighest || othIsDefined);
		        } else if (valIsNull) {
		          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
		        } else if (valIsSymbol) {
		          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
		        } else if (othIsNull || othIsSymbol) {
		          setLow = false;
		        } else {
		          setLow = retHighest ? (computed <= value) : (computed < value);
		        }
		        if (setLow) {
		          low = mid + 1;
		        } else {
		          high = mid;
		        }
		      }
		      return nativeMin(high, MAX_ARRAY_INDEX);
		    }

		    /**
		     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
		     * support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseSortedUniq(array, iteratee) {
		      var index = -1,
		          length = array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        if (!index || !eq(computed, seen)) {
		          var seen = computed;
		          result[resIndex++] = value === 0 ? 0 : value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.toNumber` which doesn't ensure correct
		     * conversions of binary, hexadecimal, or octal string values.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     */
		    function baseToNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      return +value;
		    }

		    /**
		     * The base implementation of `_.toString` which doesn't convert nullish
		     * values to empty strings.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {string} Returns the string.
		     */
		    function baseToString(value) {
		      // Exit early for strings to avoid a performance hit in some environments.
		      if (typeof value == 'string') {
		        return value;
		      }
		      if (isArray(value)) {
		        // Recursively convert values (susceptible to call stack limits).
		        return arrayMap(value, baseToString) + '';
		      }
		      if (isSymbol(value)) {
		        return symbolToString ? symbolToString.call(value) : '';
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseUniq(array, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          length = array.length,
		          isCommon = true,
		          result = [],
		          seen = result;

		      if (comparator) {
		        isCommon = false;
		        includes = arrayIncludesWith;
		      }
		      else if (length >= LARGE_ARRAY_SIZE) {
		        var set = iteratee ? null : createSet(array);
		        if (set) {
		          return setToArray(set);
		        }
		        isCommon = false;
		        includes = cacheHas;
		        seen = new SetCache;
		      }
		      else {
		        seen = iteratee ? [] : result;
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var seenIndex = seen.length;
		          while (seenIndex--) {
		            if (seen[seenIndex] === computed) {
		              continue outer;
		            }
		          }
		          if (iteratee) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		        else if (!includes(seen, computed, comparator)) {
		          if (seen !== result) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.unset`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The property path to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     */
		    function baseUnset(object, path) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      return object == null || delete object[toKey(last(path))];
		    }

		    /**
		     * The base implementation of `_.update`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to update.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseUpdate(object, path, updater, customizer) {
		      return baseSet(object, path, updater(baseGet(object, path)), customizer);
		    }

		    /**
		     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
		     * without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {Function} predicate The function invoked per iteration.
		     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseWhile(array, predicate, isDrop, fromRight) {
		      var length = array.length,
		          index = fromRight ? length : -1;

		      while ((fromRight ? index-- : ++index < length) &&
		        predicate(array[index], index, array)) {}

		      return isDrop
		        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
		        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
		    }

		    /**
		     * The base implementation of `wrapperValue` which returns the result of
		     * performing a sequence of actions on the unwrapped `value`, where each
		     * successive action is supplied the return value of the previous.
		     *
		     * @private
		     * @param {*} value The unwrapped value.
		     * @param {Array} actions Actions to perform to resolve the unwrapped value.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseWrapperValue(value, actions) {
		      var result = value;
		      if (result instanceof LazyWrapper) {
		        result = result.value();
		      }
		      return arrayReduce(actions, function(result, action) {
		        return action.func.apply(action.thisArg, arrayPush([result], action.args));
		      }, result);
		    }

		    /**
		     * The base implementation of methods like `_.xor`, without support for
		     * iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of values.
		     */
		    function baseXor(arrays, iteratee, comparator) {
		      var length = arrays.length;
		      if (length < 2) {
		        return length ? baseUniq(arrays[0]) : [];
		      }
		      var index = -1,
		          result = Array(length);

		      while (++index < length) {
		        var array = arrays[index],
		            othIndex = -1;

		        while (++othIndex < length) {
		          if (othIndex != index) {
		            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
		          }
		        }
		      }
		      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
		    }

		    /**
		     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
		     *
		     * @private
		     * @param {Array} props The property identifiers.
		     * @param {Array} values The property values.
		     * @param {Function} assignFunc The function to assign values.
		     * @returns {Object} Returns the new object.
		     */
		    function baseZipObject(props, values, assignFunc) {
		      var index = -1,
		          length = props.length,
		          valsLength = values.length,
		          result = {};

		      while (++index < length) {
		        var value = index < valsLength ? values[index] : undefined$1;
		        assignFunc(result, props[index], value);
		      }
		      return result;
		    }

		    /**
		     * Casts `value` to an empty array if it's not an array like object.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Array|Object} Returns the cast array-like object.
		     */
		    function castArrayLikeObject(value) {
		      return isArrayLikeObject(value) ? value : [];
		    }

		    /**
		     * Casts `value` to `identity` if it's not a function.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Function} Returns cast function.
		     */
		    function castFunction(value) {
		      return typeof value == 'function' ? value : identity;
		    }

		    /**
		     * Casts `value` to a path array if it's not one.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {Array} Returns the cast property path array.
		     */
		    function castPath(value, object) {
		      if (isArray(value)) {
		        return value;
		      }
		      return isKey(value, object) ? [value] : stringToPath(toString(value));
		    }

		    /**
		     * A `baseRest` alias which can be replaced with `identity` by module
		     * replacement plugins.
		     *
		     * @private
		     * @type {Function}
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    var castRest = baseRest;

		    /**
		     * Casts `array` to a slice if it's needed.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {number} start The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the cast slice.
		     */
		    function castSlice(array, start, end) {
		      var length = array.length;
		      end = end === undefined$1 ? length : end;
		      return (!start && end >= length) ? array : baseSlice(array, start, end);
		    }

		    /**
		     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
		     *
		     * @private
		     * @param {number|Object} id The timer id or timeout object of the timer to clear.
		     */
		    var clearTimeout = ctxClearTimeout || function(id) {
		      return root.clearTimeout(id);
		    };

		    /**
		     * Creates a clone of  `buffer`.
		     *
		     * @private
		     * @param {Buffer} buffer The buffer to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Buffer} Returns the cloned buffer.
		     */
		    function cloneBuffer(buffer, isDeep) {
		      if (isDeep) {
		        return buffer.slice();
		      }
		      var length = buffer.length,
		          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		      buffer.copy(result);
		      return result;
		    }

		    /**
		     * Creates a clone of `arrayBuffer`.
		     *
		     * @private
		     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		     * @returns {ArrayBuffer} Returns the cloned array buffer.
		     */
		    function cloneArrayBuffer(arrayBuffer) {
		      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		      return result;
		    }

		    /**
		     * Creates a clone of `dataView`.
		     *
		     * @private
		     * @param {Object} dataView The data view to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned data view.
		     */
		    function cloneDataView(dataView, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
		      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		    }

		    /**
		     * Creates a clone of `regexp`.
		     *
		     * @private
		     * @param {Object} regexp The regexp to clone.
		     * @returns {Object} Returns the cloned regexp.
		     */
		    function cloneRegExp(regexp) {
		      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
		      result.lastIndex = regexp.lastIndex;
		      return result;
		    }

		    /**
		     * Creates a clone of the `symbol` object.
		     *
		     * @private
		     * @param {Object} symbol The symbol object to clone.
		     * @returns {Object} Returns the cloned symbol object.
		     */
		    function cloneSymbol(symbol) {
		      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		    }

		    /**
		     * Creates a clone of `typedArray`.
		     *
		     * @private
		     * @param {Object} typedArray The typed array to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned typed array.
		     */
		    function cloneTypedArray(typedArray, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		    }

		    /**
		     * Compares values to sort them in ascending order.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {number} Returns the sort order indicator for `value`.
		     */
		    function compareAscending(value, other) {
		      if (value !== other) {
		        var valIsDefined = value !== undefined$1,
		            valIsNull = value === null,
		            valIsReflexive = value === value,
		            valIsSymbol = isSymbol(value);

		        var othIsDefined = other !== undefined$1,
		            othIsNull = other === null,
		            othIsReflexive = other === other,
		            othIsSymbol = isSymbol(other);

		        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
		            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
		            (valIsNull && othIsDefined && othIsReflexive) ||
		            (!valIsDefined && othIsReflexive) ||
		            !valIsReflexive) {
		          return 1;
		        }
		        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
		            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
		            (othIsNull && valIsDefined && valIsReflexive) ||
		            (!othIsDefined && valIsReflexive) ||
		            !othIsReflexive) {
		          return -1;
		        }
		      }
		      return 0;
		    }

		    /**
		     * Used by `_.orderBy` to compare multiple properties of a value to another
		     * and stable sort them.
		     *
		     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
		     * specify an order of "desc" for descending or "asc" for ascending sort order
		     * of corresponding values.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {boolean[]|string[]} orders The order to sort by for each property.
		     * @returns {number} Returns the sort order indicator for `object`.
		     */
		    function compareMultiple(object, other, orders) {
		      var index = -1,
		          objCriteria = object.criteria,
		          othCriteria = other.criteria,
		          length = objCriteria.length,
		          ordersLength = orders.length;

		      while (++index < length) {
		        var result = compareAscending(objCriteria[index], othCriteria[index]);
		        if (result) {
		          if (index >= ordersLength) {
		            return result;
		          }
		          var order = orders[index];
		          return result * (order == 'desc' ? -1 : 1);
		        }
		      }
		      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
		      // that causes it, under certain circumstances, to provide the same value for
		      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
		      // for more details.
		      //
		      // This also ensures a stable sort in V8 and other engines.
		      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
		      return object.index - other.index;
		    }

		    /**
		     * Creates an array that is the composition of partially applied arguments,
		     * placeholders, and provided arguments into a single array of arguments.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to prepend to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgs(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersLength = holders.length,
		          leftIndex = -1,
		          leftLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(leftLength + rangeLength),
		          isUncurried = !isCurried;

		      while (++leftIndex < leftLength) {
		        result[leftIndex] = partials[leftIndex];
		      }
		      while (++argsIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[holders[argsIndex]] = args[argsIndex];
		        }
		      }
		      while (rangeLength--) {
		        result[leftIndex++] = args[argsIndex++];
		      }
		      return result;
		    }

		    /**
		     * This function is like `composeArgs` except that the arguments composition
		     * is tailored for `_.partialRight`.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to append to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgsRight(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersIndex = -1,
		          holdersLength = holders.length,
		          rightIndex = -1,
		          rightLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(rangeLength + rightLength),
		          isUncurried = !isCurried;

		      while (++argsIndex < rangeLength) {
		        result[argsIndex] = args[argsIndex];
		      }
		      var offset = argsIndex;
		      while (++rightIndex < rightLength) {
		        result[offset + rightIndex] = partials[rightIndex];
		      }
		      while (++holdersIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[offset + holders[holdersIndex]] = args[argsIndex++];
		        }
		      }
		      return result;
		    }

		    /**
		     * Copies the values of `source` to `array`.
		     *
		     * @private
		     * @param {Array} source The array to copy values from.
		     * @param {Array} [array=[]] The array to copy values to.
		     * @returns {Array} Returns `array`.
		     */
		    function copyArray(source, array) {
		      var index = -1,
		          length = source.length;

		      array || (array = Array(length));
		      while (++index < length) {
		        array[index] = source[index];
		      }
		      return array;
		    }

		    /**
		     * Copies properties of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy properties from.
		     * @param {Array} props The property identifiers to copy.
		     * @param {Object} [object={}] The object to copy properties to.
		     * @param {Function} [customizer] The function to customize copied values.
		     * @returns {Object} Returns `object`.
		     */
		    function copyObject(source, props, object, customizer) {
		      var isNew = !object;
		      object || (object = {});

		      var index = -1,
		          length = props.length;

		      while (++index < length) {
		        var key = props[index];

		        var newValue = customizer
		          ? customizer(object[key], source[key], key, object, source)
		          : undefined$1;

		        if (newValue === undefined$1) {
		          newValue = source[key];
		        }
		        if (isNew) {
		          baseAssignValue(object, key, newValue);
		        } else {
		          assignValue(object, key, newValue);
		        }
		      }
		      return object;
		    }

		    /**
		     * Copies own symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbols(source, object) {
		      return copyObject(source, getSymbols(source), object);
		    }

		    /**
		     * Copies own and inherited symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbolsIn(source, object) {
		      return copyObject(source, getSymbolsIn(source), object);
		    }

		    /**
		     * Creates a function like `_.groupBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} [initializer] The accumulator object initializer.
		     * @returns {Function} Returns the new aggregator function.
		     */
		    function createAggregator(setter, initializer) {
		      return function(collection, iteratee) {
		        var func = isArray(collection) ? arrayAggregator : baseAggregator,
		            accumulator = initializer ? initializer() : {};

		        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
		      };
		    }

		    /**
		     * Creates a function like `_.assign`.
		     *
		     * @private
		     * @param {Function} assigner The function to assign values.
		     * @returns {Function} Returns the new assigner function.
		     */
		    function createAssigner(assigner) {
		      return baseRest(function(object, sources) {
		        var index = -1,
		            length = sources.length,
		            customizer = length > 1 ? sources[length - 1] : undefined$1,
		            guard = length > 2 ? sources[2] : undefined$1;

		        customizer = (assigner.length > 3 && typeof customizer == 'function')
		          ? (length--, customizer)
		          : undefined$1;

		        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		          customizer = length < 3 ? undefined$1 : customizer;
		          length = 1;
		        }
		        object = Object(object);
		        while (++index < length) {
		          var source = sources[index];
		          if (source) {
		            assigner(object, source, index, customizer);
		          }
		        }
		        return object;
		      });
		    }

		    /**
		     * Creates a `baseEach` or `baseEachRight` function.
		     *
		     * @private
		     * @param {Function} eachFunc The function to iterate over a collection.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseEach(eachFunc, fromRight) {
		      return function(collection, iteratee) {
		        if (collection == null) {
		          return collection;
		        }
		        if (!isArrayLike(collection)) {
		          return eachFunc(collection, iteratee);
		        }
		        var length = collection.length,
		            index = fromRight ? length : -1,
		            iterable = Object(collection);

		        while ((fromRight ? index-- : ++index < length)) {
		          if (iteratee(iterable[index], index, iterable) === false) {
		            break;
		          }
		        }
		        return collection;
		      };
		    }

		    /**
		     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseFor(fromRight) {
		      return function(object, iteratee, keysFunc) {
		        var index = -1,
		            iterable = Object(object),
		            props = keysFunc(object),
		            length = props.length;

		        while (length--) {
		          var key = props[fromRight ? length : ++index];
		          if (iteratee(iterable[key], key, iterable) === false) {
		            break;
		          }
		        }
		        return object;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the optional `this`
		     * binding of `thisArg`.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createBind(func, bitmask, thisArg) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return fn.apply(isBind ? thisArg : this, arguments);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.lowerFirst`.
		     *
		     * @private
		     * @param {string} methodName The name of the `String` case method to use.
		     * @returns {Function} Returns the new case function.
		     */
		    function createCaseFirst(methodName) {
		      return function(string) {
		        string = toString(string);

		        var strSymbols = hasUnicode(string)
		          ? stringToArray(string)
		          : undefined$1;

		        var chr = strSymbols
		          ? strSymbols[0]
		          : string.charAt(0);

		        var trailing = strSymbols
		          ? castSlice(strSymbols, 1).join('')
		          : string.slice(1);

		        return chr[methodName]() + trailing;
		      };
		    }

		    /**
		     * Creates a function like `_.camelCase`.
		     *
		     * @private
		     * @param {Function} callback The function to combine each word.
		     * @returns {Function} Returns the new compounder function.
		     */
		    function createCompounder(callback) {
		      return function(string) {
		        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
		      };
		    }

		    /**
		     * Creates a function that produces an instance of `Ctor` regardless of
		     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
		     *
		     * @private
		     * @param {Function} Ctor The constructor to wrap.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCtor(Ctor) {
		      return function() {
		        // Use a `switch` statement to work with class constructors. See
		        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
		        // for more details.
		        var args = arguments;
		        switch (args.length) {
		          case 0: return new Ctor;
		          case 1: return new Ctor(args[0]);
		          case 2: return new Ctor(args[0], args[1]);
		          case 3: return new Ctor(args[0], args[1], args[2]);
		          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
		          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
		          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
		          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
		        }
		        var thisBinding = baseCreate(Ctor.prototype),
		            result = Ctor.apply(thisBinding, args);

		        // Mimic the constructor's `return` behavior.
		        // See https://es5.github.io/#x13.2.2 for more details.
		        return isObject(result) ? result : thisBinding;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to enable currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {number} arity The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCurry(func, bitmask, arity) {
		      var Ctor = createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length,
		            placeholder = getHolder(wrapper);

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
		          ? []
		          : replaceHolders(args, placeholder);

		        length -= holders.length;
		        if (length < arity) {
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
		            args, holders, undefined$1, undefined$1, arity - length);
		        }
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return apply(fn, this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.find` or `_.findLast` function.
		     *
		     * @private
		     * @param {Function} findIndexFunc The function to find the collection index.
		     * @returns {Function} Returns the new find function.
		     */
		    function createFind(findIndexFunc) {
		      return function(collection, predicate, fromIndex) {
		        var iterable = Object(collection);
		        if (!isArrayLike(collection)) {
		          var iteratee = getIteratee(predicate, 3);
		          collection = keys(collection);
		          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
		        }
		        var index = findIndexFunc(collection, predicate, fromIndex);
		        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
		      };
		    }

		    /**
		     * Creates a `_.flow` or `_.flowRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new flow function.
		     */
		    function createFlow(fromRight) {
		      return flatRest(function(funcs) {
		        var length = funcs.length,
		            index = length,
		            prereq = LodashWrapper.prototype.thru;

		        if (fromRight) {
		          funcs.reverse();
		        }
		        while (index--) {
		          var func = funcs[index];
		          if (typeof func != 'function') {
		            throw new TypeError(FUNC_ERROR_TEXT);
		          }
		          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
		            var wrapper = new LodashWrapper([], true);
		          }
		        }
		        index = wrapper ? index : length;
		        while (++index < length) {
		          func = funcs[index];

		          var funcName = getFuncName(func),
		              data = funcName == 'wrapper' ? getData(func) : undefined$1;

		          if (data && isLaziable(data[0]) &&
		                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
		                !data[4].length && data[9] == 1
		              ) {
		            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
		          } else {
		            wrapper = (func.length == 1 && isLaziable(func))
		              ? wrapper[funcName]()
		              : wrapper.thru(func);
		          }
		        }
		        return function() {
		          var args = arguments,
		              value = args[0];

		          if (wrapper && args.length == 1 && isArray(value)) {
		            return wrapper.plant(value).value();
		          }
		          var index = 0,
		              result = length ? funcs[index].apply(this, args) : value;

		          while (++index < length) {
		            result = funcs[index].call(this, result);
		          }
		          return result;
		        };
		      });
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with optional `this`
		     * binding of `thisArg`, partial application, and currying.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [partialsRight] The arguments to append to those provided
		     *  to the new function.
		     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
		      var isAry = bitmask & WRAP_ARY_FLAG,
		          isBind = bitmask & WRAP_BIND_FLAG,
		          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
		          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
		          isFlip = bitmask & WRAP_FLIP_FLAG,
		          Ctor = isBindKey ? undefined$1 : createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length;

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        if (isCurried) {
		          var placeholder = getHolder(wrapper),
		              holdersCount = countHolders(args, placeholder);
		        }
		        if (partials) {
		          args = composeArgs(args, partials, holders, isCurried);
		        }
		        if (partialsRight) {
		          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
		        }
		        length -= holdersCount;
		        if (isCurried && length < arity) {
		          var newHolders = replaceHolders(args, placeholder);
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
		            args, newHolders, argPos, ary, arity - length
		          );
		        }
		        var thisBinding = isBind ? thisArg : this,
		            fn = isBindKey ? thisBinding[func] : func;

		        length = args.length;
		        if (argPos) {
		          args = reorder(args, argPos);
		        } else if (isFlip && length > 1) {
		          args.reverse();
		        }
		        if (isAry && ary < length) {
		          args.length = ary;
		        }
		        if (this && this !== root && this instanceof wrapper) {
		          fn = Ctor || createCtor(fn);
		        }
		        return fn.apply(thisBinding, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.invertBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} toIteratee The function to resolve iteratees.
		     * @returns {Function} Returns the new inverter function.
		     */
		    function createInverter(setter, toIteratee) {
		      return function(object, iteratee) {
		        return baseInverter(object, setter, toIteratee(iteratee), {});
		      };
		    }

		    /**
		     * Creates a function that performs a mathematical operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @param {number} [defaultValue] The value used for `undefined` arguments.
		     * @returns {Function} Returns the new mathematical operation function.
		     */
		    function createMathOperation(operator, defaultValue) {
		      return function(value, other) {
		        var result;
		        if (value === undefined$1 && other === undefined$1) {
		          return defaultValue;
		        }
		        if (value !== undefined$1) {
		          result = value;
		        }
		        if (other !== undefined$1) {
		          if (result === undefined$1) {
		            return other;
		          }
		          if (typeof value == 'string' || typeof other == 'string') {
		            value = baseToString(value);
		            other = baseToString(other);
		          } else {
		            value = baseToNumber(value);
		            other = baseToNumber(other);
		          }
		          result = operator(value, other);
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function like `_.over`.
		     *
		     * @private
		     * @param {Function} arrayFunc The function to iterate over iteratees.
		     * @returns {Function} Returns the new over function.
		     */
		    function createOver(arrayFunc) {
		      return flatRest(function(iteratees) {
		        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
		        return baseRest(function(args) {
		          var thisArg = this;
		          return arrayFunc(iteratees, function(iteratee) {
		            return apply(iteratee, thisArg, args);
		          });
		        });
		      });
		    }

		    /**
		     * Creates the padding for `string` based on `length`. The `chars` string
		     * is truncated if the number of characters exceeds `length`.
		     *
		     * @private
		     * @param {number} length The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padding for `string`.
		     */
		    function createPadding(length, chars) {
		      chars = chars === undefined$1 ? ' ' : baseToString(chars);

		      var charsLength = chars.length;
		      if (charsLength < 2) {
		        return charsLength ? baseRepeat(chars, length) : chars;
		      }
		      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
		      return hasUnicode(chars)
		        ? castSlice(stringToArray(result), 0, length).join('')
		        : result.slice(0, length);
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the `this` binding
		     * of `thisArg` and `partials` prepended to the arguments it receives.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {Array} partials The arguments to prepend to those provided to
		     *  the new function.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createPartial(func, bitmask, thisArg, partials) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var argsIndex = -1,
		            argsLength = arguments.length,
		            leftIndex = -1,
		            leftLength = partials.length,
		            args = Array(leftLength + argsLength),
		            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

		        while (++leftIndex < leftLength) {
		          args[leftIndex] = partials[leftIndex];
		        }
		        while (argsLength--) {
		          args[leftIndex++] = arguments[++argsIndex];
		        }
		        return apply(fn, isBind ? thisArg : this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.range` or `_.rangeRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new range function.
		     */
		    function createRange(fromRight) {
		      return function(start, end, step) {
		        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
		          end = step = undefined$1;
		        }
		        // Ensure the sign of `-0` is preserved.
		        start = toFinite(start);
		        if (end === undefined$1) {
		          end = start;
		          start = 0;
		        } else {
		          end = toFinite(end);
		        }
		        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
		        return baseRange(start, end, step, fromRight);
		      };
		    }

		    /**
		     * Creates a function that performs a relational operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @returns {Function} Returns the new relational operation function.
		     */
		    function createRelationalOperation(operator) {
		      return function(value, other) {
		        if (!(typeof value == 'string' && typeof other == 'string')) {
		          value = toNumber(value);
		          other = toNumber(other);
		        }
		        return operator(value, other);
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to continue currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {Function} wrapFunc The function to create the `func` wrapper.
		     * @param {*} placeholder The placeholder value.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
		      var isCurry = bitmask & WRAP_CURRY_FLAG,
		          newHolders = isCurry ? holders : undefined$1,
		          newHoldersRight = isCurry ? undefined$1 : holders,
		          newPartials = isCurry ? partials : undefined$1,
		          newPartialsRight = isCurry ? undefined$1 : partials;

		      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
		      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

		      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
		        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
		      }
		      var newData = [
		        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
		        newHoldersRight, argPos, ary, arity
		      ];

		      var result = wrapFunc.apply(undefined$1, newData);
		      if (isLaziable(func)) {
		        setData(result, newData);
		      }
		      result.placeholder = placeholder;
		      return setWrapToString(result, func, bitmask);
		    }

		    /**
		     * Creates a function like `_.round`.
		     *
		     * @private
		     * @param {string} methodName The name of the `Math` method to use when rounding.
		     * @returns {Function} Returns the new round function.
		     */
		    function createRound(methodName) {
		      var func = Math[methodName];
		      return function(number, precision) {
		        number = toNumber(number);
		        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
		        if (precision && nativeIsFinite(number)) {
		          // Shift with exponential notation to avoid floating-point issues.
		          // See [MDN](https://mdn.io/round#Examples) for more details.
		          var pair = (toString(number) + 'e').split('e'),
		              value = func(pair[0] + 'e' + (+pair[1] + precision));

		          pair = (toString(value) + 'e').split('e');
		          return +(pair[0] + 'e' + (+pair[1] - precision));
		        }
		        return func(number);
		      };
		    }

		    /**
		     * Creates a set object of `values`.
		     *
		     * @private
		     * @param {Array} values The values to add to the set.
		     * @returns {Object} Returns the new set.
		     */
		    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
		      return new Set(values);
		    };

		    /**
		     * Creates a `_.toPairs` or `_.toPairsIn` function.
		     *
		     * @private
		     * @param {Function} keysFunc The function to get the keys of a given object.
		     * @returns {Function} Returns the new pairs function.
		     */
		    function createToPairs(keysFunc) {
		      return function(object) {
		        var tag = getTag(object);
		        if (tag == mapTag) {
		          return mapToArray(object);
		        }
		        if (tag == setTag) {
		          return setToPairs(object);
		        }
		        return baseToPairs(object, keysFunc(object));
		      };
		    }

		    /**
		     * Creates a function that either curries or invokes `func` with optional
		     * `this` binding and partially applied arguments.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags.
		     *    1 - `_.bind`
		     *    2 - `_.bindKey`
		     *    4 - `_.curry` or `_.curryRight` of a bound function
		     *    8 - `_.curry`
		     *   16 - `_.curryRight`
		     *   32 - `_.partial`
		     *   64 - `_.partialRight`
		     *  128 - `_.rearg`
		     *  256 - `_.ary`
		     *  512 - `_.flip`
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to be partially applied.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
		      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
		      if (!isBindKey && typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var length = partials ? partials.length : 0;
		      if (!length) {
		        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
		        partials = holders = undefined$1;
		      }
		      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
		      arity = arity === undefined$1 ? arity : toInteger(arity);
		      length -= holders ? holders.length : 0;

		      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
		        var partialsRight = partials,
		            holdersRight = holders;

		        partials = holders = undefined$1;
		      }
		      var data = isBindKey ? undefined$1 : getData(func);

		      var newData = [
		        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
		        argPos, ary, arity
		      ];

		      if (data) {
		        mergeData(newData, data);
		      }
		      func = newData[0];
		      bitmask = newData[1];
		      thisArg = newData[2];
		      partials = newData[3];
		      holders = newData[4];
		      arity = newData[9] = newData[9] === undefined$1
		        ? (isBindKey ? 0 : func.length)
		        : nativeMax(newData[9] - length, 0);

		      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
		        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
		      }
		      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
		        var result = createBind(func, bitmask, thisArg);
		      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
		        result = createCurry(func, bitmask, arity);
		      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
		        result = createPartial(func, bitmask, thisArg, partials);
		      } else {
		        result = createHybrid.apply(undefined$1, newData);
		      }
		      var setter = data ? baseSetData : setData;
		      return setWrapToString(setter(result, newData), func, bitmask);
		    }

		    /**
		     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
		     * of source objects to the destination object for all destination properties
		     * that resolve to `undefined`.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to assign.
		     * @param {Object} object The parent object of `objValue`.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsAssignIn(objValue, srcValue, key, object) {
		      if (objValue === undefined$1 ||
		          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		        return srcValue;
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
		     * objects into destination objects that are passed thru.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to merge.
		     * @param {Object} object The parent object of `objValue`.
		     * @param {Object} source The parent object of `srcValue`.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
		      if (isObject(objValue) && isObject(srcValue)) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, objValue);
		        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
		        stack['delete'](srcValue);
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
		     * objects.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {string} key The key of the property to inspect.
		     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
		     */
		    function customOmitClone(value) {
		      return isPlainObject(value) ? undefined$1 : value;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for arrays with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Array} array The array to compare.
		     * @param {Array} other The other array to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `array` and `other` objects.
		     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		     */
		    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          arrLength = array.length,
		          othLength = other.length;

		      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		        return false;
		      }
		      // Check that cyclic values are equal.
		      var arrStacked = stack.get(array);
		      var othStacked = stack.get(other);
		      if (arrStacked && othStacked) {
		        return arrStacked == other && othStacked == array;
		      }
		      var index = -1,
		          result = true,
		          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

		      stack.set(array, other);
		      stack.set(other, array);

		      // Ignore non-index properties.
		      while (++index < arrLength) {
		        var arrValue = array[index],
		            othValue = other[index];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, arrValue, index, other, array, stack)
		            : customizer(arrValue, othValue, index, array, other, stack);
		        }
		        if (compared !== undefined$1) {
		          if (compared) {
		            continue;
		          }
		          result = false;
		          break;
		        }
		        // Recursively compare arrays (susceptible to call stack limits).
		        if (seen) {
		          if (!arraySome(other, function(othValue, othIndex) {
		                if (!cacheHas(seen, othIndex) &&
		                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		                  return seen.push(othIndex);
		                }
		              })) {
		            result = false;
		            break;
		          }
		        } else if (!(
		              arrValue === othValue ||
		                equalFunc(arrValue, othValue, bitmask, customizer, stack)
		            )) {
		          result = false;
		          break;
		        }
		      }
		      stack['delete'](array);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for comparing objects of
		     * the same `toStringTag`.
		     *
		     * **Note:** This function only supports comparing values with tags of
		     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {string} tag The `toStringTag` of the objects to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
		      switch (tag) {
		        case dataViewTag:
		          if ((object.byteLength != other.byteLength) ||
		              (object.byteOffset != other.byteOffset)) {
		            return false;
		          }
		          object = object.buffer;
		          other = other.buffer;

		        case arrayBufferTag:
		          if ((object.byteLength != other.byteLength) ||
		              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		            return false;
		          }
		          return true;

		        case boolTag:
		        case dateTag:
		        case numberTag:
		          // Coerce booleans to `1` or `0` and dates to milliseconds.
		          // Invalid dates are coerced to `NaN`.
		          return eq(+object, +other);

		        case errorTag:
		          return object.name == other.name && object.message == other.message;

		        case regexpTag:
		        case stringTag:
		          // Coerce regexes to strings and treat strings, primitives and objects,
		          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		          // for more details.
		          return object == (other + '');

		        case mapTag:
		          var convert = mapToArray;

		        case setTag:
		          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
		          convert || (convert = setToArray);

		          if (object.size != other.size && !isPartial) {
		            return false;
		          }
		          // Assume cyclic values are equal.
		          var stacked = stack.get(object);
		          if (stacked) {
		            return stacked == other;
		          }
		          bitmask |= COMPARE_UNORDERED_FLAG;

		          // Recursively compare objects (susceptible to call stack limits).
		          stack.set(object, other);
		          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
		          stack['delete'](object);
		          return result;

		        case symbolTag:
		          if (symbolValueOf) {
		            return symbolValueOf.call(object) == symbolValueOf.call(other);
		          }
		      }
		      return false;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for objects with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          objProps = getAllKeys(object),
		          objLength = objProps.length,
		          othProps = getAllKeys(other),
		          othLength = othProps.length;

		      if (objLength != othLength && !isPartial) {
		        return false;
		      }
		      var index = objLength;
		      while (index--) {
		        var key = objProps[index];
		        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		          return false;
		        }
		      }
		      // Check that cyclic values are equal.
		      var objStacked = stack.get(object);
		      var othStacked = stack.get(other);
		      if (objStacked && othStacked) {
		        return objStacked == other && othStacked == object;
		      }
		      var result = true;
		      stack.set(object, other);
		      stack.set(other, object);

		      var skipCtor = isPartial;
		      while (++index < objLength) {
		        key = objProps[index];
		        var objValue = object[key],
		            othValue = other[key];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, objValue, key, other, object, stack)
		            : customizer(objValue, othValue, key, object, other, stack);
		        }
		        // Recursively compare objects (susceptible to call stack limits).
		        if (!(compared === undefined$1
		              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
		              : compared
		            )) {
		          result = false;
		          break;
		        }
		        skipCtor || (skipCtor = key == 'constructor');
		      }
		      if (result && !skipCtor) {
		        var objCtor = object.constructor,
		            othCtor = other.constructor;

		        // Non `Object` object instances with different constructors are not equal.
		        if (objCtor != othCtor &&
		            ('constructor' in object && 'constructor' in other) &&
		            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		          result = false;
		        }
		      }
		      stack['delete'](object);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseRest` which flattens the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    function flatRest(func) {
		      return setToString(overRest(func, undefined$1, flatten), func + '');
		    }

		    /**
		     * Creates an array of own enumerable property names and symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeys(object) {
		      return baseGetAllKeys(object, keys, getSymbols);
		    }

		    /**
		     * Creates an array of own and inherited enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeysIn(object) {
		      return baseGetAllKeys(object, keysIn, getSymbolsIn);
		    }

		    /**
		     * Gets metadata for `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {*} Returns the metadata for `func`.
		     */
		    var getData = !metaMap ? noop : function(func) {
		      return metaMap.get(func);
		    };

		    /**
		     * Gets the name of `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {string} Returns the function name.
		     */
		    function getFuncName(func) {
		      var result = (func.name + ''),
		          array = realNames[result],
		          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

		      while (length--) {
		        var data = array[length],
		            otherFunc = data.func;
		        if (otherFunc == null || otherFunc == func) {
		          return data.name;
		        }
		      }
		      return result;
		    }

		    /**
		     * Gets the argument placeholder value for `func`.
		     *
		     * @private
		     * @param {Function} func The function to inspect.
		     * @returns {*} Returns the placeholder value.
		     */
		    function getHolder(func) {
		      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
		      return object.placeholder;
		    }

		    /**
		     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
		     * this function returns the custom method, otherwise it returns `baseIteratee`.
		     * If arguments are provided, the chosen function is invoked with them and
		     * its result is returned.
		     *
		     * @private
		     * @param {*} [value] The value to convert to an iteratee.
		     * @param {number} [arity] The arity of the created iteratee.
		     * @returns {Function} Returns the chosen function or its result.
		     */
		    function getIteratee() {
		      var result = lodash.iteratee || iteratee;
		      result = result === iteratee ? baseIteratee : result;
		      return arguments.length ? result(arguments[0], arguments[1]) : result;
		    }

		    /**
		     * Gets the data for `map`.
		     *
		     * @private
		     * @param {Object} map The map to query.
		     * @param {string} key The reference key.
		     * @returns {*} Returns the map data.
		     */
		    function getMapData(map, key) {
		      var data = map.__data__;
		      return isKeyable(key)
		        ? data[typeof key == 'string' ? 'string' : 'hash']
		        : data.map;
		    }

		    /**
		     * Gets the property names, values, and compare flags of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the match data of `object`.
		     */
		    function getMatchData(object) {
		      var result = keys(object),
		          length = result.length;

		      while (length--) {
		        var key = result[length],
		            value = object[key];

		        result[length] = [key, value, isStrictComparable(value)];
		      }
		      return result;
		    }

		    /**
		     * Gets the native function at `key` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the method to get.
		     * @returns {*} Returns the function if it's native, else `undefined`.
		     */
		    function getNative(object, key) {
		      var value = getValue(object, key);
		      return baseIsNative(value) ? value : undefined$1;
		    }

		    /**
		     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the raw `toStringTag`.
		     */
		    function getRawTag(value) {
		      var isOwn = hasOwnProperty.call(value, symToStringTag),
		          tag = value[symToStringTag];

		      try {
		        value[symToStringTag] = undefined$1;
		        var unmasked = true;
		      } catch (e) {}

		      var result = nativeObjectToString.call(value);
		      if (unmasked) {
		        if (isOwn) {
		          value[symToStringTag] = tag;
		        } else {
		          delete value[symToStringTag];
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates an array of the own enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
		      if (object == null) {
		        return [];
		      }
		      object = Object(object);
		      return arrayFilter(nativeGetSymbols(object), function(symbol) {
		        return propertyIsEnumerable.call(object, symbol);
		      });
		    };

		    /**
		     * Creates an array of the own and inherited enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
		      var result = [];
		      while (object) {
		        arrayPush(result, getSymbols(object));
		        object = getPrototype(object);
		      }
		      return result;
		    };

		    /**
		     * Gets the `toStringTag` of `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    var getTag = baseGetTag;

		    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
		        (Map && getTag(new Map) != mapTag) ||
		        (Promise && getTag(Promise.resolve()) != promiseTag) ||
		        (Set && getTag(new Set) != setTag) ||
		        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
		      getTag = function(value) {
		        var result = baseGetTag(value),
		            Ctor = result == objectTag ? value.constructor : undefined$1,
		            ctorString = Ctor ? toSource(Ctor) : '';

		        if (ctorString) {
		          switch (ctorString) {
		            case dataViewCtorString: return dataViewTag;
		            case mapCtorString: return mapTag;
		            case promiseCtorString: return promiseTag;
		            case setCtorString: return setTag;
		            case weakMapCtorString: return weakMapTag;
		          }
		        }
		        return result;
		      };
		    }

		    /**
		     * Gets the view, applying any `transforms` to the `start` and `end` positions.
		     *
		     * @private
		     * @param {number} start The start of the view.
		     * @param {number} end The end of the view.
		     * @param {Array} transforms The transformations to apply to the view.
		     * @returns {Object} Returns an object containing the `start` and `end`
		     *  positions of the view.
		     */
		    function getView(start, end, transforms) {
		      var index = -1,
		          length = transforms.length;

		      while (++index < length) {
		        var data = transforms[index],
		            size = data.size;

		        switch (data.type) {
		          case 'drop':      start += size; break;
		          case 'dropRight': end -= size; break;
		          case 'take':      end = nativeMin(end, start + size); break;
		          case 'takeRight': start = nativeMax(start, end - size); break;
		        }
		      }
		      return { 'start': start, 'end': end };
		    }

		    /**
		     * Extracts wrapper details from the `source` body comment.
		     *
		     * @private
		     * @param {string} source The source to inspect.
		     * @returns {Array} Returns the wrapper details.
		     */
		    function getWrapDetails(source) {
		      var match = source.match(reWrapDetails);
		      return match ? match[1].split(reSplitDetails) : [];
		    }

		    /**
		     * Checks if `path` exists on `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @param {Function} hasFunc The function to check properties.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     */
		    function hasPath(object, path, hasFunc) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          result = false;

		      while (++index < length) {
		        var key = toKey(path[index]);
		        if (!(result = object != null && hasFunc(object, key))) {
		          break;
		        }
		        object = object[key];
		      }
		      if (result || ++index != length) {
		        return result;
		      }
		      length = object == null ? 0 : object.length;
		      return !!length && isLength(length) && isIndex(key, length) &&
		        (isArray(object) || isArguments(object));
		    }

		    /**
		     * Initializes an array clone.
		     *
		     * @private
		     * @param {Array} array The array to clone.
		     * @returns {Array} Returns the initialized clone.
		     */
		    function initCloneArray(array) {
		      var length = array.length,
		          result = new array.constructor(length);

		      // Add properties assigned by `RegExp#exec`.
		      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
		        result.index = array.index;
		        result.input = array.input;
		      }
		      return result;
		    }

		    /**
		     * Initializes an object clone.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneObject(object) {
		      return (typeof object.constructor == 'function' && !isPrototype(object))
		        ? baseCreate(getPrototype(object))
		        : {};
		    }

		    /**
		     * Initializes an object clone based on its `toStringTag`.
		     *
		     * **Note:** This function only supports cloning values with tags of
		     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @param {string} tag The `toStringTag` of the object to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneByTag(object, tag, isDeep) {
		      var Ctor = object.constructor;
		      switch (tag) {
		        case arrayBufferTag:
		          return cloneArrayBuffer(object);

		        case boolTag:
		        case dateTag:
		          return new Ctor(+object);

		        case dataViewTag:
		          return cloneDataView(object, isDeep);

		        case float32Tag: case float64Tag:
		        case int8Tag: case int16Tag: case int32Tag:
		        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
		          return cloneTypedArray(object, isDeep);

		        case mapTag:
		          return new Ctor;

		        case numberTag:
		        case stringTag:
		          return new Ctor(object);

		        case regexpTag:
		          return cloneRegExp(object);

		        case setTag:
		          return new Ctor;

		        case symbolTag:
		          return cloneSymbol(object);
		      }
		    }

		    /**
		     * Inserts wrapper `details` in a comment at the top of the `source` body.
		     *
		     * @private
		     * @param {string} source The source to modify.
		     * @returns {Array} details The details to insert.
		     * @returns {string} Returns the modified source.
		     */
		    function insertWrapDetails(source, details) {
		      var length = details.length;
		      if (!length) {
		        return source;
		      }
		      var lastIndex = length - 1;
		      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
		      details = details.join(length > 2 ? ', ' : ' ');
		      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
		    }

		    /**
		     * Checks if `value` is a flattenable `arguments` object or array.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
		     */
		    function isFlattenable(value) {
		      return isArray(value) || isArguments(value) ||
		        !!(spreadableSymbol && value && value[spreadableSymbol]);
		    }

		    /**
		     * Checks if `value` is a valid array-like index.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		     */
		    function isIndex(value, length) {
		      var type = typeof value;
		      length = length == null ? MAX_SAFE_INTEGER : length;

		      return !!length &&
		        (type == 'number' ||
		          (type != 'symbol' && reIsUint.test(value))) &&
		            (value > -1 && value % 1 == 0 && value < length);
		    }

		    /**
		     * Checks if the given arguments are from an iteratee call.
		     *
		     * @private
		     * @param {*} value The potential iteratee value argument.
		     * @param {*} index The potential iteratee index or key argument.
		     * @param {*} object The potential iteratee object argument.
		     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		     *  else `false`.
		     */
		    function isIterateeCall(value, index, object) {
		      if (!isObject(object)) {
		        return false;
		      }
		      var type = typeof index;
		      if (type == 'number'
		            ? (isArrayLike(object) && isIndex(index, object.length))
		            : (type == 'string' && index in object)
		          ) {
		        return eq(object[index], value);
		      }
		      return false;
		    }

		    /**
		     * Checks if `value` is a property name and not a property path.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		     */
		    function isKey(value, object) {
		      if (isArray(value)) {
		        return false;
		      }
		      var type = typeof value;
		      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
		          value == null || isSymbol(value)) {
		        return true;
		      }
		      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
		        (object != null && value in Object(object));
		    }

		    /**
		     * Checks if `value` is suitable for use as unique object key.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		     */
		    function isKeyable(value) {
		      var type = typeof value;
		      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		        ? (value !== '__proto__')
		        : (value === null);
		    }

		    /**
		     * Checks if `func` has a lazy counterpart.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
		     *  else `false`.
		     */
		    function isLaziable(func) {
		      var funcName = getFuncName(func),
		          other = lodash[funcName];

		      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
		        return false;
		      }
		      if (func === other) {
		        return true;
		      }
		      var data = getData(other);
		      return !!data && func === data[0];
		    }

		    /**
		     * Checks if `func` has its source masked.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		     */
		    function isMasked(func) {
		      return !!maskSrcKey && (maskSrcKey in func);
		    }

		    /**
		     * Checks if `func` is capable of being masked.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
		     */
		    var isMaskable = coreJsData ? isFunction : stubFalse;

		    /**
		     * Checks if `value` is likely a prototype object.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		     */
		    function isPrototype(value) {
		      var Ctor = value && value.constructor,
		          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		      return value === proto;
		    }

		    /**
		     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` if suitable for strict
		     *  equality comparisons, else `false`.
		     */
		    function isStrictComparable(value) {
		      return value === value && !isObject(value);
		    }

		    /**
		     * A specialized version of `matchesProperty` for source values suitable
		     * for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {string} key The key of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function matchesStrictComparable(key, srcValue) {
		      return function(object) {
		        if (object == null) {
		          return false;
		        }
		        return object[key] === srcValue &&
		          (srcValue !== undefined$1 || (key in Object(object)));
		      };
		    }

		    /**
		     * A specialized version of `_.memoize` which clears the memoized function's
		     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
		     *
		     * @private
		     * @param {Function} func The function to have its output memoized.
		     * @returns {Function} Returns the new memoized function.
		     */
		    function memoizeCapped(func) {
		      var result = memoize(func, function(key) {
		        if (cache.size === MAX_MEMOIZE_SIZE) {
		          cache.clear();
		        }
		        return key;
		      });

		      var cache = result.cache;
		      return result;
		    }

		    /**
		     * Merges the function metadata of `source` into `data`.
		     *
		     * Merging metadata reduces the number of wrappers used to invoke a function.
		     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
		     * may be applied regardless of execution order. Methods like `_.ary` and
		     * `_.rearg` modify function arguments, making the order in which they are
		     * executed important, preventing the merging of metadata. However, we make
		     * an exception for a safe combined case where curried functions have `_.ary`
		     * and or `_.rearg` applied.
		     *
		     * @private
		     * @param {Array} data The destination metadata.
		     * @param {Array} source The source metadata.
		     * @returns {Array} Returns `data`.
		     */
		    function mergeData(data, source) {
		      var bitmask = data[1],
		          srcBitmask = source[1],
		          newBitmask = bitmask | srcBitmask,
		          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

		      var isCombo =
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
		        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

		      // Exit early if metadata can't be merged.
		      if (!(isCommon || isCombo)) {
		        return data;
		      }
		      // Use source `thisArg` if available.
		      if (srcBitmask & WRAP_BIND_FLAG) {
		        data[2] = source[2];
		        // Set when currying a bound function.
		        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
		      }
		      // Compose partial arguments.
		      var value = source[3];
		      if (value) {
		        var partials = data[3];
		        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
		        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
		      }
		      // Compose partial right arguments.
		      value = source[5];
		      if (value) {
		        partials = data[5];
		        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
		        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
		      }
		      // Use source `argPos` if available.
		      value = source[7];
		      if (value) {
		        data[7] = value;
		      }
		      // Use source `ary` if it's smaller.
		      if (srcBitmask & WRAP_ARY_FLAG) {
		        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
		      }
		      // Use source `arity` if one is not provided.
		      if (data[9] == null) {
		        data[9] = source[9];
		      }
		      // Use source `func` and merge bitmasks.
		      data[0] = source[0];
		      data[1] = newBitmask;

		      return data;
		    }

		    /**
		     * This function is like
		     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * except that it includes inherited enumerable properties.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function nativeKeysIn(object) {
		      var result = [];
		      if (object != null) {
		        for (var key in Object(object)) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a string using `Object.prototype.toString`.
		     *
		     * @private
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     */
		    function objectToString(value) {
		      return nativeObjectToString.call(value);
		    }

		    /**
		     * A specialized version of `baseRest` which transforms the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @param {Function} transform The rest array transform.
		     * @returns {Function} Returns the new function.
		     */
		    function overRest(func, start, transform) {
		      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
		      return function() {
		        var args = arguments,
		            index = -1,
		            length = nativeMax(args.length - start, 0),
		            array = Array(length);

		        while (++index < length) {
		          array[index] = args[start + index];
		        }
		        index = -1;
		        var otherArgs = Array(start + 1);
		        while (++index < start) {
		          otherArgs[index] = args[index];
		        }
		        otherArgs[start] = transform(array);
		        return apply(func, this, otherArgs);
		      };
		    }

		    /**
		     * Gets the parent value at `path` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array} path The path to get the parent value of.
		     * @returns {*} Returns the parent value.
		     */
		    function parent(object, path) {
		      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
		    }

		    /**
		     * Reorder `array` according to the specified indexes where the element at
		     * the first index is assigned as the first element, the element at
		     * the second index is assigned as the second element, and so on.
		     *
		     * @private
		     * @param {Array} array The array to reorder.
		     * @param {Array} indexes The arranged array indexes.
		     * @returns {Array} Returns `array`.
		     */
		    function reorder(array, indexes) {
		      var arrLength = array.length,
		          length = nativeMin(indexes.length, arrLength),
		          oldArray = copyArray(array);

		      while (length--) {
		        var index = indexes[length];
		        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
		      }
		      return array;
		    }

		    /**
		     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the property to get.
		     * @returns {*} Returns the property value.
		     */
		    function safeGet(object, key) {
		      if (key === 'constructor' && typeof object[key] === 'function') {
		        return;
		      }

		      if (key == '__proto__') {
		        return;
		      }

		      return object[key];
		    }

		    /**
		     * Sets metadata for `func`.
		     *
		     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
		     * period of time, it will trip its breaker and transition to an identity
		     * function to avoid garbage collection pauses in V8. See
		     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
		     * for more details.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var setData = shortOut(baseSetData);

		    /**
		     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    var setTimeout = ctxSetTimeout || function(func, wait) {
		      return root.setTimeout(func, wait);
		    };

		    /**
		     * Sets the `toString` method of `func` to return `string`.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var setToString = shortOut(baseSetToString);

		    /**
		     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
		     * with wrapper details in a comment at the top of the source body.
		     *
		     * @private
		     * @param {Function} wrapper The function to modify.
		     * @param {Function} reference The reference function.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Function} Returns `wrapper`.
		     */
		    function setWrapToString(wrapper, reference, bitmask) {
		      var source = (reference + '');
		      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
		    }

		    /**
		     * Creates a function that'll short out and invoke `identity` instead
		     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		     * milliseconds.
		     *
		     * @private
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new shortable function.
		     */
		    function shortOut(func) {
		      var count = 0,
		          lastCalled = 0;

		      return function() {
		        var stamp = nativeNow(),
		            remaining = HOT_SPAN - (stamp - lastCalled);

		        lastCalled = stamp;
		        if (remaining > 0) {
		          if (++count >= HOT_COUNT) {
		            return arguments[0];
		          }
		        } else {
		          count = 0;
		        }
		        return func.apply(undefined$1, arguments);
		      };
		    }

		    /**
		     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @param {number} [size=array.length] The size of `array`.
		     * @returns {Array} Returns `array`.
		     */
		    function shuffleSelf(array, size) {
		      var index = -1,
		          length = array.length,
		          lastIndex = length - 1;

		      size = size === undefined$1 ? length : size;
		      while (++index < size) {
		        var rand = baseRandom(index, lastIndex),
		            value = array[rand];

		        array[rand] = array[index];
		        array[index] = value;
		      }
		      array.length = size;
		      return array;
		    }

		    /**
		     * Converts `string` to a property path array.
		     *
		     * @private
		     * @param {string} string The string to convert.
		     * @returns {Array} Returns the property path array.
		     */
		    var stringToPath = memoizeCapped(function(string) {
		      var result = [];
		      if (string.charCodeAt(0) === 46 /* . */) {
		        result.push('');
		      }
		      string.replace(rePropName, function(match, number, quote, subString) {
		        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
		      });
		      return result;
		    });

		    /**
		     * Converts `value` to a string key if it's not a string or symbol.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {string|symbol} Returns the key.
		     */
		    function toKey(value) {
		      if (typeof value == 'string' || isSymbol(value)) {
		        return value;
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * Converts `func` to its source code.
		     *
		     * @private
		     * @param {Function} func The function to convert.
		     * @returns {string} Returns the source code.
		     */
		    function toSource(func) {
		      if (func != null) {
		        try {
		          return funcToString.call(func);
		        } catch (e) {}
		        try {
		          return (func + '');
		        } catch (e) {}
		      }
		      return '';
		    }

		    /**
		     * Updates wrapper `details` based on `bitmask` flags.
		     *
		     * @private
		     * @returns {Array} details The details to modify.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Array} Returns `details`.
		     */
		    function updateWrapDetails(details, bitmask) {
		      arrayEach(wrapFlags, function(pair) {
		        var value = '_.' + pair[0];
		        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
		          details.push(value);
		        }
		      });
		      return details.sort();
		    }

		    /**
		     * Creates a clone of `wrapper`.
		     *
		     * @private
		     * @param {Object} wrapper The wrapper to clone.
		     * @returns {Object} Returns the cloned wrapper.
		     */
		    function wrapperClone(wrapper) {
		      if (wrapper instanceof LazyWrapper) {
		        return wrapper.clone();
		      }
		      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
		      result.__actions__ = copyArray(wrapper.__actions__);
		      result.__index__  = wrapper.__index__;
		      result.__values__ = wrapper.__values__;
		      return result;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of elements split into groups the length of `size`.
		     * If `array` can't be split evenly, the final chunk will be the remaining
		     * elements.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to process.
		     * @param {number} [size=1] The length of each chunk
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the new array of chunks.
		     * @example
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 2);
		     * // => [['a', 'b'], ['c', 'd']]
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 3);
		     * // => [['a', 'b', 'c'], ['d']]
		     */
		    function chunk(array, size, guard) {
		      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
		        size = 1;
		      } else {
		        size = nativeMax(toInteger(size), 0);
		      }
		      var length = array == null ? 0 : array.length;
		      if (!length || size < 1) {
		        return [];
		      }
		      var index = 0,
		          resIndex = 0,
		          result = Array(nativeCeil(length / size));

		      while (index < length) {
		        result[resIndex++] = baseSlice(array, index, (index += size));
		      }
		      return result;
		    }

		    /**
		     * Creates an array with all falsey values removed. The values `false`, `null`,
		     * `0`, `""`, `undefined`, and `NaN` are falsey.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to compact.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.compact([0, 1, false, 2, '', 3]);
		     * // => [1, 2, 3]
		     */
		    function compact(array) {
		      var index = -1,
		          length = array == null ? 0 : array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index];
		        if (value) {
		          result[resIndex++] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates a new array concatenating `array` with any additional arrays
		     * and/or values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to concatenate.
		     * @param {...*} [values] The values to concatenate.
		     * @returns {Array} Returns the new concatenated array.
		     * @example
		     *
		     * var array = [1];
		     * var other = _.concat(array, 2, [3], [[4]]);
		     *
		     * console.log(other);
		     * // => [1, 2, 3, [4]]
		     *
		     * console.log(array);
		     * // => [1]
		     */
		    function concat() {
		      var length = arguments.length;
		      if (!length) {
		        return [];
		      }
		      var args = Array(length - 1),
		          array = arguments[0],
		          index = length;

		      while (index--) {
		        args[index - 1] = arguments[index];
		      }
		      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
		    }

		    /**
		     * Creates an array of `array` values not included in the other given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * **Note:** Unlike `_.pullAll`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.without, _.xor
		     * @example
		     *
		     * _.difference([2, 1], [2, 3]);
		     * // => [1]
		     */
		    var difference = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `iteratee` which
		     * is invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var differenceBy = baseRest(function(array, values) {
		      var iteratee = last(values);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `comparator`
		     * which is invoked to compare elements of `array` to `values`. The order and
		     * references of result values are determined by the first array. The comparator
		     * is invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     *
		     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }]
		     */
		    var differenceWith = baseRest(function(array, values) {
		      var comparator = last(values);
		      if (isArrayLikeObject(comparator)) {
		        comparator = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.drop([1, 2, 3]);
		     * // => [2, 3]
		     *
		     * _.drop([1, 2, 3], 2);
		     * // => [3]
		     *
		     * _.drop([1, 2, 3], 5);
		     * // => []
		     *
		     * _.drop([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function drop(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.dropRight([1, 2, 3]);
		     * // => [1, 2]
		     *
		     * _.dropRight([1, 2, 3], 2);
		     * // => [1]
		     *
		     * _.dropRight([1, 2, 3], 5);
		     * // => []
		     *
		     * _.dropRight([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function dropRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the end.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.dropRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropRightWhile(users, ['active', false]);
		     * // => objects for ['barney']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropRightWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the beginning.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.dropWhile(users, function(o) { return !o.active; });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropWhile(users, ['active', false]);
		     * // => objects for ['pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true)
		        : [];
		    }

		    /**
		     * Fills elements of `array` with `value` from `start` up to, but not
		     * including, `end`.
		     *
		     * **Note:** This method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Array
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.fill(array, 'a');
		     * console.log(array);
		     * // => ['a', 'a', 'a']
		     *
		     * _.fill(Array(3), 2);
		     * // => [2, 2, 2]
		     *
		     * _.fill([4, 6, 8, 10], '*', 1, 3);
		     * // => [4, '*', '*', 10]
		     */
		    function fill(array, value, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
		        start = 0;
		        end = length;
		      }
		      return baseFill(array, value, start, end);
		    }

		    /**
		     * This method is like `_.find` except that it returns the index of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.findIndex(users, function(o) { return o.user == 'barney'; });
		     * // => 0
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findIndex(users, { 'user': 'fred', 'active': false });
		     * // => 1
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findIndex(users, ['active', false]);
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findIndex(users, 'active');
		     * // => 2
		     */
		    function findIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index);
		    }

		    /**
		     * This method is like `_.findIndex` except that it iterates over elements
		     * of `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
		     * // => 2
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
		     * // => 0
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastIndex(users, ['active', false]);
		     * // => 2
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastIndex(users, 'active');
		     * // => 0
		     */
		    function findLastIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length - 1;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = fromIndex < 0
		          ? nativeMax(length + index, 0)
		          : nativeMin(index, length - 1);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
		    }

		    /**
		     * Flattens `array` a single level deep.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flatten([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, [3, [4]], 5]
		     */
		    function flatten(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, 1) : [];
		    }

		    /**
		     * Recursively flattens `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flattenDeep([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, 3, 4, 5]
		     */
		    function flattenDeep(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, INFINITY) : [];
		    }

		    /**
		     * Recursively flatten `array` up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * var array = [1, [2, [3, [4]], 5]];
		     *
		     * _.flattenDepth(array, 1);
		     * // => [1, 2, [3, [4]], 5]
		     *
		     * _.flattenDepth(array, 2);
		     * // => [1, 2, 3, [4], 5]
		     */
		    function flattenDepth(array, depth) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(array, depth);
		    }

		    /**
		     * The inverse of `_.toPairs`; this method returns an object composed
		     * from key-value `pairs`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} pairs The key-value pairs.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.fromPairs([['a', 1], ['b', 2]]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function fromPairs(pairs) {
		      var index = -1,
		          length = pairs == null ? 0 : pairs.length,
		          result = {};

		      while (++index < length) {
		        var pair = pairs[index];
		        result[pair[0]] = pair[1];
		      }
		      return result;
		    }

		    /**
		     * Gets the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias first
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the first element of `array`.
		     * @example
		     *
		     * _.head([1, 2, 3]);
		     * // => 1
		     *
		     * _.head([]);
		     * // => undefined
		     */
		    function head(array) {
		      return (array && array.length) ? array[0] : undefined$1;
		    }

		    /**
		     * Gets the index at which the first occurrence of `value` is found in `array`
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. If `fromIndex` is negative, it's used as the
		     * offset from the end of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.indexOf([1, 2, 1, 2], 2);
		     * // => 1
		     *
		     * // Search from the `fromIndex`.
		     * _.indexOf([1, 2, 1, 2], 2, 2);
		     * // => 3
		     */
		    function indexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseIndexOf(array, value, index);
		    }

		    /**
		     * Gets all but the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.initial([1, 2, 3]);
		     * // => [1, 2]
		     */
		    function initial(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 0, -1) : [];
		    }

		    /**
		     * Creates an array of unique values that are included in all given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersection([2, 1], [2, 3]);
		     * // => [2]
		     */
		    var intersection = baseRest(function(arrays) {
		      var mapped = arrayMap(arrays, castArrayLikeObject);
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped)
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `iteratee`
		     * which is invoked for each element of each `arrays` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [2.1]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }]
		     */
		    var intersectionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      if (iteratee === last(mapped)) {
		        iteratee = undefined$1;
		      } else {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `comparator`
		     * which is invoked to compare elements of `arrays`. The order and references
		     * of result values are determined by the first array. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.intersectionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }]
		     */
		    var intersectionWith = baseRest(function(arrays) {
		      var comparator = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      if (comparator) {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Converts all elements in `array` into a string separated by `separator`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to convert.
		     * @param {string} [separator=','] The element separator.
		     * @returns {string} Returns the joined string.
		     * @example
		     *
		     * _.join(['a', 'b', 'c'], '~');
		     * // => 'a~b~c'
		     */
		    function join(array, separator) {
		      return array == null ? '' : nativeJoin.call(array, separator);
		    }

		    /**
		     * Gets the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the last element of `array`.
		     * @example
		     *
		     * _.last([1, 2, 3]);
		     * // => 3
		     */
		    function last(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? array[length - 1] : undefined$1;
		    }

		    /**
		     * This method is like `_.indexOf` except that it iterates over elements of
		     * `array` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.lastIndexOf([1, 2, 1, 2], 2);
		     * // => 3
		     *
		     * // Search from the `fromIndex`.
		     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
		     * // => 1
		     */
		    function lastIndexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
		      }
		      return value === value
		        ? strictLastIndexOf(array, value, index)
		        : baseFindIndex(array, baseIsNaN, index, true);
		    }

		    /**
		     * Gets the element at index `n` of `array`. If `n` is negative, the nth
		     * element from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.11.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=0] The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     *
		     * _.nth(array, 1);
		     * // => 'b'
		     *
		     * _.nth(array, -2);
		     * // => 'c';
		     */
		    function nth(array, n) {
		      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
		    }

		    /**
		     * Removes all given values from `array` using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
		     * to remove elements from an array by predicate.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...*} [values] The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pull(array, 'a', 'c');
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    var pull = baseRest(pullAll);

		    /**
		     * This method is like `_.pull` except that it accepts an array of values to remove.
		     *
		     * **Note:** Unlike `_.difference`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pullAll(array, ['a', 'c']);
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    function pullAll(array, values) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values)
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `iteratee` which is
		     * invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The iteratee is invoked with one argument: (value).
		     *
		     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
		     *
		     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
		     * console.log(array);
		     * // => [{ 'x': 2 }]
		     */
		    function pullAllBy(array, values, iteratee) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, getIteratee(iteratee, 2))
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `comparator` which
		     * is invoked to compare elements of `array` to `values`. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
		     *
		     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
		     * console.log(array);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
		     */
		    function pullAllWith(array, values, comparator) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, undefined$1, comparator)
		        : array;
		    }

		    /**
		     * Removes elements from `array` corresponding to `indexes` and returns an
		     * array of removed elements.
		     *
		     * **Note:** Unlike `_.at`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     * var pulled = _.pullAt(array, [1, 3]);
		     *
		     * console.log(array);
		     * // => ['a', 'c']
		     *
		     * console.log(pulled);
		     * // => ['b', 'd']
		     */
		    var pullAt = flatRest(function(array, indexes) {
		      var length = array == null ? 0 : array.length,
		          result = baseAt(array, indexes);

		      basePullAt(array, arrayMap(indexes, function(index) {
		        return isIndex(index, length) ? +index : index;
		      }).sort(compareAscending));

		      return result;
		    });

		    /**
		     * Removes all elements from `array` that `predicate` returns truthy for
		     * and returns an array of the removed elements. The predicate is invoked
		     * with three arguments: (value, index, array).
		     *
		     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
		     * to pull elements from an array by value.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = [1, 2, 3, 4];
		     * var evens = _.remove(array, function(n) {
		     *   return n % 2 == 0;
		     * });
		     *
		     * console.log(array);
		     * // => [1, 3]
		     *
		     * console.log(evens);
		     * // => [2, 4]
		     */
		    function remove(array, predicate) {
		      var result = [];
		      if (!(array && array.length)) {
		        return result;
		      }
		      var index = -1,
		          indexes = [],
		          length = array.length;

		      predicate = getIteratee(predicate, 3);
		      while (++index < length) {
		        var value = array[index];
		        if (predicate(value, index, array)) {
		          result.push(value);
		          indexes.push(index);
		        }
		      }
		      basePullAt(array, indexes);
		      return result;
		    }

		    /**
		     * Reverses `array` so that the first element becomes the last, the second
		     * element becomes the second to last, and so on.
		     *
		     * **Note:** This method mutates `array` and is based on
		     * [`Array#reverse`](https://mdn.io/Array/reverse).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.reverse(array);
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function reverse(array) {
		      return array == null ? array : nativeReverse.call(array);
		    }

		    /**
		     * Creates a slice of `array` from `start` up to, but not including, `end`.
		     *
		     * **Note:** This method is used instead of
		     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
		     * returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function slice(array, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
		        start = 0;
		        end = length;
		      }
		      else {
		        start = start == null ? 0 : toInteger(start);
		        end = end === undefined$1 ? length : toInteger(end);
		      }
		      return baseSlice(array, start, end);
		    }

		    /**
		     * Uses a binary search to determine the lowest index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedIndex([30, 50], 40);
		     * // => 1
		     */
		    function sortedIndex(array, value) {
		      return baseSortedIndex(array, value);
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 0
		     */
		    function sortedIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
		    }

		    /**
		     * This method is like `_.indexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 1
		     */
		    function sortedIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value);
		        if (index < length && eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it returns the highest
		     * index at which `value` should be inserted into `array` in order to
		     * maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
		     * // => 4
		     */
		    function sortedLastIndex(array, value) {
		      return baseSortedIndex(array, value, true);
		    }

		    /**
		     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 1
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 1
		     */
		    function sortedLastIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
		    }

		    /**
		     * This method is like `_.lastIndexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 3
		     */
		    function sortedLastIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value, true) - 1;
		        if (eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.uniq` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniq([1, 1, 2]);
		     * // => [1, 2]
		     */
		    function sortedUniq(array) {
		      return (array && array.length)
		        ? baseSortedUniq(array)
		        : [];
		    }

		    /**
		     * This method is like `_.uniqBy` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
		     * // => [1.1, 2.3]
		     */
		    function sortedUniqBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSortedUniq(array, getIteratee(iteratee, 2))
		        : [];
		    }

		    /**
		     * Gets all but the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.tail([1, 2, 3]);
		     * // => [2, 3]
		     */
		    function tail(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 1, length) : [];
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.take([1, 2, 3]);
		     * // => [1]
		     *
		     * _.take([1, 2, 3], 2);
		     * // => [1, 2]
		     *
		     * _.take([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.take([1, 2, 3], 0);
		     * // => []
		     */
		    function take(array, n, guard) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.takeRight([1, 2, 3]);
		     * // => [3]
		     *
		     * _.takeRight([1, 2, 3], 2);
		     * // => [2, 3]
		     *
		     * _.takeRight([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.takeRight([1, 2, 3], 0);
		     * // => []
		     */
		    function takeRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the end. Elements are
		     * taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.takeRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeRightWhile(users, ['active', false]);
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeRightWhile(users, 'active');
		     * // => []
		     */
		    function takeRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), false, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the beginning. Elements
		     * are taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.takeWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeWhile(users, ['active', false]);
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeWhile(users, 'active');
		     * // => []
		     */
		    function takeWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3))
		        : [];
		    }

		    /**
		     * Creates an array of unique values, in order, from all given arrays using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.union([2], [1, 2]);
		     * // => [2, 1]
		     */
		    var union = baseRest(function(arrays) {
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which uniqueness is computed. Result values are chosen from the first
		     * array in which the value occurs. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    var unionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `comparator` which
		     * is invoked to compare elements of `arrays`. Result values are chosen from
		     * the first array in which the value occurs. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.unionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var unionWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
		    });

		    /**
		     * Creates a duplicate-free version of an array, using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons, in which only the first occurrence of each element
		     * is kept. The order of result values is determined by the order they occur
		     * in the array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniq([2, 1, 2]);
		     * // => [2, 1]
		     */
		    function uniq(array) {
		      return (array && array.length) ? baseUniq(array) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * uniqueness is computed. The order of result values is determined by the
		     * order they occur in the array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    function uniqBy(array, iteratee) {
		      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `comparator` which
		     * is invoked to compare elements of `array`. The order of result values is
		     * determined by the order they occur in the array.The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.uniqWith(objects, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
		     */
		    function uniqWith(array, comparator) {
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
		    }

		    /**
		     * This method is like `_.zip` except that it accepts an array of grouped
		     * elements and creates an array regrouping the elements to their pre-zip
		     * configuration.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.2.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     *
		     * _.unzip(zipped);
		     * // => [['a', 'b'], [1, 2], [true, false]]
		     */
		    function unzip(array) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var length = 0;
		      array = arrayFilter(array, function(group) {
		        if (isArrayLikeObject(group)) {
		          length = nativeMax(group.length, length);
		          return true;
		        }
		      });
		      return baseTimes(length, function(index) {
		        return arrayMap(array, baseProperty(index));
		      });
		    }

		    /**
		     * This method is like `_.unzip` except that it accepts `iteratee` to specify
		     * how regrouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  regrouped values.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
		     * // => [[1, 10, 100], [2, 20, 200]]
		     *
		     * _.unzipWith(zipped, _.add);
		     * // => [3, 30, 300]
		     */
		    function unzipWith(array, iteratee) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var result = unzip(array);
		      if (iteratee == null) {
		        return result;
		      }
		      return arrayMap(result, function(group) {
		        return apply(iteratee, undefined$1, group);
		      });
		    }

		    /**
		     * Creates an array excluding all given values using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.pull`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...*} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.xor
		     * @example
		     *
		     * _.without([2, 1, 2, 3], 1, 2);
		     * // => [3]
		     */
		    var without = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, values)
		        : [];
		    });

		    /**
		     * Creates an array of unique values that is the
		     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
		     * of the given arrays. The order of result values is determined by the order
		     * they occur in the arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.without
		     * @example
		     *
		     * _.xor([2, 1], [2, 3]);
		     * // => [1, 3]
		     */
		    var xor = baseRest(function(arrays) {
		      return baseXor(arrayFilter(arrays, isArrayLikeObject));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which by which they're compared. The order of result values is determined
		     * by the order they occur in the arrays. The iteratee is invoked with one
		     * argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2, 3.4]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var xorBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `comparator` which is
		     * invoked to compare elements of `arrays`. The order of result values is
		     * determined by the order they occur in the arrays. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.xorWith(objects, others, _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var xorWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
		    });

		    /**
		     * Creates an array of grouped elements, the first of which contains the
		     * first elements of the given arrays, the second of which contains the
		     * second elements of the given arrays, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     */
		    var zip = baseRest(unzip);

		    /**
		     * This method is like `_.fromPairs` except that it accepts two arrays,
		     * one of property identifiers and one of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.4.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObject(['a', 'b'], [1, 2]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function zipObject(props, values) {
		      return baseZipObject(props || [], values || [], assignValue);
		    }

		    /**
		     * This method is like `_.zipObject` except that it supports property paths.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
		     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
		     */
		    function zipObjectDeep(props, values) {
		      return baseZipObject(props || [], values || [], baseSet);
		    }

		    /**
		     * This method is like `_.zip` except that it accepts `iteratee` to specify
		     * how grouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  grouped values.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
		     *   return a + b + c;
		     * });
		     * // => [111, 222]
		     */
		    var zipWith = baseRest(function(arrays) {
		      var length = arrays.length,
		          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

		      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
		      return unzipWith(arrays, iteratee);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
		     * chain sequences enabled. The result of such sequences must be unwrapped
		     * with `_#value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Seq
		     * @param {*} value The value to wrap.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36 },
		     *   { 'user': 'fred',    'age': 40 },
		     *   { 'user': 'pebbles', 'age': 1 }
		     * ];
		     *
		     * var youngest = _
		     *   .chain(users)
		     *   .sortBy('age')
		     *   .map(function(o) {
		     *     return o.user + ' is ' + o.age;
		     *   })
		     *   .head()
		     *   .value();
		     * // => 'pebbles is 1'
		     */
		    function chain(value) {
		      var result = lodash(value);
		      result.__chain__ = true;
		      return result;
		    }

		    /**
		     * This method invokes `interceptor` and returns `value`. The interceptor
		     * is invoked with one argument; (value). The purpose of this method is to
		     * "tap into" a method chain sequence in order to modify intermediate results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * _([1, 2, 3])
		     *  .tap(function(array) {
		     *    // Mutate input array.
		     *    array.pop();
		     *  })
		     *  .reverse()
		     *  .value();
		     * // => [2, 1]
		     */
		    function tap(value, interceptor) {
		      interceptor(value);
		      return value;
		    }

		    /**
		     * This method is like `_.tap` except that it returns the result of `interceptor`.
		     * The purpose of this method is to "pass thru" values replacing intermediate
		     * results in a method chain sequence.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns the result of `interceptor`.
		     * @example
		     *
		     * _('  abc  ')
		     *  .chain()
		     *  .trim()
		     *  .thru(function(value) {
		     *    return [value];
		     *  })
		     *  .value();
		     * // => ['abc']
		     */
		    function thru(value, interceptor) {
		      return interceptor(value);
		    }

		    /**
		     * This method is the wrapper version of `_.at`.
		     *
		     * @name at
		     * @memberOf _
		     * @since 1.0.0
		     * @category Seq
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _(object).at(['a[0].b.c', 'a[1]']).value();
		     * // => [3, 4]
		     */
		    var wrapperAt = flatRest(function(paths) {
		      var length = paths.length,
		          start = length ? paths[0] : 0,
		          value = this.__wrapped__,
		          interceptor = function(object) { return baseAt(object, paths); };

		      if (length > 1 || this.__actions__.length ||
		          !(value instanceof LazyWrapper) || !isIndex(start)) {
		        return this.thru(interceptor);
		      }
		      value = value.slice(start, +start + (length ? 1 : 0));
		      value.__actions__.push({
		        'func': thru,
		        'args': [interceptor],
		        'thisArg': undefined$1
		      });
		      return new LodashWrapper(value, this.__chain__).thru(function(array) {
		        if (length && !array.length) {
		          array.push(undefined$1);
		        }
		        return array;
		      });
		    });

		    /**
		     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
		     *
		     * @name chain
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 40 }
		     * ];
		     *
		     * // A sequence without explicit chaining.
		     * _(users).head();
		     * // => { 'user': 'barney', 'age': 36 }
		     *
		     * // A sequence with explicit chaining.
		     * _(users)
		     *   .chain()
		     *   .head()
		     *   .pick('user')
		     *   .value();
		     * // => { 'user': 'barney' }
		     */
		    function wrapperChain() {
		      return chain(this);
		    }

		    /**
		     * Executes the chain sequence and returns the wrapped result.
		     *
		     * @name commit
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2];
		     * var wrapped = _(array).push(3);
		     *
		     * console.log(array);
		     * // => [1, 2]
		     *
		     * wrapped = wrapped.commit();
		     * console.log(array);
		     * // => [1, 2, 3]
		     *
		     * wrapped.last();
		     * // => 3
		     *
		     * console.log(array);
		     * // => [1, 2, 3]
		     */
		    function wrapperCommit() {
		      return new LodashWrapper(this.value(), this.__chain__);
		    }

		    /**
		     * Gets the next value on a wrapped object following the
		     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
		     *
		     * @name next
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the next iterator value.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 1 }
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 2 }
		     *
		     * wrapped.next();
		     * // => { 'done': true, 'value': undefined }
		     */
		    function wrapperNext() {
		      if (this.__values__ === undefined$1) {
		        this.__values__ = toArray(this.value());
		      }
		      var done = this.__index__ >= this.__values__.length,
		          value = done ? undefined$1 : this.__values__[this.__index__++];

		      return { 'done': done, 'value': value };
		    }

		    /**
		     * Enables the wrapper to be iterable.
		     *
		     * @name Symbol.iterator
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the wrapper object.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped[Symbol.iterator]() === wrapped;
		     * // => true
		     *
		     * Array.from(wrapped);
		     * // => [1, 2]
		     */
		    function wrapperToIterator() {
		      return this;
		    }

		    /**
		     * Creates a clone of the chain sequence planting `value` as the wrapped value.
		     *
		     * @name plant
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @param {*} value The value to plant.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2]).map(square);
		     * var other = wrapped.plant([3, 4]);
		     *
		     * other.value();
		     * // => [9, 16]
		     *
		     * wrapped.value();
		     * // => [1, 4]
		     */
		    function wrapperPlant(value) {
		      var result,
		          parent = this;

		      while (parent instanceof baseLodash) {
		        var clone = wrapperClone(parent);
		        clone.__index__ = 0;
		        clone.__values__ = undefined$1;
		        if (result) {
		          previous.__wrapped__ = clone;
		        } else {
		          result = clone;
		        }
		        var previous = clone;
		        parent = parent.__wrapped__;
		      }
		      previous.__wrapped__ = value;
		      return result;
		    }

		    /**
		     * This method is the wrapper version of `_.reverse`.
		     *
		     * **Note:** This method mutates the wrapped array.
		     *
		     * @name reverse
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _(array).reverse().value()
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function wrapperReverse() {
		      var value = this.__wrapped__;
		      if (value instanceof LazyWrapper) {
		        var wrapped = value;
		        if (this.__actions__.length) {
		          wrapped = new LazyWrapper(this);
		        }
		        wrapped = wrapped.reverse();
		        wrapped.__actions__.push({
		          'func': thru,
		          'args': [reverse],
		          'thisArg': undefined$1
		        });
		        return new LodashWrapper(wrapped, this.__chain__);
		      }
		      return this.thru(reverse);
		    }

		    /**
		     * Executes the chain sequence to resolve the unwrapped value.
		     *
		     * @name value
		     * @memberOf _
		     * @since 0.1.0
		     * @alias toJSON, valueOf
		     * @category Seq
		     * @returns {*} Returns the resolved unwrapped value.
		     * @example
		     *
		     * _([1, 2, 3]).value();
		     * // => [1, 2, 3]
		     */
		    function wrapperValue() {
		      return baseWrapperValue(this.__wrapped__, this.__actions__);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the number of times the key was returned by `iteratee`. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.countBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': 1, '6': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.countBy(['one', 'two', 'three'], 'length');
		     * // => { '3': 2, '5': 1 }
		     */
		    var countBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        ++result[key];
		      } else {
		        baseAssignValue(result, key, 1);
		      }
		    });

		    /**
		     * Checks if `predicate` returns truthy for **all** elements of `collection`.
		     * Iteration is stopped once `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * **Note:** This method returns `true` for
		     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
		     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
		     * elements of empty collections.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.every([true, 1, null, 'yes'], Boolean);
		     * // => false
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.every(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.every(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.every(users, 'active');
		     * // => false
		     */
		    function every(collection, predicate, guard) {
		      var func = isArray(collection) ? arrayEvery : baseEvery;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning an array of all elements
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * **Note:** Unlike `_.remove`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.reject
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * _.filter(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, { 'age': 36, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.filter(users, 'active');
		     * // => objects for ['barney']
		     *
		     * // Combining several predicates using `_.overEvery` or `_.overSome`.
		     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
		     * // => objects for ['fred', 'barney']
		     */
		    function filter(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning the first element
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': true },
		     *   { 'user': 'fred',    'age': 40, 'active': false },
		     *   { 'user': 'pebbles', 'age': 1,  'active': true }
		     * ];
		     *
		     * _.find(users, function(o) { return o.age < 40; });
		     * // => object for 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.find(users, { 'age': 1, 'active': true });
		     * // => object for 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.find(users, ['active', false]);
		     * // => object for 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.find(users, 'active');
		     * // => object for 'barney'
		     */
		    var find = createFind(findIndex);

		    /**
		     * This method is like `_.find` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=collection.length-1] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * _.findLast([1, 2, 3, 4], function(n) {
		     *   return n % 2 == 1;
		     * });
		     * // => 3
		     */
		    var findLast = createFind(findLastIndex);

		    /**
		     * Creates a flattened array of values by running each element in `collection`
		     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
		     * with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [n, n];
		     * }
		     *
		     * _.flatMap([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMap(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), 1);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDeep([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMapDeep(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), INFINITY);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDepth([1, 2], duplicate, 2);
		     * // => [[1, 1], [2, 2]]
		     */
		    function flatMapDepth(collection, iteratee, depth) {
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(map(collection, iteratee), depth);
		    }

		    /**
		     * Iterates over elements of `collection` and invokes `iteratee` for each element.
		     * The iteratee is invoked with three arguments: (value, index|key, collection).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * **Note:** As with other "Collections" methods, objects with a "length"
		     * property are iterated like arrays. To avoid this behavior use `_.forIn`
		     * or `_.forOwn` for object iteration.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias each
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEachRight
		     * @example
		     *
		     * _.forEach([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `1` then `2`.
		     *
		     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forEach(collection, iteratee) {
		      var func = isArray(collection) ? arrayEach : baseEach;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forEach` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @alias eachRight
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEach
		     * @example
		     *
		     * _.forEachRight([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `2` then `1`.
		     */
		    function forEachRight(collection, iteratee) {
		      var func = isArray(collection) ? arrayEachRight : baseEachRight;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The order of grouped values
		     * is determined by the order they occur in `collection`. The corresponding
		     * value of each key is an array of elements responsible for generating the
		     * key. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': [4.2], '6': [6.1, 6.3] }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.groupBy(['one', 'two', 'three'], 'length');
		     * // => { '3': ['one', 'two'], '5': ['three'] }
		     */
		    var groupBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        result[key].push(value);
		      } else {
		        baseAssignValue(result, key, [value]);
		      }
		    });

		    /**
		     * Checks if `value` is in `collection`. If `collection` is a string, it's
		     * checked for a substring of `value`, otherwise
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * is used for equality comparisons. If `fromIndex` is negative, it's used as
		     * the offset from the end of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {boolean} Returns `true` if `value` is found, else `false`.
		     * @example
		     *
		     * _.includes([1, 2, 3], 1);
		     * // => true
		     *
		     * _.includes([1, 2, 3], 1, 2);
		     * // => false
		     *
		     * _.includes({ 'a': 1, 'b': 2 }, 1);
		     * // => true
		     *
		     * _.includes('abcd', 'bc');
		     * // => true
		     */
		    function includes(collection, value, fromIndex, guard) {
		      collection = isArrayLike(collection) ? collection : values(collection);
		      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

		      var length = collection.length;
		      if (fromIndex < 0) {
		        fromIndex = nativeMax(length + fromIndex, 0);
		      }
		      return isString(collection)
		        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
		        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
		    }

		    /**
		     * Invokes the method at `path` of each element in `collection`, returning
		     * an array of the results of each invoked method. Any additional arguments
		     * are provided to each invoked method. If `path` is a function, it's invoked
		     * for, and `this` bound to, each element in `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array|Function|string} path The path of the method to invoke or
		     *  the function invoked per iteration.
		     * @param {...*} [args] The arguments to invoke each method with.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
		     * // => [[1, 5, 7], [1, 2, 3]]
		     *
		     * _.invokeMap([123, 456], String.prototype.split, '');
		     * // => [['1', '2', '3'], ['4', '5', '6']]
		     */
		    var invokeMap = baseRest(function(collection, path, args) {
		      var index = -1,
		          isFunc = typeof path == 'function',
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value) {
		        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
		      });
		      return result;
		    });

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the last element responsible for generating the key. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * var array = [
		     *   { 'dir': 'left', 'code': 97 },
		     *   { 'dir': 'right', 'code': 100 }
		     * ];
		     *
		     * _.keyBy(array, function(o) {
		     *   return String.fromCharCode(o.code);
		     * });
		     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
		     *
		     * _.keyBy(array, 'dir');
		     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
		     */
		    var keyBy = createAggregator(function(result, value, key) {
		      baseAssignValue(result, key, value);
		    });

		    /**
		     * Creates an array of values by running each element in `collection` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
		     *
		     * The guarded methods are:
		     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
		     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
		     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
		     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * _.map([4, 8], square);
		     * // => [16, 64]
		     *
		     * _.map({ 'a': 4, 'b': 8 }, square);
		     * // => [16, 64] (iteration order is not guaranteed)
		     *
		     * var users = [
		     *   { 'user': 'barney' },
		     *   { 'user': 'fred' }
		     * ];
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, 'user');
		     * // => ['barney', 'fred']
		     */
		    function map(collection, iteratee) {
		      var func = isArray(collection) ? arrayMap : baseMap;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.sortBy` except that it allows specifying the sort
		     * orders of the iteratees to sort by. If `orders` is unspecified, all values
		     * are sorted in ascending order. Otherwise, specify an order of "desc" for
		     * descending or "asc" for ascending sort order of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @param {string[]} [orders] The sort orders of `iteratees`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 34 },
		     *   { 'user': 'fred',   'age': 40 },
		     *   { 'user': 'barney', 'age': 36 }
		     * ];
		     *
		     * // Sort by `user` in ascending order and by `age` in descending order.
		     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
		     */
		    function orderBy(collection, iteratees, orders, guard) {
		      if (collection == null) {
		        return [];
		      }
		      if (!isArray(iteratees)) {
		        iteratees = iteratees == null ? [] : [iteratees];
		      }
		      orders = guard ? undefined$1 : orders;
		      if (!isArray(orders)) {
		        orders = orders == null ? [] : [orders];
		      }
		      return baseOrderBy(collection, iteratees, orders);
		    }

		    /**
		     * Creates an array of elements split into two groups, the first of which
		     * contains elements `predicate` returns truthy for, the second of which
		     * contains elements `predicate` returns falsey for. The predicate is
		     * invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of grouped elements.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': false },
		     *   { 'user': 'fred',    'age': 40, 'active': true },
		     *   { 'user': 'pebbles', 'age': 1,  'active': false }
		     * ];
		     *
		     * _.partition(users, function(o) { return o.active; });
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.partition(users, { 'age': 1, 'active': false });
		     * // => objects for [['pebbles'], ['barney', 'fred']]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.partition(users, ['active', false]);
		     * // => objects for [['barney', 'pebbles'], ['fred']]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.partition(users, 'active');
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     */
		    var partition = createAggregator(function(result, value, key) {
		      result[key ? 0 : 1].push(value);
		    }, function() { return [[], []]; });

		    /**
		     * Reduces `collection` to a value which is the accumulated result of running
		     * each element in `collection` thru `iteratee`, where each successive
		     * invocation is supplied the return value of the previous. If `accumulator`
		     * is not given, the first element of `collection` is used as the initial
		     * value. The iteratee is invoked with four arguments:
		     * (accumulator, value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.reduce`, `_.reduceRight`, and `_.transform`.
		     *
		     * The guarded methods are:
		     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
		     * and `sortBy`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduceRight
		     * @example
		     *
		     * _.reduce([1, 2], function(sum, n) {
		     *   return sum + n;
		     * }, 0);
		     * // => 3
		     *
		     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     *   return result;
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
		     */
		    function reduce(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduce : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
		    }

		    /**
		     * This method is like `_.reduce` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduce
		     * @example
		     *
		     * var array = [[0, 1], [2, 3], [4, 5]];
		     *
		     * _.reduceRight(array, function(flattened, other) {
		     *   return flattened.concat(other);
		     * }, []);
		     * // => [4, 5, 2, 3, 0, 1]
		     */
		    function reduceRight(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduceRight : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
		    }

		    /**
		     * The opposite of `_.filter`; this method returns the elements of `collection`
		     * that `predicate` does **not** return truthy for.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.filter
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': true }
		     * ];
		     *
		     * _.reject(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.reject(users, { 'age': 40, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.reject(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.reject(users, 'active');
		     * // => objects for ['barney']
		     */
		    function reject(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, negate(getIteratee(predicate, 3)));
		    }

		    /**
		     * Gets a random element from `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     * @example
		     *
		     * _.sample([1, 2, 3, 4]);
		     * // => 2
		     */
		    function sample(collection) {
		      var func = isArray(collection) ? arraySample : baseSample;
		      return func(collection);
		    }

		    /**
		     * Gets `n` random elements at unique keys from `collection` up to the
		     * size of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} [n=1] The number of elements to sample.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the random elements.
		     * @example
		     *
		     * _.sampleSize([1, 2, 3], 2);
		     * // => [3, 1]
		     *
		     * _.sampleSize([1, 2, 3], 4);
		     * // => [2, 3, 1]
		     */
		    function sampleSize(collection, n, guard) {
		      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
		      return func(collection, n);
		    }

		    /**
		     * Creates an array of shuffled values, using a version of the
		     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     * @example
		     *
		     * _.shuffle([1, 2, 3, 4]);
		     * // => [4, 1, 3, 2]
		     */
		    function shuffle(collection) {
		      var func = isArray(collection) ? arrayShuffle : baseShuffle;
		      return func(collection);
		    }

		    /**
		     * Gets the size of `collection` by returning its length for array-like
		     * values or the number of own enumerable string keyed properties for objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @returns {number} Returns the collection size.
		     * @example
		     *
		     * _.size([1, 2, 3]);
		     * // => 3
		     *
		     * _.size({ 'a': 1, 'b': 2 });
		     * // => 2
		     *
		     * _.size('pebbles');
		     * // => 7
		     */
		    function size(collection) {
		      if (collection == null) {
		        return 0;
		      }
		      if (isArrayLike(collection)) {
		        return isString(collection) ? stringSize(collection) : collection.length;
		      }
		      var tag = getTag(collection);
		      if (tag == mapTag || tag == setTag) {
		        return collection.size;
		      }
		      return baseKeys(collection).length;
		    }

		    /**
		     * Checks if `predicate` returns truthy for **any** element of `collection`.
		     * Iteration is stopped once `predicate` returns truthy. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.some([null, 0, 'yes', false], Boolean);
		     * // => true
		     *
		     * var users = [
		     *   { 'user': 'barney', 'active': true },
		     *   { 'user': 'fred',   'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.some(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.some(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.some(users, 'active');
		     * // => true
		     */
		    function some(collection, predicate, guard) {
		      var func = isArray(collection) ? arraySome : baseSome;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Creates an array of elements, sorted in ascending order by the results of
		     * running each element in a collection thru each iteratee. This method
		     * performs a stable sort, that is, it preserves the original sort order of
		     * equal elements. The iteratees are invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 30 },
		     *   { 'user': 'barney', 'age': 34 }
		     * ];
		     *
		     * _.sortBy(users, [function(o) { return o.user; }]);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
		     *
		     * _.sortBy(users, ['user', 'age']);
		     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
		     */
		    var sortBy = baseRest(function(collection, iteratees) {
		      if (collection == null) {
		        return [];
		      }
		      var length = iteratees.length;
		      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
		        iteratees = [];
		      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
		        iteratees = [iteratees[0]];
		      }
		      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Gets the timestamp of the number of milliseconds that have elapsed since
		     * the Unix epoch (1 January 1970 00:00:00 UTC).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Date
		     * @returns {number} Returns the timestamp.
		     * @example
		     *
		     * _.defer(function(stamp) {
		     *   console.log(_.now() - stamp);
		     * }, _.now());
		     * // => Logs the number of milliseconds it took for the deferred invocation.
		     */
		    var now = ctxNow || function() {
		      return root.Date.now();
		    };

		    /*------------------------------------------------------------------------*/

		    /**
		     * The opposite of `_.before`; this method creates a function that invokes
		     * `func` once it's called `n` or more times.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {number} n The number of calls before `func` is invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var saves = ['profile', 'settings'];
		     *
		     * var done = _.after(saves.length, function() {
		     *   console.log('done saving!');
		     * });
		     *
		     * _.forEach(saves, function(type) {
		     *   asyncSave({ 'type': type, 'complete': done });
		     * });
		     * // => Logs 'done saving!' after the two async saves have completed.
		     */
		    function after(n, func) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n < 1) {
		          return func.apply(this, arguments);
		        }
		      };
		    }

		    /**
		     * Creates a function that invokes `func`, with up to `n` arguments,
		     * ignoring any additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @param {number} [n=func.length] The arity cap.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
		     * // => [6, 8, 10]
		     */
		    function ary(func, n, guard) {
		      n = guard ? undefined$1 : n;
		      n = (func && n == null) ? func.length : n;
		      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
		    }

		    /**
		     * Creates a function that invokes `func`, with the `this` binding and arguments
		     * of the created function, while it's called less than `n` times. Subsequent
		     * calls to the created function return the result of the last `func` invocation.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {number} n The number of calls at which `func` is no longer invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * jQuery(element).on('click', _.before(5, addContactToList));
		     * // => Allows adding up to 4 contacts to the list.
		     */
		    function before(n, func) {
		      var result;
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n > 0) {
		          result = func.apply(this, arguments);
		        }
		        if (n <= 1) {
		          func = undefined$1;
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of `thisArg`
		     * and `partials` prepended to the arguments it receives.
		     *
		     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
		     * property of bound functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to bind.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * function greet(greeting, punctuation) {
		     *   return greeting + ' ' + this.user + punctuation;
		     * }
		     *
		     * var object = { 'user': 'fred' };
		     *
		     * var bound = _.bind(greet, object, 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bind(greet, object, _, '!');
		     * bound('hi');
		     * // => 'hi fred!'
		     */
		    var bind = baseRest(function(func, thisArg, partials) {
		      var bitmask = WRAP_BIND_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bind));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(func, bitmask, thisArg, partials, holders);
		    });

		    /**
		     * Creates a function that invokes the method at `object[key]` with `partials`
		     * prepended to the arguments it receives.
		     *
		     * This method differs from `_.bind` by allowing bound functions to reference
		     * methods that may be redefined or don't yet exist. See
		     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
		     * for more details.
		     *
		     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Function
		     * @param {Object} object The object to invoke the method on.
		     * @param {string} key The key of the method.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * var object = {
		     *   'user': 'fred',
		     *   'greet': function(greeting, punctuation) {
		     *     return greeting + ' ' + this.user + punctuation;
		     *   }
		     * };
		     *
		     * var bound = _.bindKey(object, 'greet', 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * object.greet = function(greeting, punctuation) {
		     *   return greeting + 'ya ' + this.user + punctuation;
		     * };
		     *
		     * bound('!');
		     * // => 'hiya fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bindKey(object, 'greet', _, '!');
		     * bound('hi');
		     * // => 'hiya fred!'
		     */
		    var bindKey = baseRest(function(object, key, partials) {
		      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bindKey));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(key, bitmask, object, partials, holders);
		    });

		    /**
		     * Creates a function that accepts arguments of `func` and either invokes
		     * `func` returning its result, if at least `arity` number of arguments have
		     * been provided, or returns a function that accepts the remaining `func`
		     * arguments, and so on. The arity of `func` may be specified if `func.length`
		     * is not sufficient.
		     *
		     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curry(abc);
		     *
		     * curried(1)(2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(1)(_, 3)(2);
		     * // => [1, 2, 3]
		     */
		    function curry(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curry.placeholder;
		      return result;
		    }

		    /**
		     * This method is like `_.curry` except that arguments are applied to `func`
		     * in the manner of `_.partialRight` instead of `_.partial`.
		     *
		     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curryRight(abc);
		     *
		     * curried(3)(2)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(2, 3)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(3)(1, _)(2);
		     * // => [1, 2, 3]
		     */
		    function curryRight(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curryRight.placeholder;
		      return result;
		    }

		    /**
		     * Creates a debounced function that delays invoking `func` until after `wait`
		     * milliseconds have elapsed since the last time the debounced function was
		     * invoked. The debounced function comes with a `cancel` method to cancel
		     * delayed `func` invocations and a `flush` method to immediately invoke them.
		     * Provide `options` to indicate whether `func` should be invoked on the
		     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
		     * with the last arguments provided to the debounced function. Subsequent
		     * calls to the debounced function return the result of the last `func`
		     * invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the debounced function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.debounce` and `_.throttle`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to debounce.
		     * @param {number} [wait=0] The number of milliseconds to delay.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=false]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {number} [options.maxWait]
		     *  The maximum time `func` is allowed to be delayed before it's invoked.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new debounced function.
		     * @example
		     *
		     * // Avoid costly calculations while the window size is in flux.
		     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		     *
		     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
		     * jQuery(element).on('click', _.debounce(sendMail, 300, {
		     *   'leading': true,
		     *   'trailing': false
		     * }));
		     *
		     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
		     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
		     * var source = new EventSource('/stream');
		     * jQuery(source).on('message', debounced);
		     *
		     * // Cancel the trailing debounced invocation.
		     * jQuery(window).on('popstate', debounced.cancel);
		     */
		    function debounce(func, wait, options) {
		      var lastArgs,
		          lastThis,
		          maxWait,
		          result,
		          timerId,
		          lastCallTime,
		          lastInvokeTime = 0,
		          leading = false,
		          maxing = false,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      wait = toNumber(wait) || 0;
		      if (isObject(options)) {
		        leading = !!options.leading;
		        maxing = 'maxWait' in options;
		        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }

		      function invokeFunc(time) {
		        var args = lastArgs,
		            thisArg = lastThis;

		        lastArgs = lastThis = undefined$1;
		        lastInvokeTime = time;
		        result = func.apply(thisArg, args);
		        return result;
		      }

		      function leadingEdge(time) {
		        // Reset any `maxWait` timer.
		        lastInvokeTime = time;
		        // Start the timer for the trailing edge.
		        timerId = setTimeout(timerExpired, wait);
		        // Invoke the leading edge.
		        return leading ? invokeFunc(time) : result;
		      }

		      function remainingWait(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime,
		            timeWaiting = wait - timeSinceLastCall;

		        return maxing
		          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
		          : timeWaiting;
		      }

		      function shouldInvoke(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime;

		        // Either this is the first call, activity has stopped and we're at the
		        // trailing edge, the system time has gone backwards and we're treating
		        // it as the trailing edge, or we've hit the `maxWait` limit.
		        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
		          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
		      }

		      function timerExpired() {
		        var time = now();
		        if (shouldInvoke(time)) {
		          return trailingEdge(time);
		        }
		        // Restart the timer.
		        timerId = setTimeout(timerExpired, remainingWait(time));
		      }

		      function trailingEdge(time) {
		        timerId = undefined$1;

		        // Only invoke if we have `lastArgs` which means `func` has been
		        // debounced at least once.
		        if (trailing && lastArgs) {
		          return invokeFunc(time);
		        }
		        lastArgs = lastThis = undefined$1;
		        return result;
		      }

		      function cancel() {
		        if (timerId !== undefined$1) {
		          clearTimeout(timerId);
		        }
		        lastInvokeTime = 0;
		        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
		      }

		      function flush() {
		        return timerId === undefined$1 ? result : trailingEdge(now());
		      }

		      function debounced() {
		        var time = now(),
		            isInvoking = shouldInvoke(time);

		        lastArgs = arguments;
		        lastThis = this;
		        lastCallTime = time;

		        if (isInvoking) {
		          if (timerId === undefined$1) {
		            return leadingEdge(lastCallTime);
		          }
		          if (maxing) {
		            // Handle invocations in a tight loop.
		            clearTimeout(timerId);
		            timerId = setTimeout(timerExpired, wait);
		            return invokeFunc(lastCallTime);
		          }
		        }
		        if (timerId === undefined$1) {
		          timerId = setTimeout(timerExpired, wait);
		        }
		        return result;
		      }
		      debounced.cancel = cancel;
		      debounced.flush = flush;
		      return debounced;
		    }

		    /**
		     * Defers invoking the `func` until the current call stack has cleared. Any
		     * additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to defer.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.defer(function(text) {
		     *   console.log(text);
		     * }, 'deferred');
		     * // => Logs 'deferred' after one millisecond.
		     */
		    var defer = baseRest(function(func, args) {
		      return baseDelay(func, 1, args);
		    });

		    /**
		     * Invokes `func` after `wait` milliseconds. Any additional arguments are
		     * provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.delay(function(text) {
		     *   console.log(text);
		     * }, 1000, 'later');
		     * // => Logs 'later' after one second.
		     */
		    var delay = baseRest(function(func, wait, args) {
		      return baseDelay(func, toNumber(wait) || 0, args);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments reversed.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to flip arguments for.
		     * @returns {Function} Returns the new flipped function.
		     * @example
		     *
		     * var flipped = _.flip(function() {
		     *   return _.toArray(arguments);
		     * });
		     *
		     * flipped('a', 'b', 'c', 'd');
		     * // => ['d', 'c', 'b', 'a']
		     */
		    function flip(func) {
		      return createWrap(func, WRAP_FLIP_FLAG);
		    }

		    /**
		     * Creates a function that memoizes the result of `func`. If `resolver` is
		     * provided, it determines the cache key for storing the result based on the
		     * arguments provided to the memoized function. By default, the first argument
		     * provided to the memoized function is used as the map cache key. The `func`
		     * is invoked with the `this` binding of the memoized function.
		     *
		     * **Note:** The cache is exposed as the `cache` property on the memoized
		     * function. Its creation may be customized by replacing the `_.memoize.Cache`
		     * constructor with one whose instances implement the
		     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
		     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to have its output memoized.
		     * @param {Function} [resolver] The function to resolve the cache key.
		     * @returns {Function} Returns the new memoized function.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     * var other = { 'c': 3, 'd': 4 };
		     *
		     * var values = _.memoize(_.values);
		     * values(object);
		     * // => [1, 2]
		     *
		     * values(other);
		     * // => [3, 4]
		     *
		     * object.a = 2;
		     * values(object);
		     * // => [1, 2]
		     *
		     * // Modify the result cache.
		     * values.cache.set(object, ['a', 'b']);
		     * values(object);
		     * // => ['a', 'b']
		     *
		     * // Replace `_.memoize.Cache`.
		     * _.memoize.Cache = WeakMap;
		     */
		    function memoize(func, resolver) {
		      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var memoized = function() {
		        var args = arguments,
		            key = resolver ? resolver.apply(this, args) : args[0],
		            cache = memoized.cache;

		        if (cache.has(key)) {
		          return cache.get(key);
		        }
		        var result = func.apply(this, args);
		        memoized.cache = cache.set(key, result) || cache;
		        return result;
		      };
		      memoized.cache = new (memoize.Cache || MapCache);
		      return memoized;
		    }

		    // Expose `MapCache`.
		    memoize.Cache = MapCache;

		    /**
		     * Creates a function that negates the result of the predicate `func`. The
		     * `func` predicate is invoked with the `this` binding and arguments of the
		     * created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} predicate The predicate to negate.
		     * @returns {Function} Returns the new negated function.
		     * @example
		     *
		     * function isEven(n) {
		     *   return n % 2 == 0;
		     * }
		     *
		     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
		     * // => [1, 3, 5]
		     */
		    function negate(predicate) {
		      if (typeof predicate != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return function() {
		        var args = arguments;
		        switch (args.length) {
		          case 0: return !predicate.call(this);
		          case 1: return !predicate.call(this, args[0]);
		          case 2: return !predicate.call(this, args[0], args[1]);
		          case 3: return !predicate.call(this, args[0], args[1], args[2]);
		        }
		        return !predicate.apply(this, args);
		      };
		    }

		    /**
		     * Creates a function that is restricted to invoking `func` once. Repeat calls
		     * to the function return the value of the first invocation. The `func` is
		     * invoked with the `this` binding and arguments of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var initialize = _.once(createApplication);
		     * initialize();
		     * initialize();
		     * // => `createApplication` is invoked once
		     */
		    function once(func) {
		      return before(2, func);
		    }

		    /**
		     * Creates a function that invokes `func` with its arguments transformed.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Function
		     * @param {Function} func The function to wrap.
		     * @param {...(Function|Function[])} [transforms=[_.identity]]
		     *  The argument transforms.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * function doubled(n) {
		     *   return n * 2;
		     * }
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var func = _.overArgs(function(x, y) {
		     *   return [x, y];
		     * }, [square, doubled]);
		     *
		     * func(9, 3);
		     * // => [81, 6]
		     *
		     * func(10, 5);
		     * // => [100, 10]
		     */
		    var overArgs = castRest(function(func, transforms) {
		      transforms = (transforms.length == 1 && isArray(transforms[0]))
		        ? arrayMap(transforms[0], baseUnary(getIteratee()))
		        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

		      var funcsLength = transforms.length;
		      return baseRest(function(args) {
		        var index = -1,
		            length = nativeMin(args.length, funcsLength);

		        while (++index < length) {
		          args[index] = transforms[index].call(this, args[index]);
		        }
		        return apply(func, this, args);
		      });
		    });

		    /**
		     * Creates a function that invokes `func` with `partials` prepended to the
		     * arguments it receives. This method is like `_.bind` except it does **not**
		     * alter the `this` binding.
		     *
		     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.2.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var sayHelloTo = _.partial(greet, 'hello');
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     *
		     * // Partially applied with placeholders.
		     * var greetFred = _.partial(greet, _, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     */
		    var partial = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partial));
		      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * This method is like `_.partial` except that partially applied arguments
		     * are appended to the arguments it receives.
		     *
		     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var greetFred = _.partialRight(greet, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     *
		     * // Partially applied with placeholders.
		     * var sayHelloTo = _.partialRight(greet, 'hello', _);
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     */
		    var partialRight = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partialRight));
		      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments arranged according
		     * to the specified `indexes` where the argument value at the first index is
		     * provided as the first argument, the argument value at the second index is
		     * provided as the second argument, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to rearrange arguments for.
		     * @param {...(number|number[])} indexes The arranged argument indexes.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var rearged = _.rearg(function(a, b, c) {
		     *   return [a, b, c];
		     * }, [2, 0, 1]);
		     *
		     * rearged('b', 'c', 'a')
		     * // => ['a', 'b', 'c']
		     */
		    var rearg = flatRest(function(func, indexes) {
		      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
		    });

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * created function and arguments from `start` and beyond provided as
		     * an array.
		     *
		     * **Note:** This method is based on the
		     * [rest parameter](https://mdn.io/rest_parameters).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.rest(function(what, names) {
		     *   return what + ' ' + _.initial(names).join(', ') +
		     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		     * });
		     *
		     * say('hello', 'fred', 'barney', 'pebbles');
		     * // => 'hello fred, barney, & pebbles'
		     */
		    function rest(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start === undefined$1 ? start : toInteger(start);
		      return baseRest(func, start);
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * create function and an array of arguments much like
		     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
		     *
		     * **Note:** This method is based on the
		     * [spread operator](https://mdn.io/spread_operator).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Function
		     * @param {Function} func The function to spread arguments over.
		     * @param {number} [start=0] The start position of the spread.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.spread(function(who, what) {
		     *   return who + ' says ' + what;
		     * });
		     *
		     * say(['fred', 'hello']);
		     * // => 'fred says hello'
		     *
		     * var numbers = Promise.all([
		     *   Promise.resolve(40),
		     *   Promise.resolve(36)
		     * ]);
		     *
		     * numbers.then(_.spread(function(x, y) {
		     *   return x + y;
		     * }));
		     * // => a Promise of 76
		     */
		    function spread(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start == null ? 0 : nativeMax(toInteger(start), 0);
		      return baseRest(function(args) {
		        var array = args[start],
		            otherArgs = castSlice(args, 0, start);

		        if (array) {
		          arrayPush(otherArgs, array);
		        }
		        return apply(func, this, otherArgs);
		      });
		    }

		    /**
		     * Creates a throttled function that only invokes `func` at most once per
		     * every `wait` milliseconds. The throttled function comes with a `cancel`
		     * method to cancel delayed `func` invocations and a `flush` method to
		     * immediately invoke them. Provide `options` to indicate whether `func`
		     * should be invoked on the leading and/or trailing edge of the `wait`
		     * timeout. The `func` is invoked with the last arguments provided to the
		     * throttled function. Subsequent calls to the throttled function return the
		     * result of the last `func` invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the throttled function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.throttle` and `_.debounce`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to throttle.
		     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=true]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new throttled function.
		     * @example
		     *
		     * // Avoid excessively updating the position while scrolling.
		     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		     *
		     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
		     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
		     * jQuery(element).on('click', throttled);
		     *
		     * // Cancel the trailing throttled invocation.
		     * jQuery(window).on('popstate', throttled.cancel);
		     */
		    function throttle(func, wait, options) {
		      var leading = true,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      if (isObject(options)) {
		        leading = 'leading' in options ? !!options.leading : leading;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }
		      return debounce(func, wait, {
		        'leading': leading,
		        'maxWait': wait,
		        'trailing': trailing
		      });
		    }

		    /**
		     * Creates a function that accepts up to one argument, ignoring any
		     * additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.unary(parseInt));
		     * // => [6, 8, 10]
		     */
		    function unary(func) {
		      return ary(func, 1);
		    }

		    /**
		     * Creates a function that provides `value` to `wrapper` as its first
		     * argument. Any additional arguments provided to the function are appended
		     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
		     * binding of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {*} value The value to wrap.
		     * @param {Function} [wrapper=identity] The wrapper function.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var p = _.wrap(_.escape, function(func, text) {
		     *   return '<p>' + func(text) + '</p>';
		     * });
		     *
		     * p('fred, barney, & pebbles');
		     * // => '<p>fred, barney, &amp; pebbles</p>'
		     */
		    function wrap(value, wrapper) {
		      return partial(castFunction(wrapper), value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Casts `value` as an array if it's not one.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Lang
		     * @param {*} value The value to inspect.
		     * @returns {Array} Returns the cast array.
		     * @example
		     *
		     * _.castArray(1);
		     * // => [1]
		     *
		     * _.castArray({ 'a': 1 });
		     * // => [{ 'a': 1 }]
		     *
		     * _.castArray('abc');
		     * // => ['abc']
		     *
		     * _.castArray(null);
		     * // => [null]
		     *
		     * _.castArray(undefined);
		     * // => [undefined]
		     *
		     * _.castArray();
		     * // => []
		     *
		     * var array = [1, 2, 3];
		     * console.log(_.castArray(array) === array);
		     * // => true
		     */
		    function castArray() {
		      if (!arguments.length) {
		        return [];
		      }
		      var value = arguments[0];
		      return isArray(value) ? value : [value];
		    }

		    /**
		     * Creates a shallow clone of `value`.
		     *
		     * **Note:** This method is loosely based on the
		     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
		     * and supports cloning arrays, array buffers, booleans, date objects, maps,
		     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
		     * arrays. The own enumerable properties of `arguments` objects are cloned
		     * as plain objects. An empty object is returned for uncloneable values such
		     * as error objects, functions, DOM nodes, and WeakMaps.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeep
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var shallow = _.clone(objects);
		     * console.log(shallow[0] === objects[0]);
		     * // => true
		     */
		    function clone(value) {
		      return baseClone(value, CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.clone` except that it accepts `customizer` which
		     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
		     * cloning is handled by the method instead. The `customizer` is invoked with
		     * up to four arguments; (value [, index|key, object, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeepWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(false);
		     *   }
		     * }
		     *
		     * var el = _.cloneWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 0
		     */
		    function cloneWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * This method is like `_.clone` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.clone
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var deep = _.cloneDeep(objects);
		     * console.log(deep[0] === objects[0]);
		     * // => false
		     */
		    function cloneDeep(value) {
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.cloneWith` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.cloneWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(true);
		     *   }
		     * }
		     *
		     * var el = _.cloneDeepWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 20
		     */
		    function cloneDeepWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * Checks if `object` conforms to `source` by invoking the predicate
		     * properties of `source` with the corresponding property values of `object`.
		     *
		     * **Note:** This method is equivalent to `_.conforms` when `source` is
		     * partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
		     * // => true
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
		     * // => false
		     */
		    function conformsTo(object, source) {
		      return source == null || baseConformsTo(object, source, keys(source));
		    }

		    /**
		     * Performs a
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * comparison between two values to determine if they are equivalent.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.eq(object, object);
		     * // => true
		     *
		     * _.eq(object, other);
		     * // => false
		     *
		     * _.eq('a', 'a');
		     * // => true
		     *
		     * _.eq('a', Object('a'));
		     * // => false
		     *
		     * _.eq(NaN, NaN);
		     * // => true
		     */
		    function eq(value, other) {
		      return value === other || (value !== value && other !== other);
		    }

		    /**
		     * Checks if `value` is greater than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     * @see _.lt
		     * @example
		     *
		     * _.gt(3, 1);
		     * // => true
		     *
		     * _.gt(3, 3);
		     * // => false
		     *
		     * _.gt(1, 3);
		     * // => false
		     */
		    var gt = createRelationalOperation(baseGt);

		    /**
		     * Checks if `value` is greater than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than or equal to
		     *  `other`, else `false`.
		     * @see _.lte
		     * @example
		     *
		     * _.gte(3, 1);
		     * // => true
		     *
		     * _.gte(3, 3);
		     * // => true
		     *
		     * _.gte(1, 3);
		     * // => false
		     */
		    var gte = createRelationalOperation(function(value, other) {
		      return value >= other;
		    });

		    /**
		     * Checks if `value` is likely an `arguments` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArguments(function() { return arguments; }());
		     * // => true
		     *
		     * _.isArguments([1, 2, 3]);
		     * // => false
		     */
		    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		        !propertyIsEnumerable.call(value, 'callee');
		    };

		    /**
		     * Checks if `value` is classified as an `Array` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		     * @example
		     *
		     * _.isArray([1, 2, 3]);
		     * // => true
		     *
		     * _.isArray(document.body.children);
		     * // => false
		     *
		     * _.isArray('abc');
		     * // => false
		     *
		     * _.isArray(_.noop);
		     * // => false
		     */
		    var isArray = Array.isArray;

		    /**
		     * Checks if `value` is classified as an `ArrayBuffer` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     * @example
		     *
		     * _.isArrayBuffer(new ArrayBuffer(2));
		     * // => true
		     *
		     * _.isArrayBuffer(new Array(2));
		     * // => false
		     */
		    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

		    /**
		     * Checks if `value` is array-like. A value is considered array-like if it's
		     * not a function and has a `value.length` that's an integer greater than or
		     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		     * @example
		     *
		     * _.isArrayLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLike(document.body.children);
		     * // => true
		     *
		     * _.isArrayLike('abc');
		     * // => true
		     *
		     * _.isArrayLike(_.noop);
		     * // => false
		     */
		    function isArrayLike(value) {
		      return value != null && isLength(value.length) && !isFunction(value);
		    }

		    /**
		     * This method is like `_.isArrayLike` except that it also checks if `value`
		     * is an object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array-like object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArrayLikeObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLikeObject(document.body.children);
		     * // => true
		     *
		     * _.isArrayLikeObject('abc');
		     * // => false
		     *
		     * _.isArrayLikeObject(_.noop);
		     * // => false
		     */
		    function isArrayLikeObject(value) {
		      return isObjectLike(value) && isArrayLike(value);
		    }

		    /**
		     * Checks if `value` is classified as a boolean primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
		     * @example
		     *
		     * _.isBoolean(false);
		     * // => true
		     *
		     * _.isBoolean(null);
		     * // => false
		     */
		    function isBoolean(value) {
		      return value === true || value === false ||
		        (isObjectLike(value) && baseGetTag(value) == boolTag);
		    }

		    /**
		     * Checks if `value` is a buffer.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		     * @example
		     *
		     * _.isBuffer(new Buffer(2));
		     * // => true
		     *
		     * _.isBuffer(new Uint8Array(2));
		     * // => false
		     */
		    var isBuffer = nativeIsBuffer || stubFalse;

		    /**
		     * Checks if `value` is classified as a `Date` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     * @example
		     *
		     * _.isDate(new Date);
		     * // => true
		     *
		     * _.isDate('Mon April 23 2012');
		     * // => false
		     */
		    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

		    /**
		     * Checks if `value` is likely a DOM element.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
		     * @example
		     *
		     * _.isElement(document.body);
		     * // => true
		     *
		     * _.isElement('<body>');
		     * // => false
		     */
		    function isElement(value) {
		      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
		    }

		    /**
		     * Checks if `value` is an empty object, collection, map, or set.
		     *
		     * Objects are considered empty if they have no own enumerable string keyed
		     * properties.
		     *
		     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
		     * jQuery-like collections are considered empty if they have a `length` of `0`.
		     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
		     * @example
		     *
		     * _.isEmpty(null);
		     * // => true
		     *
		     * _.isEmpty(true);
		     * // => true
		     *
		     * _.isEmpty(1);
		     * // => true
		     *
		     * _.isEmpty([1, 2, 3]);
		     * // => false
		     *
		     * _.isEmpty({ 'a': 1 });
		     * // => false
		     */
		    function isEmpty(value) {
		      if (value == null) {
		        return true;
		      }
		      if (isArrayLike(value) &&
		          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
		            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
		        return !value.length;
		      }
		      var tag = getTag(value);
		      if (tag == mapTag || tag == setTag) {
		        return !value.size;
		      }
		      if (isPrototype(value)) {
		        return !baseKeys(value).length;
		      }
		      for (var key in value) {
		        if (hasOwnProperty.call(value, key)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * Performs a deep comparison between two values to determine if they are
		     * equivalent.
		     *
		     * **Note:** This method supports comparing arrays, array buffers, booleans,
		     * date objects, error objects, maps, numbers, `Object` objects, regexes,
		     * sets, strings, symbols, and typed arrays. `Object` objects are compared
		     * by their own, not inherited, enumerable properties. Functions and DOM
		     * nodes are compared by strict equality, i.e. `===`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.isEqual(object, other);
		     * // => true
		     *
		     * object === other;
		     * // => false
		     */
		    function isEqual(value, other) {
		      return baseIsEqual(value, other);
		    }

		    /**
		     * This method is like `_.isEqual` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with up to
		     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, othValue) {
		     *   if (isGreeting(objValue) && isGreeting(othValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var array = ['hello', 'goodbye'];
		     * var other = ['hi', 'goodbye'];
		     *
		     * _.isEqualWith(array, other, customizer);
		     * // => true
		     */
		    function isEqualWith(value, other, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      var result = customizer ? customizer(value, other) : undefined$1;
		      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
		    }

		    /**
		     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
		     * `SyntaxError`, `TypeError`, or `URIError` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
		     * @example
		     *
		     * _.isError(new Error);
		     * // => true
		     *
		     * _.isError(Error);
		     * // => false
		     */
		    function isError(value) {
		      if (!isObjectLike(value)) {
		        return false;
		      }
		      var tag = baseGetTag(value);
		      return tag == errorTag || tag == domExcTag ||
		        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
		    }

		    /**
		     * Checks if `value` is a finite primitive number.
		     *
		     * **Note:** This method is based on
		     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
		     * @example
		     *
		     * _.isFinite(3);
		     * // => true
		     *
		     * _.isFinite(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isFinite(Infinity);
		     * // => false
		     *
		     * _.isFinite('3');
		     * // => false
		     */
		    function isFinite(value) {
		      return typeof value == 'number' && nativeIsFinite(value);
		    }

		    /**
		     * Checks if `value` is classified as a `Function` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		     * @example
		     *
		     * _.isFunction(_);
		     * // => true
		     *
		     * _.isFunction(/abc/);
		     * // => false
		     */
		    function isFunction(value) {
		      if (!isObject(value)) {
		        return false;
		      }
		      // The use of `Object#toString` avoids issues with the `typeof` operator
		      // in Safari 9 which returns 'object' for typed arrays and other constructors.
		      var tag = baseGetTag(value);
		      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		    }

		    /**
		     * Checks if `value` is an integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
		     * @example
		     *
		     * _.isInteger(3);
		     * // => true
		     *
		     * _.isInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isInteger(Infinity);
		     * // => false
		     *
		     * _.isInteger('3');
		     * // => false
		     */
		    function isInteger(value) {
		      return typeof value == 'number' && value == toInteger(value);
		    }

		    /**
		     * Checks if `value` is a valid array-like length.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		     * @example
		     *
		     * _.isLength(3);
		     * // => true
		     *
		     * _.isLength(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isLength(Infinity);
		     * // => false
		     *
		     * _.isLength('3');
		     * // => false
		     */
		    function isLength(value) {
		      return typeof value == 'number' &&
		        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is the
		     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		     * @example
		     *
		     * _.isObject({});
		     * // => true
		     *
		     * _.isObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isObject(_.noop);
		     * // => true
		     *
		     * _.isObject(null);
		     * // => false
		     */
		    function isObject(value) {
		      var type = typeof value;
		      return value != null && (type == 'object' || type == 'function');
		    }

		    /**
		     * Checks if `value` is object-like. A value is object-like if it's not `null`
		     * and has a `typeof` result of "object".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		     * @example
		     *
		     * _.isObjectLike({});
		     * // => true
		     *
		     * _.isObjectLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isObjectLike(_.noop);
		     * // => false
		     *
		     * _.isObjectLike(null);
		     * // => false
		     */
		    function isObjectLike(value) {
		      return value != null && typeof value == 'object';
		    }

		    /**
		     * Checks if `value` is classified as a `Map` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     * @example
		     *
		     * _.isMap(new Map);
		     * // => true
		     *
		     * _.isMap(new WeakMap);
		     * // => false
		     */
		    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

		    /**
		     * Performs a partial deep comparison between `object` and `source` to
		     * determine if `object` contains equivalent property values.
		     *
		     * **Note:** This method is equivalent to `_.matches` when `source` is
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.isMatch(object, { 'b': 2 });
		     * // => true
		     *
		     * _.isMatch(object, { 'b': 1 });
		     * // => false
		     */
		    function isMatch(object, source) {
		      return object === source || baseIsMatch(object, source, getMatchData(source));
		    }

		    /**
		     * This method is like `_.isMatch` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with five
		     * arguments: (objValue, srcValue, index|key, object, source).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var object = { 'greeting': 'hello' };
		     * var source = { 'greeting': 'hi' };
		     *
		     * _.isMatchWith(object, source, customizer);
		     * // => true
		     */
		    function isMatchWith(object, source, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseIsMatch(object, source, getMatchData(source), customizer);
		    }

		    /**
		     * Checks if `value` is `NaN`.
		     *
		     * **Note:** This method is based on
		     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
		     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
		     * `undefined` and other non-number values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		     * @example
		     *
		     * _.isNaN(NaN);
		     * // => true
		     *
		     * _.isNaN(new Number(NaN));
		     * // => true
		     *
		     * isNaN(undefined);
		     * // => true
		     *
		     * _.isNaN(undefined);
		     * // => false
		     */
		    function isNaN(value) {
		      // An `NaN` primitive is the only value that is not equal to itself.
		      // Perform the `toStringTag` check first to avoid errors with some
		      // ActiveX objects in IE.
		      return isNumber(value) && value != +value;
		    }

		    /**
		     * Checks if `value` is a pristine native function.
		     *
		     * **Note:** This method can't reliably detect native functions in the presence
		     * of the core-js package because core-js circumvents this kind of detection.
		     * Despite multiple requests, the core-js maintainer has made it clear: any
		     * attempt to fix the detection will be obstructed. As a result, we're left
		     * with little choice but to throw an error. Unfortunately, this also affects
		     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
		     * which rely on core-js.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     * @example
		     *
		     * _.isNative(Array.prototype.push);
		     * // => true
		     *
		     * _.isNative(_);
		     * // => false
		     */
		    function isNative(value) {
		      if (isMaskable(value)) {
		        throw new Error(CORE_ERROR_TEXT);
		      }
		      return baseIsNative(value);
		    }

		    /**
		     * Checks if `value` is `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
		     * @example
		     *
		     * _.isNull(null);
		     * // => true
		     *
		     * _.isNull(void 0);
		     * // => false
		     */
		    function isNull(value) {
		      return value === null;
		    }

		    /**
		     * Checks if `value` is `null` or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
		     * @example
		     *
		     * _.isNil(null);
		     * // => true
		     *
		     * _.isNil(void 0);
		     * // => true
		     *
		     * _.isNil(NaN);
		     * // => false
		     */
		    function isNil(value) {
		      return value == null;
		    }

		    /**
		     * Checks if `value` is classified as a `Number` primitive or object.
		     *
		     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
		     * classified as numbers, use the `_.isFinite` method.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
		     * @example
		     *
		     * _.isNumber(3);
		     * // => true
		     *
		     * _.isNumber(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isNumber(Infinity);
		     * // => true
		     *
		     * _.isNumber('3');
		     * // => false
		     */
		    function isNumber(value) {
		      return typeof value == 'number' ||
		        (isObjectLike(value) && baseGetTag(value) == numberTag);
		    }

		    /**
		     * Checks if `value` is a plain object, that is, an object created by the
		     * `Object` constructor or one with a `[[Prototype]]` of `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.8.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * _.isPlainObject(new Foo);
		     * // => false
		     *
		     * _.isPlainObject([1, 2, 3]);
		     * // => false
		     *
		     * _.isPlainObject({ 'x': 0, 'y': 0 });
		     * // => true
		     *
		     * _.isPlainObject(Object.create(null));
		     * // => true
		     */
		    function isPlainObject(value) {
		      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
		        return false;
		      }
		      var proto = getPrototype(value);
		      if (proto === null) {
		        return true;
		      }
		      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
		      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
		        funcToString.call(Ctor) == objectCtorString;
		    }

		    /**
		     * Checks if `value` is classified as a `RegExp` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     * @example
		     *
		     * _.isRegExp(/abc/);
		     * // => true
		     *
		     * _.isRegExp('/abc/');
		     * // => false
		     */
		    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

		    /**
		     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
		     * double precision number which isn't the result of a rounded unsafe integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
		     * @example
		     *
		     * _.isSafeInteger(3);
		     * // => true
		     *
		     * _.isSafeInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isSafeInteger(Infinity);
		     * // => false
		     *
		     * _.isSafeInteger('3');
		     * // => false
		     */
		    function isSafeInteger(value) {
		      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is classified as a `Set` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     * @example
		     *
		     * _.isSet(new Set);
		     * // => true
		     *
		     * _.isSet(new WeakSet);
		     * // => false
		     */
		    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

		    /**
		     * Checks if `value` is classified as a `String` primitive or object.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
		     * @example
		     *
		     * _.isString('abc');
		     * // => true
		     *
		     * _.isString(1);
		     * // => false
		     */
		    function isString(value) {
		      return typeof value == 'string' ||
		        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
		    }

		    /**
		     * Checks if `value` is classified as a `Symbol` primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		     * @example
		     *
		     * _.isSymbol(Symbol.iterator);
		     * // => true
		     *
		     * _.isSymbol('abc');
		     * // => false
		     */
		    function isSymbol(value) {
		      return typeof value == 'symbol' ||
		        (isObjectLike(value) && baseGetTag(value) == symbolTag);
		    }

		    /**
		     * Checks if `value` is classified as a typed array.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     * @example
		     *
		     * _.isTypedArray(new Uint8Array);
		     * // => true
		     *
		     * _.isTypedArray([]);
		     * // => false
		     */
		    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		    /**
		     * Checks if `value` is `undefined`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
		     * @example
		     *
		     * _.isUndefined(void 0);
		     * // => true
		     *
		     * _.isUndefined(null);
		     * // => false
		     */
		    function isUndefined(value) {
		      return value === undefined$1;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakMap` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
		     * @example
		     *
		     * _.isWeakMap(new WeakMap);
		     * // => true
		     *
		     * _.isWeakMap(new Map);
		     * // => false
		     */
		    function isWeakMap(value) {
		      return isObjectLike(value) && getTag(value) == weakMapTag;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakSet` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
		     * @example
		     *
		     * _.isWeakSet(new WeakSet);
		     * // => true
		     *
		     * _.isWeakSet(new Set);
		     * // => false
		     */
		    function isWeakSet(value) {
		      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
		    }

		    /**
		     * Checks if `value` is less than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     * @see _.gt
		     * @example
		     *
		     * _.lt(1, 3);
		     * // => true
		     *
		     * _.lt(3, 3);
		     * // => false
		     *
		     * _.lt(3, 1);
		     * // => false
		     */
		    var lt = createRelationalOperation(baseLt);

		    /**
		     * Checks if `value` is less than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than or equal to
		     *  `other`, else `false`.
		     * @see _.gte
		     * @example
		     *
		     * _.lte(1, 3);
		     * // => true
		     *
		     * _.lte(3, 3);
		     * // => true
		     *
		     * _.lte(3, 1);
		     * // => false
		     */
		    var lte = createRelationalOperation(function(value, other) {
		      return value <= other;
		    });

		    /**
		     * Converts `value` to an array.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the converted array.
		     * @example
		     *
		     * _.toArray({ 'a': 1, 'b': 2 });
		     * // => [1, 2]
		     *
		     * _.toArray('abc');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toArray(1);
		     * // => []
		     *
		     * _.toArray(null);
		     * // => []
		     */
		    function toArray(value) {
		      if (!value) {
		        return [];
		      }
		      if (isArrayLike(value)) {
		        return isString(value) ? stringToArray(value) : copyArray(value);
		      }
		      if (symIterator && value[symIterator]) {
		        return iteratorToArray(value[symIterator]());
		      }
		      var tag = getTag(value),
		          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

		      return func(value);
		    }

		    /**
		     * Converts `value` to a finite number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.12.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted number.
		     * @example
		     *
		     * _.toFinite(3.2);
		     * // => 3.2
		     *
		     * _.toFinite(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toFinite(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toFinite('3.2');
		     * // => 3.2
		     */
		    function toFinite(value) {
		      if (!value) {
		        return value === 0 ? value : 0;
		      }
		      value = toNumber(value);
		      if (value === INFINITY || value === -INFINITY) {
		        var sign = (value < 0 ? -1 : 1);
		        return sign * MAX_INTEGER;
		      }
		      return value === value ? value : 0;
		    }

		    /**
		     * Converts `value` to an integer.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toInteger(3.2);
		     * // => 3
		     *
		     * _.toInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toInteger(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toInteger('3.2');
		     * // => 3
		     */
		    function toInteger(value) {
		      var result = toFinite(value),
		          remainder = result % 1;

		      return result === result ? (remainder ? result - remainder : result) : 0;
		    }

		    /**
		     * Converts `value` to an integer suitable for use as the length of an
		     * array-like object.
		     *
		     * **Note:** This method is based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toLength(3.2);
		     * // => 3
		     *
		     * _.toLength(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toLength(Infinity);
		     * // => 4294967295
		     *
		     * _.toLength('3.2');
		     * // => 3
		     */
		    function toLength(value) {
		      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
		    }

		    /**
		     * Converts `value` to a number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     * @example
		     *
		     * _.toNumber(3.2);
		     * // => 3.2
		     *
		     * _.toNumber(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toNumber(Infinity);
		     * // => Infinity
		     *
		     * _.toNumber('3.2');
		     * // => 3.2
		     */
		    function toNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      if (isObject(value)) {
		        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
		        value = isObject(other) ? (other + '') : other;
		      }
		      if (typeof value != 'string') {
		        return value === 0 ? value : +value;
		      }
		      value = baseTrim(value);
		      var isBinary = reIsBinary.test(value);
		      return (isBinary || reIsOctal.test(value))
		        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
		        : (reIsBadHex.test(value) ? NAN : +value);
		    }

		    /**
		     * Converts `value` to a plain object flattening inherited enumerable string
		     * keyed properties of `value` to own properties of the plain object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Object} Returns the converted plain object.
		     * @example
		     *
		     * function Foo() {
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.assign({ 'a': 1 }, new Foo);
		     * // => { 'a': 1, 'b': 2 }
		     *
		     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		     * // => { 'a': 1, 'b': 2, 'c': 3 }
		     */
		    function toPlainObject(value) {
		      return copyObject(value, keysIn(value));
		    }

		    /**
		     * Converts `value` to a safe integer. A safe integer can be compared and
		     * represented correctly.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toSafeInteger(3.2);
		     * // => 3
		     *
		     * _.toSafeInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toSafeInteger(Infinity);
		     * // => 9007199254740991
		     *
		     * _.toSafeInteger('3.2');
		     * // => 3
		     */
		    function toSafeInteger(value) {
		      return value
		        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
		        : (value === 0 ? value : 0);
		    }

		    /**
		     * Converts `value` to a string. An empty string is returned for `null`
		     * and `undefined` values. The sign of `-0` is preserved.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.toString(null);
		     * // => ''
		     *
		     * _.toString(-0);
		     * // => '-0'
		     *
		     * _.toString([1, 2, 3]);
		     * // => '1,2,3'
		     */
		    function toString(value) {
		      return value == null ? '' : baseToString(value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Assigns own enumerable string keyed properties of source objects to the
		     * destination object. Source objects are applied from left to right.
		     * Subsequent sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object` and is loosely based on
		     * [`Object.assign`](https://mdn.io/Object/assign).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assignIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assign({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var assign = createAssigner(function(object, source) {
		      if (isPrototype(source) || isArrayLike(source)) {
		        copyObject(source, keys(source), object);
		        return;
		      }
		      for (var key in source) {
		        if (hasOwnProperty.call(source, key)) {
		          assignValue(object, key, source[key]);
		        }
		      }
		    });

		    /**
		     * This method is like `_.assign` except that it iterates over own and
		     * inherited source properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extend
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assign
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
		     */
		    var assignIn = createAssigner(function(object, source) {
		      copyObject(source, keysIn(source), object);
		    });

		    /**
		     * This method is like `_.assignIn` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extendWith
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignInWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keysIn(source), object, customizer);
		    });

		    /**
		     * This method is like `_.assign` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignInWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keys(source), object, customizer);
		    });

		    /**
		     * Creates an array of values corresponding to `paths` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Array} Returns the picked values.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _.at(object, ['a[0].b.c', 'a[1]']);
		     * // => [3, 4]
		     */
		    var at = flatRest(baseAt);

		    /**
		     * Creates an object that inherits from the `prototype` object. If a
		     * `properties` object is given, its own enumerable string keyed properties
		     * are assigned to the created object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Object
		     * @param {Object} prototype The object to inherit from.
		     * @param {Object} [properties] The properties to assign to the object.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * function Shape() {
		     *   this.x = 0;
		     *   this.y = 0;
		     * }
		     *
		     * function Circle() {
		     *   Shape.call(this);
		     * }
		     *
		     * Circle.prototype = _.create(Shape.prototype, {
		     *   'constructor': Circle
		     * });
		     *
		     * var circle = new Circle;
		     * circle instanceof Circle;
		     * // => true
		     *
		     * circle instanceof Shape;
		     * // => true
		     */
		    function create(prototype, properties) {
		      var result = baseCreate(prototype);
		      return properties == null ? result : baseAssign(result, properties);
		    }

		    /**
		     * Assigns own and inherited enumerable string keyed properties of source
		     * objects to the destination object for all destination properties that
		     * resolve to `undefined`. Source objects are applied from left to right.
		     * Once a property is set, additional values of the same property are ignored.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaultsDeep
		     * @example
		     *
		     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var defaults = baseRest(function(object, sources) {
		      object = Object(object);

		      var index = -1;
		      var length = sources.length;
		      var guard = length > 2 ? sources[2] : undefined$1;

		      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		        length = 1;
		      }

		      while (++index < length) {
		        var source = sources[index];
		        var props = keysIn(source);
		        var propsIndex = -1;
		        var propsLength = props.length;

		        while (++propsIndex < propsLength) {
		          var key = props[propsIndex];
		          var value = object[key];

		          if (value === undefined$1 ||
		              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		            object[key] = source[key];
		          }
		        }
		      }

		      return object;
		    });

		    /**
		     * This method is like `_.defaults` except that it recursively assigns
		     * default properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaults
		     * @example
		     *
		     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
		     * // => { 'a': { 'b': 2, 'c': 3 } }
		     */
		    var defaultsDeep = baseRest(function(args) {
		      args.push(undefined$1, customDefaultsMerge);
		      return apply(mergeWith, undefined$1, args);
		    });

		    /**
		     * This method is like `_.find` except that it returns the key of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findKey(users, function(o) { return o.age < 40; });
		     * // => 'barney' (iteration order is not guaranteed)
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findKey(users, { 'age': 1, 'active': true });
		     * // => 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findKey(users, 'active');
		     * // => 'barney'
		     */
		    function findKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
		    }

		    /**
		     * This method is like `_.findKey` except that it iterates over elements of
		     * a collection in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findLastKey(users, function(o) { return o.age < 40; });
		     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastKey(users, { 'age': 36, 'active': true });
		     * // => 'barney'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastKey(users, 'active');
		     * // => 'pebbles'
		     */
		    function findLastKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
		    }

		    /**
		     * Iterates over own and inherited enumerable string keyed properties of an
		     * object and invokes `iteratee` for each property. The iteratee is invoked
		     * with three arguments: (value, key, object). Iteratee functions may exit
		     * iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forInRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forIn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
		     */
		    function forIn(object, iteratee) {
		      return object == null
		        ? object
		        : baseFor(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * This method is like `_.forIn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forInRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
		     */
		    function forInRight(object, iteratee) {
		      return object == null
		        ? object
		        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * Iterates over own enumerable string keyed properties of an object and
		     * invokes `iteratee` for each property. The iteratee is invoked with three
		     * arguments: (value, key, object). Iteratee functions may exit iteration
		     * early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwnRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forOwn(object, iteratee) {
		      return object && baseForOwn(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forOwn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwnRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
		     */
		    function forOwnRight(object, iteratee) {
		      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an array of function property names from own enumerable properties
		     * of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functionsIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functions(new Foo);
		     * // => ['a', 'b']
		     */
		    function functions(object) {
		      return object == null ? [] : baseFunctions(object, keys(object));
		    }

		    /**
		     * Creates an array of function property names from own and inherited
		     * enumerable properties of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functions
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functionsIn(new Foo);
		     * // => ['a', 'b', 'c']
		     */
		    function functionsIn(object) {
		      return object == null ? [] : baseFunctions(object, keysIn(object));
		    }

		    /**
		     * Gets the value at `path` of `object`. If the resolved value is
		     * `undefined`, the `defaultValue` is returned in its place.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.get(object, 'a[0].b.c');
		     * // => 3
		     *
		     * _.get(object, ['a', '0', 'b', 'c']);
		     * // => 3
		     *
		     * _.get(object, 'a.b.c', 'default');
		     * // => 'default'
		     */
		    function get(object, path, defaultValue) {
		      var result = object == null ? undefined$1 : baseGet(object, path);
		      return result === undefined$1 ? defaultValue : result;
		    }

		    /**
		     * Checks if `path` is a direct property of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = { 'a': { 'b': 2 } };
		     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.has(object, 'a');
		     * // => true
		     *
		     * _.has(object, 'a.b');
		     * // => true
		     *
		     * _.has(object, ['a', 'b']);
		     * // => true
		     *
		     * _.has(other, 'a');
		     * // => false
		     */
		    function has(object, path) {
		      return object != null && hasPath(object, path, baseHas);
		    }

		    /**
		     * Checks if `path` is a direct or inherited property of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.hasIn(object, 'a');
		     * // => true
		     *
		     * _.hasIn(object, 'a.b');
		     * // => true
		     *
		     * _.hasIn(object, ['a', 'b']);
		     * // => true
		     *
		     * _.hasIn(object, 'b');
		     * // => false
		     */
		    function hasIn(object, path) {
		      return object != null && hasPath(object, path, baseHasIn);
		    }

		    /**
		     * Creates an object composed of the inverted keys and values of `object`.
		     * If `object` contains duplicate values, subsequent values overwrite
		     * property assignments of previous values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invert(object);
		     * // => { '1': 'c', '2': 'b' }
		     */
		    var invert = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      result[value] = key;
		    }, constant(identity));

		    /**
		     * This method is like `_.invert` except that the inverted object is generated
		     * from the results of running each element of `object` thru `iteratee`. The
		     * corresponding inverted value of each inverted key is an array of keys
		     * responsible for generating the inverted value. The iteratee is invoked
		     * with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invertBy(object);
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     *
		     * _.invertBy(object, function(value) {
		     *   return 'group' + value;
		     * });
		     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
		     */
		    var invertBy = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      if (hasOwnProperty.call(result, value)) {
		        result[value].push(key);
		      } else {
		        result[value] = [key];
		      }
		    }, getIteratee);

		    /**
		     * Invokes the method at `path` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
		     *
		     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
		     * // => [2, 3]
		     */
		    var invoke = baseRest(baseInvoke);

		    /**
		     * Creates an array of the own enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects. See the
		     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * for more details.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keys(new Foo);
		     * // => ['a', 'b'] (iteration order is not guaranteed)
		     *
		     * _.keys('hi');
		     * // => ['0', '1']
		     */
		    function keys(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		    }

		    /**
		     * Creates an array of the own and inherited enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keysIn(new Foo);
		     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		     */
		    function keysIn(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		    }

		    /**
		     * The opposite of `_.mapValues`; this method creates an object with the
		     * same values as `object` and keys generated by running each own enumerable
		     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
		     * with three arguments: (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapValues
		     * @example
		     *
		     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   return key + value;
		     * });
		     * // => { 'a1': 1, 'b2': 2 }
		     */
		    function mapKeys(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, iteratee(value, key, object), value);
		      });
		      return result;
		    }

		    /**
		     * Creates an object with the same keys as `object` and values generated
		     * by running each own enumerable string keyed property of `object` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapKeys
		     * @example
		     *
		     * var users = {
		     *   'fred':    { 'user': 'fred',    'age': 40 },
		     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
		     * };
		     *
		     * _.mapValues(users, function(o) { return o.age; });
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.mapValues(users, 'age');
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     */
		    function mapValues(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, key, iteratee(value, key, object));
		      });
		      return result;
		    }

		    /**
		     * This method is like `_.assign` except that it recursively merges own and
		     * inherited enumerable string keyed properties of source objects into the
		     * destination object. Source properties that resolve to `undefined` are
		     * skipped if a destination value exists. Array and plain object properties
		     * are merged recursively. Other objects and value types are overridden by
		     * assignment. Source objects are applied from left to right. Subsequent
		     * sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {
		     *   'a': [{ 'b': 2 }, { 'd': 4 }]
		     * };
		     *
		     * var other = {
		     *   'a': [{ 'c': 3 }, { 'e': 5 }]
		     * };
		     *
		     * _.merge(object, other);
		     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		     */
		    var merge = createAssigner(function(object, source, srcIndex) {
		      baseMerge(object, source, srcIndex);
		    });

		    /**
		     * This method is like `_.merge` except that it accepts `customizer` which
		     * is invoked to produce the merged values of the destination and source
		     * properties. If `customizer` returns `undefined`, merging is handled by the
		     * method instead. The `customizer` is invoked with six arguments:
		     * (objValue, srcValue, key, object, source, stack).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} customizer The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (_.isArray(objValue)) {
		     *     return objValue.concat(srcValue);
		     *   }
		     * }
		     *
		     * var object = { 'a': [1], 'b': [2] };
		     * var other = { 'a': [3], 'b': [4] };
		     *
		     * _.mergeWith(object, other, customizer);
		     * // => { 'a': [1, 3], 'b': [2, 4] }
		     */
		    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
		      baseMerge(object, source, srcIndex, customizer);
		    });

		    /**
		     * The opposite of `_.pick`; this method creates an object composed of the
		     * own and inherited enumerable property paths of `object` that are not omitted.
		     *
		     * **Note:** This method is considerably slower than `_.pick`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to omit.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omit(object, ['a', 'c']);
		     * // => { 'b': '2' }
		     */
		    var omit = flatRest(function(object, paths) {
		      var result = {};
		      if (object == null) {
		        return result;
		      }
		      var isDeep = false;
		      paths = arrayMap(paths, function(path) {
		        path = castPath(path, object);
		        isDeep || (isDeep = path.length > 1);
		        return path;
		      });
		      copyObject(object, getAllKeysIn(object), result);
		      if (isDeep) {
		        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
		      }
		      var length = paths.length;
		      while (length--) {
		        baseUnset(result, paths[length]);
		      }
		      return result;
		    });

		    /**
		     * The opposite of `_.pickBy`; this method creates an object composed of
		     * the own and inherited enumerable string keyed properties of `object` that
		     * `predicate` doesn't return truthy for. The predicate is invoked with two
		     * arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omitBy(object, _.isNumber);
		     * // => { 'b': '2' }
		     */
		    function omitBy(object, predicate) {
		      return pickBy(object, negate(getIteratee(predicate)));
		    }

		    /**
		     * Creates an object composed of the picked `object` properties.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pick(object, ['a', 'c']);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var pick = flatRest(function(object, paths) {
		      return object == null ? {} : basePick(object, paths);
		    });

		    /**
		     * Creates an object composed of the `object` properties `predicate` returns
		     * truthy for. The predicate is invoked with two arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pickBy(object, _.isNumber);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    function pickBy(object, predicate) {
		      if (object == null) {
		        return {};
		      }
		      var props = arrayMap(getAllKeysIn(object), function(prop) {
		        return [prop];
		      });
		      predicate = getIteratee(predicate);
		      return basePickBy(object, props, function(value, path) {
		        return predicate(value, path[0]);
		      });
		    }

		    /**
		     * This method is like `_.get` except that if the resolved value is a
		     * function it's invoked with the `this` binding of its parent object and
		     * its result is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to resolve.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
		     *
		     * _.result(object, 'a[0].b.c1');
		     * // => 3
		     *
		     * _.result(object, 'a[0].b.c2');
		     * // => 4
		     *
		     * _.result(object, 'a[0].b.c3', 'default');
		     * // => 'default'
		     *
		     * _.result(object, 'a[0].b.c3', _.constant('default'));
		     * // => 'default'
		     */
		    function result(object, path, defaultValue) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length;

		      // Ensure the loop is entered when path is empty.
		      if (!length) {
		        length = 1;
		        object = undefined$1;
		      }
		      while (++index < length) {
		        var value = object == null ? undefined$1 : object[toKey(path[index])];
		        if (value === undefined$1) {
		          index = length;
		          value = defaultValue;
		        }
		        object = isFunction(value) ? value.call(object) : value;
		      }
		      return object;
		    }

		    /**
		     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
		     * it's created. Arrays are created for missing index properties while objects
		     * are created for all other missing properties. Use `_.setWith` to customize
		     * `path` creation.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.set(object, 'a[0].b.c', 4);
		     * console.log(object.a[0].b.c);
		     * // => 4
		     *
		     * _.set(object, ['x', '0', 'y', 'z'], 5);
		     * console.log(object.x[0].y.z);
		     * // => 5
		     */
		    function set(object, path, value) {
		      return object == null ? object : baseSet(object, path, value);
		    }

		    /**
		     * This method is like `_.set` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.setWith(object, '[0][1]', 'a', Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function setWith(object, path, value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseSet(object, path, value, customizer);
		    }

		    /**
		     * Creates an array of own enumerable string keyed-value pairs for `object`
		     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
		     * entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entries
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairs(new Foo);
		     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
		     */
		    var toPairs = createToPairs(keys);

		    /**
		     * Creates an array of own and inherited enumerable string keyed-value pairs
		     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
		     * or set, its entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entriesIn
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairsIn(new Foo);
		     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
		     */
		    var toPairsIn = createToPairs(keysIn);

		    /**
		     * An alternative to `_.reduce`; this method transforms `object` to a new
		     * `accumulator` object which is the result of running each of its own
		     * enumerable string keyed properties thru `iteratee`, with each invocation
		     * potentially mutating the `accumulator` object. If `accumulator` is not
		     * provided, a new object with the same `[[Prototype]]` will be used. The
		     * iteratee is invoked with four arguments: (accumulator, value, key, object).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The custom accumulator value.
		     * @returns {*} Returns the accumulated value.
		     * @example
		     *
		     * _.transform([2, 3, 4], function(result, n) {
		     *   result.push(n *= n);
		     *   return n % 2 == 0;
		     * }, []);
		     * // => [4, 9]
		     *
		     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     */
		    function transform(object, iteratee, accumulator) {
		      var isArr = isArray(object),
		          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

		      iteratee = getIteratee(iteratee, 4);
		      if (accumulator == null) {
		        var Ctor = object && object.constructor;
		        if (isArrLike) {
		          accumulator = isArr ? new Ctor : [];
		        }
		        else if (isObject(object)) {
		          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
		        }
		        else {
		          accumulator = {};
		        }
		      }
		      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
		        return iteratee(accumulator, value, index, object);
		      });
		      return accumulator;
		    }

		    /**
		     * Removes the property at `path` of `object`.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
		     * _.unset(object, 'a[0].b.c');
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     *
		     * _.unset(object, ['a', '0', 'b', 'c']);
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     */
		    function unset(object, path) {
		      return object == null ? true : baseUnset(object, path);
		    }

		    /**
		     * This method is like `_.set` except that accepts `updater` to produce the
		     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
		     * is invoked with one argument: (value).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
		     * console.log(object.a[0].b.c);
		     * // => 9
		     *
		     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
		     * console.log(object.x[0].y.z);
		     * // => 0
		     */
		    function update(object, path, updater) {
		      return object == null ? object : baseUpdate(object, path, castFunction(updater));
		    }

		    /**
		     * This method is like `_.update` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function updateWith(object, path, updater, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
		    }

		    /**
		     * Creates an array of the own enumerable string keyed property values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.values(new Foo);
		     * // => [1, 2] (iteration order is not guaranteed)
		     *
		     * _.values('hi');
		     * // => ['h', 'i']
		     */
		    function values(object) {
		      return object == null ? [] : baseValues(object, keys(object));
		    }

		    /**
		     * Creates an array of the own and inherited enumerable string keyed property
		     * values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.valuesIn(new Foo);
		     * // => [1, 2, 3] (iteration order is not guaranteed)
		     */
		    function valuesIn(object) {
		      return object == null ? [] : baseValues(object, keysIn(object));
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Clamps `number` within the inclusive `lower` and `upper` bounds.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Number
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     * @example
		     *
		     * _.clamp(-10, -5, 5);
		     * // => -5
		     *
		     * _.clamp(10, -5, 5);
		     * // => 5
		     */
		    function clamp(number, lower, upper) {
		      if (upper === undefined$1) {
		        upper = lower;
		        lower = undefined$1;
		      }
		      if (upper !== undefined$1) {
		        upper = toNumber(upper);
		        upper = upper === upper ? upper : 0;
		      }
		      if (lower !== undefined$1) {
		        lower = toNumber(lower);
		        lower = lower === lower ? lower : 0;
		      }
		      return baseClamp(toNumber(number), lower, upper);
		    }

		    /**
		     * Checks if `n` is between `start` and up to, but not including, `end`. If
		     * `end` is not specified, it's set to `start` with `start` then set to `0`.
		     * If `start` is greater than `end` the params are swapped to support
		     * negative ranges.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.3.0
		     * @category Number
		     * @param {number} number The number to check.
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     * @see _.range, _.rangeRight
		     * @example
		     *
		     * _.inRange(3, 2, 4);
		     * // => true
		     *
		     * _.inRange(4, 8);
		     * // => true
		     *
		     * _.inRange(4, 2);
		     * // => false
		     *
		     * _.inRange(2, 2);
		     * // => false
		     *
		     * _.inRange(1.2, 2);
		     * // => true
		     *
		     * _.inRange(5.2, 4);
		     * // => false
		     *
		     * _.inRange(-3, -2, -6);
		     * // => true
		     */
		    function inRange(number, start, end) {
		      start = toFinite(start);
		      if (end === undefined$1) {
		        end = start;
		        start = 0;
		      } else {
		        end = toFinite(end);
		      }
		      number = toNumber(number);
		      return baseInRange(number, start, end);
		    }

		    /**
		     * Produces a random number between the inclusive `lower` and `upper` bounds.
		     * If only one argument is provided a number between `0` and the given number
		     * is returned. If `floating` is `true`, or either `lower` or `upper` are
		     * floats, a floating-point number is returned instead of an integer.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Number
		     * @param {number} [lower=0] The lower bound.
		     * @param {number} [upper=1] The upper bound.
		     * @param {boolean} [floating] Specify returning a floating-point number.
		     * @returns {number} Returns the random number.
		     * @example
		     *
		     * _.random(0, 5);
		     * // => an integer between 0 and 5
		     *
		     * _.random(5);
		     * // => also an integer between 0 and 5
		     *
		     * _.random(5, true);
		     * // => a floating-point number between 0 and 5
		     *
		     * _.random(1.2, 5.2);
		     * // => a floating-point number between 1.2 and 5.2
		     */
		    function random(lower, upper, floating) {
		      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
		        upper = floating = undefined$1;
		      }
		      if (floating === undefined$1) {
		        if (typeof upper == 'boolean') {
		          floating = upper;
		          upper = undefined$1;
		        }
		        else if (typeof lower == 'boolean') {
		          floating = lower;
		          lower = undefined$1;
		        }
		      }
		      if (lower === undefined$1 && upper === undefined$1) {
		        lower = 0;
		        upper = 1;
		      }
		      else {
		        lower = toFinite(lower);
		        if (upper === undefined$1) {
		          upper = lower;
		          lower = 0;
		        } else {
		          upper = toFinite(upper);
		        }
		      }
		      if (lower > upper) {
		        var temp = lower;
		        lower = upper;
		        upper = temp;
		      }
		      if (floating || lower % 1 || upper % 1) {
		        var rand = nativeRandom();
		        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
		      }
		      return baseRandom(lower, upper);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the camel cased string.
		     * @example
		     *
		     * _.camelCase('Foo Bar');
		     * // => 'fooBar'
		     *
		     * _.camelCase('--foo-bar--');
		     * // => 'fooBar'
		     *
		     * _.camelCase('__FOO_BAR__');
		     * // => 'fooBar'
		     */
		    var camelCase = createCompounder(function(result, word, index) {
		      word = word.toLowerCase();
		      return result + (index ? capitalize(word) : word);
		    });

		    /**
		     * Converts the first character of `string` to upper case and the remaining
		     * to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to capitalize.
		     * @returns {string} Returns the capitalized string.
		     * @example
		     *
		     * _.capitalize('FRED');
		     * // => 'Fred'
		     */
		    function capitalize(string) {
		      return upperFirst(toString(string).toLowerCase());
		    }

		    /**
		     * Deburrs `string` by converting
		     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
		     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
		     * letters to basic Latin letters and removing
		     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to deburr.
		     * @returns {string} Returns the deburred string.
		     * @example
		     *
		     * _.deburr('déjà vu');
		     * // => 'deja vu'
		     */
		    function deburr(string) {
		      string = toString(string);
		      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
		    }

		    /**
		     * Checks if `string` ends with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=string.length] The position to search up to.
		     * @returns {boolean} Returns `true` if `string` ends with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.endsWith('abc', 'c');
		     * // => true
		     *
		     * _.endsWith('abc', 'b');
		     * // => false
		     *
		     * _.endsWith('abc', 'b', 2);
		     * // => true
		     */
		    function endsWith(string, target, position) {
		      string = toString(string);
		      target = baseToString(target);

		      var length = string.length;
		      position = position === undefined$1
		        ? length
		        : baseClamp(toInteger(position), 0, length);

		      var end = position;
		      position -= target.length;
		      return position >= 0 && string.slice(position, end) == target;
		    }

		    /**
		     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
		     * corresponding HTML entities.
		     *
		     * **Note:** No other characters are escaped. To escape additional
		     * characters use a third-party library like [_he_](https://mths.be/he).
		     *
		     * Though the ">" character is escaped for symmetry, characters like
		     * ">" and "/" don't need escaping in HTML and have no special meaning
		     * unless they're part of a tag or unquoted attribute value. See
		     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
		     * (under "semi-related fun fact") for more details.
		     *
		     * When working with HTML you should always
		     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
		     * XSS vectors.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escape('fred, barney, & pebbles');
		     * // => 'fred, barney, &amp; pebbles'
		     */
		    function escape(string) {
		      string = toString(string);
		      return (string && reHasUnescapedHtml.test(string))
		        ? string.replace(reUnescapedHtml, escapeHtmlChar)
		        : string;
		    }

		    /**
		     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
		     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escapeRegExp('[lodash](https://lodash.com/)');
		     * // => '\[lodash\]\(https://lodash\.com/\)'
		     */
		    function escapeRegExp(string) {
		      string = toString(string);
		      return (string && reHasRegExpChar.test(string))
		        ? string.replace(reRegExpChar, '\\$&')
		        : string;
		    }

		    /**
		     * Converts `string` to
		     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the kebab cased string.
		     * @example
		     *
		     * _.kebabCase('Foo Bar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('fooBar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('__FOO_BAR__');
		     * // => 'foo-bar'
		     */
		    var kebabCase = createCompounder(function(result, word, index) {
		      return result + (index ? '-' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts `string`, as space separated words, to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.lowerCase('--Foo-Bar--');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('fooBar');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('__FOO_BAR__');
		     * // => 'foo bar'
		     */
		    var lowerCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts the first character of `string` to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.lowerFirst('Fred');
		     * // => 'fred'
		     *
		     * _.lowerFirst('FRED');
		     * // => 'fRED'
		     */
		    var lowerFirst = createCaseFirst('toLowerCase');

		    /**
		     * Pads `string` on the left and right sides if it's shorter than `length`.
		     * Padding characters are truncated if they can't be evenly divided by `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.pad('abc', 8);
		     * // => '  abc   '
		     *
		     * _.pad('abc', 8, '_-');
		     * // => '_-abc_-_'
		     *
		     * _.pad('abc', 3);
		     * // => 'abc'
		     */
		    function pad(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      if (!length || strLength >= length) {
		        return string;
		      }
		      var mid = (length - strLength) / 2;
		      return (
		        createPadding(nativeFloor(mid), chars) +
		        string +
		        createPadding(nativeCeil(mid), chars)
		      );
		    }

		    /**
		     * Pads `string` on the right side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padEnd('abc', 6);
		     * // => 'abc   '
		     *
		     * _.padEnd('abc', 6, '_-');
		     * // => 'abc_-_'
		     *
		     * _.padEnd('abc', 3);
		     * // => 'abc'
		     */
		    function padEnd(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (string + createPadding(length - strLength, chars))
		        : string;
		    }

		    /**
		     * Pads `string` on the left side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padStart('abc', 6);
		     * // => '   abc'
		     *
		     * _.padStart('abc', 6, '_-');
		     * // => '_-_abc'
		     *
		     * _.padStart('abc', 3);
		     * // => 'abc'
		     */
		    function padStart(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (createPadding(length - strLength, chars) + string)
		        : string;
		    }

		    /**
		     * Converts `string` to an integer of the specified radix. If `radix` is
		     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
		     * hexadecimal, in which case a `radix` of `16` is used.
		     *
		     * **Note:** This method aligns with the
		     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category String
		     * @param {string} string The string to convert.
		     * @param {number} [radix=10] The radix to interpret `value` by.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.parseInt('08');
		     * // => 8
		     *
		     * _.map(['6', '08', '10'], _.parseInt);
		     * // => [6, 8, 10]
		     */
		    function parseInt(string, radix, guard) {
		      if (guard || radix == null) {
		        radix = 0;
		      } else if (radix) {
		        radix = +radix;
		      }
		      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
		    }

		    /**
		     * Repeats the given string `n` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to repeat.
		     * @param {number} [n=1] The number of times to repeat the string.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the repeated string.
		     * @example
		     *
		     * _.repeat('*', 3);
		     * // => '***'
		     *
		     * _.repeat('abc', 2);
		     * // => 'abcabc'
		     *
		     * _.repeat('abc', 0);
		     * // => ''
		     */
		    function repeat(string, n, guard) {
		      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      return baseRepeat(toString(string), n);
		    }

		    /**
		     * Replaces matches for `pattern` in `string` with `replacement`.
		     *
		     * **Note:** This method is based on
		     * [`String#replace`](https://mdn.io/String/replace).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to modify.
		     * @param {RegExp|string} pattern The pattern to replace.
		     * @param {Function|string} replacement The match replacement.
		     * @returns {string} Returns the modified string.
		     * @example
		     *
		     * _.replace('Hi Fred', 'Fred', 'Barney');
		     * // => 'Hi Barney'
		     */
		    function replace() {
		      var args = arguments,
		          string = toString(args[0]);

		      return args.length < 3 ? string : string.replace(args[1], args[2]);
		    }

		    /**
		     * Converts `string` to
		     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the snake cased string.
		     * @example
		     *
		     * _.snakeCase('Foo Bar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('fooBar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('--FOO-BAR--');
		     * // => 'foo_bar'
		     */
		    var snakeCase = createCompounder(function(result, word, index) {
		      return result + (index ? '_' : '') + word.toLowerCase();
		    });

		    /**
		     * Splits `string` by `separator`.
		     *
		     * **Note:** This method is based on
		     * [`String#split`](https://mdn.io/String/split).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to split.
		     * @param {RegExp|string} separator The separator pattern to split by.
		     * @param {number} [limit] The length to truncate results to.
		     * @returns {Array} Returns the string segments.
		     * @example
		     *
		     * _.split('a-b-c', '-', 2);
		     * // => ['a', 'b']
		     */
		    function split(string, separator, limit) {
		      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
		        separator = limit = undefined$1;
		      }
		      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
		      if (!limit) {
		        return [];
		      }
		      string = toString(string);
		      if (string && (
		            typeof separator == 'string' ||
		            (separator != null && !isRegExp(separator))
		          )) {
		        separator = baseToString(separator);
		        if (!separator && hasUnicode(string)) {
		          return castSlice(stringToArray(string), 0, limit);
		        }
		      }
		      return string.split(separator, limit);
		    }

		    /**
		     * Converts `string` to
		     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.1.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the start cased string.
		     * @example
		     *
		     * _.startCase('--foo-bar--');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('fooBar');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('__FOO_BAR__');
		     * // => 'FOO BAR'
		     */
		    var startCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + upperFirst(word);
		    });

		    /**
		     * Checks if `string` starts with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=0] The position to search from.
		     * @returns {boolean} Returns `true` if `string` starts with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.startsWith('abc', 'a');
		     * // => true
		     *
		     * _.startsWith('abc', 'b');
		     * // => false
		     *
		     * _.startsWith('abc', 'b', 1);
		     * // => true
		     */
		    function startsWith(string, target, position) {
		      string = toString(string);
		      position = position == null
		        ? 0
		        : baseClamp(toInteger(position), 0, string.length);

		      target = baseToString(target);
		      return string.slice(position, position + target.length) == target;
		    }

		    /**
		     * Creates a compiled template function that can interpolate data properties
		     * in "interpolate" delimiters, HTML-escape interpolated data properties in
		     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
		     * properties may be accessed as free variables in the template. If a setting
		     * object is given, it takes precedence over `_.templateSettings` values.
		     *
		     * **Note:** In the development build `_.template` utilizes
		     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
		     * for easier debugging.
		     *
		     * For more information on precompiling templates see
		     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
		     *
		     * For more information on Chrome extension sandboxes see
		     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The template string.
		     * @param {Object} [options={}] The options object.
		     * @param {RegExp} [options.escape=_.templateSettings.escape]
		     *  The HTML "escape" delimiter.
		     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
		     *  The "evaluate" delimiter.
		     * @param {Object} [options.imports=_.templateSettings.imports]
		     *  An object to import into the template as free variables.
		     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
		     *  The "interpolate" delimiter.
		     * @param {string} [options.sourceURL='lodash.templateSources[n]']
		     *  The sourceURL of the compiled template.
		     * @param {string} [options.variable='obj']
		     *  The data object variable name.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the compiled template function.
		     * @example
		     *
		     * // Use the "interpolate" delimiter to create a compiled template.
		     * var compiled = _.template('hello <%= user %>!');
		     * compiled({ 'user': 'fred' });
		     * // => 'hello fred!'
		     *
		     * // Use the HTML "escape" delimiter to escape data property values.
		     * var compiled = _.template('<b><%- value %></b>');
		     * compiled({ 'value': '<script>' });
		     * // => '<b>&lt;script&gt;</b>'
		     *
		     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
		     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the internal `print` function in "evaluate" delimiters.
		     * var compiled = _.template('<% print("hello " + user); %>!');
		     * compiled({ 'user': 'barney' });
		     * // => 'hello barney!'
		     *
		     * // Use the ES template literal delimiter as an "interpolate" delimiter.
		     * // Disable support by replacing the "interpolate" delimiter.
		     * var compiled = _.template('hello ${ user }!');
		     * compiled({ 'user': 'pebbles' });
		     * // => 'hello pebbles!'
		     *
		     * // Use backslashes to treat delimiters as plain text.
		     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
		     * compiled({ 'value': 'ignored' });
		     * // => '<%- value %>'
		     *
		     * // Use the `imports` option to import `jQuery` as `jq`.
		     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
		     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
		     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
		     * compiled(data);
		     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
		     *
		     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
		     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
		     * compiled.source;
		     * // => function(data) {
		     * //   var __t, __p = '';
		     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
		     * //   return __p;
		     * // }
		     *
		     * // Use custom template delimiters.
		     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
		     * var compiled = _.template('hello {{ user }}!');
		     * compiled({ 'user': 'mustache' });
		     * // => 'hello mustache!'
		     *
		     * // Use the `source` property to inline compiled templates for meaningful
		     * // line numbers in error messages and stack traces.
		     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
		     *   var JST = {\
		     *     "main": ' + _.template(mainText).source + '\
		     *   };\
		     * ');
		     */
		    function template(string, options, guard) {
		      // Based on John Resig's `tmpl` implementation
		      // (http://ejohn.org/blog/javascript-micro-templating/)
		      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
		      var settings = lodash.templateSettings;

		      if (guard && isIterateeCall(string, options, guard)) {
		        options = undefined$1;
		      }
		      string = toString(string);
		      options = assignInWith({}, options, settings, customDefaultsAssignIn);

		      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
		          importsKeys = keys(imports),
		          importsValues = baseValues(imports, importsKeys);

		      var isEscaping,
		          isEvaluating,
		          index = 0,
		          interpolate = options.interpolate || reNoMatch,
		          source = "__p += '";

		      // Compile the regexp to match each delimiter.
		      var reDelimiters = RegExp(
		        (options.escape || reNoMatch).source + '|' +
		        interpolate.source + '|' +
		        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
		        (options.evaluate || reNoMatch).source + '|$'
		      , 'g');

		      // Use a sourceURL for easier debugging.
		      // The sourceURL gets injected into the source that's eval-ed, so be careful
		      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
		      // and escape the comment, thus injecting code that gets evaled.
		      var sourceURL = '//# sourceURL=' +
		        (hasOwnProperty.call(options, 'sourceURL')
		          ? (options.sourceURL + '').replace(/\s/g, ' ')
		          : ('lodash.templateSources[' + (++templateCounter) + ']')
		        ) + '\n';

		      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
		        interpolateValue || (interpolateValue = esTemplateValue);

		        // Escape characters that can't be included in string literals.
		        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

		        // Replace delimiters with snippets.
		        if (escapeValue) {
		          isEscaping = true;
		          source += "' +\n__e(" + escapeValue + ") +\n'";
		        }
		        if (evaluateValue) {
		          isEvaluating = true;
		          source += "';\n" + evaluateValue + ";\n__p += '";
		        }
		        if (interpolateValue) {
		          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
		        }
		        index = offset + match.length;

		        // The JS engine embedded in Adobe products needs `match` returned in
		        // order to produce the correct `offset` value.
		        return match;
		      });

		      source += "';\n";

		      // If `variable` is not specified wrap a with-statement around the generated
		      // code to add the data object to the top of the scope chain.
		      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
		      if (!variable) {
		        source = 'with (obj) {\n' + source + '\n}\n';
		      }
		      // Throw an error if a forbidden character was found in `variable`, to prevent
		      // potential command injection attacks.
		      else if (reForbiddenIdentifierChars.test(variable)) {
		        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
		      }

		      // Cleanup code by stripping empty strings.
		      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
		        .replace(reEmptyStringMiddle, '$1')
		        .replace(reEmptyStringTrailing, '$1;');

		      // Frame code as the function body.
		      source = 'function(' + (variable || 'obj') + ') {\n' +
		        (variable
		          ? ''
		          : 'obj || (obj = {});\n'
		        ) +
		        "var __t, __p = ''" +
		        (isEscaping
		           ? ', __e = _.escape'
		           : ''
		        ) +
		        (isEvaluating
		          ? ', __j = Array.prototype.join;\n' +
		            "function print() { __p += __j.call(arguments, '') }\n"
		          : ';\n'
		        ) +
		        source +
		        'return __p\n}';

		      var result = attempt(function() {
		        return Function(importsKeys, sourceURL + 'return ' + source)
		          .apply(undefined$1, importsValues);
		      });

		      // Provide the compiled function's source by its `toString` method or
		      // the `source` property as a convenience for inlining compiled templates.
		      result.source = source;
		      if (isError(result)) {
		        throw result;
		      }
		      return result;
		    }

		    /**
		     * Converts `string`, as a whole, to lower case just like
		     * [String#toLowerCase](https://mdn.io/toLowerCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.toLower('--Foo-Bar--');
		     * // => '--foo-bar--'
		     *
		     * _.toLower('fooBar');
		     * // => 'foobar'
		     *
		     * _.toLower('__FOO_BAR__');
		     * // => '__foo_bar__'
		     */
		    function toLower(value) {
		      return toString(value).toLowerCase();
		    }

		    /**
		     * Converts `string`, as a whole, to upper case just like
		     * [String#toUpperCase](https://mdn.io/toUpperCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.toUpper('--foo-bar--');
		     * // => '--FOO-BAR--'
		     *
		     * _.toUpper('fooBar');
		     * // => 'FOOBAR'
		     *
		     * _.toUpper('__foo_bar__');
		     * // => '__FOO_BAR__'
		     */
		    function toUpper(value) {
		      return toString(value).toUpperCase();
		    }

		    /**
		     * Removes leading and trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trim('  abc  ');
		     * // => 'abc'
		     *
		     * _.trim('-_-abc-_-', '_-');
		     * // => 'abc'
		     *
		     * _.map(['  foo  ', '  bar  '], _.trim);
		     * // => ['foo', 'bar']
		     */
		    function trim(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return baseTrim(string);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          chrSymbols = stringToArray(chars),
		          start = charsStartIndex(strSymbols, chrSymbols),
		          end = charsEndIndex(strSymbols, chrSymbols) + 1;

		      return castSlice(strSymbols, start, end).join('');
		    }

		    /**
		     * Removes trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimEnd('  abc  ');
		     * // => '  abc'
		     *
		     * _.trimEnd('-_-abc-_-', '_-');
		     * // => '-_-abc'
		     */
		    function trimEnd(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.slice(0, trimmedEndIndex(string) + 1);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

		      return castSlice(strSymbols, 0, end).join('');
		    }

		    /**
		     * Removes leading whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimStart('  abc  ');
		     * // => 'abc  '
		     *
		     * _.trimStart('-_-abc-_-', '_-');
		     * // => 'abc-_-'
		     */
		    function trimStart(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.replace(reTrimStart, '');
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          start = charsStartIndex(strSymbols, stringToArray(chars));

		      return castSlice(strSymbols, start).join('');
		    }

		    /**
		     * Truncates `string` if it's longer than the given maximum string length.
		     * The last characters of the truncated string are replaced with the omission
		     * string which defaults to "...".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to truncate.
		     * @param {Object} [options={}] The options object.
		     * @param {number} [options.length=30] The maximum string length.
		     * @param {string} [options.omission='...'] The string to indicate text is omitted.
		     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
		     * @returns {string} Returns the truncated string.
		     * @example
		     *
		     * _.truncate('hi-diddly-ho there, neighborino');
		     * // => 'hi-diddly-ho there, neighbo...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': ' '
		     * });
		     * // => 'hi-diddly-ho there,...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': /,? +/
		     * });
		     * // => 'hi-diddly-ho there...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'omission': ' [...]'
		     * });
		     * // => 'hi-diddly-ho there, neig [...]'
		     */
		    function truncate(string, options) {
		      var length = DEFAULT_TRUNC_LENGTH,
		          omission = DEFAULT_TRUNC_OMISSION;

		      if (isObject(options)) {
		        var separator = 'separator' in options ? options.separator : separator;
		        length = 'length' in options ? toInteger(options.length) : length;
		        omission = 'omission' in options ? baseToString(options.omission) : omission;
		      }
		      string = toString(string);

		      var strLength = string.length;
		      if (hasUnicode(string)) {
		        var strSymbols = stringToArray(string);
		        strLength = strSymbols.length;
		      }
		      if (length >= strLength) {
		        return string;
		      }
		      var end = length - stringSize(omission);
		      if (end < 1) {
		        return omission;
		      }
		      var result = strSymbols
		        ? castSlice(strSymbols, 0, end).join('')
		        : string.slice(0, end);

		      if (separator === undefined$1) {
		        return result + omission;
		      }
		      if (strSymbols) {
		        end += (result.length - end);
		      }
		      if (isRegExp(separator)) {
		        if (string.slice(end).search(separator)) {
		          var match,
		              substring = result;

		          if (!separator.global) {
		            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
		          }
		          separator.lastIndex = 0;
		          while ((match = separator.exec(substring))) {
		            var newEnd = match.index;
		          }
		          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
		        }
		      } else if (string.indexOf(baseToString(separator), end) != end) {
		        var index = result.lastIndexOf(separator);
		        if (index > -1) {
		          result = result.slice(0, index);
		        }
		      }
		      return result + omission;
		    }

		    /**
		     * The inverse of `_.escape`; this method converts the HTML entities
		     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
		     * their corresponding characters.
		     *
		     * **Note:** No other HTML entities are unescaped. To unescape additional
		     * HTML entities use a third-party library like [_he_](https://mths.be/he).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.6.0
		     * @category String
		     * @param {string} [string=''] The string to unescape.
		     * @returns {string} Returns the unescaped string.
		     * @example
		     *
		     * _.unescape('fred, barney, &amp; pebbles');
		     * // => 'fred, barney, & pebbles'
		     */
		    function unescape(string) {
		      string = toString(string);
		      return (string && reHasEscapedHtml.test(string))
		        ? string.replace(reEscapedHtml, unescapeHtmlChar)
		        : string;
		    }

		    /**
		     * Converts `string`, as space separated words, to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.upperCase('--foo-bar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('fooBar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('__foo_bar__');
		     * // => 'FOO BAR'
		     */
		    var upperCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toUpperCase();
		    });

		    /**
		     * Converts the first character of `string` to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.upperFirst('fred');
		     * // => 'Fred'
		     *
		     * _.upperFirst('FRED');
		     * // => 'FRED'
		     */
		    var upperFirst = createCaseFirst('toUpperCase');

		    /**
		     * Splits `string` into an array of its words.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {RegExp|string} [pattern] The pattern to match words.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the words of `string`.
		     * @example
		     *
		     * _.words('fred, barney, & pebbles');
		     * // => ['fred', 'barney', 'pebbles']
		     *
		     * _.words('fred, barney, & pebbles', /[^, ]+/g);
		     * // => ['fred', 'barney', '&', 'pebbles']
		     */
		    function words(string, pattern, guard) {
		      string = toString(string);
		      pattern = guard ? undefined$1 : pattern;

		      if (pattern === undefined$1) {
		        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
		      }
		      return string.match(pattern) || [];
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Attempts to invoke `func`, returning either the result or the caught error
		     * object. Any additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Function} func The function to attempt.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {*} Returns the `func` result or error object.
		     * @example
		     *
		     * // Avoid throwing errors for invalid selectors.
		     * var elements = _.attempt(function(selector) {
		     *   return document.querySelectorAll(selector);
		     * }, '>_>');
		     *
		     * if (_.isError(elements)) {
		     *   elements = [];
		     * }
		     */
		    var attempt = baseRest(function(func, args) {
		      try {
		        return apply(func, undefined$1, args);
		      } catch (e) {
		        return isError(e) ? e : new Error(e);
		      }
		    });

		    /**
		     * Binds methods of an object to the object itself, overwriting the existing
		     * method.
		     *
		     * **Note:** This method doesn't set the "length" property of bound functions.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Object} object The object to bind and assign the bound methods to.
		     * @param {...(string|string[])} methodNames The object method names to bind.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var view = {
		     *   'label': 'docs',
		     *   'click': function() {
		     *     console.log('clicked ' + this.label);
		     *   }
		     * };
		     *
		     * _.bindAll(view, ['click']);
		     * jQuery(element).on('click', view.click);
		     * // => Logs 'clicked docs' when clicked.
		     */
		    var bindAll = flatRest(function(object, methodNames) {
		      arrayEach(methodNames, function(key) {
		        key = toKey(key);
		        baseAssignValue(object, key, bind(object[key], object));
		      });
		      return object;
		    });

		    /**
		     * Creates a function that iterates over `pairs` and invokes the corresponding
		     * function of the first predicate to return truthy. The predicate-function
		     * pairs are invoked with the `this` binding and arguments of the created
		     * function.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Array} pairs The predicate-function pairs.
		     * @returns {Function} Returns the new composite function.
		     * @example
		     *
		     * var func = _.cond([
		     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
		     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
		     *   [_.stubTrue,                      _.constant('no match')]
		     * ]);
		     *
		     * func({ 'a': 1, 'b': 2 });
		     * // => 'matches A'
		     *
		     * func({ 'a': 0, 'b': 1 });
		     * // => 'matches B'
		     *
		     * func({ 'a': '1', 'b': '2' });
		     * // => 'no match'
		     */
		    function cond(pairs) {
		      var length = pairs == null ? 0 : pairs.length,
		          toIteratee = getIteratee();

		      pairs = !length ? [] : arrayMap(pairs, function(pair) {
		        if (typeof pair[1] != 'function') {
		          throw new TypeError(FUNC_ERROR_TEXT);
		        }
		        return [toIteratee(pair[0]), pair[1]];
		      });

		      return baseRest(function(args) {
		        var index = -1;
		        while (++index < length) {
		          var pair = pairs[index];
		          if (apply(pair[0], this, args)) {
		            return apply(pair[1], this, args);
		          }
		        }
		      });
		    }

		    /**
		     * Creates a function that invokes the predicate properties of `source` with
		     * the corresponding property values of a given object, returning `true` if
		     * all predicates return truthy, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.conformsTo` with
		     * `source` partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 2, 'b': 1 },
		     *   { 'a': 1, 'b': 2 }
		     * ];
		     *
		     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
		     * // => [{ 'a': 1, 'b': 2 }]
		     */
		    function conforms(source) {
		      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that returns `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {*} value The value to return from the new function.
		     * @returns {Function} Returns the new constant function.
		     * @example
		     *
		     * var objects = _.times(2, _.constant({ 'a': 1 }));
		     *
		     * console.log(objects);
		     * // => [{ 'a': 1 }, { 'a': 1 }]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => true
		     */
		    function constant(value) {
		      return function() {
		        return value;
		      };
		    }

		    /**
		     * Checks `value` to determine whether a default value should be returned in
		     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
		     * or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Util
		     * @param {*} value The value to check.
		     * @param {*} defaultValue The default value.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * _.defaultTo(1, 10);
		     * // => 1
		     *
		     * _.defaultTo(undefined, 10);
		     * // => 10
		     */
		    function defaultTo(value, defaultValue) {
		      return (value == null || value !== value) ? defaultValue : value;
		    }

		    /**
		     * Creates a function that returns the result of invoking the given functions
		     * with the `this` binding of the created function, where each successive
		     * invocation is supplied the return value of the previous.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flowRight
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flow([_.add, square]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flow = createFlow();

		    /**
		     * This method is like `_.flow` except that it creates a function that
		     * invokes the given functions from right to left.
		     *
		     * @static
		     * @since 3.0.0
		     * @memberOf _
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flow
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flowRight([square, _.add]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flowRight = createFlow(true);

		    /**
		     * This method returns the first argument it receives.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {*} value Any value.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     *
		     * console.log(_.identity(object) === object);
		     * // => true
		     */
		    function identity(value) {
		      return value;
		    }

		    /**
		     * Creates a function that invokes `func` with the arguments of the created
		     * function. If `func` is a property name, the created function returns the
		     * property value for a given element. If `func` is an array or object, the
		     * created function returns `true` for elements that contain the equivalent
		     * source properties, otherwise it returns `false`.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Util
		     * @param {*} [func=_.identity] The value to convert to a callback.
		     * @returns {Function} Returns the callback.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
		     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, _.iteratee(['user', 'fred']));
		     * // => [{ 'user': 'fred', 'age': 40 }]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, _.iteratee('user'));
		     * // => ['barney', 'fred']
		     *
		     * // Create custom iteratee shorthands.
		     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
		     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
		     *     return func.test(string);
		     *   };
		     * });
		     *
		     * _.filter(['abc', 'def'], /ef/);
		     * // => ['def']
		     */
		    function iteratee(func) {
		      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between a given
		     * object and `source`, returning `true` if the given object has equivalent
		     * property values, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.isMatch` with `source`
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
		     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matches(source) {
		      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between the
		     * value at `path` of a given object to `srcValue`, returning `true` if the
		     * object value is equivalent, else `false`.
		     *
		     * **Note:** Partial comparisons will match empty array and empty object
		     * `srcValue` values against any array or object value, respectively. See
		     * `_.isEqual` for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.find(objects, _.matchesProperty('a', 4));
		     * // => { 'a': 4, 'b': 5, 'c': 6 }
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matchesProperty(path, srcValue) {
		      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that invokes the method at `path` of a given object.
		     * Any additional arguments are provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': _.constant(2) } },
		     *   { 'a': { 'b': _.constant(1) } }
		     * ];
		     *
		     * _.map(objects, _.method('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(objects, _.method(['a', 'b']));
		     * // => [2, 1]
		     */
		    var method = baseRest(function(path, args) {
		      return function(object) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * The opposite of `_.method`; this method creates a function that invokes
		     * the method at a given path of `object`. Any additional arguments are
		     * provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var array = _.times(3, _.constant),
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
		     * // => [2, 0]
		     */
		    var methodOf = baseRest(function(object, args) {
		      return function(path) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * Adds all own enumerable string keyed function properties of a source
		     * object to the destination object. If `object` is a function, then methods
		     * are added to its prototype as well.
		     *
		     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
		     * avoid conflicts caused by modifying the original.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Function|Object} [object=lodash] The destination object.
		     * @param {Object} source The object of functions to add.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
		     * @returns {Function|Object} Returns `object`.
		     * @example
		     *
		     * function vowels(string) {
		     *   return _.filter(string, function(v) {
		     *     return /[aeiou]/i.test(v);
		     *   });
		     * }
		     *
		     * _.mixin({ 'vowels': vowels });
		     * _.vowels('fred');
		     * // => ['e']
		     *
		     * _('fred').vowels().value();
		     * // => ['e']
		     *
		     * _.mixin({ 'vowels': vowels }, { 'chain': false });
		     * _('fred').vowels();
		     * // => ['e']
		     */
		    function mixin(object, source, options) {
		      var props = keys(source),
		          methodNames = baseFunctions(source, props);

		      if (options == null &&
		          !(isObject(source) && (methodNames.length || !props.length))) {
		        options = source;
		        source = object;
		        object = this;
		        methodNames = baseFunctions(source, keys(source));
		      }
		      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
		          isFunc = isFunction(object);

		      arrayEach(methodNames, function(methodName) {
		        var func = source[methodName];
		        object[methodName] = func;
		        if (isFunc) {
		          object.prototype[methodName] = function() {
		            var chainAll = this.__chain__;
		            if (chain || chainAll) {
		              var result = object(this.__wrapped__),
		                  actions = result.__actions__ = copyArray(this.__actions__);

		              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
		              result.__chain__ = chainAll;
		              return result;
		            }
		            return func.apply(object, arrayPush([this.value()], arguments));
		          };
		        }
		      });

		      return object;
		    }

		    /**
		     * Reverts the `_` variable to its previous value and returns a reference to
		     * the `lodash` function.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @returns {Function} Returns the `lodash` function.
		     * @example
		     *
		     * var lodash = _.noConflict();
		     */
		    function noConflict() {
		      if (root._ === this) {
		        root._ = oldDash;
		      }
		      return this;
		    }

		    /**
		     * This method returns `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Util
		     * @example
		     *
		     * _.times(2, _.noop);
		     * // => [undefined, undefined]
		     */
		    function noop() {
		      // No operation performed.
		    }

		    /**
		     * Creates a function that gets the argument at index `n`. If `n` is negative,
		     * the nth argument from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [n=0] The index of the argument to return.
		     * @returns {Function} Returns the new pass-thru function.
		     * @example
		     *
		     * var func = _.nthArg(1);
		     * func('a', 'b', 'c', 'd');
		     * // => 'b'
		     *
		     * var func = _.nthArg(-2);
		     * func('a', 'b', 'c', 'd');
		     * // => 'c'
		     */
		    function nthArg(n) {
		      n = toInteger(n);
		      return baseRest(function(args) {
		        return baseNth(args, n);
		      });
		    }

		    /**
		     * Creates a function that invokes `iteratees` with the arguments it receives
		     * and returns their results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to invoke.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.over([Math.max, Math.min]);
		     *
		     * func(1, 2, 3, 4);
		     * // => [4, 1]
		     */
		    var over = createOver(arrayMap);

		    /**
		     * Creates a function that checks if **all** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overEvery([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => false
		     *
		     * func(NaN);
		     * // => false
		     */
		    var overEvery = createOver(arrayEvery);

		    /**
		     * Creates a function that checks if **any** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overSome([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => true
		     *
		     * func(NaN);
		     * // => false
		     *
		     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
		     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
		     */
		    var overSome = createOver(arraySome);

		    /**
		     * Creates a function that returns the value at `path` of a given object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': 2 } },
		     *   { 'a': { 'b': 1 } }
		     * ];
		     *
		     * _.map(objects, _.property('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
		     * // => [1, 2]
		     */
		    function property(path) {
		      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		    }

		    /**
		     * The opposite of `_.property`; this method creates a function that returns
		     * the value at a given path of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var array = [0, 1, 2],
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
		     * // => [2, 0]
		     */
		    function propertyOf(object) {
		      return function(path) {
		        return object == null ? undefined$1 : baseGet(object, path);
		      };
		    }

		    /**
		     * Creates an array of numbers (positive and/or negative) progressing from
		     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
		     * `start` is specified without an `end` or `step`. If `end` is not specified,
		     * it's set to `start` with `start` then set to `0`.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.rangeRight
		     * @example
		     *
		     * _.range(4);
		     * // => [0, 1, 2, 3]
		     *
		     * _.range(-4);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 5);
		     * // => [1, 2, 3, 4]
		     *
		     * _.range(0, 20, 5);
		     * // => [0, 5, 10, 15]
		     *
		     * _.range(0, -4, -1);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.range(0);
		     * // => []
		     */
		    var range = createRange();

		    /**
		     * This method is like `_.range` except that it populates values in
		     * descending order.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.range
		     * @example
		     *
		     * _.rangeRight(4);
		     * // => [3, 2, 1, 0]
		     *
		     * _.rangeRight(-4);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 5);
		     * // => [4, 3, 2, 1]
		     *
		     * _.rangeRight(0, 20, 5);
		     * // => [15, 10, 5, 0]
		     *
		     * _.rangeRight(0, -4, -1);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.rangeRight(0);
		     * // => []
		     */
		    var rangeRight = createRange(true);

		    /**
		     * This method returns a new empty array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Array} Returns the new empty array.
		     * @example
		     *
		     * var arrays = _.times(2, _.stubArray);
		     *
		     * console.log(arrays);
		     * // => [[], []]
		     *
		     * console.log(arrays[0] === arrays[1]);
		     * // => false
		     */
		    function stubArray() {
		      return [];
		    }

		    /**
		     * This method returns `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `false`.
		     * @example
		     *
		     * _.times(2, _.stubFalse);
		     * // => [false, false]
		     */
		    function stubFalse() {
		      return false;
		    }

		    /**
		     * This method returns a new empty object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Object} Returns the new empty object.
		     * @example
		     *
		     * var objects = _.times(2, _.stubObject);
		     *
		     * console.log(objects);
		     * // => [{}, {}]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => false
		     */
		    function stubObject() {
		      return {};
		    }

		    /**
		     * This method returns an empty string.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {string} Returns the empty string.
		     * @example
		     *
		     * _.times(2, _.stubString);
		     * // => ['', '']
		     */
		    function stubString() {
		      return '';
		    }

		    /**
		     * This method returns `true`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `true`.
		     * @example
		     *
		     * _.times(2, _.stubTrue);
		     * // => [true, true]
		     */
		    function stubTrue() {
		      return true;
		    }

		    /**
		     * Invokes the iteratee `n` times, returning an array of the results of
		     * each invocation. The iteratee is invoked with one argument; (index).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} n The number of times to invoke `iteratee`.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.times(3, String);
		     * // => ['0', '1', '2']
		     *
		     *  _.times(4, _.constant(0));
		     * // => [0, 0, 0, 0]
		     */
		    function times(n, iteratee) {
		      n = toInteger(n);
		      if (n < 1 || n > MAX_SAFE_INTEGER) {
		        return [];
		      }
		      var index = MAX_ARRAY_LENGTH,
		          length = nativeMin(n, MAX_ARRAY_LENGTH);

		      iteratee = getIteratee(iteratee);
		      n -= MAX_ARRAY_LENGTH;

		      var result = baseTimes(length, iteratee);
		      while (++index < n) {
		        iteratee(index);
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a property path array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the new property path array.
		     * @example
		     *
		     * _.toPath('a.b.c');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toPath('a[0].b.c');
		     * // => ['a', '0', 'b', 'c']
		     */
		    function toPath(value) {
		      if (isArray(value)) {
		        return arrayMap(value, toKey);
		      }
		      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
		    }

		    /**
		     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {string} [prefix=''] The value to prefix the ID with.
		     * @returns {string} Returns the unique ID.
		     * @example
		     *
		     * _.uniqueId('contact_');
		     * // => 'contact_104'
		     *
		     * _.uniqueId();
		     * // => '105'
		     */
		    function uniqueId(prefix) {
		      var id = ++idCounter;
		      return toString(prefix) + id;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Adds two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {number} augend The first number in an addition.
		     * @param {number} addend The second number in an addition.
		     * @returns {number} Returns the total.
		     * @example
		     *
		     * _.add(6, 4);
		     * // => 10
		     */
		    var add = createMathOperation(function(augend, addend) {
		      return augend + addend;
		    }, 0);

		    /**
		     * Computes `number` rounded up to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round up.
		     * @param {number} [precision=0] The precision to round up to.
		     * @returns {number} Returns the rounded up number.
		     * @example
		     *
		     * _.ceil(4.006);
		     * // => 5
		     *
		     * _.ceil(6.004, 2);
		     * // => 6.01
		     *
		     * _.ceil(6040, -2);
		     * // => 6100
		     */
		    var ceil = createRound('ceil');

		    /**
		     * Divide two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} dividend The first number in a division.
		     * @param {number} divisor The second number in a division.
		     * @returns {number} Returns the quotient.
		     * @example
		     *
		     * _.divide(6, 4);
		     * // => 1.5
		     */
		    var divide = createMathOperation(function(dividend, divisor) {
		      return dividend / divisor;
		    }, 1);

		    /**
		     * Computes `number` rounded down to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round down.
		     * @param {number} [precision=0] The precision to round down to.
		     * @returns {number} Returns the rounded down number.
		     * @example
		     *
		     * _.floor(4.006);
		     * // => 4
		     *
		     * _.floor(0.046, 2);
		     * // => 0.04
		     *
		     * _.floor(4060, -2);
		     * // => 4000
		     */
		    var floor = createRound('floor');

		    /**
		     * Computes the maximum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * _.max([4, 2, 8, 6]);
		     * // => 8
		     *
		     * _.max([]);
		     * // => undefined
		     */
		    function max(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseGt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.max` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.maxBy(objects, function(o) { return o.n; });
		     * // => { 'n': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.maxBy(objects, 'n');
		     * // => { 'n': 2 }
		     */
		    function maxBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
		        : undefined$1;
		    }

		    /**
		     * Computes the mean of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * _.mean([4, 2, 8, 6]);
		     * // => 5
		     */
		    function mean(array) {
		      return baseMean(array, identity);
		    }

		    /**
		     * This method is like `_.mean` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be averaged.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.meanBy(objects, function(o) { return o.n; });
		     * // => 5
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.meanBy(objects, 'n');
		     * // => 5
		     */
		    function meanBy(array, iteratee) {
		      return baseMean(array, getIteratee(iteratee, 2));
		    }

		    /**
		     * Computes the minimum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * _.min([4, 2, 8, 6]);
		     * // => 2
		     *
		     * _.min([]);
		     * // => undefined
		     */
		    function min(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseLt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.min` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.minBy(objects, function(o) { return o.n; });
		     * // => { 'n': 1 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.minBy(objects, 'n');
		     * // => { 'n': 1 }
		     */
		    function minBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
		        : undefined$1;
		    }

		    /**
		     * Multiply two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} multiplier The first number in a multiplication.
		     * @param {number} multiplicand The second number in a multiplication.
		     * @returns {number} Returns the product.
		     * @example
		     *
		     * _.multiply(6, 4);
		     * // => 24
		     */
		    var multiply = createMathOperation(function(multiplier, multiplicand) {
		      return multiplier * multiplicand;
		    }, 1);

		    /**
		     * Computes `number` rounded to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round.
		     * @param {number} [precision=0] The precision to round to.
		     * @returns {number} Returns the rounded number.
		     * @example
		     *
		     * _.round(4.006);
		     * // => 4
		     *
		     * _.round(4.006, 2);
		     * // => 4.01
		     *
		     * _.round(4060, -2);
		     * // => 4100
		     */
		    var round = createRound('round');

		    /**
		     * Subtract two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {number} minuend The first number in a subtraction.
		     * @param {number} subtrahend The second number in a subtraction.
		     * @returns {number} Returns the difference.
		     * @example
		     *
		     * _.subtract(6, 4);
		     * // => 2
		     */
		    var subtract = createMathOperation(function(minuend, subtrahend) {
		      return minuend - subtrahend;
		    }, 0);

		    /**
		     * Computes the sum of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * _.sum([4, 2, 8, 6]);
		     * // => 20
		     */
		    function sum(array) {
		      return (array && array.length)
		        ? baseSum(array, identity)
		        : 0;
		    }

		    /**
		     * This method is like `_.sum` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be summed.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.sumBy(objects, function(o) { return o.n; });
		     * // => 20
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sumBy(objects, 'n');
		     * // => 20
		     */
		    function sumBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSum(array, getIteratee(iteratee, 2))
		        : 0;
		    }

		    /*------------------------------------------------------------------------*/

		    // Add methods that return wrapped values in chain sequences.
		    lodash.after = after;
		    lodash.ary = ary;
		    lodash.assign = assign;
		    lodash.assignIn = assignIn;
		    lodash.assignInWith = assignInWith;
		    lodash.assignWith = assignWith;
		    lodash.at = at;
		    lodash.before = before;
		    lodash.bind = bind;
		    lodash.bindAll = bindAll;
		    lodash.bindKey = bindKey;
		    lodash.castArray = castArray;
		    lodash.chain = chain;
		    lodash.chunk = chunk;
		    lodash.compact = compact;
		    lodash.concat = concat;
		    lodash.cond = cond;
		    lodash.conforms = conforms;
		    lodash.constant = constant;
		    lodash.countBy = countBy;
		    lodash.create = create;
		    lodash.curry = curry;
		    lodash.curryRight = curryRight;
		    lodash.debounce = debounce;
		    lodash.defaults = defaults;
		    lodash.defaultsDeep = defaultsDeep;
		    lodash.defer = defer;
		    lodash.delay = delay;
		    lodash.difference = difference;
		    lodash.differenceBy = differenceBy;
		    lodash.differenceWith = differenceWith;
		    lodash.drop = drop;
		    lodash.dropRight = dropRight;
		    lodash.dropRightWhile = dropRightWhile;
		    lodash.dropWhile = dropWhile;
		    lodash.fill = fill;
		    lodash.filter = filter;
		    lodash.flatMap = flatMap;
		    lodash.flatMapDeep = flatMapDeep;
		    lodash.flatMapDepth = flatMapDepth;
		    lodash.flatten = flatten;
		    lodash.flattenDeep = flattenDeep;
		    lodash.flattenDepth = flattenDepth;
		    lodash.flip = flip;
		    lodash.flow = flow;
		    lodash.flowRight = flowRight;
		    lodash.fromPairs = fromPairs;
		    lodash.functions = functions;
		    lodash.functionsIn = functionsIn;
		    lodash.groupBy = groupBy;
		    lodash.initial = initial;
		    lodash.intersection = intersection;
		    lodash.intersectionBy = intersectionBy;
		    lodash.intersectionWith = intersectionWith;
		    lodash.invert = invert;
		    lodash.invertBy = invertBy;
		    lodash.invokeMap = invokeMap;
		    lodash.iteratee = iteratee;
		    lodash.keyBy = keyBy;
		    lodash.keys = keys;
		    lodash.keysIn = keysIn;
		    lodash.map = map;
		    lodash.mapKeys = mapKeys;
		    lodash.mapValues = mapValues;
		    lodash.matches = matches;
		    lodash.matchesProperty = matchesProperty;
		    lodash.memoize = memoize;
		    lodash.merge = merge;
		    lodash.mergeWith = mergeWith;
		    lodash.method = method;
		    lodash.methodOf = methodOf;
		    lodash.mixin = mixin;
		    lodash.negate = negate;
		    lodash.nthArg = nthArg;
		    lodash.omit = omit;
		    lodash.omitBy = omitBy;
		    lodash.once = once;
		    lodash.orderBy = orderBy;
		    lodash.over = over;
		    lodash.overArgs = overArgs;
		    lodash.overEvery = overEvery;
		    lodash.overSome = overSome;
		    lodash.partial = partial;
		    lodash.partialRight = partialRight;
		    lodash.partition = partition;
		    lodash.pick = pick;
		    lodash.pickBy = pickBy;
		    lodash.property = property;
		    lodash.propertyOf = propertyOf;
		    lodash.pull = pull;
		    lodash.pullAll = pullAll;
		    lodash.pullAllBy = pullAllBy;
		    lodash.pullAllWith = pullAllWith;
		    lodash.pullAt = pullAt;
		    lodash.range = range;
		    lodash.rangeRight = rangeRight;
		    lodash.rearg = rearg;
		    lodash.reject = reject;
		    lodash.remove = remove;
		    lodash.rest = rest;
		    lodash.reverse = reverse;
		    lodash.sampleSize = sampleSize;
		    lodash.set = set;
		    lodash.setWith = setWith;
		    lodash.shuffle = shuffle;
		    lodash.slice = slice;
		    lodash.sortBy = sortBy;
		    lodash.sortedUniq = sortedUniq;
		    lodash.sortedUniqBy = sortedUniqBy;
		    lodash.split = split;
		    lodash.spread = spread;
		    lodash.tail = tail;
		    lodash.take = take;
		    lodash.takeRight = takeRight;
		    lodash.takeRightWhile = takeRightWhile;
		    lodash.takeWhile = takeWhile;
		    lodash.tap = tap;
		    lodash.throttle = throttle;
		    lodash.thru = thru;
		    lodash.toArray = toArray;
		    lodash.toPairs = toPairs;
		    lodash.toPairsIn = toPairsIn;
		    lodash.toPath = toPath;
		    lodash.toPlainObject = toPlainObject;
		    lodash.transform = transform;
		    lodash.unary = unary;
		    lodash.union = union;
		    lodash.unionBy = unionBy;
		    lodash.unionWith = unionWith;
		    lodash.uniq = uniq;
		    lodash.uniqBy = uniqBy;
		    lodash.uniqWith = uniqWith;
		    lodash.unset = unset;
		    lodash.unzip = unzip;
		    lodash.unzipWith = unzipWith;
		    lodash.update = update;
		    lodash.updateWith = updateWith;
		    lodash.values = values;
		    lodash.valuesIn = valuesIn;
		    lodash.without = without;
		    lodash.words = words;
		    lodash.wrap = wrap;
		    lodash.xor = xor;
		    lodash.xorBy = xorBy;
		    lodash.xorWith = xorWith;
		    lodash.zip = zip;
		    lodash.zipObject = zipObject;
		    lodash.zipObjectDeep = zipObjectDeep;
		    lodash.zipWith = zipWith;

		    // Add aliases.
		    lodash.entries = toPairs;
		    lodash.entriesIn = toPairsIn;
		    lodash.extend = assignIn;
		    lodash.extendWith = assignInWith;

		    // Add methods to `lodash.prototype`.
		    mixin(lodash, lodash);

		    /*------------------------------------------------------------------------*/

		    // Add methods that return unwrapped values in chain sequences.
		    lodash.add = add;
		    lodash.attempt = attempt;
		    lodash.camelCase = camelCase;
		    lodash.capitalize = capitalize;
		    lodash.ceil = ceil;
		    lodash.clamp = clamp;
		    lodash.clone = clone;
		    lodash.cloneDeep = cloneDeep;
		    lodash.cloneDeepWith = cloneDeepWith;
		    lodash.cloneWith = cloneWith;
		    lodash.conformsTo = conformsTo;
		    lodash.deburr = deburr;
		    lodash.defaultTo = defaultTo;
		    lodash.divide = divide;
		    lodash.endsWith = endsWith;
		    lodash.eq = eq;
		    lodash.escape = escape;
		    lodash.escapeRegExp = escapeRegExp;
		    lodash.every = every;
		    lodash.find = find;
		    lodash.findIndex = findIndex;
		    lodash.findKey = findKey;
		    lodash.findLast = findLast;
		    lodash.findLastIndex = findLastIndex;
		    lodash.findLastKey = findLastKey;
		    lodash.floor = floor;
		    lodash.forEach = forEach;
		    lodash.forEachRight = forEachRight;
		    lodash.forIn = forIn;
		    lodash.forInRight = forInRight;
		    lodash.forOwn = forOwn;
		    lodash.forOwnRight = forOwnRight;
		    lodash.get = get;
		    lodash.gt = gt;
		    lodash.gte = gte;
		    lodash.has = has;
		    lodash.hasIn = hasIn;
		    lodash.head = head;
		    lodash.identity = identity;
		    lodash.includes = includes;
		    lodash.indexOf = indexOf;
		    lodash.inRange = inRange;
		    lodash.invoke = invoke;
		    lodash.isArguments = isArguments;
		    lodash.isArray = isArray;
		    lodash.isArrayBuffer = isArrayBuffer;
		    lodash.isArrayLike = isArrayLike;
		    lodash.isArrayLikeObject = isArrayLikeObject;
		    lodash.isBoolean = isBoolean;
		    lodash.isBuffer = isBuffer;
		    lodash.isDate = isDate;
		    lodash.isElement = isElement;
		    lodash.isEmpty = isEmpty;
		    lodash.isEqual = isEqual;
		    lodash.isEqualWith = isEqualWith;
		    lodash.isError = isError;
		    lodash.isFinite = isFinite;
		    lodash.isFunction = isFunction;
		    lodash.isInteger = isInteger;
		    lodash.isLength = isLength;
		    lodash.isMap = isMap;
		    lodash.isMatch = isMatch;
		    lodash.isMatchWith = isMatchWith;
		    lodash.isNaN = isNaN;
		    lodash.isNative = isNative;
		    lodash.isNil = isNil;
		    lodash.isNull = isNull;
		    lodash.isNumber = isNumber;
		    lodash.isObject = isObject;
		    lodash.isObjectLike = isObjectLike;
		    lodash.isPlainObject = isPlainObject;
		    lodash.isRegExp = isRegExp;
		    lodash.isSafeInteger = isSafeInteger;
		    lodash.isSet = isSet;
		    lodash.isString = isString;
		    lodash.isSymbol = isSymbol;
		    lodash.isTypedArray = isTypedArray;
		    lodash.isUndefined = isUndefined;
		    lodash.isWeakMap = isWeakMap;
		    lodash.isWeakSet = isWeakSet;
		    lodash.join = join;
		    lodash.kebabCase = kebabCase;
		    lodash.last = last;
		    lodash.lastIndexOf = lastIndexOf;
		    lodash.lowerCase = lowerCase;
		    lodash.lowerFirst = lowerFirst;
		    lodash.lt = lt;
		    lodash.lte = lte;
		    lodash.max = max;
		    lodash.maxBy = maxBy;
		    lodash.mean = mean;
		    lodash.meanBy = meanBy;
		    lodash.min = min;
		    lodash.minBy = minBy;
		    lodash.stubArray = stubArray;
		    lodash.stubFalse = stubFalse;
		    lodash.stubObject = stubObject;
		    lodash.stubString = stubString;
		    lodash.stubTrue = stubTrue;
		    lodash.multiply = multiply;
		    lodash.nth = nth;
		    lodash.noConflict = noConflict;
		    lodash.noop = noop;
		    lodash.now = now;
		    lodash.pad = pad;
		    lodash.padEnd = padEnd;
		    lodash.padStart = padStart;
		    lodash.parseInt = parseInt;
		    lodash.random = random;
		    lodash.reduce = reduce;
		    lodash.reduceRight = reduceRight;
		    lodash.repeat = repeat;
		    lodash.replace = replace;
		    lodash.result = result;
		    lodash.round = round;
		    lodash.runInContext = runInContext;
		    lodash.sample = sample;
		    lodash.size = size;
		    lodash.snakeCase = snakeCase;
		    lodash.some = some;
		    lodash.sortedIndex = sortedIndex;
		    lodash.sortedIndexBy = sortedIndexBy;
		    lodash.sortedIndexOf = sortedIndexOf;
		    lodash.sortedLastIndex = sortedLastIndex;
		    lodash.sortedLastIndexBy = sortedLastIndexBy;
		    lodash.sortedLastIndexOf = sortedLastIndexOf;
		    lodash.startCase = startCase;
		    lodash.startsWith = startsWith;
		    lodash.subtract = subtract;
		    lodash.sum = sum;
		    lodash.sumBy = sumBy;
		    lodash.template = template;
		    lodash.times = times;
		    lodash.toFinite = toFinite;
		    lodash.toInteger = toInteger;
		    lodash.toLength = toLength;
		    lodash.toLower = toLower;
		    lodash.toNumber = toNumber;
		    lodash.toSafeInteger = toSafeInteger;
		    lodash.toString = toString;
		    lodash.toUpper = toUpper;
		    lodash.trim = trim;
		    lodash.trimEnd = trimEnd;
		    lodash.trimStart = trimStart;
		    lodash.truncate = truncate;
		    lodash.unescape = unescape;
		    lodash.uniqueId = uniqueId;
		    lodash.upperCase = upperCase;
		    lodash.upperFirst = upperFirst;

		    // Add aliases.
		    lodash.each = forEach;
		    lodash.eachRight = forEachRight;
		    lodash.first = head;

		    mixin(lodash, (function() {
		      var source = {};
		      baseForOwn(lodash, function(func, methodName) {
		        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
		          source[methodName] = func;
		        }
		      });
		      return source;
		    }()), { 'chain': false });

		    /*------------------------------------------------------------------------*/

		    /**
		     * The semantic version number.
		     *
		     * @static
		     * @memberOf _
		     * @type {string}
		     */
		    lodash.VERSION = VERSION;

		    // Assign default placeholders.
		    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
		      lodash[methodName].placeholder = lodash;
		    });

		    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
		    arrayEach(['drop', 'take'], function(methodName, index) {
		      LazyWrapper.prototype[methodName] = function(n) {
		        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

		        var result = (this.__filtered__ && !index)
		          ? new LazyWrapper(this)
		          : this.clone();

		        if (result.__filtered__) {
		          result.__takeCount__ = nativeMin(n, result.__takeCount__);
		        } else {
		          result.__views__.push({
		            'size': nativeMin(n, MAX_ARRAY_LENGTH),
		            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
		          });
		        }
		        return result;
		      };

		      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
		        return this.reverse()[methodName](n).reverse();
		      };
		    });

		    // Add `LazyWrapper` methods that accept an `iteratee` value.
		    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
		      var type = index + 1,
		          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

		      LazyWrapper.prototype[methodName] = function(iteratee) {
		        var result = this.clone();
		        result.__iteratees__.push({
		          'iteratee': getIteratee(iteratee, 3),
		          'type': type
		        });
		        result.__filtered__ = result.__filtered__ || isFilter;
		        return result;
		      };
		    });

		    // Add `LazyWrapper` methods for `_.head` and `_.last`.
		    arrayEach(['head', 'last'], function(methodName, index) {
		      var takeName = 'take' + (index ? 'Right' : '');

		      LazyWrapper.prototype[methodName] = function() {
		        return this[takeName](1).value()[0];
		      };
		    });

		    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
		    arrayEach(['initial', 'tail'], function(methodName, index) {
		      var dropName = 'drop' + (index ? '' : 'Right');

		      LazyWrapper.prototype[methodName] = function() {
		        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
		      };
		    });

		    LazyWrapper.prototype.compact = function() {
		      return this.filter(identity);
		    };

		    LazyWrapper.prototype.find = function(predicate) {
		      return this.filter(predicate).head();
		    };

		    LazyWrapper.prototype.findLast = function(predicate) {
		      return this.reverse().find(predicate);
		    };

		    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
		      if (typeof path == 'function') {
		        return new LazyWrapper(this);
		      }
		      return this.map(function(value) {
		        return baseInvoke(value, path, args);
		      });
		    });

		    LazyWrapper.prototype.reject = function(predicate) {
		      return this.filter(negate(getIteratee(predicate)));
		    };

		    LazyWrapper.prototype.slice = function(start, end) {
		      start = toInteger(start);

		      var result = this;
		      if (result.__filtered__ && (start > 0 || end < 0)) {
		        return new LazyWrapper(result);
		      }
		      if (start < 0) {
		        result = result.takeRight(-start);
		      } else if (start) {
		        result = result.drop(start);
		      }
		      if (end !== undefined$1) {
		        end = toInteger(end);
		        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
		      }
		      return result;
		    };

		    LazyWrapper.prototype.takeRightWhile = function(predicate) {
		      return this.reverse().takeWhile(predicate).reverse();
		    };

		    LazyWrapper.prototype.toArray = function() {
		      return this.take(MAX_ARRAY_LENGTH);
		    };

		    // Add `LazyWrapper` methods to `lodash.prototype`.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
		          isTaker = /^(?:head|last)$/.test(methodName),
		          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
		          retUnwrapped = isTaker || /^find/.test(methodName);

		      if (!lodashFunc) {
		        return;
		      }
		      lodash.prototype[methodName] = function() {
		        var value = this.__wrapped__,
		            args = isTaker ? [1] : arguments,
		            isLazy = value instanceof LazyWrapper,
		            iteratee = args[0],
		            useLazy = isLazy || isArray(value);

		        var interceptor = function(value) {
		          var result = lodashFunc.apply(lodash, arrayPush([value], args));
		          return (isTaker && chainAll) ? result[0] : result;
		        };

		        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
		          // Avoid lazy use if the iteratee has a "length" value other than `1`.
		          isLazy = useLazy = false;
		        }
		        var chainAll = this.__chain__,
		            isHybrid = !!this.__actions__.length,
		            isUnwrapped = retUnwrapped && !chainAll,
		            onlyLazy = isLazy && !isHybrid;

		        if (!retUnwrapped && useLazy) {
		          value = onlyLazy ? value : new LazyWrapper(this);
		          var result = func.apply(value, args);
		          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
		          return new LodashWrapper(result, chainAll);
		        }
		        if (isUnwrapped && onlyLazy) {
		          return func.apply(this, args);
		        }
		        result = this.thru(interceptor);
		        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
		      };
		    });

		    // Add `Array` methods to `lodash.prototype`.
		    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
		      var func = arrayProto[methodName],
		          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
		          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

		      lodash.prototype[methodName] = function() {
		        var args = arguments;
		        if (retUnwrapped && !this.__chain__) {
		          var value = this.value();
		          return func.apply(isArray(value) ? value : [], args);
		        }
		        return this[chainName](function(value) {
		          return func.apply(isArray(value) ? value : [], args);
		        });
		      };
		    });

		    // Map minified method names to their real names.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var lodashFunc = lodash[methodName];
		      if (lodashFunc) {
		        var key = lodashFunc.name + '';
		        if (!hasOwnProperty.call(realNames, key)) {
		          realNames[key] = [];
		        }
		        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
		      }
		    });

		    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
		      'name': 'wrapper',
		      'func': undefined$1
		    }];

		    // Add methods to `LazyWrapper`.
		    LazyWrapper.prototype.clone = lazyClone;
		    LazyWrapper.prototype.reverse = lazyReverse;
		    LazyWrapper.prototype.value = lazyValue;

		    // Add chain sequence methods to the `lodash` wrapper.
		    lodash.prototype.at = wrapperAt;
		    lodash.prototype.chain = wrapperChain;
		    lodash.prototype.commit = wrapperCommit;
		    lodash.prototype.next = wrapperNext;
		    lodash.prototype.plant = wrapperPlant;
		    lodash.prototype.reverse = wrapperReverse;
		    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

		    // Add lazy aliases.
		    lodash.prototype.first = lodash.prototype.head;

		    if (symIterator) {
		      lodash.prototype[symIterator] = wrapperToIterator;
		    }
		    return lodash;
		  });

		  /*--------------------------------------------------------------------------*/

		  // Export lodash.
		  var _ = runInContext();

		  // Some AMD build optimizers, like r.js, check for condition patterns like:
		  if (freeModule) {
		    // Export for Node.js.
		    (freeModule.exports = _)._ = _;
		    // Export for CommonJS support.
		    freeExports._ = _;
		  }
		  else {
		    // Export to the global object.
		    root._ = _;
		  }
		}.call(lodash)); 
	} (lodash$1, lodash$1.exports));
	return lodash$1.exports;
}

var lodashExports = requireLodash();
var _$1 = /*@__PURE__*/getDefaultExportFromCjs(lodashExports);

const A = {
  // default
  DEFAULT_DEEP_CYAN: "#41b883",
  DEFAULT_BLUE_GRAY: "#35495e",
  // arco design
  ARCO_DEEP_RED: "#F53F3F",
  ARCO_LIGHT_RED: "#F76560",
  ARCO_DEEP_ORANGE: "#FF7D00",
  ARCO_LIGHT_ORANGE: "#F77234",
  ARCO_DEEP_YELLOW: "#F7BA1E",
  ARCO_LIGHT_YELLOW: "#FADC19",
  ARCO_DEEP_GREEN: "#00B42A",
  ARCO_LIGHT_GREEN: "#9FDB1D",
  ARCO_DEEP_CYAN: "#14C9C9",
  ARCO_LIGHT_CYAN: "#37D4CF",
  ARCO_DEEP_BLUE: "#165DFF",
  ARCO_LIGHT_BLUE: "#3491FA",
  ARCO_DEEP_PURPLE: "#722ED1",
  ARCO_LIGHT_PURPLE: "#8D4EDA",
  // material ui
  MATERIAL_BLUE: "#2196f3",
  MATERIAL_GREY: "#9e9e9e",
  MATERIAL_RED: "#f44336",
  MATERIAL_YELLOW: "#ffeb3b",
  MATERIAL_GREEN: "#4caf50",
  MATERIAL_ORANGE: "#ff9800",
  MATERIAL_PURPLE: "#9c27b0",
  MATERIAL_TEAL: "#009688",
  MATERIAL_PINK: "#e91e63",
  MATERIAL_BROWN: "#795548",
  MATERIAL_CYAN: "#00bcd4",
  MATERIAL_LIME: "#cddc39",
  MATERIAL_DEEP_ORANGE: "#ff5722",
  MATERIAL_LIGHT_BLUE: "#03a9f4",
  MATERIAL_AMBER: "#ffc107",
  MATERIAL_INDIGO: "#3f51b5",
  MATERIAL_LIGHT_GREEN: "#8bc34a",
  MATERIAL_DEEP_PURPLE: "#673ab7",
  MATERIAL_YELLOW_GREEN: "#9ccc65",
  MATERIAL_DEEP_CYAN: "#006064",
  MATERIAL_DEEP_GREEN: "#2e7d32",
  MATERIAL_LIGHT_YELLOW: "#fff59d",
  MATERIAL_LIGHT_RED: "#e57373",
  MATERIAL_LIGHT_ORANGE: "#ffcc80",
  MATERIAL_LIGHT_PURPLE: "#ba68c8",
  MATERIAL_LIGHT_GREY: "#bdbdbd",
  MATERIAL_LIGHT_PINK: "#f48fb1",
  MATERIAL_LIGHT_TEAL: "#4db6ac",
  MATERIAL_DARK_BLUE: "#0d47a1",
  MATERIAL_DARK_GREEN: "#1b5e20",
  MATERIAL_DARK_PINK: "#880e4f",
  MATERIAL_DARK_CYAN: "#00838f",
  MATERIAL_DARK_YELLOW: "#f9a825",
  MATERIAL_DARK_RED: "#b71c1c",
  MATERIAL_DARK_ORANGE: "#e65100",
  MATERIAL_DARK_GREY: "#616161",
  MATERIAL_DARK_PURPLE: "#4a148c",
  MATERIAL_DARK_TEAL: "#004d40",
  MATERIAL_DARK_LIME: "#827717",
  MATERIAL_DARK_AMBER: "#ff6f00",
  MATERIAL_DARK_INDIGO: "#1a237e",
  MATERIAL_DARK_BROWN: "#3e2723",
  MATERIAL_DARK_YELLOW_GREEN: "#689f38",
  MATERIAL_DARK_LIGHT_BLUE: "#01579b",
  MATERIAL_DARK_LIGHT_GREEN: "#33691e",
  MATERIAL_DARK_LIGHT_PINK: "#ad1457",
  MATERIAL_DARK_LIGHT_PURPLE: "#6a1b9a"
};

var s$1 = Object.defineProperty;
var c$3 = (r, o, n) => o in r ? s$1(r, o, { enumerable: !0, configurable: !0, writable: !0, value: n }) : r[o] = n;
var t$1 = (r, o, n) => (c$3(r, o + "" , n), n);
function f$1() {
  return function(r) {
    return class extends r {
      constructor() {
        super(...arguments);
        t$1(this, "colors", A);
      }
    };
  };
}

const t = [{
  content: "默认内容",
  padding: "6px 16px",
  fontSize: "14px",
  fontWeight: 600,
  color: "#fff",
  cursor: "pointer",
  backgroundColor: A.DEFAULT_DEEP_CYAN
}], n$1 = {
  yellow: "linear-gradient(to right, #FDB813, #FFAA00)",
  orange: "linear-gradient(to right, #FFA500, #FF6347)",
  red: "linear-gradient(to right, #FF416C, #FF4B2B)",
  green: "linear-gradient(to right, #00b09b, #96c93d)",
  cyan: "linear-gradient(to right, #1D976C, #93F9B9)",
  blue: "linear-gradient(to right, #2196F3, #4FC3F7)",
  purple: "linear-gradient(to right, #DA22FF, #9733EE)"
};

function l$1(n) {
  return function(i, a, r) {
    const o = r.value;
    r.value = function(t$1 = []) {
      if (!Array.isArray(t$1))
        throw new Error("defineButtonLog 的参数必须是一个数组");
      const u = t$1.length > 0;
      return o.call(this, u ? t$1 : t);
    };
  };
}

var i = Object.defineProperty;
var c$2 = (t, n, e) => n in t ? i(t, n, { enumerable: !0, configurable: !0, writable: !0, value: e }) : t[n] = e;
var r = (t, n, e) => (c$2(t, n + "" , e), e);
function s(t) {
  return function(n) {
    return class extends n {
      constructor() {
        super(...arguments);
        r(this, "description", t);
      }
    };
  };
}

const c$1 = (e) => {
  if (!e || !Object.keys(e).length)
    return "";
  const r = [];
  for (const [o, t] of Object.entries(e))
    if (typeof t == "string" || typeof t == "number") {
      const n = o.replace(/[A-Z]/g, (s) => `-${s.toLowerCase()}`);
      r.push(`${n}: ${t}`);
    } else
      throw new Error("样式对象的值必须是字符串或者数字");
  return r.join("; ");
};

const n = (e) => e.reduce((t, r) => t + `%c${r}`, "") || "";

var c = Object.defineProperty;
var f = (o, t, r) => t in o ? c(o, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : o[t] = r;
var l = (o, t, r) => (f(o, typeof t != "symbol" ? t + "" : t, r), r);
var v = Object.defineProperty, _ = Object.getOwnPropertyDescriptor, m = (o, t, r, n) => {
  for (var e = n > 1 ? void 0 : n ? _(t, r) : t, s = o.length - 1, u; s >= 0; s--)
    (u = o[s]) && (e = (n ? u(t, r, e) : u(e)) || e);
  return n && e && v(t, r, e), e;
};
let p = class {
  constructor() {
    l(this, "colors");
    l(this, "description");
  }
  defineButtonLog(o = []) {
    try {
      const t = [], r = o != null && o.length ? o.map((n) => {
        const { content: e, ...s } = n || {};
        return t.push(e), c$1(s);
      }) : [];
      return [
        n(t),
        ...r
      ];
    } catch (t) {
      return console.error("error", t), [];
    }
  }
};
m([
  l$1()
], p.prototype, "defineButtonLog", 1);
p = m([
  f$1(),
  s("ButtonLog")
], p);
const d = new p(), j = d.defineButtonLog;

function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

function _possibleConstructorReturn(t, e) {
  if (e && ("object" == _typeof$1(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}

function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}

function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}

function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}

function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}

/**
 * 获取唯一uuid
 * @returns {string} 返回随机生成的唯一uuid
 *
 * @example
 * ```javascript
 * let uuid = getUuid();
 * console.log(uuid);
 * // 得到 uuid为 'e423aeed-d89d-45ee-800f-ac8f73cfe4ee'
 * ```
 */
function getUuid() {
  if ((typeof crypto === "undefined" ? "undefined" : _typeof$1(crypto)) === 'object') {
    if (typeof crypto.randomUUID === 'function') {
      return crypto.randomUUID();
    }
    if (typeof crypto.getRandomValues === 'function' && typeof Uint8Array === 'function') {
      var callback = function callback(c) {
        var num = Number(c);
        return (num ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> num / 4).toString(16);
      };
      return ([1e7] + '-' + 1e3 + '-' + 4e3 + '-' + 8e3 + '-' + 1e11).replace(/[018]/g, callback);
    }
  }
  var timestamp = new Date().getTime();
  var perforNow = typeof performance !== 'undefined' && performance.now && performance.now() * 1000 || 0;
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var random = Math.random() * 16;
    if (timestamp > 0) {
      random = (timestamp + random) % 16 | 0;
      timestamp = Math.floor(timestamp / 16);
    } else {
      random = (perforNow + random) % 16 | 0;
      perforNow = Math.floor(perforNow / 16);
    }
    return (c === 'x' ? random : random & 0x3 | 0x8).toString(16);
  });
}

// const pluginName = 'webDispatch';
function dispatchFun(_x, _x2, _x3, _x4) {
  return _dispatchFun.apply(this, arguments);
}
function _dispatchFun() {
  _dispatchFun = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(methodName, inParams, outParams, ReturnType) {
    var id, params, result, pluginInfo, pluginId, pluginName, _console, errorInfo, args3, returnValue;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          id = getUuid();
          params = Object.assign.apply(Object, [{}].concat(_toConsumableArray(inParams)));
          pluginInfo = window.pluginInfo;
          pluginId = pluginInfo === null || pluginInfo === void 0 ? void 0 : pluginInfo.id;
          pluginName = pluginInfo === null || pluginInfo === void 0 ? void 0 : pluginInfo.name;
          if (!(_$1.isEmpty(pluginId) || _$1.isEmpty(pluginName))) {
            _context.next = 9;
            break;
          }
          errorInfo = "\n            ERROR: Must set pluginId And pluginName.\n            eg.\n            {\n                pluginInfo: {\n                    id: string;\n                    name: string;\n                    version: string;\n                    description: string;\n                    author: string;\n                    license: string;\n                }\n            }\n        ";
          (_console = console).log.apply(_console, _toConsumableArray(j([{
            content: errorInfo,
            padding: '4px',
            fontSize: '14px',
            fontWeight: 600,
            color: '#fff',
            cursor: 'pointer',
            backgroundImage: n$1.red
          }])));
          throw new Error(errorInfo);
        case 9:
          // try {
          args3 = JSON.stringify({
            id: id,
            value: params,
            pluginId: pluginId
          }); // @ts-ignore
          if (!window.isFoxitWebview) {
            _context.next = 14;
            break;
          }
          // @ts-ignore
          result = chrome.webview.hostObjects.sync.FxWebView.DispatchFun(pluginName, methodName, args3);
          // @ts-ignore
          _context.next = 19;
          break;
        case 14:
          if (!window.isFoxitOnline) {
            _context.next = 18;
            break;
          }
          return _context.abrupt("return", chrome.webview.hostObjects.sync.FxWebView.DispatchFunAsync(pluginName, methodName, args3, id));
        case 18:
          // @ts-ignore
          result = window.external.DispatchFun(pluginName, methodName, args3);
        case 19:
          // } catch (e) {
          // }
          result = JSON.parse(result);
          if (outParams) {
            outParams.forEach(function (key) {
              if (result.out != null) {
                params[key].set && params[key].set(result.out[key]);
              }
            });
          }
          returnValue = result.value;
          if (!ReturnType) {
            _context.next = 24;
            break;
          }
          return _context.abrupt("return", new ReturnType(returnValue));
        case 24:
          return _context.abrupt("return", returnValue);
        case 25:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _dispatchFun.apply(this, arguments);
}
var callbackCache = {};
function registerCallback(funcId, func, paramItems) {
  callbackCache[funcId] = [func, paramItems];
}
function releaseCallback(funcId) {
  delete callbackCache[funcId];
}
window.execJavascript = function execJavascript(funcId, params) {
  var _callbackCache$funcId = _slicedToArray(callbackCache[funcId], 2),
    func = _callbackCache$funcId[0],
    paramItems = _callbackCache$funcId[1];
  // let paramsJson = JSON.parse(params);
  var paramsJson = params;
  return func.apply(void 0, _toConsumableArray(paramItems.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      Type = _ref2[1];
    var param = paramsJson[key];
    return Type ? new Type(param) : param;
  })));
};

var BaseClass = /*#__PURE__*/function () {
  function BaseClass() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, BaseClass);
    _defineProperty(this, "uuid", void 0);
    _defineProperty(this, "value", void 0);
    if (_typeof$1(obj) === 'object') {
      this.uuid = getUuid();
      this.value = obj;
    } else {
      this.set(obj);
    }
  }
  return _createClass(BaseClass, [{
    key: "set",
    value: function set(obj) {
      this.uuid = obj.uuid;
      this.value = obj.value;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        uuid: this.uuid,
        value: this.value
      };
    }
  }]);
}();

function _callSuper$2N(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2N() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2N() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2N = function _isNativeReflectConstruct() { return !!t; })(); }
var JSLPVOID$1 = /*#__PURE__*/function (_BaseClass) {
  function JSLPVOID() {
    _classCallCheck(this, JSLPVOID);
    return _callSuper$2N(this, JSLPVOID, arguments);
  }
  _inherits(JSLPVOID, _BaseClass);
  return _createClass(JSLPVOID);
}(BaseClass);

function _callSuper$2M(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2M() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2M() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2M = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_PtrArray_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_PtrArray_V1() {
    _classCallCheck(this, JSFS_PtrArray_V1);
    return _callSuper$2M(this, JSFS_PtrArray_V1, arguments);
  }
  _inherits(JSFS_PtrArray_V1, _BaseClass);
  return _createClass(JSFS_PtrArray_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FSPtrArrayNew", [], [], JSFS_PtrArray_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(arr) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FSPtrArrayDestroy", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetSize",
    value: function () {
      var _GetSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(arr) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FSPtrArrayGetSize", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetSize(_x2) {
        return _GetSize.apply(this, arguments);
      }
      return GetSize;
    }()
  }, {
    key: "GetUpperBound",
    value: function () {
      var _GetUpperBound = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(arr) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FSPtrArrayGetUpperBound", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetUpperBound(_x3) {
        return _GetUpperBound.apply(this, arguments);
      }
      return GetUpperBound;
    }()
  }, {
    key: "SetSize",
    value: function () {
      var _SetSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(arr, nNewSize, nGrowBy) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FSPtrArraySetSize", [{
                arr: arr
              }, {
                nNewSize: nNewSize
              }, {
                nGrowBy: nGrowBy
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function SetSize(_x4, _x5, _x6) {
        return _SetSize.apply(this, arguments);
      }
      return SetSize;
    }()
  }, {
    key: "RemoveAll",
    value: function () {
      var _RemoveAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(arr) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FSPtrArrayRemoveAll", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function RemoveAll(_x7) {
        return _RemoveAll.apply(this, arguments);
      }
      return RemoveAll;
    }()
  }, {
    key: "GetAt",
    value: function () {
      var _GetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(arr, index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FSPtrArrayGetAt", [{
                arr: arr
              }, {
                index: index
              }], [], JSLPVOID$1));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetAt(_x8, _x9) {
        return _GetAt.apply(this, arguments);
      }
      return GetAt;
    }()
  }, {
    key: "SetAt",
    value: function () {
      var _SetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(arr, index, newItem) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FSPtrArraySetAt", [{
                arr: arr
              }, {
                index: index
              }, {
                newItem: newItem
              }], ["newItem"]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function SetAt(_x10, _x11, _x12) {
        return _SetAt.apply(this, arguments);
      }
      return SetAt;
    }()
  }, {
    key: "SetAtGrow",
    value: function () {
      var _SetAtGrow = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(arr, index, newItem) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FSPtrArraySetAtGrow", [{
                arr: arr
              }, {
                index: index
              }, {
                newItem: newItem
              }], ["newItem"]));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function SetAtGrow(_x13, _x14, _x15) {
        return _SetAtGrow.apply(this, arguments);
      }
      return SetAtGrow;
    }()
  }, {
    key: "Add",
    value: function () {
      var _Add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(arr, newItem) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FSPtrArrayAdd", [{
                arr: arr
              }, {
                newItem: newItem
              }], ["newItem"]));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function Add(_x16, _x17) {
        return _Add.apply(this, arguments);
      }
      return Add;
    }()
  }, {
    key: "Append",
    value: function () {
      var _Append = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(arr, srcArr) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FSPtrArrayAppend", [{
                arr: arr
              }, {
                srcArr: srcArr
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function Append(_x18, _x19) {
        return _Append.apply(this, arguments);
      }
      return Append;
    }()
  }, {
    key: "Copy",
    value: function () {
      var _Copy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(arr, srcArr) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FSPtrArrayCopy", [{
                arr: arr
              }, {
                srcArr: srcArr
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function Copy(_x20, _x21) {
        return _Copy.apply(this, arguments);
      }
      return Copy;
    }()
  }, {
    key: "GetDataPtr",
    value: function () {
      var _GetDataPtr = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(arr, index) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FSPtrArrayGetDataPtr", [{
                arr: arr
              }, {
                index: index
              }], [], JSLPVOID$1));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetDataPtr(_x22, _x23) {
        return _GetDataPtr.apply(this, arguments);
      }
      return GetDataPtr;
    }()
  }, {
    key: "InsertAt",
    value: function () {
      var _InsertAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(arr, index, newItem, nCount) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FSPtrArrayInsertAt", [{
                arr: arr
              }, {
                index: index
              }, {
                newItem: newItem
              }, {
                nCount: nCount
              }], ["newItem"]));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function InsertAt(_x24, _x25, _x26, _x27) {
        return _InsertAt.apply(this, arguments);
      }
      return InsertAt;
    }()
  }, {
    key: "RemoveAt",
    value: function () {
      var _RemoveAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(arr, index, nCount) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FSPtrArrayRemoveAt", [{
                arr: arr
              }, {
                index: index
              }, {
                nCount: nCount
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function RemoveAt(_x28, _x29, _x30) {
        return _RemoveAt.apply(this, arguments);
      }
      return RemoveAt;
    }()
  }, {
    key: "InsertNewArrayAt",
    value: function () {
      var _InsertNewArrayAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(arr, nStartIndex, newArray) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FSPtrArrayInsertNewArrayAt", [{
                arr: arr
              }, {
                nStartIndex: nStartIndex
              }, {
                newArray: newArray
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function InsertNewArrayAt(_x31, _x32, _x33) {
        return _InsertNewArrayAt.apply(this, arguments);
      }
      return InsertNewArrayAt;
    }()
  }, {
    key: "Find",
    value: function () {
      var _Find = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(arr, item, nStartIndex) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FSPtrArrayFind", [{
                arr: arr
              }, {
                item: item
              }, {
                nStartIndex: nStartIndex
              }], ["item"]));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function Find(_x34, _x35, _x36) {
        return _Find.apply(this, arguments);
      }
      return Find;
    }()
  }]);
}(BaseClass);

function _callSuper$2L(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2L() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2L() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2L = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_ByteStringArray_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_ByteStringArray_V1() {
    _classCallCheck(this, JSFS_ByteStringArray_V1);
    return _callSuper$2L(this, JSFS_ByteStringArray_V1, arguments);
  }
  _inherits(JSFS_ByteStringArray_V1, _BaseClass);
  return _createClass(JSFS_ByteStringArray_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FSByteStringArrayNew", [], [], JSFS_ByteStringArray_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(arr) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FSByteStringArrayDestroy", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetAt",
    value: function () {
      var _GetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(arr, index, outByteString) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FSByteStringArrayGetAt", [{
                arr: arr
              }, {
                index: index
              }, {
                outByteString: outByteString
              }], ["outByteString"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetAt(_x2, _x3, _x4) {
        return _GetAt.apply(this, arguments);
      }
      return GetAt;
    }()
  }, {
    key: "GetSize",
    value: function () {
      var _GetSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(arr) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FSByteStringArrayGetSize", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetSize(_x5) {
        return _GetSize.apply(this, arguments);
      }
      return GetSize;
    }()
  }, {
    key: "RemoveAll",
    value: function () {
      var _RemoveAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(arr) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FSByteStringArrayRemoveAll", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function RemoveAll(_x6) {
        return _RemoveAll.apply(this, arguments);
      }
      return RemoveAll;
    }()
  }, {
    key: "Add",
    value: function () {
      var _Add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(arr, newItem, nLen) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FSByteStringArrayAdd", [{
                arr: arr
              }, {
                newItem: newItem
              }, {
                nLen: nLen
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function Add(_x7, _x8, _x9) {
        return _Add.apply(this, arguments);
      }
      return Add;
    }()
  }, {
    key: "RemoveAt",
    value: function () {
      var _RemoveAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(arr, index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FSByteStringArrayRemoveAt", [{
                arr: arr
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function RemoveAt(_x10, _x11) {
        return _RemoveAt.apply(this, arguments);
      }
      return RemoveAt;
    }()
  }, {
    key: "Add2",
    value: function () {
      var _Add2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(arr, bsNew) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FSByteStringArrayAdd2", [{
                arr: arr
              }, {
                bsNew: bsNew
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function Add2(_x12, _x13) {
        return _Add2.apply(this, arguments);
      }
      return Add2;
    }()
  }, {
    key: "GetDataPtr",
    value: function () {
      var _GetDataPtr = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(arr, index) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FSByteStringArrayGetDataPtr", [{
                arr: arr
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetDataPtr(_x14, _x15) {
        return _GetDataPtr.apply(this, arguments);
      }
      return GetDataPtr;
    }()
  }]);
}(BaseClass);

function _callSuper$2K(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2K() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2K() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2K = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_WideStringArray_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_WideStringArray_V1() {
    _classCallCheck(this, JSFS_WideStringArray_V1);
    return _callSuper$2K(this, JSFS_WideStringArray_V1, arguments);
  }
  _inherits(JSFS_WideStringArray_V1, _BaseClass);
  return _createClass(JSFS_WideStringArray_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FSWideStringArrayNew", [], [], JSFS_WideStringArray_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(arr) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FSWideStringArrayDestroy", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetAt",
    value: function () {
      var _GetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(arr, index, outWideString) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FSWideStringArrayGetAt", [{
                arr: arr
              }, {
                index: index
              }, {
                outWideString: outWideString
              }], ["outWideString"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetAt(_x2, _x3, _x4) {
        return _GetAt.apply(this, arguments);
      }
      return GetAt;
    }()
  }, {
    key: "GetSize",
    value: function () {
      var _GetSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(arr) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FSWideStringArrayGetSize", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetSize(_x5) {
        return _GetSize.apply(this, arguments);
      }
      return GetSize;
    }()
  }, {
    key: "RemoveAll",
    value: function () {
      var _RemoveAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(arr) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FSWideStringArrayRemoveAll", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function RemoveAll(_x6) {
        return _RemoveAll.apply(this, arguments);
      }
      return RemoveAll;
    }()
  }, {
    key: "Add",
    value: function () {
      var _Add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(arr, newItem) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FSWideStringArrayAdd", [{
                arr: arr
              }, {
                newItem: newItem
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function Add(_x7, _x8) {
        return _Add.apply(this, arguments);
      }
      return Add;
    }()
  }, {
    key: "RemoveAt",
    value: function () {
      var _RemoveAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(arr, index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FSWideStringArrayRemoveAt", [{
                arr: arr
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function RemoveAt(_x9, _x10) {
        return _RemoveAt.apply(this, arguments);
      }
      return RemoveAt;
    }()
  }, {
    key: "Add2",
    value: function () {
      var _Add2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(arr, newItem) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FSWideStringArrayAdd2", [{
                arr: arr
              }, {
                newItem: newItem
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function Add2(_x11, _x12) {
        return _Add2.apply(this, arguments);
      }
      return Add2;
    }()
  }, {
    key: "Copy",
    value: function () {
      var _Copy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(arr, srcarr, nStart, nCount) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FSWideStringArrayCopy", [{
                arr: arr
              }, {
                srcarr: srcarr
              }, {
                nStart: nStart
              }, {
                nCount: nCount
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function Copy(_x13, _x14, _x15, _x16) {
        return _Copy.apply(this, arguments);
      }
      return Copy;
    }()
  }]);
}(BaseClass);

function _callSuper$2J(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2J() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2J() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2J = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_FloatRect_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_FloatRect_V1() {
    _classCallCheck(this, JSFS_FloatRect_V1);
    return _callSuper$2J(this, JSFS_FloatRect_V1, arguments);
  }
  _inherits(JSFS_FloatRect_V1, _BaseClass);
  return _createClass(JSFS_FloatRect_V1);
}(BaseClass);

function _callSuper$2I(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2I() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2I() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2I = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_FloatRectArray_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_FloatRectArray_V1() {
    _classCallCheck(this, JSFS_FloatRectArray_V1);
    return _callSuper$2I(this, JSFS_FloatRectArray_V1, arguments);
  }
  _inherits(JSFS_FloatRectArray_V1, _BaseClass);
  return _createClass(JSFS_FloatRectArray_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FSFloatRectArrayNew", [], [], JSFS_FloatRectArray_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(arr) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FSFloatRectArrayDestroy", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetSize",
    value: function () {
      var _GetSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(arr) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FSFloatRectArrayGetSize", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetSize(_x2) {
        return _GetSize.apply(this, arguments);
      }
      return GetSize;
    }()
  }, {
    key: "GetUpperBound",
    value: function () {
      var _GetUpperBound = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(arr) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FSFloatRectArrayGetUpperBound", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetUpperBound(_x3) {
        return _GetUpperBound.apply(this, arguments);
      }
      return GetUpperBound;
    }()
  }, {
    key: "SetSize",
    value: function () {
      var _SetSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(arr, nNewSize, nGrowBy) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FSFloatRectArraySetSize", [{
                arr: arr
              }, {
                nNewSize: nNewSize
              }, {
                nGrowBy: nGrowBy
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function SetSize(_x4, _x5, _x6) {
        return _SetSize.apply(this, arguments);
      }
      return SetSize;
    }()
  }, {
    key: "RemoveAll",
    value: function () {
      var _RemoveAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(arr) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FSFloatRectArrayRemoveAll", [{
                arr: arr
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function RemoveAll(_x7) {
        return _RemoveAll.apply(this, arguments);
      }
      return RemoveAll;
    }()
  }, {
    key: "GetAt",
    value: function () {
      var _GetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(arr, index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FSFloatRectArrayGetAt", [{
                arr: arr
              }, {
                index: index
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetAt(_x8, _x9) {
        return _GetAt.apply(this, arguments);
      }
      return GetAt;
    }()
  }, {
    key: "SetAt",
    value: function () {
      var _SetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(arr, index, newItem) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FSFloatRectArraySetAt", [{
                arr: arr
              }, {
                index: index
              }, {
                newItem: newItem
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function SetAt(_x10, _x11, _x12) {
        return _SetAt.apply(this, arguments);
      }
      return SetAt;
    }()
  }, {
    key: "SetAtGrow",
    value: function () {
      var _SetAtGrow = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(arr, index, newItem) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FSFloatRectArraySetAtGrow", [{
                arr: arr
              }, {
                index: index
              }, {
                newItem: newItem
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function SetAtGrow(_x13, _x14, _x15) {
        return _SetAtGrow.apply(this, arguments);
      }
      return SetAtGrow;
    }()
  }, {
    key: "Add",
    value: function () {
      var _Add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(arr, newItem) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FSFloatRectArrayAdd", [{
                arr: arr
              }, {
                newItem: newItem
              }], []));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function Add(_x16, _x17) {
        return _Add.apply(this, arguments);
      }
      return Add;
    }()
  }, {
    key: "Append",
    value: function () {
      var _Append = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(arr, srcArr) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FSFloatRectArrayAppend", [{
                arr: arr
              }, {
                srcArr: srcArr
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function Append(_x18, _x19) {
        return _Append.apply(this, arguments);
      }
      return Append;
    }()
  }, {
    key: "Copy",
    value: function () {
      var _Copy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(arr, srcArr) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FSFloatRectArrayCopy", [{
                arr: arr
              }, {
                srcArr: srcArr
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function Copy(_x20, _x21) {
        return _Copy.apply(this, arguments);
      }
      return Copy;
    }()
  }, {
    key: "InsertAt",
    value: function () {
      var _InsertAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(arr, index, newItem, nCount) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FSFloatRectArrayInsertAt", [{
                arr: arr
              }, {
                index: index
              }, {
                newItem: newItem
              }, {
                nCount: nCount
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function InsertAt(_x22, _x23, _x24, _x25) {
        return _InsertAt.apply(this, arguments);
      }
      return InsertAt;
    }()
  }, {
    key: "RemoveAt",
    value: function () {
      var _RemoveAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(arr, index, nCount) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FSFloatRectArrayRemoveAt", [{
                arr: arr
              }, {
                index: index
              }, {
                nCount: nCount
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function RemoveAt(_x26, _x27, _x28) {
        return _RemoveAt.apply(this, arguments);
      }
      return RemoveAt;
    }()
  }, {
    key: "InsertNewArrayAt",
    value: function () {
      var _InsertNewArrayAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(arr, nStartIndex, newArray) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FSFloatRectArrayInsertNewArrayAt", [{
                arr: arr
              }, {
                nStartIndex: nStartIndex
              }, {
                newArray: newArray
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function InsertNewArrayAt(_x29, _x30, _x31) {
        return _InsertNewArrayAt.apply(this, arguments);
      }
      return InsertNewArrayAt;
    }()
  }, {
    key: "Find",
    value: function () {
      var _Find = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(arr, item, nStartIndex) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FSFloatRectArrayFind", [{
                arr: arr
              }, {
                item: item
              }, {
                nStartIndex: nStartIndex
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function Find(_x32, _x33, _x34) {
        return _Find.apply(this, arguments);
      }
      return Find;
    }()
  }]);
}(BaseClass);

function _callSuper$2H(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2H() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2H() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2H = function _isNativeReflectConstruct() { return !!t; })(); }
var FS_POSITION = /*#__PURE__*/function (_BaseClass) {
  function FS_POSITION() {
    _classCallCheck(this, FS_POSITION);
    return _callSuper$2H(this, FS_POSITION, arguments);
  }
  _inherits(FS_POSITION, _BaseClass);
  return _createClass(FS_POSITION);
}(BaseClass);

function _callSuper$2G(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2G() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2G() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2G = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Object_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Object_V1() {
    _classCallCheck(this, JSFPD_Object_V1);
    return _callSuper$2G(this, JSFPD_Object_V1, arguments);
  }
  _inherits(JSFPD_Object_V1, _BaseClass);
  return _createClass(JSFPD_Object_V1, [{
    key: "GetType",
    value: function () {
      var _GetType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDObjectGetType", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function GetType(_x) {
        return _GetType.apply(this, arguments);
      }
      return GetType;
    }()
  }, {
    key: "GetobjNum",
    value: function () {
      var _GetobjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(obj) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDObjectGetobjNum", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetobjNum(_x2) {
        return _GetobjNum.apply(this, arguments);
      }
      return GetobjNum;
    }()
  }, {
    key: "IsIdentical",
    value: function () {
      var _IsIdentical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(obj, otherObj) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDObjectIsIdentical", [{
                obj: obj
              }, {
                otherObj: otherObj
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function IsIdentical(_x3, _x4) {
        return _IsIdentical.apply(this, arguments);
      }
      return IsIdentical;
    }()
  }, {
    key: "Clone",
    value: function () {
      var _Clone = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(srcObj, bDirect) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDObjectClone", [{
                srcObj: srcObj
              }, {
                bDirect: bDirect
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function Clone(_x5, _x6) {
        return _Clone.apply(this, arguments);
      }
      return Clone;
    }()
  }, {
    key: "CloneRefToDoc",
    value: function () {
      var _CloneRefToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(srcObj, others) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDObjectCloneRefToDoc", [{
                srcObj: srcObj
              }, {
                others: others
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function CloneRefToDoc(_x7, _x8) {
        return _CloneRefToDoc.apply(this, arguments);
      }
      return CloneRefToDoc;
    }()
  }, {
    key: "GetDirect",
    value: function () {
      var _GetDirect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(obj) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDObjectGetDirect", [{
                obj: obj
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetDirect(_x9) {
        return _GetDirect.apply(this, arguments);
      }
      return GetDirect;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(obj) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDObjectDestroy", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function Destroy(_x10) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetString",
    value: function () {
      var _GetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(obj, outString) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDObjectGetString", [{
                obj: obj
              }, {
                outString: outString
              }], ["outString"]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetString(_x11, _x12) {
        return _GetString.apply(this, arguments);
      }
      return GetString;
    }()
  }, {
    key: "GetUnicodeText",
    value: function () {
      var _GetUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(obj, outUnicodeText) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDObjectGetUnicodeText", [{
                obj: obj
              }, {
                outUnicodeText: outUnicodeText
              }], ["outUnicodeText"]));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetUnicodeText(_x13, _x14) {
        return _GetUnicodeText.apply(this, arguments);
      }
      return GetUnicodeText;
    }()
  }, {
    key: "GetNumber",
    value: function () {
      var _GetNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(obj) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDObjectGetNumber", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetNumber(_x15) {
        return _GetNumber.apply(this, arguments);
      }
      return GetNumber;
    }()
  }, {
    key: "GetInteger",
    value: function () {
      var _GetInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(obj) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDObjectGetInteger", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetInteger(_x16) {
        return _GetInteger.apply(this, arguments);
      }
      return GetInteger;
    }()
  }, {
    key: "GetDict",
    value: function () {
      var _GetDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(obj) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDObjectGetDict", [{
                obj: obj
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetDict(_x17) {
        return _GetDict.apply(this, arguments);
      }
      return GetDict;
    }()
  }, {
    key: "GetArray",
    value: function () {
      var _GetArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(obj) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDObjectGetArray", [{
                obj: obj
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetArray(_x18) {
        return _GetArray.apply(this, arguments);
      }
      return GetArray;
    }()
  }, {
    key: "SetString",
    value: function () {
      var _SetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(obj, str) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDObjectSetString", [{
                obj: obj
              }, {
                str: str
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function SetString(_x19, _x20) {
        return _SetString.apply(this, arguments);
      }
      return SetString;
    }()
  }, {
    key: "SetUnicodeText",
    value: function () {
      var _SetUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(obj, str, len) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDObjectSetUnicodeText", [{
                obj: obj
              }, {
                str: str
              }, {
                len: len
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function SetUnicodeText(_x21, _x22, _x23) {
        return _SetUnicodeText.apply(this, arguments);
      }
      return SetUnicodeText;
    }()
  }, {
    key: "GetDirectType",
    value: function () {
      var _GetDirectType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(obj) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDObjectGetDirectType", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function GetDirectType(_x24) {
        return _GetDirectType.apply(this, arguments);
      }
      return GetDirectType;
    }()
  }, {
    key: "IsModified",
    value: function () {
      var _IsModified = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(obj) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDObjectIsModified", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function IsModified(_x25) {
        return _IsModified.apply(this, arguments);
      }
      return IsModified;
    }()
  }, {
    key: "SetModified",
    value: function () {
      var _SetModified = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(obj, bModified) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDObjectSetModified", [{
                obj: obj
              }, {
                bModified: bModified
              }], []));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function SetModified(_x26, _x27) {
        return _SetModified.apply(this, arguments);
      }
      return SetModified;
    }()
  }, {
    key: "ParseString",
    value: function () {
      var _ParseString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(str) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDObjectParseString", [{
                str: str
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function ParseString(_x28) {
        return _ParseString.apply(this, arguments);
      }
      return ParseString;
    }()
  }, {
    key: "GetConstString",
    value: function () {
      var _GetConstString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(obj) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDObjectGetConstString", [{
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function GetConstString(_x29) {
        return _GetConstString.apply(this, arguments);
      }
      return GetConstString;
    }()
  }]);
}(BaseClass);

function _callSuper$2F(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2F() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2F() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2F = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Font_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Font_V1() {
    _classCallCheck(this, JSFPD_Font_V1);
    return _callSuper$2F(this, JSFPD_Font_V1, arguments);
  }
  _inherits(JSFPD_Font_V1, _BaseClass);
  return _createClass(JSFPD_Font_V1, [{
    key: "GetStockFont",
    value: function () {
      var _GetStockFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(fpdDoc, szFontName) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDFontGetStockFont", [{
                fpdDoc: fpdDoc
              }, {
                szFontName: szFontName
              }], [], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function GetStockFont(_x, _x2) {
        return _GetStockFont.apply(this, arguments);
      }
      return GetStockFont;
    }()
  }, {
    key: "GetFontType",
    value: function () {
      var _GetFontType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(font) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDFontGetFontType", [{
                font: font
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetFontType(_x3) {
        return _GetFontType.apply(this, arguments);
      }
      return GetFontType;
    }()
  }, {
    key: "GetFontTypeName",
    value: function () {
      var _GetFontTypeName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(font, outName) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDFontGetFontTypeName", [{
                font: font
              }, {
                outName: outName
              }], ["outName"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetFontTypeName(_x4, _x5) {
        return _GetFontTypeName.apply(this, arguments);
      }
      return GetFontTypeName;
    }()
  }, {
    key: "GetFontDict",
    value: function () {
      var _GetFontDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(font) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDFontGetFontDict", [{
                font: font
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetFontDict(_x6) {
        return _GetFontDict.apply(this, arguments);
      }
      return GetFontDict;
    }()
  }, {
    key: "IsStandardFont",
    value: function () {
      var _IsStandardFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(font) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDFontIsStandardFont", [{
                font: font
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function IsStandardFont(_x7) {
        return _IsStandardFont.apply(this, arguments);
      }
      return IsStandardFont;
    }()
  }, {
    key: "CharCodeFromUnicode",
    value: function () {
      var _CharCodeFromUnicode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(font, unicode) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDFontCharCodeFromUnicode", [{
                font: font
              }, {
                unicode: unicode
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function CharCodeFromUnicode(_x8, _x9) {
        return _CharCodeFromUnicode.apply(this, arguments);
      }
      return CharCodeFromUnicode;
    }()
  }, {
    key: "GetPDFDoc",
    value: function () {
      var _GetPDFDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(font) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDFontGetPDFDoc", [{
                font: font
              }], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetPDFDoc(_x10) {
        return _GetPDFDoc.apply(this, arguments);
      }
      return GetPDFDoc;
    }()
  }]);
}(BaseClass);

function _callSuper$2E(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2E() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2E() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2E = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Parser_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Parser_V1() {
    _classCallCheck(this, JSFPD_Parser_V1);
    return _callSuper$2E(this, JSFPD_Parser_V1, arguments);
  }
  _inherits(JSFPD_Parser_V1, _BaseClass);
  return _createClass(JSFPD_Parser_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDParserNew", [], [], JSFPD_Parser_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(parser) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDParserDestroy", [{
                parser: parser
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "StartParse",
    value: function () {
      var _StartParse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(parser, filename, bReParse) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDParserStartParse", [{
                parser: parser
              }, {
                filename: filename
              }, {
                bReParse: bReParse
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function StartParse(_x2, _x3, _x4) {
        return _StartParse.apply(this, arguments);
      }
      return StartParse;
    }()
  }, {
    key: "StartParseW",
    value: function () {
      var _StartParseW = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(parser, filename, bReParse) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDParserStartParseW", [{
                parser: parser
              }, {
                filename: filename
              }, {
                bReParse: bReParse
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function StartParseW(_x5, _x6, _x7) {
        return _StartParseW.apply(this, arguments);
      }
      return StartParseW;
    }()
  }, {
    key: "CloseParser",
    value: function () {
      var _CloseParser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(parser, bReParse) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDParserCloseParser", [{
                parser: parser
              }, {
                bReParse: bReParse
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function CloseParser(_x8, _x9) {
        return _CloseParser.apply(this, arguments);
      }
      return CloseParser;
    }()
  }, {
    key: "IsOwner",
    value: function () {
      var _IsOwner = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(parser) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDParserIsOwner", [{
                parser: parser
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function IsOwner(_x10) {
        return _IsOwner.apply(this, arguments);
      }
      return IsOwner;
    }()
  }, {
    key: "SetPassword",
    value: function () {
      var _SetPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(parser, password) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDParserSetPassword", [{
                parser: parser
              }, {
                password: password
              }], ["password"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function SetPassword(_x11, _x12) {
        return _SetPassword.apply(this, arguments);
      }
      return SetPassword;
    }()
  }, {
    key: "GetPassword",
    value: function () {
      var _GetPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(parser, outPassword) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDParserGetPassword", [{
                parser: parser
              }, {
                outPassword: outPassword
              }], ["outPassword"]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetPassword(_x13, _x14) {
        return _GetPassword.apply(this, arguments);
      }
      return GetPassword;
    }()
  }, {
    key: "GetTrailer",
    value: function () {
      var _GetTrailer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(parser) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDParserGetTrailer", [{
                parser: parser
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetTrailer(_x15) {
        return _GetTrailer.apply(this, arguments);
      }
      return GetTrailer;
    }()
  }, {
    key: "GetDocument",
    value: function () {
      var _GetDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(parser) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDParserGetDocument", [{
                parser: parser
              }], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetDocument(_x16) {
        return _GetDocument.apply(this, arguments);
      }
      return GetDocument;
    }()
  }, {
    key: "GetRootObjNum",
    value: function () {
      var _GetRootObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(parser) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDParserGetRootObjNum", [{
                parser: parser
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetRootObjNum(_x17) {
        return _GetRootObjNum.apply(this, arguments);
      }
      return GetRootObjNum;
    }()
  }, {
    key: "GetEncryptDict",
    value: function () {
      var _GetEncryptDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(parser) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDParserGetEncryptDict", [{
                parser: parser
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetEncryptDict(_x18) {
        return _GetEncryptDict.apply(this, arguments);
      }
      return GetEncryptDict;
    }()
  }, {
    key: "ParseIndirectObject",
    value: function () {
      var _ParseIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(parser, objList, objnum, pContext) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDParserParseIndirectObject", [{
                parser: parser
              }, {
                objList: objList
              }, {
                objnum: objnum
              }, {
                pContext: pContext
              }], ["pContext"], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function ParseIndirectObject(_x19, _x20, _x21, _x22) {
        return _ParseIndirectObject.apply(this, arguments);
      }
      return ParseIndirectObject;
    }()
  }, {
    key: "GetLastObjNum",
    value: function () {
      var _GetLastObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(parser) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDParserGetLastObjNum", [{
                parser: parser
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function GetLastObjNum(_x23) {
        return _GetLastObjNum.apply(this, arguments);
      }
      return GetLastObjNum;
    }()
  }, {
    key: "Continue",
    value: function () {
      var _Continue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(parser, pPause) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDParserContinue", [{
                parser: parser
              }, {
                pPause: pPause
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function Continue(_x24, _x25) {
        return _Continue.apply(this, arguments);
      }
      return Continue;
    }()
  }]);
}(BaseClass);

function _callSuper$2D(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2D() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2D() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2D = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_XMLElement_V2 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_XMLElement_V2() {
    _classCallCheck(this, JSFS_XMLElement_V2);
    return _callSuper$2D(this, JSFS_XMLElement_V2, arguments);
  }
  _inherits(JSFS_XMLElement_V2, _BaseClass);
  return _createClass(JSFS_XMLElement_V2);
}(BaseClass);

function _callSuper$2C(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2C() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2C() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2C = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Bookmark_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Bookmark_V1() {
    _classCallCheck(this, JSFPD_Bookmark_V1);
    return _callSuper$2C(this, JSFPD_Bookmark_V1, arguments);
  }
  _inherits(JSFPD_Bookmark_V1, _BaseClass);
  return _createClass(JSFPD_Bookmark_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(outlineDict) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDBookmarkNew", [{
                outlineDict: outlineDict
              }], [], JSFPD_Bookmark_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(bookmark) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDBookmarkDestroy", [{
                bookmark: bookmark
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x2) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "IsVaild",
    value: function () {
      var _IsVaild = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(bookmark) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDBookmarkIsVaild", [{
                bookmark: bookmark
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function IsVaild(_x3) {
        return _IsVaild.apply(this, arguments);
      }
      return IsVaild;
    }()
  }, {
    key: "GetColorRef",
    value: function () {
      var _GetColorRef = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(bookmark) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDBookmarkGetColorRef", [{
                bookmark: bookmark
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetColorRef(_x4) {
        return _GetColorRef.apply(this, arguments);
      }
      return GetColorRef;
    }()
  }, {
    key: "GetFontStyle",
    value: function () {
      var _GetFontStyle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(bookmark) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDBookmarkGetFontStyle", [{
                bookmark: bookmark
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetFontStyle(_x5) {
        return _GetFontStyle.apply(this, arguments);
      }
      return GetFontStyle;
    }()
  }, {
    key: "GetTitle",
    value: function () {
      var _GetTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(bookmark, outTitle) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDBookmarkGetTitle", [{
                bookmark: bookmark
              }, {
                outTitle: outTitle
              }], ["outTitle"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetTitle(_x6, _x7) {
        return _GetTitle.apply(this, arguments);
      }
      return GetTitle;
    }()
  }, {
    key: "GetDest",
    value: function () {
      var _GetDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(bookmark, doc, outDest) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDBookmarkGetDest", [{
                bookmark: bookmark
              }, {
                doc: doc
              }, {
                outDest: outDest
              }], ["outDest"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetDest(_x8, _x9, _x10) {
        return _GetDest.apply(this, arguments);
      }
      return GetDest;
    }()
  }, {
    key: "GetAction",
    value: function () {
      var _GetAction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(bookmark, outAction) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDBookmarkGetAction", [{
                bookmark: bookmark
              }, {
                outAction: outAction
              }], ["outAction"]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetAction(_x11, _x12) {
        return _GetAction.apply(this, arguments);
      }
      return GetAction;
    }()
  }, {
    key: "GetDictionary",
    value: function () {
      var _GetDictionary = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(bookmark) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDBookmarkGetDictionary", [{
                bookmark: bookmark
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetDictionary(_x13) {
        return _GetDictionary.apply(this, arguments);
      }
      return GetDictionary;
    }()
  }, {
    key: "GetFirstChild",
    value: function () {
      var _GetFirstChild = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(doc, parent, outFirstChild) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDBookmarkGetFirstChild", [{
                doc: doc
              }, {
                parent: parent
              }, {
                outFirstChild: outFirstChild
              }], ["outFirstChild"]));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetFirstChild(_x14, _x15, _x16) {
        return _GetFirstChild.apply(this, arguments);
      }
      return GetFirstChild;
    }()
  }, {
    key: "GetNextSibling",
    value: function () {
      var _GetNextSibling = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(doc, bookmark, outNextSibling) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDBookmarkGetNextSibling", [{
                doc: doc
              }, {
                bookmark: bookmark
              }, {
                outNextSibling: outNextSibling
              }], ["outNextSibling"]));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetNextSibling(_x17, _x18, _x19) {
        return _GetNextSibling.apply(this, arguments);
      }
      return GetNextSibling;
    }()
  }, {
    key: "InsertBookmark",
    value: function () {
      var _InsertBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(doc, bookmark, title, dest, position) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDBookmarkInsertBookmark", [{
                doc: doc
              }, {
                bookmark: bookmark
              }, {
                title: title
              }, {
                dest: dest
              }, {
                position: position
              }], [], JSFPD_Bookmark_V1));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function InsertBookmark(_x20, _x21, _x22, _x23, _x24) {
        return _InsertBookmark.apply(this, arguments);
      }
      return InsertBookmark;
    }()
  }, {
    key: "GetChildren",
    value: function () {
      var _GetChildren = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(doc, bookmark, children) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDBookmarkGetChildren", [{
                doc: doc
              }, {
                bookmark: bookmark
              }, {
                children: children
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetChildren(_x25, _x26, _x27) {
        return _GetChildren.apply(this, arguments);
      }
      return GetChildren;
    }()
  }, {
    key: "SetProperty",
    value: function () {
      var _SetProperty = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(doc, bookmark, property) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDBookmarkSetProperty", [{
                doc: doc
              }, {
                bookmark: bookmark
              }, {
                property: property
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function SetProperty(_x28, _x29, _x30) {
        return _SetProperty.apply(this, arguments);
      }
      return SetProperty;
    }()
  }, {
    key: "DeleteBookmark",
    value: function () {
      var _DeleteBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(doc, bookmark) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDBookmarkDeleteBookmark", [{
                doc: doc
              }, {
                bookmark: bookmark
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function DeleteBookmark(_x31, _x32) {
        return _DeleteBookmark.apply(this, arguments);
      }
      return DeleteBookmark;
    }()
  }]);
}(BaseClass);

function _callSuper$2B(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2B() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2B() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2B = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Doc_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Doc_V1() {
    _classCallCheck(this, JSFPD_Doc_V1);
    return _callSuper$2B(this, JSFPD_Doc_V1, arguments);
  }
  _inherits(JSFPD_Doc_V1, _BaseClass);
  return _createClass(JSFPD_Doc_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDDocNew", [], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(doc) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDDocDestroy", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "Open",
    value: function () {
      var _Open = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(wszFilePath, szPassword) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDDocOpen", [{
                wszFilePath: wszFilePath
              }, {
                szPassword: szPassword
              }], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function Open(_x2, _x3) {
        return _Open.apply(this, arguments);
      }
      return Open;
    }()
  }, {
    key: "Close",
    value: function () {
      var _Close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(doc) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDDocClose", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function Close(_x4) {
        return _Close.apply(this, arguments);
      }
      return Close;
    }()
  }, {
    key: "GetRoot",
    value: function () {
      var _GetRoot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(doc) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDDocGetRoot", [{
                doc: doc
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetRoot(_x5) {
        return _GetRoot.apply(this, arguments);
      }
      return GetRoot;
    }()
  }, {
    key: "GetPageCount",
    value: function () {
      var _GetPageCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(doc) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDDocGetPageCount", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetPageCount(_x6) {
        return _GetPageCount.apply(this, arguments);
      }
      return GetPageCount;
    }()
  }, {
    key: "GetPage",
    value: function () {
      var _GetPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(doc, page_index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDDocGetPage", [{
                doc: doc
              }, {
                page_index: page_index
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetPage(_x7, _x8) {
        return _GetPage.apply(this, arguments);
      }
      return GetPage;
    }()
  }, {
    key: "GetPageIndex",
    value: function () {
      var _GetPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDDocGetPageIndex", [{
                doc: doc
              }, {
                objNum: objNum
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetPageIndex(_x9, _x10) {
        return _GetPageIndex.apply(this, arguments);
      }
      return GetPageIndex;
    }()
  }, {
    key: "GetUserPermissions",
    value: function () {
      var _GetUserPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(doc) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDDocGetUserPermissions", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetUserPermissions(_x11) {
        return _GetUserPermissions.apply(this, arguments);
      }
      return GetUserPermissions;
    }()
  }, {
    key: "IsOwner",
    value: function () {
      var _IsOwner = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(doc) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDDocIsOwner", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function IsOwner(_x12) {
        return _IsOwner.apply(this, arguments);
      }
      return IsOwner;
    }()
  }, {
    key: "LoadFont",
    value: function () {
      var _LoadFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(doc, fontDict) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDDocLoadFont", [{
                doc: doc
              }, {
                fontDict: fontDict
              }], [], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function LoadFont(_x13, _x14) {
        return _LoadFont.apply(this, arguments);
      }
      return LoadFont;
    }()
  }, {
    key: "AddWindowsFont",
    value: function () {
      var _AddWindowsFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(doc, pLogFont, bVert, bTranslateName) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDDocAddWindowsFont", [{
                doc: doc
              }, {
                pLogFont: pLogFont
              }, {
                bVert: bVert
              }, {
                bTranslateName: bTranslateName
              }], ["pLogFont"], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function AddWindowsFont(_x15, _x16, _x17, _x18) {
        return _AddWindowsFont.apply(this, arguments);
      }
      return AddWindowsFont;
    }()
  }, {
    key: "AddWindowsFontW",
    value: function () {
      var _AddWindowsFontW = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(doc, pLogFont, bVert, bTranslateName) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDDocAddWindowsFontW", [{
                doc: doc
              }, {
                pLogFont: pLogFont
              }, {
                bVert: bVert
              }, {
                bTranslateName: bTranslateName
              }], ["pLogFont"], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function AddWindowsFontW(_x19, _x20, _x21, _x22) {
        return _AddWindowsFontW.apply(this, arguments);
      }
      return AddWindowsFontW;
    }()
  }, {
    key: "AddStandardFont",
    value: function () {
      var _AddStandardFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(doc, font, encoding) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDDocAddStandardFont", [{
                doc: doc
              }, {
                font: font
              }, {
                encoding: encoding
              }], ["font"], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function AddStandardFont(_x23, _x24, _x25) {
        return _AddStandardFont.apply(this, arguments);
      }
      return AddStandardFont;
    }()
  }, {
    key: "CreateNewPage",
    value: function () {
      var _CreateNewPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(doc, iPage) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDDocCreateNewPage", [{
                doc: doc
              }, {
                iPage: iPage
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function CreateNewPage(_x26, _x27) {
        return _CreateNewPage.apply(this, arguments);
      }
      return CreateNewPage;
    }()
  }, {
    key: "DeletePage",
    value: function () {
      var _DeletePage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(doc, iPage) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDDocDeletePage", [{
                doc: doc
              }, {
                iPage: iPage
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function DeletePage(_x28, _x29) {
        return _DeletePage.apply(this, arguments);
      }
      return DeletePage;
    }()
  }, {
    key: "ReloadPages",
    value: function () {
      var _ReloadPages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(doc) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDDocReloadPages", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function ReloadPages(_x30) {
        return _ReloadPages.apply(this, arguments);
      }
      return ReloadPages;
    }()
  }, {
    key: "GetIndirectObject",
    value: function () {
      var _GetIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDDocGetIndirectObject", [{
                doc: doc
              }, {
                objNum: objNum
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function GetIndirectObject(_x31, _x32) {
        return _GetIndirectObject.apply(this, arguments);
      }
      return GetIndirectObject;
    }()
  }, {
    key: "GetIndirectType",
    value: function () {
      var _GetIndirectType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDDocGetIndirectType", [{
                doc: doc
              }, {
                objNum: objNum
              }], []));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function GetIndirectType(_x33, _x34) {
        return _GetIndirectType.apply(this, arguments);
      }
      return GetIndirectType;
    }()
  }, {
    key: "AddIndirectObject",
    value: function () {
      var _AddIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(doc, obj) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDDocAddIndirectObject", [{
                doc: doc
              }, {
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function AddIndirectObject(_x35, _x36) {
        return _AddIndirectObject.apply(this, arguments);
      }
      return AddIndirectObject;
    }()
  }, {
    key: "ReleaseIndirectObject",
    value: function () {
      var _ReleaseIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FPDDocReleaseIndirectObject", [{
                doc: doc
              }, {
                objNum: objNum
              }], []));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function ReleaseIndirectObject(_x37, _x38) {
        return _ReleaseIndirectObject.apply(this, arguments);
      }
      return ReleaseIndirectObject;
    }()
  }, {
    key: "DeleteIndirectObject",
    value: function () {
      var _DeleteIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FPDDocDeleteIndirectObject", [{
                doc: doc
              }, {
                objNum: objNum
              }], []));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function DeleteIndirectObject(_x39, _x40) {
        return _DeleteIndirectObject.apply(this, arguments);
      }
      return DeleteIndirectObject;
    }()
  }, {
    key: "InsertIndirectObject",
    value: function () {
      var _InsertIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(doc, objNum, obj) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FPDDocInsertIndirectObject", [{
                doc: doc
              }, {
                objNum: objNum
              }, {
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function InsertIndirectObject(_x41, _x42, _x43) {
        return _InsertIndirectObject.apply(this, arguments);
      }
      return InsertIndirectObject;
    }()
  }, {
    key: "GetStartPosition",
    value: function () {
      var _GetStartPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(doc) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FPDDocGetStartPosition", [{
                doc: doc
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function GetStartPosition(_x44) {
        return _GetStartPosition.apply(this, arguments);
      }
      return GetStartPosition;
    }()
  }, {
    key: "GetNextAssoc",
    value: function () {
      var _GetNextAssoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(doc, outPos, outObjNum, outObject) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FPDDocGetNextAssoc", [{
                doc: doc
              }, {
                outPos: outPos
              }, {
                outObjNum: outObjNum
              }, {
                outObject: outObject
              }], ["outPos", "outObjNum", "outObject"]));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function GetNextAssoc(_x45, _x46, _x47, _x48) {
        return _GetNextAssoc.apply(this, arguments);
      }
      return GetNextAssoc;
    }()
  }, {
    key: "GetParser",
    value: function () {
      var _GetParser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(doc) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FPDDocGetParser", [{
                doc: doc
              }], [], JSFPD_Parser_V1));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function GetParser(_x49) {
        return _GetParser.apply(this, arguments);
      }
      return GetParser;
    }()
  }, {
    key: "GetIndirectObjsCount",
    value: function () {
      var _GetIndirectObjsCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(doc) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FPDDocGetIndirectObjsCount", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function GetIndirectObjsCount(_x50) {
        return _GetIndirectObjsCount.apply(this, arguments);
      }
      return GetIndirectObjsCount;
    }()
  }, {
    key: "Save2",
    value: function () {
      var _Save = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(doc, wStrfilename, flags, bEnable) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", dispatchFun("FPDDocSave2", [{
                doc: doc
              }, {
                wStrfilename: wStrfilename
              }, {
                flags: flags
              }, {
                bEnable: bEnable
              }], []));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function Save2(_x51, _x52, _x53, _x54) {
        return _Save.apply(this, arguments);
      }
      return Save2;
    }()
  }, {
    key: "MetadataGetString",
    value: function () {
      var _MetadataGetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(doc, wsItem, wsStr, pbUseInfoOrXML) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", dispatchFun("FPDDocMetadataGetString", [{
                doc: doc
              }, {
                wsItem: wsItem
              }, {
                wsStr: wsStr
              }, {
                pbUseInfoOrXML: pbUseInfoOrXML
              }], ["pbUseInfoOrXML"]));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function MetadataGetString(_x55, _x56, _x57, _x58) {
        return _MetadataGetString.apply(this, arguments);
      }
      return MetadataGetString;
    }()
  }, {
    key: "MetadataSetString",
    value: function () {
      var _MetadataSetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(doc, wsItem, wsStr, bUTF8) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", dispatchFun("FPDDocMetadataSetString", [{
                doc: doc
              }, {
                wsItem: wsItem
              }, {
                wsStr: wsStr
              }, {
                bUTF8: bUTF8
              }], []));
            case 1:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function MetadataSetString(_x59, _x60, _x61, _x62) {
        return _MetadataSetString.apply(this, arguments);
      }
      return MetadataSetString;
    }()
  }, {
    key: "MetadataSetDateTime",
    value: function () {
      var _MetadataSetDateTime = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(doc, wsItem, dt) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              return _context31.abrupt("return", dispatchFun("FPDDocMetadataSetDateTime", [{
                doc: doc
              }, {
                wsItem: wsItem
              }, {
                dt: dt
              }], []));
            case 1:
            case "end":
              return _context31.stop();
          }
        }, _callee31);
      }));
      function MetadataSetDateTime(_x63, _x64, _x65) {
        return _MetadataSetDateTime.apply(this, arguments);
      }
      return MetadataSetDateTime;
    }()
  }, {
    key: "AddNewIndirectObject",
    value: function () {
      var _AddNewIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(doc, object_type) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              return _context32.abrupt("return", dispatchFun("FPDDocAddNewIndirectObject", [{
                doc: doc
              }, {
                object_type: object_type
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context32.stop();
          }
        }, _callee32);
      }));
      function AddNewIndirectObject(_x66, _x67) {
        return _AddNewIndirectObject.apply(this, arguments);
      }
      return AddNewIndirectObject;
    }()
  }, {
    key: "LoadPages",
    value: function () {
      var _LoadPages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(doc) {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              return _context33.abrupt("return", dispatchFun("FPDDocLoadPages", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context33.stop();
          }
        }, _callee33);
      }));
      function LoadPages(_x68) {
        return _LoadPages.apply(this, arguments);
      }
      return LoadPages;
    }()
  }, {
    key: "MetadataGetRoot",
    value: function () {
      var _MetadataGetRoot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(doc) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              return _context34.abrupt("return", dispatchFun("FPDDocMetadataGetRoot", [{
                doc: doc
              }], [], JSFS_XMLElement_V2));
            case 1:
            case "end":
              return _context34.stop();
          }
        }, _callee34);
      }));
      function MetadataGetRoot(_x69) {
        return _MetadataGetRoot.apply(this, arguments);
      }
      return MetadataGetRoot;
    }()
  }, {
    key: "SetFileVersion",
    value: function () {
      var _SetFileVersion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(doc, fileVersion) {
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              return _context35.abrupt("return", dispatchFun("FPDDocSetFileVersion", [{
                doc: doc
              }, {
                fileVersion: fileVersion
              }], []));
            case 1:
            case "end":
              return _context35.stop();
          }
        }, _callee35);
      }));
      function SetFileVersion(_x70, _x71) {
        return _SetFileVersion.apply(this, arguments);
      }
      return SetFileVersion;
    }()
  }, {
    key: "GetFileVersion",
    value: function () {
      var _GetFileVersion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(doc) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              return _context36.abrupt("return", dispatchFun("FPDDocGetFileVersion", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context36.stop();
          }
        }, _callee36);
      }));
      function GetFileVersion(_x72) {
        return _GetFileVersion.apply(this, arguments);
      }
      return GetFileVersion;
    }()
  }, {
    key: "GetRootBookmark",
    value: function () {
      var _GetRootBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37(doc) {
        return _regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              return _context37.abrupt("return", dispatchFun("FPDDocGetRootBookmark", [{
                doc: doc
              }], [], JSFPD_Bookmark_V1));
            case 1:
            case "end":
              return _context37.stop();
          }
        }, _callee37);
      }));
      function GetRootBookmark(_x73) {
        return _GetRootBookmark.apply(this, arguments);
      }
      return GetRootBookmark;
    }()
  }]);
}(BaseClass);

function _callSuper$2A(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2A() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2A() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2A = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_TextSelectTool_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_TextSelectTool_V1() {
    _classCallCheck(this, JSFR_TextSelectTool_V1);
    return _callSuper$2A(this, JSFR_TextSelectTool_V1, arguments);
  }
  _inherits(JSFR_TextSelectTool_V1, _BaseClass);
  return _createClass(JSFR_TextSelectTool_V1, [{
    key: "Create",
    value: function () {
      var _Create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(doc) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRTextSelectToolCreate", [{
                doc: doc
              }], [], JSFR_TextSelectTool_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function Create(_x) {
        return _Create.apply(this, arguments);
      }
      return Create;
    }()
  }, {
    key: "GetSelectedText",
    value: function () {
      var _GetSelectedText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(textSelectTool, outText) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRTextSelectToolGetSelectedText", [{
                textSelectTool: textSelectTool
              }, {
                outText: outText
              }], ["outText"]));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetSelectedText(_x2, _x3) {
        return _GetSelectedText.apply(this, arguments);
      }
      return GetSelectedText;
    }()
  }, {
    key: "ClearSelection",
    value: function () {
      var _ClearSelection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(textSelectTool) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRTextSelectToolClearSelection", [{
                textSelectTool: textSelectTool
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function ClearSelection(_x4) {
        return _ClearSelection.apply(this, arguments);
      }
      return ClearSelection;
    }()
  }, {
    key: "EnumTextObjectRect",
    value: function () {
      var _EnumTextObjectRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(textSelectTool, pageIndex, outRectArray, nCount) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRTextSelectToolEnumTextObjectRect", [{
                textSelectTool: textSelectTool
              }, {
                pageIndex: pageIndex
              }, {
                outRectArray: outRectArray
              }, {
                nCount: nCount
              }], ["outRectArray", "nCount"]));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function EnumTextObjectRect(_x5, _x6, _x7, _x8) {
        return _EnumTextObjectRect.apply(this, arguments);
      }
      return EnumTextObjectRect;
    }()
  }, {
    key: "AddSelect",
    value: function () {
      var _AddSelect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(textSelectTool, pPageView, nStartIndex, nEndIndex, bShowLayer, bTextIndex) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRTextSelectToolAddSelect", [{
                textSelectTool: textSelectTool
              }, {
                pPageView: pPageView
              }, {
                nStartIndex: nStartIndex
              }, {
                nEndIndex: nEndIndex
              }, {
                bShowLayer: bShowLayer
              }, {
                bTextIndex: bTextIndex
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function AddSelect(_x9, _x10, _x11, _x12, _x13, _x14) {
        return _AddSelect.apply(this, arguments);
      }
      return AddSelect;
    }()
  }, {
    key: "GetSelectedText2",
    value: function () {
      var _GetSelectedText2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(textSelectTool, bLineBreakBetweenPages, outText) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FRTextSelectToolGetSelectedText2", [{
                textSelectTool: textSelectTool
              }, {
                bLineBreakBetweenPages: bLineBreakBetweenPages
              }, {
                outText: outText
              }], ["outText"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetSelectedText2(_x15, _x16, _x17) {
        return _GetSelectedText2.apply(this, arguments);
      }
      return GetSelectedText2;
    }()
  }, {
    key: "AddSelect2",
    value: function () {
      var _AddSelect2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(textSelectTool, pPageView, arFormRects) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FRTextSelectToolAddSelect2", [{
                textSelectTool: textSelectTool
              }, {
                pPageView: pPageView
              }, {
                arFormRects: arFormRects
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function AddSelect2(_x18, _x19, _x20) {
        return _AddSelect2.apply(this, arguments);
      }
      return AddSelect2;
    }()
  }, {
    key: "AddSelectTextRects",
    value: function () {
      var _AddSelectTextRects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(textSelectTool, pPageView, arTextRects, bContains) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FRTextSelectToolAddSelectTextRects", [{
                textSelectTool: textSelectTool
              }, {
                pPageView: pPageView
              }, {
                arTextRects: arTextRects
              }, {
                bContains: bContains
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function AddSelectTextRects(_x21, _x22, _x23, _x24) {
        return _AddSelectTextRects.apply(this, arguments);
      }
      return AddSelectTextRects;
    }()
  }, {
    key: "DeselectAll",
    value: function () {
      var _DeselectAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(textSelectTool) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FRTextSelectToolDeselectAll", [{
                textSelectTool: textSelectTool
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function DeselectAll(_x25) {
        return _DeselectAll.apply(this, arguments);
      }
      return DeselectAll;
    }()
  }]);
}(BaseClass);

function _callSuper$2z(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2z() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2z() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2z = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_PageObject_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_PageObject_V1() {
    _classCallCheck(this, JSFPD_PageObject_V1);
    return _callSuper$2z(this, JSFPD_PageObject_V1, arguments);
  }
  _inherits(JSFPD_PageObject_V1, _BaseClass);
  return _createClass(JSFPD_PageObject_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(type) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDPageObjectNew", [{
                type: type
              }], [], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pageObj) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDPageObjectDestroy", [{
                pageObj: pageObj
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x2) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "SetColorState",
    value: function () {
      var _SetColorState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(pageObj, state) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDPageObjectSetColorState", [{
                pageObj: pageObj
              }, {
                state: state
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function SetColorState(_x3, _x4) {
        return _SetColorState.apply(this, arguments);
      }
      return SetColorState;
    }()
  }, {
    key: "GetType",
    value: function () {
      var _GetType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(pageObj) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDPageObjectGetType", [{
                pageObj: pageObj
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetType(_x5) {
        return _GetType.apply(this, arguments);
      }
      return GetType;
    }()
  }]);
}(BaseClass);

function _callSuper$2y(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2y() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2y() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2y = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Form_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Form_V1() {
    _classCallCheck(this, JSFPD_Form_V1);
    return _callSuper$2y(this, JSFPD_Form_V1, arguments);
  }
  _inherits(JSFPD_Form_V1, _BaseClass);
  return _createClass(JSFPD_Form_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(doc, pageResources, formStream) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDFormNew", [{
                doc: doc
              }, {
                pageResources: pageResources
              }, {
                formStream: formStream
              }], [], JSFPD_Form_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x, _x2, _x3) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(form) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDFormDestroy", [{
                form: form
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x4) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "ContinueParse",
    value: function () {
      var _ContinueParse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(form, pauseHandler) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDFormContinueParse", [{
                form: form
              }, {
                pauseHandler: pauseHandler
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function ContinueParse(_x5, _x6) {
        return _ContinueParse.apply(this, arguments);
      }
      return ContinueParse;
    }()
  }, {
    key: "GetParseState",
    value: function () {
      var _GetParseState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(form) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDFormGetParseState", [{
                form: form
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetParseState(_x7) {
        return _GetParseState.apply(this, arguments);
      }
      return GetParseState;
    }()
  }, {
    key: "IsParsed",
    value: function () {
      var _IsParsed = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(form) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDFormIsParsed", [{
                form: form
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function IsParsed(_x8) {
        return _IsParsed.apply(this, arguments);
      }
      return IsParsed;
    }()
  }, {
    key: "GetFirstObjectPosition",
    value: function () {
      var _GetFirstObjectPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(form) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDFormGetFirstObjectPosition", [{
                form: form
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetFirstObjectPosition(_x9) {
        return _GetFirstObjectPosition.apply(this, arguments);
      }
      return GetFirstObjectPosition;
    }()
  }, {
    key: "GetLastObjectPosition",
    value: function () {
      var _GetLastObjectPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(form) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDFormGetLastObjectPosition", [{
                form: form
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetLastObjectPosition(_x10) {
        return _GetLastObjectPosition.apply(this, arguments);
      }
      return GetLastObjectPosition;
    }()
  }, {
    key: "GetNextObject",
    value: function () {
      var _GetNextObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(form, inOutPos) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDFormGetNextObject", [{
                form: form
              }, {
                inOutPos: inOutPos
              }], ["inOutPos"], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetNextObject(_x11, _x12) {
        return _GetNextObject.apply(this, arguments);
      }
      return GetNextObject;
    }()
  }, {
    key: "GetPrevObject",
    value: function () {
      var _GetPrevObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(form, inOutPos) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDFormGetPrevObject", [{
                form: form
              }, {
                inOutPos: inOutPos
              }], ["inOutPos"], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetPrevObject(_x13, _x14) {
        return _GetPrevObject.apply(this, arguments);
      }
      return GetPrevObject;
    }()
  }, {
    key: "GetObjectAt",
    value: function () {
      var _GetObjectAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(form, pos) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDFormGetObjectAt", [{
                form: form
              }, {
                pos: pos
              }], [], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetObjectAt(_x15, _x16) {
        return _GetObjectAt.apply(this, arguments);
      }
      return GetObjectAt;
    }()
  }, {
    key: "CountObjects",
    value: function () {
      var _CountObjects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(form) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDFormCountObjects", [{
                form: form
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function CountObjects(_x17) {
        return _CountObjects.apply(this, arguments);
      }
      return CountObjects;
    }()
  }, {
    key: "GetObjectIndex",
    value: function () {
      var _GetObjectIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(form, obj) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDFormGetObjectIndex", [{
                form: form
              }, {
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetObjectIndex(_x18, _x19) {
        return _GetObjectIndex.apply(this, arguments);
      }
      return GetObjectIndex;
    }()
  }, {
    key: "GetObjectByIndex",
    value: function () {
      var _GetObjectByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(form, index) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDFormGetObjectByIndex", [{
                form: form
              }, {
                index: index
              }], [], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetObjectByIndex(_x20, _x21) {
        return _GetObjectByIndex.apply(this, arguments);
      }
      return GetObjectByIndex;
    }()
  }, {
    key: "ReplaceObject",
    value: function () {
      var _ReplaceObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(form, pos, newObj) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDFormReplaceObject", [{
                form: form
              }, {
                pos: pos
              }, {
                newObj: newObj
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function ReplaceObject(_x22, _x23, _x24) {
        return _ReplaceObject.apply(this, arguments);
      }
      return ReplaceObject;
    }()
  }, {
    key: "InsertObject",
    value: function () {
      var _InsertObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(form, posInsertAfter, newObj) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDFormInsertObject", [{
                form: form
              }, {
                posInsertAfter: posInsertAfter
              }, {
                newObj: newObj
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function InsertObject(_x25, _x26, _x27) {
        return _InsertObject.apply(this, arguments);
      }
      return InsertObject;
    }()
  }, {
    key: "RemoveObject",
    value: function () {
      var _RemoveObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(form, pos) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDFormRemoveObject", [{
                form: form
              }, {
                pos: pos
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function RemoveObject(_x28, _x29) {
        return _RemoveObject.apply(this, arguments);
      }
      return RemoveObject;
    }()
  }, {
    key: "MoveObject",
    value: function () {
      var _MoveObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(form, pos, newPosAfter) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDFormMoveObject", [{
                form: form
              }, {
                pos: pos
              }, {
                newPosAfter: newPosAfter
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function MoveObject(_x30, _x31, _x32) {
        return _MoveObject.apply(this, arguments);
      }
      return MoveObject;
    }()
  }, {
    key: "CalcBoundingBox",
    value: function () {
      var _CalcBoundingBox = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(form) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDFormCalcBoundingBox", [{
                form: form
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function CalcBoundingBox(_x33) {
        return _CalcBoundingBox.apply(this, arguments);
      }
      return CalcBoundingBox;
    }()
  }, {
    key: "GetDict",
    value: function () {
      var _GetDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(form) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDFormGetDict", [{
                form: form
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function GetDict(_x34) {
        return _GetDict.apply(this, arguments);
      }
      return GetDict;
    }()
  }, {
    key: "GetDocument",
    value: function () {
      var _GetDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(form) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDFormGetDocument", [{
                form: form
              }], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function GetDocument(_x35) {
        return _GetDocument.apply(this, arguments);
      }
      return GetDocument;
    }()
  }, {
    key: "GetFormStream",
    value: function () {
      var _GetFormStream = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(form) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FPDFormGetFormStream", [{
                form: form
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function GetFormStream(_x36) {
        return _GetFormStream.apply(this, arguments);
      }
      return GetFormStream;
    }()
  }, {
    key: "StartParse",
    value: function () {
      var _StartParse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(form, graphicStates, pParentMatrix, Type3Char, opts) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FPDFormStartParse", [{
                form: form
              }, {
                graphicStates: graphicStates
              }, {
                pParentMatrix: pParentMatrix
              }, {
                Type3Char: Type3Char
              }, {
                opts: opts
              }], ["pParentMatrix"]));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function StartParse(_x37, _x38, _x39, _x40, _x41) {
        return _StartParse.apply(this, arguments);
      }
      return StartParse;
    }()
  }, {
    key: "ParseContent",
    value: function () {
      var _ParseContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(form, graphicStates, pParentMatrix, Type3Char, opts) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FPDFormParseContent", [{
                form: form
              }, {
                graphicStates: graphicStates
              }, {
                pParentMatrix: pParentMatrix
              }, {
                Type3Char: Type3Char
              }, {
                opts: opts
              }], ["pParentMatrix"]));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function ParseContent(_x42, _x43, _x44, _x45, _x46) {
        return _ParseContent.apply(this, arguments);
      }
      return ParseContent;
    }()
  }, {
    key: "Clone",
    value: function () {
      var _Clone = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(form) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FPDFormClone", [{
                form: form
              }], [], JSFPD_Form_V1));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function Clone(_x47) {
        return _Clone.apply(this, arguments);
      }
      return Clone;
    }()
  }, {
    key: "GenerateContent",
    value: function () {
      var _GenerateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(form) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FPDFormGenerateContent", [{
                form: form
              }], []));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function GenerateContent(_x48) {
        return _GenerateContent.apply(this, arguments);
      }
      return GenerateContent;
    }()
  }, {
    key: "StartGenerateContent",
    value: function () {
      var _StartGenerateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(generator, fileStream) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FPDFormStartGenerateContent", [{
                generator: generator
              }, {
                fileStream: fileStream
              }], []));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function StartGenerateContent(_x49, _x50) {
        return _StartGenerateContent.apply(this, arguments);
      }
      return StartGenerateContent;
    }()
  }, {
    key: "ContinueGenerateContent",
    value: function () {
      var _ContinueGenerateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(generator, pause) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FPDFormContinueGenerateContent", [{
                generator: generator
              }, {
                pause: pause
              }], []));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function ContinueGenerateContent(_x51, _x52) {
        return _ContinueGenerateContent.apply(this, arguments);
      }
      return ContinueGenerateContent;
    }()
  }, {
    key: "GetResourcesDictionary",
    value: function () {
      var _GetResourcesDictionary = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(form) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", dispatchFun("FPDFormGetResourcesDictionary", [{
                form: form
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function GetResourcesDictionary(_x53) {
        return _GetResourcesDictionary.apply(this, arguments);
      }
      return GetResourcesDictionary;
    }()
  }, {
    key: "SetResourcesDictionary",
    value: function () {
      var _SetResourcesDictionary = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(form, resourcesDict) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", dispatchFun("FPDFormSetResourcesDictionary", [{
                form: form
              }, {
                resourcesDict: resourcesDict
              }], []));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function SetResourcesDictionary(_x54, _x55) {
        return _SetResourcesDictionary.apply(this, arguments);
      }
      return SetResourcesDictionary;
    }()
  }, {
    key: "SetFormStream",
    value: function () {
      var _SetFormStream = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(form, stream) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", dispatchFun("FPDFormSetFormStream", [{
                form: form
              }, {
                stream: stream
              }], []));
            case 1:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function SetFormStream(_x56, _x57) {
        return _SetFormStream.apply(this, arguments);
      }
      return SetFormStream;
    }()
  }]);
}(BaseClass);

function _callSuper$2x(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2x() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2x() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2x = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_AnnotList = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_AnnotList() {
    _classCallCheck(this, JSFPD_AnnotList);
    return _callSuper$2x(this, JSFPD_AnnotList, arguments);
  }
  _inherits(JSFPD_AnnotList, _BaseClass);
  return _createClass(JSFPD_AnnotList);
}(BaseClass);

function _callSuper$2w(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2w() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2w() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2w = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Annot_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Annot_V1() {
    _classCallCheck(this, JSFPD_Annot_V1);
    return _callSuper$2w(this, JSFPD_Annot_V1, arguments);
  }
  _inherits(JSFPD_Annot_V1, _BaseClass);
  return _createClass(JSFPD_Annot_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dict) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDAnnotNew", [{
                dict: dict
              }], [], JSFPD_Annot_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(annot) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDAnnotDestroy", [{
                annot: annot
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x2) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetAnnotDict",
    value: function () {
      var _GetAnnotDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(annot) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDAnnotGetAnnotDict", [{
                annot: annot
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetAnnotDict(_x3) {
        return _GetAnnotDict.apply(this, arguments);
      }
      return GetAnnotDict;
    }()
  }, {
    key: "GetSubType",
    value: function () {
      var _GetSubType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(annot, outSubType) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDAnnotGetSubType", [{
                annot: annot
              }, {
                outSubType: outSubType
              }], ["outSubType"]));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetSubType(_x4, _x5) {
        return _GetSubType.apply(this, arguments);
      }
      return GetSubType;
    }()
  }, {
    key: "GetFlags",
    value: function () {
      var _GetFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(annot) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDAnnotGetFlags", [{
                annot: annot
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetFlags(_x6) {
        return _GetFlags.apply(this, arguments);
      }
      return GetFlags;
    }()
  }, {
    key: "GetRect",
    value: function () {
      var _GetRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(annot) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDAnnotGetRect", [{
                annot: annot
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetRect(_x7) {
        return _GetRect.apply(this, arguments);
      }
      return GetRect;
    }()
  }, {
    key: "GetAPForm",
    value: function () {
      var _GetAPForm = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(annot, page, eMode) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDAnnotGetAPForm", [{
                annot: annot
              }, {
                page: page
              }, {
                eMode: eMode
              }], [], JSFPD_Form_V1));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetAPForm(_x8, _x9, _x10) {
        return _GetAPForm.apply(this, arguments);
      }
      return GetAPForm;
    }()
  }, {
    key: "GetAnnotList",
    value: function () {
      var _GetAnnotList = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(annot) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDAnnotGetAnnotList", [{
                annot: annot
              }], [], JSFPD_AnnotList));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetAnnotList(_x11) {
        return _GetAnnotList.apply(this, arguments);
      }
      return GetAnnotList;
    }()
  }]);
}(BaseClass);

function _callSuper$2v(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2v() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2v() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2v = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_Annot_V5 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_Annot_V5() {
    _classCallCheck(this, JSFR_Annot_V5);
    return _callSuper$2v(this, JSFR_Annot_V5, arguments);
  }
  _inherits(JSFR_Annot_V5, _BaseClass);
  return _createClass(JSFR_Annot_V5, [{
    key: "GetPDFAnnot",
    value: function () {
      var _GetPDFAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(frAnnot) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRAnnotGetPDFAnnot", [{
                frAnnot: frAnnot
              }], [], JSFPD_Annot_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function GetPDFAnnot(_x) {
        return _GetPDFAnnot.apply(this, arguments);
      }
      return GetPDFAnnot;
    }()
  }, {
    key: "GetType",
    value: function () {
      var _GetType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(frAnnot, outType) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRAnnotGetType", [{
                frAnnot: frAnnot
              }, {
                outType: outType
              }], ["outType"]));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetType(_x2, _x3) {
        return _GetType.apply(this, arguments);
      }
      return GetType;
    }()
  }, {
    key: "GetSubType",
    value: function () {
      var _GetSubType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(frAnnot, outSubType) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRAnnotGetSubType", [{
                frAnnot: frAnnot
              }, {
                outSubType: outSubType
              }], ["outSubType"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetSubType(_x4, _x5) {
        return _GetSubType.apply(this, arguments);
      }
      return GetSubType;
    }()
  }, {
    key: "SetVisible",
    value: function () {
      var _SetVisible = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(frAnnot, bShow) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRAnnotSetVisible", [{
                frAnnot: frAnnot
              }, {
                bShow: bShow
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function SetVisible(_x6, _x7) {
        return _SetVisible.apply(this, arguments);
      }
      return SetVisible;
    }()
  }, {
    key: "IsSelected",
    value: function () {
      var _IsSelected = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(frAnnot) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRAnnotIsSelected", [{
                frAnnot: frAnnot
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function IsSelected(_x8) {
        return _IsSelected.apply(this, arguments);
      }
      return IsSelected;
    }()
  }]);
}(BaseClass);

function _callSuper$2u(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2u() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2u() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2u = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_Doc_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_Doc_V1() {
    _classCallCheck(this, JSFR_Doc_V1);
    return _callSuper$2u(this, JSFR_Doc_V1, arguments);
  }
  _inherits(JSFR_Doc_V1, _BaseClass);
  return _createClass(JSFR_Doc_V1, [{
    key: "OpenFromFile",
    value: function () {
      var _OpenFromFile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(wszFile, szPassword, bMakeVisible, bAddToMRU) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRDocOpenFromFile", [{
                wszFile: wszFile
              }, {
                szPassword: szPassword
              }, {
                bMakeVisible: bMakeVisible
              }, {
                bAddToMRU: bAddToMRU
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function OpenFromFile(_x, _x2, _x3, _x4) {
        return _OpenFromFile.apply(this, arguments);
      }
      return OpenFromFile;
    }()
  }, {
    key: "OpenFromPDDoc",
    value: function () {
      var _OpenFromPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pddoc, lpwsTitle) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRDocOpenFromPDDoc", [{
                pddoc: pddoc
              }, {
                lpwsTitle: lpwsTitle
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function OpenFromPDDoc(_x5, _x6) {
        return _OpenFromPDDoc.apply(this, arguments);
      }
      return OpenFromPDDoc;
    }()
  }, {
    key: "FromPDDoc",
    value: function () {
      var _FromPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(pddoc) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRDocFromPDDoc", [{
                pddoc: pddoc
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function FromPDDoc(_x7) {
        return _FromPDDoc.apply(this, arguments);
      }
      return FromPDDoc;
    }()
  }, {
    key: "Close",
    value: function () {
      var _Close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(doc, bPromptToSave, bDelay, bShowCancel) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRDocClose", [{
                doc: doc
              }, {
                bPromptToSave: bPromptToSave
              }, {
                bDelay: bDelay
              }, {
                bShowCancel: bShowCancel
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function Close(_x8, _x9, _x10, _x11) {
        return _Close.apply(this, arguments);
      }
      return Close;
    }()
  }, {
    key: "GetPDDoc",
    value: function () {
      var _GetPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(doc) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRDocGetPDDoc", [{
                doc: doc
              }], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetPDDoc(_x12) {
        return _GetPDDoc.apply(this, arguments);
      }
      return GetPDDoc;
    }()
  }, {
    key: "DoSave",
    value: function () {
      var _DoSave = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(doc, proc, pProcData, bShowProgressBar) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              proc.register();
              return _context6.abrupt("return", dispatchFun("FRDocDoSave", [{
                doc: doc
              }, {
                proc: proc
              }, {
                pProcData: pProcData
              }, {
                bShowProgressBar: bShowProgressBar
              }], ["pProcData"]));
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function DoSave(_x13, _x14, _x15, _x16) {
        return _DoSave.apply(this, arguments);
      }
      return DoSave;
    }()
  }, {
    key: "DoSaveAs",
    value: function () {
      var _DoSaveAs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(doc) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FRDocDoSaveAs", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function DoSaveAs(_x17) {
        return _DoSaveAs.apply(this, arguments);
      }
      return DoSaveAs;
    }()
  }, {
    key: "SetChangeMark",
    value: function () {
      var _SetChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(doc) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FRDocSetChangeMark", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function SetChangeMark(_x18) {
        return _SetChangeMark.apply(this, arguments);
      }
      return SetChangeMark;
    }()
  }, {
    key: "GetChangeMark",
    value: function () {
      var _GetChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(doc) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FRDocGetChangeMark", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetChangeMark(_x19) {
        return _GetChangeMark.apply(this, arguments);
      }
      return GetChangeMark;
    }()
  }, {
    key: "ClearChangeMark",
    value: function () {
      var _ClearChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(doc) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FRDocClearChangeMark", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function ClearChangeMark(_x20) {
        return _ClearChangeMark.apply(this, arguments);
      }
      return ClearChangeMark;
    }()
  }, {
    key: "DoPrint",
    value: function () {
      var _DoPrint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(doc) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FRDocDoPrint", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function DoPrint(_x21) {
        return _DoPrint.apply(this, arguments);
      }
      return DoPrint;
    }()
  }, {
    key: "PrintPages",
    value: function () {
      var _PrintPages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(doc, firstPage, lastPage) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FRDocPrintPages", [{
                doc: doc
              }, {
                firstPage: firstPage
              }, {
                lastPage: lastPage
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function PrintPages(_x22, _x23, _x24) {
        return _PrintPages.apply(this, arguments);
      }
      return PrintPages;
    }()
  }, {
    key: "PrintSetup",
    value: function () {
      var _PrintSetup = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(doc) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FRDocPrintSetup", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function PrintSetup(_x25) {
        return _PrintSetup.apply(this, arguments);
      }
      return PrintSetup;
    }()
  }, {
    key: "CountDocViews",
    value: function () {
      var _CountDocViews = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(doc) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FRDocCountDocViews", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function CountDocViews(_x26) {
        return _CountDocViews.apply(this, arguments);
      }
      return CountDocViews;
    }()
  }, {
    key: "GetDocView",
    value: function () {
      var _GetDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(doc, iView) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FRDocGetDocView", [{
                doc: doc
              }, {
                iView: iView
              }], [], JSFR_DocView_V1));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function GetDocView(_x27, _x28) {
        return _GetDocView.apply(this, arguments);
      }
      return GetDocView;
    }()
  }, {
    key: "GetCurrentDocView",
    value: function () {
      var _GetCurrentDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(doc) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FRDocGetCurrentDocView", [{
                doc: doc
              }], [], JSFR_DocView_V1));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function GetCurrentDocView(_x29) {
        return _GetCurrentDocView.apply(this, arguments);
      }
      return GetCurrentDocView;
    }()
  }, {
    key: "GetPermissions",
    value: function () {
      var _GetPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(doc) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FRDocGetPermissions", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function GetPermissions(_x30) {
        return _GetPermissions.apply(this, arguments);
      }
      return GetPermissions;
    }()
  }, {
    key: "SetPermissions",
    value: function () {
      var _SetPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(doc, dwPermission) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FRDocSetPermissions", [{
                doc: doc
              }, {
                dwPermission: dwPermission
              }], []));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function SetPermissions(_x31, _x32) {
        return _SetPermissions.apply(this, arguments);
      }
      return SetPermissions;
    }()
  }, {
    key: "DoPrintSilently",
    value: function () {
      var _DoPrintSilently = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(doc) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FRDocDoPrintSilently", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function DoPrintSilently(_x33) {
        return _DoPrintSilently.apply(this, arguments);
      }
      return DoPrintSilently;
    }()
  }, {
    key: "GetTextSelectTool",
    value: function () {
      var _GetTextSelectTool = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(doc) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FRDocGetTextSelectTool", [{
                doc: doc
              }], [], JSFR_TextSelectTool_V1));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function GetTextSelectTool(_x34) {
        return _GetTextSelectTool.apply(this, arguments);
      }
      return GetTextSelectTool;
    }()
  }, {
    key: "KillFocusAnnot",
    value: function () {
      var _KillFocusAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(doc) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FRDocKillFocusAnnot", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function KillFocusAnnot(_x35) {
        return _KillFocusAnnot.apply(this, arguments);
      }
      return KillFocusAnnot;
    }()
  }, {
    key: "SetInputPasswordProc",
    value: function () {
      var _SetInputPasswordProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(doc, proc) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              proc.register();
              return _context22.abrupt("return", dispatchFun("FRDocSetInputPasswordProc", [{
                doc: doc
              }, {
                proc: proc
              }], []));
            case 2:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function SetInputPasswordProc(_x36, _x37) {
        return _SetInputPasswordProc.apply(this, arguments);
      }
      return SetInputPasswordProc;
    }()
  }, {
    key: "SetFocusAnnot",
    value: function () {
      var _SetFocusAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(doc, pFocusAnnot, bDelay) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FRDocSetFocusAnnot", [{
                doc: doc
              }, {
                pFocusAnnot: pFocusAnnot
              }, {
                bDelay: bDelay
              }], []));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function SetFocusAnnot(_x38, _x39, _x40) {
        return _SetFocusAnnot.apply(this, arguments);
      }
      return SetFocusAnnot;
    }()
  }, {
    key: "ReloadPage",
    value: function () {
      var _ReloadPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(doc, iPage, bDisableGoto) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FRDocReloadPage", [{
                doc: doc
              }, {
                iPage: iPage
              }, {
                bDisableGoto: bDisableGoto
              }], []));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function ReloadPage(_x41, _x42, _x43) {
        return _ReloadPage.apply(this, arguments);
      }
      return ReloadPage;
    }()
  }, {
    key: "OpenFromFile2",
    value: function () {
      var _OpenFromFile2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(wszFile, szPassword, bMakeVisible, bAddToMRU, bCheckCertPassword) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FRDocOpenFromFile2", [{
                wszFile: wszFile
              }, {
                szPassword: szPassword
              }, {
                bMakeVisible: bMakeVisible
              }, {
                bAddToMRU: bAddToMRU
              }, {
                bCheckCertPassword: bCheckCertPassword
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function OpenFromFile2(_x44, _x45, _x46, _x47, _x48) {
        return _OpenFromFile2.apply(this, arguments);
      }
      return OpenFromFile2;
    }()
  }, {
    key: "ConvertPdfToOtherFormat",
    value: function () {
      var _ConvertPdfToOtherFormat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(wsSrcPath, wsDesPath, pageAry, wsFileExt, wsPwd, bShowProgress) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FRDocConvertPdfToOtherFormat", [{
                wsSrcPath: wsSrcPath
              }, {
                wsDesPath: wsDesPath
              }, {
                pageAry: pageAry
              }, {
                wsFileExt: wsFileExt
              }, {
                wsPwd: wsPwd
              }, {
                bShowProgress: bShowProgress
              }], []));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function ConvertPdfToOtherFormat(_x49, _x50, _x51, _x52, _x53, _x54) {
        return _ConvertPdfToOtherFormat.apply(this, arguments);
      }
      return ConvertPdfToOtherFormat;
    }()
  }, {
    key: "AddWatermark",
    value: function () {
      var _AddWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(doc, pWatermarkInfo) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FRDocAddWatermark", [{
                doc: doc
              }, {
                pWatermarkInfo: pWatermarkInfo
              }], ["pWatermarkInfo"]));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function AddWatermark(_x55, _x56) {
        return _AddWatermark.apply(this, arguments);
      }
      return AddWatermark;
    }()
  }, {
    key: "AddAndUpdateWatermark",
    value: function () {
      var _AddAndUpdateWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(doc, pWatermarkInfo) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", dispatchFun("FRDocAddAndUpdateWatermark", [{
                doc: doc
              }, {
                pWatermarkInfo: pWatermarkInfo
              }], ["pWatermarkInfo"]));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function AddAndUpdateWatermark(_x57, _x58) {
        return _AddAndUpdateWatermark.apply(this, arguments);
      }
      return AddAndUpdateWatermark;
    }()
  }, {
    key: "RemoveWatermark",
    value: function () {
      var _RemoveWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(doc, szSpecifyDicValue) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", dispatchFun("FRDocRemoveWatermark", [{
                doc: doc
              }, {
                szSpecifyDicValue: szSpecifyDicValue
              }], []));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function RemoveWatermark(_x59, _x60) {
        return _RemoveWatermark.apply(this, arguments);
      }
      return RemoveWatermark;
    }()
  }, {
    key: "RemoveAndUpdateWatermark",
    value: function () {
      var _RemoveAndUpdateWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(doc, szSpecifyDicValue) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", dispatchFun("FRDocRemoveAndUpdateWatermark", [{
                doc: doc
              }, {
                szSpecifyDicValue: szSpecifyDicValue
              }], []));
            case 1:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function RemoveAndUpdateWatermark(_x61, _x62) {
        return _RemoveAndUpdateWatermark.apply(this, arguments);
      }
      return RemoveAndUpdateWatermark;
    }()
  }, {
    key: "AddHeaderFooter",
    value: function () {
      var _AddHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(doc, pHeaderFooterInfo) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              return _context31.abrupt("return", dispatchFun("FRDocAddHeaderFooter", [{
                doc: doc
              }, {
                pHeaderFooterInfo: pHeaderFooterInfo
              }], ["pHeaderFooterInfo"]));
            case 1:
            case "end":
              return _context31.stop();
          }
        }, _callee31);
      }));
      function AddHeaderFooter(_x63, _x64) {
        return _AddHeaderFooter.apply(this, arguments);
      }
      return AddHeaderFooter;
    }()
  }, {
    key: "AddAndUpdateHeaderFooter",
    value: function () {
      var _AddAndUpdateHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(doc, pHeaderFooterInfo) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              return _context32.abrupt("return", dispatchFun("FRDocAddAndUpdateHeaderFooter", [{
                doc: doc
              }, {
                pHeaderFooterInfo: pHeaderFooterInfo
              }], ["pHeaderFooterInfo"]));
            case 1:
            case "end":
              return _context32.stop();
          }
        }, _callee32);
      }));
      function AddAndUpdateHeaderFooter(_x65, _x66) {
        return _AddAndUpdateHeaderFooter.apply(this, arguments);
      }
      return AddAndUpdateHeaderFooter;
    }()
  }, {
    key: "RemoveHeaderFooter",
    value: function () {
      var _RemoveHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(doc, szSpecifyDicValue) {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              return _context33.abrupt("return", dispatchFun("FRDocRemoveHeaderFooter", [{
                doc: doc
              }, {
                szSpecifyDicValue: szSpecifyDicValue
              }], []));
            case 1:
            case "end":
              return _context33.stop();
          }
        }, _callee33);
      }));
      function RemoveHeaderFooter(_x67, _x68) {
        return _RemoveHeaderFooter.apply(this, arguments);
      }
      return RemoveHeaderFooter;
    }()
  }, {
    key: "RemoveAndUpdateHeaderFooter",
    value: function () {
      var _RemoveAndUpdateHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(doc, szSpecifyDicValue) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              return _context34.abrupt("return", dispatchFun("FRDocRemoveAndUpdateHeaderFooter", [{
                doc: doc
              }, {
                szSpecifyDicValue: szSpecifyDicValue
              }], []));
            case 1:
            case "end":
              return _context34.stop();
          }
        }, _callee34);
      }));
      function RemoveAndUpdateHeaderFooter(_x69, _x70) {
        return _RemoveAndUpdateHeaderFooter.apply(this, arguments);
      }
      return RemoveAndUpdateHeaderFooter;
    }()
  }, {
    key: "GetFocusAnnot",
    value: function () {
      var _GetFocusAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(frDoc) {
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              return _context35.abrupt("return", dispatchFun("FRDocGetFocusAnnot", [{
                frDoc: frDoc
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context35.stop();
          }
        }, _callee35);
      }));
      function GetFocusAnnot(_x71) {
        return _GetFocusAnnot.apply(this, arguments);
      }
      return GetFocusAnnot;
    }()
  }, {
    key: "ClearAllSelection",
    value: function () {
      var _ClearAllSelection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(frDoc) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              return _context36.abrupt("return", dispatchFun("FRDocClearAllSelection", [{
                frDoc: frDoc
              }], []));
            case 1:
            case "end":
              return _context36.stop();
          }
        }, _callee36);
      }));
      function ClearAllSelection(_x72) {
        return _ClearAllSelection.apply(this, arguments);
      }
      return ClearAllSelection;
    }()
  }, {
    key: "GetAnnotByDict",
    value: function () {
      var _GetAnnotByDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37(frDoc, nPageIndex, pDict) {
        return _regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              return _context37.abrupt("return", dispatchFun("FRDocGetAnnotByDict", [{
                frDoc: frDoc
              }, {
                nPageIndex: nPageIndex
              }, {
                pDict: pDict
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context37.stop();
          }
        }, _callee37);
      }));
      function GetAnnotByDict(_x73, _x74, _x75) {
        return _GetAnnotByDict.apply(this, arguments);
      }
      return GetAnnotByDict;
    }()
  }, {
    key: "AddAnnot",
    value: function () {
      var _AddAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee38(frDoc, nPageIndex, lpSubType, rect) {
        return _regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) switch (_context38.prev = _context38.next) {
            case 0:
              return _context38.abrupt("return", dispatchFun("FRDocAddAnnot", [{
                frDoc: frDoc
              }, {
                nPageIndex: nPageIndex
              }, {
                lpSubType: lpSubType
              }, {
                rect: rect
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context38.stop();
          }
        }, _callee38);
      }));
      function AddAnnot(_x76, _x77, _x78, _x79) {
        return _AddAnnot.apply(this, arguments);
      }
      return AddAnnot;
    }()
  }, {
    key: "AddAnnot2",
    value: function () {
      var _AddAnnot2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee39(frDoc, nPageIndex, pDict, nIndex) {
        return _regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) switch (_context39.prev = _context39.next) {
            case 0:
              return _context39.abrupt("return", dispatchFun("FRDocAddAnnot2", [{
                frDoc: frDoc
              }, {
                nPageIndex: nPageIndex
              }, {
                pDict: pDict
              }, {
                nIndex: nIndex
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context39.stop();
          }
        }, _callee39);
      }));
      function AddAnnot2(_x80, _x81, _x82, _x83) {
        return _AddAnnot2.apply(this, arguments);
      }
      return AddAnnot2;
    }()
  }, {
    key: "GetReaderDocument",
    value: function () {
      var _GetReaderDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee40(pdfdoc) {
        return _regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) switch (_context40.prev = _context40.next) {
            case 0:
              return _context40.abrupt("return", dispatchFun("FRDocGetReaderDocument", [{
                pdfdoc: pdfdoc
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context40.stop();
          }
        }, _callee40);
      }));
      function GetReaderDocument(_x84) {
        return _GetReaderDocument.apply(this, arguments);
      }
      return GetReaderDocument;
    }()
  }, {
    key: "DoSaveAs3",
    value: function () {
      var _DoSaveAs2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee41(doc, pwszFilePath, proc, pProcData, option) {
        return _regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) switch (_context41.prev = _context41.next) {
            case 0:
              proc.register();
              return _context41.abrupt("return", dispatchFun("FRDocDoSaveAs3", [{
                doc: doc
              }, {
                pwszFilePath: pwszFilePath
              }, {
                proc: proc
              }, {
                pProcData: pProcData
              }, {
                option: option
              }], ["pProcData"]));
            case 2:
            case "end":
              return _context41.stop();
          }
        }, _callee41);
      }));
      function DoSaveAs3(_x85, _x86, _x87, _x88, _x89) {
        return _DoSaveAs2.apply(this, arguments);
      }
      return DoSaveAs3;
    }()
  }, {
    key: "OpenDocument",
    value: function () {
      var _OpenDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee42(wszFile, option) {
        return _regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) switch (_context42.prev = _context42.next) {
            case 0:
              return _context42.abrupt("return", dispatchFun("FRDocOpenDocument", [{
                wszFile: wszFile
              }, {
                option: option
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context42.stop();
          }
        }, _callee42);
      }));
      function OpenDocument(_x90, _x91) {
        return _OpenDocument.apply(this, arguments);
      }
      return OpenDocument;
    }()
  }, {
    key: "GetFileName",
    value: function () {
      var _GetFileName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee43(doc, wsName) {
        return _regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) switch (_context43.prev = _context43.next) {
            case 0:
              return _context43.abrupt("return", dispatchFun("FRDocGetFileName", [{
                doc: doc
              }, {
                wsName: wsName
              }], ["wsName"]));
            case 1:
            case "end":
              return _context43.stop();
          }
        }, _callee43);
      }));
      function GetFileName(_x92, _x93) {
        return _GetFileName.apply(this, arguments);
      }
      return GetFileName;
    }()
  }, {
    key: "ResizePage",
    value: function () {
      var _ResizePage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee44(doc, iPage, pMediaBox, pCropBox) {
        return _regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) switch (_context44.prev = _context44.next) {
            case 0:
              return _context44.abrupt("return", dispatchFun("FRDocResizePage", [{
                doc: doc
              }, {
                iPage: iPage
              }, {
                pMediaBox: pMediaBox
              }, {
                pCropBox: pCropBox
              }], []));
            case 1:
            case "end":
              return _context44.stop();
          }
        }, _callee44);
      }));
      function ResizePage(_x94, _x95, _x96, _x97) {
        return _ResizePage.apply(this, arguments);
      }
      return ResizePage;
    }()
  }, {
    key: "RequestDocPermPDDoc",
    value: function () {
      var _RequestDocPermPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee45(pReaderDoc, reqObj, reqOpr, authData) {
        return _regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) switch (_context45.prev = _context45.next) {
            case 0:
              return _context45.abrupt("return", dispatchFun("FRDocRequestDocPermPDDoc", [{
                pReaderDoc: pReaderDoc
              }, {
                reqObj: reqObj
              }, {
                reqOpr: reqOpr
              }, {
                authData: authData
              }], []));
            case 1:
            case "end":
              return _context45.stop();
          }
        }, _callee45);
      }));
      function RequestDocPermPDDoc(_x98, _x99, _x100, _x101) {
        return _RequestDocPermPDDoc.apply(this, arguments);
      }
      return RequestDocPermPDDoc;
    }()
  }, {
    key: "RemoveAnnotSelection",
    value: function () {
      var _RemoveAnnotSelection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee46(pDoc, annot) {
        return _regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) switch (_context46.prev = _context46.next) {
            case 0:
              return _context46.abrupt("return", dispatchFun("FRDocRemoveAnnotSelection", [{
                pDoc: pDoc
              }, {
                annot: annot
              }], []));
            case 1:
            case "end":
              return _context46.stop();
          }
        }, _callee46);
      }));
      function RemoveAnnotSelection(_x102, _x103) {
        return _RemoveAnnotSelection.apply(this, arguments);
      }
      return RemoveAnnotSelection;
    }()
  }]);
}(BaseClass);

function _callSuper$2t(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2t() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2t() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2t = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_Rect_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_Rect_V1() {
    _classCallCheck(this, JSFS_Rect_V1);
    return _callSuper$2t(this, JSFS_Rect_V1, arguments);
  }
  _inherits(JSFS_Rect_V1, _BaseClass);
  return _createClass(JSFS_Rect_V1);
}(BaseClass);

function _callSuper$2s(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2s() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2s() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2s = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_AffineMatrix_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_AffineMatrix_V1() {
    _classCallCheck(this, JSFS_AffineMatrix_V1);
    return _callSuper$2s(this, JSFS_AffineMatrix_V1, arguments);
  }
  _inherits(JSFS_AffineMatrix_V1, _BaseClass);
  return _createClass(JSFS_AffineMatrix_V1);
}(BaseClass);

function _callSuper$2r(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2r() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2r() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2r = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Page_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Page_V1() {
    _classCallCheck(this, JSFPD_Page_V1);
    return _callSuper$2r(this, JSFPD_Page_V1, arguments);
  }
  _inherits(JSFPD_Page_V1, _BaseClass);
  return _createClass(JSFPD_Page_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDPageNew", [], [], JSFPD_Page_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(page) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDPageDestroy", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "ContinueParse",
    value: function () {
      var _ContinueParse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(page, pauseHandler) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDPageContinueParse", [{
                page: page
              }, {
                pauseHandler: pauseHandler
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function ContinueParse(_x2, _x3) {
        return _ContinueParse.apply(this, arguments);
      }
      return ContinueParse;
    }()
  }, {
    key: "GetParseState",
    value: function () {
      var _GetParseState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(page) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDPageGetParseState", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetParseState(_x4) {
        return _GetParseState.apply(this, arguments);
      }
      return GetParseState;
    }()
  }, {
    key: "IsParsed",
    value: function () {
      var _IsParsed = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(page) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDPageIsParsed", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function IsParsed(_x5) {
        return _IsParsed.apply(this, arguments);
      }
      return IsParsed;
    }()
  }, {
    key: "GetFirstObjectPosition",
    value: function () {
      var _GetFirstObjectPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(page) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDPageGetFirstObjectPosition", [{
                page: page
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetFirstObjectPosition(_x6) {
        return _GetFirstObjectPosition.apply(this, arguments);
      }
      return GetFirstObjectPosition;
    }()
  }, {
    key: "GetLastObjectPosition",
    value: function () {
      var _GetLastObjectPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(page) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDPageGetLastObjectPosition", [{
                page: page
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetLastObjectPosition(_x7) {
        return _GetLastObjectPosition.apply(this, arguments);
      }
      return GetLastObjectPosition;
    }()
  }, {
    key: "GetNextObject",
    value: function () {
      var _GetNextObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(page, inOutPos) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDPageGetNextObject", [{
                page: page
              }, {
                inOutPos: inOutPos
              }], ["inOutPos"], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetNextObject(_x8, _x9) {
        return _GetNextObject.apply(this, arguments);
      }
      return GetNextObject;
    }()
  }, {
    key: "GetPrevObject",
    value: function () {
      var _GetPrevObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(page, inOutPos) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDPageGetPrevObject", [{
                page: page
              }, {
                inOutPos: inOutPos
              }], ["inOutPos"], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetPrevObject(_x10, _x11) {
        return _GetPrevObject.apply(this, arguments);
      }
      return GetPrevObject;
    }()
  }, {
    key: "GetObjectAt",
    value: function () {
      var _GetObjectAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(page, pos) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDPageGetObjectAt", [{
                page: page
              }, {
                pos: pos
              }], [], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetObjectAt(_x12, _x13) {
        return _GetObjectAt.apply(this, arguments);
      }
      return GetObjectAt;
    }()
  }, {
    key: "CountObjects",
    value: function () {
      var _CountObjects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(page) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDPageCountObjects", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function CountObjects(_x14) {
        return _CountObjects.apply(this, arguments);
      }
      return CountObjects;
    }()
  }, {
    key: "GetObjectIndex",
    value: function () {
      var _GetObjectIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(page, obj) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDPageGetObjectIndex", [{
                page: page
              }, {
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetObjectIndex(_x15, _x16) {
        return _GetObjectIndex.apply(this, arguments);
      }
      return GetObjectIndex;
    }()
  }, {
    key: "GetObjectByIndex",
    value: function () {
      var _GetObjectByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(page, index) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDPageGetObjectByIndex", [{
                page: page
              }, {
                index: index
              }], [], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetObjectByIndex(_x17, _x18) {
        return _GetObjectByIndex.apply(this, arguments);
      }
      return GetObjectByIndex;
    }()
  }, {
    key: "ReplaceObject",
    value: function () {
      var _ReplaceObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(page, pos, newObj) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDPageReplaceObject", [{
                page: page
              }, {
                pos: pos
              }, {
                newObj: newObj
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function ReplaceObject(_x19, _x20, _x21) {
        return _ReplaceObject.apply(this, arguments);
      }
      return ReplaceObject;
    }()
  }, {
    key: "InsertObject",
    value: function () {
      var _InsertObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(page, posInsertAfter, newObj) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDPageInsertObject", [{
                page: page
              }, {
                posInsertAfter: posInsertAfter
              }, {
                newObj: newObj
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function InsertObject(_x22, _x23, _x24) {
        return _InsertObject.apply(this, arguments);
      }
      return InsertObject;
    }()
  }, {
    key: "RemoveObject",
    value: function () {
      var _RemoveObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(page, pos) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDPageRemoveObject", [{
                page: page
              }, {
                pos: pos
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function RemoveObject(_x25, _x26) {
        return _RemoveObject.apply(this, arguments);
      }
      return RemoveObject;
    }()
  }, {
    key: "MoveObject",
    value: function () {
      var _MoveObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(page, pos, newPosAfter) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDPageMoveObject", [{
                page: page
              }, {
                pos: pos
              }, {
                newPosAfter: newPosAfter
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function MoveObject(_x27, _x28, _x29) {
        return _MoveObject.apply(this, arguments);
      }
      return MoveObject;
    }()
  }, {
    key: "GetDict",
    value: function () {
      var _GetDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(page) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDPageGetDict", [{
                page: page
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function GetDict(_x30) {
        return _GetDict.apply(this, arguments);
      }
      return GetDict;
    }()
  }, {
    key: "GetDocument",
    value: function () {
      var _GetDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(page) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDPageGetDocument", [{
                page: page
              }], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function GetDocument(_x31) {
        return _GetDocument.apply(this, arguments);
      }
      return GetDocument;
    }()
  }, {
    key: "Load",
    value: function () {
      var _Load = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(page, doc, pageDict, bPageCache) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDPageLoad", [{
                page: page
              }, {
                doc: doc
              }, {
                pageDict: pageDict
              }, {
                bPageCache: bPageCache
              }], []));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function Load(_x32, _x33, _x34, _x35) {
        return _Load.apply(this, arguments);
      }
      return Load;
    }()
  }, {
    key: "StartParse",
    value: function () {
      var _StartParse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(page, options) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FPDPageStartParse", [{
                page: page
              }, {
                options: options
              }], []));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function StartParse(_x36, _x37) {
        return _StartParse.apply(this, arguments);
      }
      return StartParse;
    }()
  }, {
    key: "ParseContent",
    value: function () {
      var _ParseContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(page, options) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FPDPageParseContent", [{
                page: page
              }, {
                options: options
              }], []));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function ParseContent(_x38, _x39) {
        return _ParseContent.apply(this, arguments);
      }
      return ParseContent;
    }()
  }, {
    key: "GetDisplayMatrix",
    value: function () {
      var _GetDisplayMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(page, xPos, yPos, xSize, ySize, iRotate) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FPDPageGetDisplayMatrix", [{
                page: page
              }, {
                xPos: xPos
              }, {
                yPos: yPos
              }, {
                xSize: xSize
              }, {
                ySize: ySize
              }, {
                iRotate: iRotate
              }], [], JSFS_AffineMatrix_V1));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function GetDisplayMatrix(_x40, _x41, _x42, _x43, _x44, _x45) {
        return _GetDisplayMatrix.apply(this, arguments);
      }
      return GetDisplayMatrix;
    }()
  }, {
    key: "GetPageWidth",
    value: function () {
      var _GetPageWidth = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(page) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FPDPageGetPageWidth", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function GetPageWidth(_x46) {
        return _GetPageWidth.apply(this, arguments);
      }
      return GetPageWidth;
    }()
  }, {
    key: "GetPageHeight",
    value: function () {
      var _GetPageHeight = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(page) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FPDPageGetPageHeight", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function GetPageHeight(_x47) {
        return _GetPageHeight.apply(this, arguments);
      }
      return GetPageHeight;
    }()
  }, {
    key: "GetPageBBox",
    value: function () {
      var _GetPageBBox = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(page) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FPDPageGetPageBBox", [{
                page: page
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function GetPageBBox(_x48) {
        return _GetPageBBox.apply(this, arguments);
      }
      return GetPageBBox;
    }()
  }, {
    key: "GetPageMatrix",
    value: function () {
      var _GetPageMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(page) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FPDPageGetPageMatrix", [{
                page: page
              }], [], JSFS_AffineMatrix_V1));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function GetPageMatrix(_x49) {
        return _GetPageMatrix.apply(this, arguments);
      }
      return GetPageMatrix;
    }()
  }, {
    key: "GenerateContent",
    value: function () {
      var _GenerateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(page) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", dispatchFun("FPDPageGenerateContent", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function GenerateContent(_x50) {
        return _GenerateContent.apply(this, arguments);
      }
      return GenerateContent;
    }()
  }, {
    key: "GetPageText",
    value: function () {
      var _GetPageText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(outLines, doc, pageDic, iMinWidth, flags) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", dispatchFun("FPDPageGetPageText", [{
                outLines: outLines
              }, {
                doc: doc
              }, {
                pageDic: pageDic
              }, {
                iMinWidth: iMinWidth
              }, {
                flags: flags
              }], ["outLines"]));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function GetPageText(_x51, _x52, _x53, _x54, _x55) {
        return _GetPageText.apply(this, arguments);
      }
      return GetPageText;
    }()
  }, {
    key: "GetPageText_Unicode",
    value: function () {
      var _GetPageText_Unicode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(outLines, doc, pageDic, iMinWidth, flags) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", dispatchFun("FPDPageGetPageText_Unicode", [{
                outLines: outLines
              }, {
                doc: doc
              }, {
                pageDic: pageDic
              }, {
                iMinWidth: iMinWidth
              }, {
                flags: flags
              }], ["outLines"]));
            case 1:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function GetPageText_Unicode(_x56, _x57, _x58, _x59, _x60) {
        return _GetPageText_Unicode.apply(this, arguments);
      }
      return GetPageText_Unicode;
    }()
  }, {
    key: "StartGenerateContent",
    value: function () {
      var _StartGenerateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(generator, fileStream) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              return _context31.abrupt("return", dispatchFun("FPDPageStartGenerateContent", [{
                generator: generator
              }, {
                fileStream: fileStream
              }], []));
            case 1:
            case "end":
              return _context31.stop();
          }
        }, _callee31);
      }));
      function StartGenerateContent(_x61, _x62) {
        return _StartGenerateContent.apply(this, arguments);
      }
      return StartGenerateContent;
    }()
  }, {
    key: "ContinueGenerateContent",
    value: function () {
      var _ContinueGenerateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(generator, pause) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              return _context32.abrupt("return", dispatchFun("FPDPageContinueGenerateContent", [{
                generator: generator
              }, {
                pause: pause
              }], []));
            case 1:
            case "end":
              return _context32.stop();
          }
        }, _callee32);
      }));
      function ContinueGenerateContent(_x63, _x64) {
        return _ContinueGenerateContent.apply(this, arguments);
      }
      return ContinueGenerateContent;
    }()
  }, {
    key: "GetResourcesDictionary",
    value: function () {
      var _GetResourcesDictionary = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(page) {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              return _context33.abrupt("return", dispatchFun("FPDPageGetResourcesDictionary", [{
                page: page
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context33.stop();
          }
        }, _callee33);
      }));
      function GetResourcesDictionary(_x65) {
        return _GetResourcesDictionary.apply(this, arguments);
      }
      return GetResourcesDictionary;
    }()
  }, {
    key: "SetResourcesDictionary",
    value: function () {
      var _SetResourcesDictionary = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(page, resourcesDict) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              return _context34.abrupt("return", dispatchFun("FPDPageSetResourcesDictionary", [{
                page: page
              }, {
                resourcesDict: resourcesDict
              }], []));
            case 1:
            case "end":
              return _context34.stop();
          }
        }, _callee34);
      }));
      function SetResourcesDictionary(_x66, _x67) {
        return _SetResourcesDictionary.apply(this, arguments);
      }
      return SetResourcesDictionary;
    }()
  }, {
    key: "GetPageRotation",
    value: function () {
      var _GetPageRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(page) {
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              return _context35.abrupt("return", dispatchFun("FPDPageGetPageRotation", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context35.stop();
          }
        }, _callee35);
      }));
      function GetPageRotation(_x68) {
        return _GetPageRotation.apply(this, arguments);
      }
      return GetPageRotation;
    }()
  }, {
    key: "GetPageResources",
    value: function () {
      var _GetPageResources = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(page) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              return _context36.abrupt("return", dispatchFun("FPDPageGetPageResources", [{
                page: page
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context36.stop();
          }
        }, _callee36);
      }));
      function GetPageResources(_x69) {
        return _GetPageResources.apply(this, arguments);
      }
      return GetPageResources;
    }()
  }, {
    key: "GetPageBleedBox",
    value: function () {
      var _GetPageBleedBox = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37(page) {
        return _regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              return _context37.abrupt("return", dispatchFun("FPDPageGetPageBleedBox", [{
                page: page
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context37.stop();
          }
        }, _callee37);
      }));
      function GetPageBleedBox(_x70) {
        return _GetPageBleedBox.apply(this, arguments);
      }
      return GetPageBleedBox;
    }()
  }]);
}(BaseClass);

function _callSuper$2q(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2q() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2q() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2q = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_PageView_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_PageView_V1() {
    _classCallCheck(this, JSFR_PageView_V1);
    return _callSuper$2q(this, JSFR_PageView_V1, arguments);
  }
  _inherits(JSFR_PageView_V1, _BaseClass);
  return _createClass(JSFR_PageView_V1, [{
    key: "GetDocument",
    value: function () {
      var _GetDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(pv) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRPageViewGetDocument", [{
                pv: pv
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function GetDocument(_x) {
        return _GetDocument.apply(this, arguments);
      }
      return GetDocument;
    }()
  }, {
    key: "GetDocView",
    value: function () {
      var _GetDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pv) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRPageViewGetDocView", [{
                pv: pv
              }], [], JSFR_DocView_V1));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetDocView(_x2) {
        return _GetDocView.apply(this, arguments);
      }
      return GetDocView;
    }()
  }, {
    key: "GetPDPage",
    value: function () {
      var _GetPDPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(pv) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRPageViewGetPDPage", [{
                pv: pv
              }], [], JSFPD_Page_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetPDPage(_x3) {
        return _GetPDPage.apply(this, arguments);
      }
      return GetPDPage;
    }()
  }, {
    key: "GetPageIndex",
    value: function () {
      var _GetPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(pv) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRPageViewGetPageIndex", [{
                pv: pv
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetPageIndex(_x4) {
        return _GetPageIndex.apply(this, arguments);
      }
      return GetPageIndex;
    }()
  }, {
    key: "CountAnnot",
    value: function () {
      var _CountAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(pv) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRPageViewCountAnnot", [{
                pv: pv
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function CountAnnot(_x5) {
        return _CountAnnot.apply(this, arguments);
      }
      return CountAnnot;
    }()
  }, {
    key: "GetCurrentMatrix",
    value: function () {
      var _GetCurrentMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(pv) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FRPageViewGetCurrentMatrix", [{
                pv: pv
              }], [], JSFS_AffineMatrix_V1));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetCurrentMatrix(_x6) {
        return _GetCurrentMatrix.apply(this, arguments);
      }
      return GetCurrentMatrix;
    }()
  }, {
    key: "DevicePointToPage",
    value: function () {
      var _DevicePointToPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(pv, window_x, window_y, outPt) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FRPageViewDevicePointToPage", [{
                pv: pv
              }, {
                window_x: window_x
              }, {
                window_y: window_y
              }, {
                outPt: outPt
              }], ["outPt"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function DevicePointToPage(_x7, _x8, _x9, _x10) {
        return _DevicePointToPage.apply(this, arguments);
      }
      return DevicePointToPage;
    }()
  }, {
    key: "DeviceRectToPage",
    value: function () {
      var _DeviceRectToPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(pv, rect, outRect) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FRPageViewDeviceRectToPage", [{
                pv: pv
              }, {
                rect: rect
              }, {
                outRect: outRect
              }], ["rect", "outRect"]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function DeviceRectToPage(_x11, _x12, _x13) {
        return _DeviceRectToPage.apply(this, arguments);
      }
      return DeviceRectToPage;
    }()
  }, {
    key: "PointToDevice",
    value: function () {
      var _PointToDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(pv, pt, out_window_x, out_window_y) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FRPageViewPointToDevice", [{
                pv: pv
              }, {
                pt: pt
              }, {
                out_window_x: out_window_x
              }, {
                out_window_y: out_window_y
              }], ["pt", "out_window_x", "out_window_y"]));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function PointToDevice(_x14, _x15, _x16, _x17) {
        return _PointToDevice.apply(this, arguments);
      }
      return PointToDevice;
    }()
  }, {
    key: "RectToDevice",
    value: function () {
      var _RectToDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(pv, rect, outRect) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FRPageViewRectToDevice", [{
                pv: pv
              }, {
                rect: rect
              }, {
                outRect: outRect
              }], ["rect", "outRect"]));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function RectToDevice(_x18, _x19, _x20) {
        return _RectToDevice.apply(this, arguments);
      }
      return RectToDevice;
    }()
  }, {
    key: "GetPageRect",
    value: function () {
      var _GetPageRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(pv) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FRPageViewGetPageRect", [{
                pv: pv
              }], [], JSFS_Rect_V1));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetPageRect(_x21) {
        return _GetPageRect.apply(this, arguments);
      }
      return GetPageRect;
    }()
  }, {
    key: "GetPageVisibleRect",
    value: function () {
      var _GetPageVisibleRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(pv) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FRPageViewGetPageVisibleRect", [{
                pv: pv
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetPageVisibleRect(_x22) {
        return _GetPageVisibleRect.apply(this, arguments);
      }
      return GetPageVisibleRect;
    }()
  }, {
    key: "DidContentChanged",
    value: function () {
      var _DidContentChanged = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(pv, bReLoadPage) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FRPageViewDidContentChanged", [{
                pv: pv
              }, {
                bReLoadPage: bReLoadPage
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function DidContentChanged(_x23, _x24) {
        return _DidContentChanged.apply(this, arguments);
      }
      return DidContentChanged;
    }()
  }, {
    key: "GetAnnotByIndex",
    value: function () {
      var _GetAnnotByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(pv, index) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FRPageViewGetAnnotByIndex", [{
                pv: pv
              }, {
                index: index
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function GetAnnotByIndex(_x25, _x26) {
        return _GetAnnotByIndex.apply(this, arguments);
      }
      return GetAnnotByIndex;
    }()
  }, {
    key: "GetPageState",
    value: function () {
      var _GetPageState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(pv, outFitType, outDestArray, outDestArrayCount) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FRPageViewGetPageState", [{
                pv: pv
              }, {
                outFitType: outFitType
              }, {
                outDestArray: outDestArray
              }, {
                outDestArrayCount: outDestArrayCount
              }], ["outFitType", "outDestArray", "outDestArrayCount"]));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function GetPageState(_x27, _x28, _x29, _x30) {
        return _GetPageState.apply(this, arguments);
      }
      return GetPageState;
    }()
  }, {
    key: "DeleteAnnot",
    value: function () {
      var _DeleteAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(pv, frAnnot) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FRPageViewDeleteAnnot", [{
                pv: pv
              }, {
                frAnnot: frAnnot
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function DeleteAnnot(_x31, _x32) {
        return _DeleteAnnot.apply(this, arguments);
      }
      return DeleteAnnot;
    }()
  }, {
    key: "GetFocusAnnot",
    value: function () {
      var _GetFocusAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(pv) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FRPageViewGetFocusAnnot", [{
                pv: pv
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function GetFocusAnnot(_x33) {
        return _GetFocusAnnot.apply(this, arguments);
      }
      return GetFocusAnnot;
    }()
  }, {
    key: "GetPageScale",
    value: function () {
      var _GetPageScale = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(pv) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FRPageViewGetPageScale", [{
                pv: pv
              }], []));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function GetPageScale(_x34) {
        return _GetPageScale.apply(this, arguments);
      }
      return GetPageScale;
    }()
  }, {
    key: "GetAnnotAtPoint",
    value: function () {
      var _GetAnnotAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(pv, point, pszSubType) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FRPageViewGetAnnotAtPoint", [{
                pv: pv
              }, {
                point: point
              }, {
                pszSubType: pszSubType
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function GetAnnotAtPoint(_x35, _x36, _x37) {
        return _GetAnnotAtPoint.apply(this, arguments);
      }
      return GetAnnotAtPoint;
    }()
  }, {
    key: "AddAnnot",
    value: function () {
      var _AddAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(pv, annotDict, nIndex) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FRPageViewAddAnnot", [{
                pv: pv
              }, {
                annotDict: annotDict
              }, {
                nIndex: nIndex
              }], [], JSFR_Annot_V5));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function AddAnnot(_x38, _x39, _x40) {
        return _AddAnnot.apply(this, arguments);
      }
      return AddAnnot;
    }()
  }, {
    key: "GenerateContent",
    value: function () {
      var _GenerateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(pv) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FRPageViewGenerateContent", [{
                pv: pv
              }], []));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function GenerateContent(_x41) {
        return _GenerateContent.apply(this, arguments);
      }
      return GenerateContent;
    }()
  }, {
    key: "UpdateAllViewsRect",
    value: function () {
      var _UpdateAllViewsRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(pv, rectarray) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FRPageViewUpdateAllViewsRect", [{
                pv: pv
              }, {
                rectarray: rectarray
              }], []));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function UpdateAllViewsRect(_x42, _x43) {
        return _UpdateAllViewsRect.apply(this, arguments);
      }
      return UpdateAllViewsRect;
    }()
  }]);
}(BaseClass);

function _callSuper$2p(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2p() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2p() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2p = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_MenuItem_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_MenuItem_V1() {
    _classCallCheck(this, JSFR_MenuItem_V1);
    return _callSuper$2p(this, JSFR_MenuItem_V1, arguments);
  }
  _inherits(JSFR_MenuItem_V1, _BaseClass);
  return _createClass(JSFR_MenuItem_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(szName, wszTitle, bmp, bSeparator, submenu) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRMenuItemNew", [{
                szName: szName
              }, {
                wszTitle: wszTitle
              }, {
                bmp: bmp
              }, {
                bSeparator: bSeparator
              }, {
                submenu: submenu
              }], [], JSFR_MenuItem_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x, _x2, _x3, _x4, _x5) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Release",
    value: function () {
      var _Release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(menuitem) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRMenuItemRelease", [{
                menuitem: menuitem
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Release(_x6) {
        return _Release.apply(this, arguments);
      }
      return Release;
    }()
  }, {
    key: "GetTitle",
    value: function () {
      var _GetTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(menuitem, outTitle) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRMenuItemGetTitle", [{
                menuitem: menuitem
              }, {
                outTitle: outTitle
              }], ["outTitle"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetTitle(_x7, _x8) {
        return _GetTitle.apply(this, arguments);
      }
      return GetTitle;
    }()
  }, {
    key: "GetName",
    value: function () {
      var _GetName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(menuitem, outName) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRMenuItemGetName", [{
                menuitem: menuitem
              }, {
                outName: outName
              }], ["outName"]));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetName(_x9, _x10) {
        return _GetName.apply(this, arguments);
      }
      return GetName;
    }()
  }, {
    key: "SetExecuteProc",
    value: function () {
      var _SetExecuteProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(menuitem, proc) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              proc.register();
              return _context5.abrupt("return", dispatchFun("FRMenuItemSetExecuteProc", [{
                menuitem: menuitem
              }, {
                proc: proc
              }], []));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function SetExecuteProc(_x11, _x12) {
        return _SetExecuteProc.apply(this, arguments);
      }
      return SetExecuteProc;
    }()
  }, {
    key: "SetComputeEnabledProc",
    value: function () {
      var _SetComputeEnabledProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(menuitem, proc) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              proc.register();
              return _context6.abrupt("return", dispatchFun("FRMenuItemSetComputeEnabledProc", [{
                menuitem: menuitem
              }, {
                proc: proc
              }], []));
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function SetComputeEnabledProc(_x13, _x14) {
        return _SetComputeEnabledProc.apply(this, arguments);
      }
      return SetComputeEnabledProc;
    }()
  }]);
}(BaseClass);

function _callSuper$2o(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2o() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2o() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2o = function _isNativeReflectConstruct() { return !!t; })(); }
var JSHwnd = /*#__PURE__*/function (_BaseClass) {
  function JSHwnd() {
    _classCallCheck(this, JSHwnd);
    return _callSuper$2o(this, JSHwnd, arguments);
  }
  _inherits(JSHwnd, _BaseClass);
  return _createClass(JSHwnd);
}(BaseClass);

function _callSuper$2n(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2n() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2n() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2n = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_DocView_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_DocView_V1() {
    _classCallCheck(this, JSFR_DocView_V1);
    return _callSuper$2n(this, JSFR_DocView_V1, arguments);
  }
  _inherits(JSFR_DocView_V1, _BaseClass);
  return _createClass(JSFR_DocView_V1, [{
    key: "GetDocument",
    value: function () {
      var _GetDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(docView) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRDocViewGetDocument", [{
                docView: docView
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function GetDocument(_x) {
        return _GetDocument.apply(this, arguments);
      }
      return GetDocument;
    }()
  }, {
    key: "CountPageViews",
    value: function () {
      var _CountPageViews = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(docView) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRDocViewCountPageViews", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function CountPageViews(_x2) {
        return _CountPageViews.apply(this, arguments);
      }
      return CountPageViews;
    }()
  }, {
    key: "GetPageView",
    value: function () {
      var _GetPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(docView, iPage) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRDocViewGetPageView", [{
                docView: docView
              }, {
                iPage: iPage
              }], [], JSFR_PageView_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetPageView(_x3, _x4) {
        return _GetPageView.apply(this, arguments);
      }
      return GetPageView;
    }()
  }, {
    key: "GetPageViewAtPoint",
    value: function () {
      var _GetPageViewAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(docView, point) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRDocViewGetPageViewAtPoint", [{
                docView: docView
              }, {
                point: point
              }], [], JSFR_PageView_V1));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetPageViewAtPoint(_x5, _x6) {
        return _GetPageViewAtPoint.apply(this, arguments);
      }
      return GetPageViewAtPoint;
    }()
  }, {
    key: "CountVisiblePageViews",
    value: function () {
      var _CountVisiblePageViews = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(docView) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRDocViewCountVisiblePageViews", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function CountVisiblePageViews(_x7) {
        return _CountVisiblePageViews.apply(this, arguments);
      }
      return CountVisiblePageViews;
    }()
  }, {
    key: "GetVisiblePageView",
    value: function () {
      var _GetVisiblePageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(docView, iPage) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FRDocViewGetVisiblePageView", [{
                docView: docView
              }, {
                iPage: iPage
              }], [], JSFR_PageView_V1));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetVisiblePageView(_x8, _x9) {
        return _GetVisiblePageView.apply(this, arguments);
      }
      return GetVisiblePageView;
    }()
  }, {
    key: "GotoPageView",
    value: function () {
      var _GotoPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(docView, iPage) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FRDocViewGotoPageView", [{
                docView: docView
              }, {
                iPage: iPage
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GotoPageView(_x10, _x11) {
        return _GotoPageView.apply(this, arguments);
      }
      return GotoPageView;
    }()
  }, {
    key: "GotoPageViewByPoint",
    value: function () {
      var _GotoPageViewByPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(docView, iPage, left, top) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FRDocViewGotoPageViewByPoint", [{
                docView: docView
              }, {
                iPage: iPage
              }, {
                left: left
              }, {
                top: top
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GotoPageViewByPoint(_x12, _x13, _x14, _x15) {
        return _GotoPageViewByPoint.apply(this, arguments);
      }
      return GotoPageViewByPoint;
    }()
  }, {
    key: "GotoPageViewByRect",
    value: function () {
      var _GotoPageViewByRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(docView, iPage, rect) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FRDocViewGotoPageViewByRect", [{
                docView: docView
              }, {
                iPage: iPage
              }, {
                rect: rect
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GotoPageViewByRect(_x16, _x17, _x18) {
        return _GotoPageViewByRect.apply(this, arguments);
      }
      return GotoPageViewByRect;
    }()
  }, {
    key: "GetCurrentPageView",
    value: function () {
      var _GetCurrentPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(docView) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FRDocViewGetCurrentPageView", [{
                docView: docView
              }], [], JSFR_PageView_V1));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetCurrentPageView(_x19) {
        return _GetCurrentPageView.apply(this, arguments);
      }
      return GetCurrentPageView;
    }()
  }, {
    key: "GetRotation",
    value: function () {
      var _GetRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(docView) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FRDocViewGetRotation", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetRotation(_x20) {
        return _GetRotation.apply(this, arguments);
      }
      return GetRotation;
    }()
  }, {
    key: "SetRotation",
    value: function () {
      var _SetRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(docView, nFlag) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FRDocViewSetRotation", [{
                docView: docView
              }, {
                nFlag: nFlag
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function SetRotation(_x21, _x22) {
        return _SetRotation.apply(this, arguments);
      }
      return SetRotation;
    }()
  }, {
    key: "GetLayoutMode",
    value: function () {
      var _GetLayoutMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(docView) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FRDocViewGetLayoutMode", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetLayoutMode(_x23) {
        return _GetLayoutMode.apply(this, arguments);
      }
      return GetLayoutMode;
    }()
  }, {
    key: "SetLayoutMode",
    value: function () {
      var _SetLayoutMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(docView, mode) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FRDocViewSetLayoutMode", [{
                docView: docView
              }, {
                mode: mode
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function SetLayoutMode(_x24, _x25) {
        return _SetLayoutMode.apply(this, arguments);
      }
      return SetLayoutMode;
    }()
  }, {
    key: "GetZoom",
    value: function () {
      var _GetZoom = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(docView) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FRDocViewGetZoom", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function GetZoom(_x26) {
        return _GetZoom.apply(this, arguments);
      }
      return GetZoom;
    }()
  }, {
    key: "GetZoomType",
    value: function () {
      var _GetZoomType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(docView) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FRDocViewGetZoomType", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function GetZoomType(_x27) {
        return _GetZoomType.apply(this, arguments);
      }
      return GetZoomType;
    }()
  }, {
    key: "ZoomTo",
    value: function () {
      var _ZoomTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(docView, mode, scale) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FRDocViewZoomTo", [{
                docView: docView
              }, {
                mode: mode
              }, {
                scale: scale
              }], []));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function ZoomTo(_x28, _x29, _x30) {
        return _ZoomTo.apply(this, arguments);
      }
      return ZoomTo;
    }()
  }, {
    key: "GoBack",
    value: function () {
      var _GoBack = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(docView) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FRDocViewGoBack", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function GoBack(_x31) {
        return _GoBack.apply(this, arguments);
      }
      return GoBack;
    }()
  }, {
    key: "GoForward",
    value: function () {
      var _GoForward = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(docView) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FRDocViewGoForward", [{
                docView: docView
              }], []));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function GoForward(_x32) {
        return _GoForward.apply(this, arguments);
      }
      return GoForward;
    }()
  }, {
    key: "ShowAnnots",
    value: function () {
      var _ShowAnnots = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(docView, annots, bShow) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FRDocViewShowAnnots", [{
                docView: docView
              }, {
                annots: annots
              }, {
                bShow: bShow
              }], ["annots"]));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function ShowAnnots(_x33, _x34, _x35) {
        return _ShowAnnots.apply(this, arguments);
      }
      return ShowAnnots;
    }()
  }, {
    key: "ScrollTo",
    value: function () {
      var _ScrollTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(docView, x, y) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FRDocViewScrollTo", [{
                docView: docView
              }, {
                x: x
              }, {
                y: y
              }], []));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function ScrollTo(_x36, _x37, _x38) {
        return _ScrollTo.apply(this, arguments);
      }
      return ScrollTo;
    }()
  }, {
    key: "DrawRect",
    value: function () {
      var _DrawRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(docView, rect, fill_argb, bCompose) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FRDocViewDrawRect", [{
                docView: docView
              }, {
                rect: rect
              }, {
                fill_argb: fill_argb
              }, {
                bCompose: bCompose
              }], []));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function DrawRect(_x39, _x40, _x41, _x42) {
        return _DrawRect.apply(this, arguments);
      }
      return DrawRect;
    }()
  }, {
    key: "DoPopUpMenu",
    value: function () {
      var _DoPopUpMenu = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(docView, menu, xHit, yHit) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FRDocViewDoPopUpMenu", [{
                docView: docView
              }, {
                menu: menu
              }, {
                xHit: xHit
              }, {
                yHit: yHit
              }], [], JSFR_MenuItem_V1));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function DoPopUpMenu(_x43, _x44, _x45, _x46) {
        return _DoPopUpMenu.apply(this, arguments);
      }
      return DoPopUpMenu;
    }()
  }, {
    key: "GotoPageViewByAnnot",
    value: function () {
      var _GotoPageViewByAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(docView, pAnnot) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FRDocViewGotoPageViewByAnnot", [{
                docView: docView
              }, {
                pAnnot: pAnnot
              }], []));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function GotoPageViewByAnnot(_x47, _x48) {
        return _GotoPageViewByAnnot.apply(this, arguments);
      }
      return GotoPageViewByAnnot;
    }()
  }, {
    key: "GetHwnd",
    value: function () {
      var _GetHwnd = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(docView) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FRDocViewGetHwnd", [{
                docView: docView
              }], [], JSHwnd));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function GetHwnd(_x49) {
        return _GetHwnd.apply(this, arguments);
      }
      return GetHwnd;
    }()
  }, {
    key: "GotoPageViewByRect2",
    value: function () {
      var _GotoPageViewByRect2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(docView, index, rect, isTopUp, dbMaxScale) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FRDocViewGotoPageViewByRect2", [{
                docView: docView
              }, {
                index: index
              }, {
                rect: rect
              }, {
                isTopUp: isTopUp
              }, {
                dbMaxScale: dbMaxScale
              }], []));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function GotoPageViewByRect2(_x50, _x51, _x52, _x53, _x54) {
        return _GotoPageViewByRect2.apply(this, arguments);
      }
      return GotoPageViewByRect2;
    }()
  }]);
}(BaseClass);

function _callSuper$2m(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2m() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2m() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2m = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_Menu_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_Menu_V1() {
    _classCallCheck(this, JSFR_Menu_V1);
    return _callSuper$2m(this, JSFR_Menu_V1, arguments);
  }
  _inherits(JSFR_Menu_V1, _BaseClass);
  return _createClass(JSFR_Menu_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRMenuNew", [], [], JSFR_Menu_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Release",
    value: function () {
      var _Release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(menu) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRMenuRelease", [{
                menu: menu
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Release(_x) {
        return _Release.apply(this, arguments);
      }
      return Release;
    }()
  }, {
    key: "GetMenuItemCount",
    value: function () {
      var _GetMenuItemCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(menu) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRMenuGetMenuItemCount", [{
                menu: menu
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetMenuItemCount(_x2) {
        return _GetMenuItemCount.apply(this, arguments);
      }
      return GetMenuItemCount;
    }()
  }, {
    key: "AddMenuItem",
    value: function () {
      var _AddMenuItem = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(menu, menuitem, iIndex) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRMenuAddMenuItem", [{
                menu: menu
              }, {
                menuitem: menuitem
              }, {
                iIndex: iIndex
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function AddMenuItem(_x3, _x4, _x5) {
        return _AddMenuItem.apply(this, arguments);
      }
      return AddMenuItem;
    }()
  }]);
}(BaseClass);

var BaseCallbacks = /*#__PURE__*/function () {
  function BaseCallbacks() {
    var callbacks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, BaseCallbacks);
    _defineProperty(this, "callbacks", void 0);
    _defineProperty(this, "_callbackIds", void 0);
    _defineProperty(this, "_callbacks", {});
    this.callbacks = callbacks;
  }
  return _createClass(BaseCallbacks, [{
    key: "callbackIds",
    get: function get() {
      if (this._callbackIds) {
        return this._callbackIds;
      }
      var callbacks = this.callbacks;
      var _callbacks = {};
      Object.keys(callbacks).forEach(function (key) {
        _callbacks[key] = getUuid();
      });
      return this._callbackIds = _callbacks;
    }
  }, {
    key: "register",
    value: function register() {
      var _this = this;
      Object.keys(this.callbackIds).forEach(function (key) {
        registerCallback(_this.callbackIds[key], _this.callbacks[key], _this.getCallbackParams(key));
      });
      return this.callbackIds;
    }
  }, {
    key: "release",
    value: function release() {
      if (this._callbackIds === undefined) {
        return;
      }
      Object.keys(this._callbackIds).forEach(releaseCallback);
      delete this._callbackIds;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.callbackIds;
    }
  }, {
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return [];
    }
  }]);
}();

function _callSuper$2l(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2l() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2l() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2l = function _isNativeReflectConstruct() { return !!t; })(); }
var FRExecuteProc$1 = /*#__PURE__*/function (_BaseCallbacks) {
  function FRExecuteProc() {
    _classCallCheck(this, FRExecuteProc);
    return _callSuper$2l(this, FRExecuteProc, arguments);
  }
  _inherits(FRExecuteProc, _BaseCallbacks);
  return _createClass(FRExecuteProc, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FRExecuteProc: [["clientData", JSLPVOID$1]]
      }[key] || [];
    }
  }]);
}(BaseCallbacks);

function _callSuper$2k(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2k() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2k() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2k = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_RibbonElement_V5 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_RibbonElement_V5() {
    _classCallCheck(this, JSFR_RibbonElement_V5);
    return _callSuper$2k(this, JSFR_RibbonElement_V5, arguments);
  }
  _inherits(JSFR_RibbonElement_V5, _BaseClass);
  return _createClass(JSFR_RibbonElement_V5, [{
    key: "AddSubItem",
    value: function () {
      var _AddSubItem = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ribbonElement, nElementType, name, lpwsTitle, nPos, bOnTop, bChangeFun, bChangeImage) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRRibbonElementAddSubItem", [{
                ribbonElement: ribbonElement
              }, {
                nElementType: nElementType
              }, {
                name: name
              }, {
                lpwsTitle: lpwsTitle
              }, {
                nPos: nPos
              }, {
                bOnTop: bOnTop
              }, {
                bChangeFun: bChangeFun
              }, {
                bChangeImage: bChangeImage
              }], ["name"], JSLPVOID$1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function AddSubItem(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
        return _AddSubItem.apply(this, arguments);
      }
      return AddSubItem;
    }()
  }, {
    key: "SetExecuteProc",
    value: function () {
      var _SetExecuteProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ribbonElement, proc) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              proc.register();
              return _context2.abrupt("return", dispatchFun("FRRibbonElementSetExecuteProc", [{
                ribbonElement: ribbonElement
              }, {
                proc: proc
              }], [], FRExecuteProc$1));
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function SetExecuteProc(_x9, _x10) {
        return _SetExecuteProc.apply(this, arguments);
      }
      return SetExecuteProc;
    }()
  }, {
    key: "SetComputeEnabledProc",
    value: function () {
      var _SetComputeEnabledProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ribbonElement, proc) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              proc.register();
              return _context3.abrupt("return", dispatchFun("FRRibbonElementSetComputeEnabledProc", [{
                ribbonElement: ribbonElement
              }, {
                proc: proc
              }], []));
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function SetComputeEnabledProc(_x11, _x12) {
        return _SetComputeEnabledProc.apply(this, arguments);
      }
      return SetComputeEnabledProc;
    }()
  }, {
    key: "SetTooltip",
    value: function () {
      var _SetTooltip = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ribbonElement, lpwsTooltip) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRRibbonElementSetTooltip", [{
                ribbonElement: ribbonElement
              }, {
                lpwsTooltip: lpwsTooltip
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function SetTooltip(_x13, _x14) {
        return _SetTooltip.apply(this, arguments);
      }
      return SetTooltip;
    }()
  }, {
    key: "GetSubElementByName",
    value: function () {
      var _GetSubElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ribbonElement, name) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRRibbonElementGetSubElementByName", [{
                ribbonElement: ribbonElement
              }, {
                name: name
              }], ["name"], JSFR_RibbonElement_V5));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetSubElementByName(_x15, _x16) {
        return _GetSubElementByName.apply(this, arguments);
      }
      return GetSubElementByName;
    }()
  }, {
    key: "SetImageInitProc",
    value: function () {
      var _SetImageInitProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ribbonElement, proc) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              proc.register();
              return _context6.abrupt("return", dispatchFun("FRRibbonElementSetImageInitProc", [{
                ribbonElement: ribbonElement
              }, {
                proc: proc
              }], []));
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function SetImageInitProc(_x17, _x18) {
        return _SetImageInitProc.apply(this, arguments);
      }
      return SetImageInitProc;
    }()
  }]);
}(BaseClass);

function _callSuper$2j(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2j() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2j() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2j = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_RibbonPanel_V5 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_RibbonPanel_V5() {
    _classCallCheck(this, JSFR_RibbonPanel_V5);
    return _callSuper$2j(this, JSFR_RibbonPanel_V5, arguments);
  }
  _inherits(JSFR_RibbonPanel_V5, _BaseClass);
  return _createClass(JSFR_RibbonPanel_V5, [{
    key: "AddElement",
    value: function () {
      var _AddElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ribbonPanel, nElementType, name, lpwsTitle, nPos) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRRibbonPanelAddElement", [{
                ribbonPanel: ribbonPanel
              }, {
                nElementType: nElementType
              }, {
                name: name
              }, {
                lpwsTitle: lpwsTitle
              }, {
                nPos: nPos
              }], ["name"], JSLPVOID$1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function AddElement(_x, _x2, _x3, _x4, _x5) {
        return _AddElement.apply(this, arguments);
      }
      return AddElement;
    }()
  }, {
    key: "GetElementByName",
    value: function () {
      var _GetElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ribbonPanel, elementName) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRRibbonPanelGetElementByName", [{
                ribbonPanel: ribbonPanel
              }, {
                elementName: elementName
              }], ["elementName"], JSFR_RibbonElement_V5));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetElementByName(_x6, _x7) {
        return _GetElementByName.apply(this, arguments);
      }
      return GetElementByName;
    }()
  }, {
    key: "GetElementCount",
    value: function () {
      var _GetElementCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ribbonPanel) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRRibbonPanelGetElementCount", [{
                ribbonPanel: ribbonPanel
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetElementCount(_x8) {
        return _GetElementCount.apply(this, arguments);
      }
      return GetElementCount;
    }()
  }, {
    key: "GetElementByIndex",
    value: function () {
      var _GetElementByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ribbonPanel, nIndex) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRRibbonPanelGetElementByIndex", [{
                ribbonPanel: ribbonPanel
              }, {
                nIndex: nIndex
              }], [], JSFR_RibbonElement_V5));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetElementByIndex(_x9, _x10) {
        return _GetElementByIndex.apply(this, arguments);
      }
      return GetElementByIndex;
    }()
  }, {
    key: "SetPanelImage",
    value: function () {
      var _SetPanelImage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ribbonPanel, pSmallBitmap) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRRibbonPanelSetPanelImage", [{
                ribbonPanel: ribbonPanel
              }, {
                pSmallBitmap: pSmallBitmap
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function SetPanelImage(_x11, _x12) {
        return _SetPanelImage.apply(this, arguments);
      }
      return SetPanelImage;
    }()
  }, {
    key: "GetName",
    value: function () {
      var _GetName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ribbonPanel, bsName) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FRRibbonPanelGetName", [{
                ribbonPanel: ribbonPanel
              }, {
                bsName: bsName
              }], ["bsName"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetName(_x13, _x14) {
        return _GetName.apply(this, arguments);
      }
      return GetName;
    }()
  }]);
}(BaseClass);

function _callSuper$2i(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2i() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2i() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2i = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_RibbonCategory_V5 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_RibbonCategory_V5() {
    _classCallCheck(this, JSFR_RibbonCategory_V5);
    return _callSuper$2i(this, JSFR_RibbonCategory_V5, arguments);
  }
  _inherits(JSFR_RibbonCategory_V5, _BaseClass);
  return _createClass(JSFR_RibbonCategory_V5, [{
    key: "AddPanel",
    value: function () {
      var _AddPanel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ribbonCategory, name, lpwsTitle, defBtnBitmap) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRRibbonCategoryAddPanel", [{
                ribbonCategory: ribbonCategory
              }, {
                name: name
              }, {
                lpwsTitle: lpwsTitle
              }, {
                defBtnBitmap: defBtnBitmap
              }], ["name"], JSFR_RibbonPanel_V5));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function AddPanel(_x, _x2, _x3, _x4) {
        return _AddPanel.apply(this, arguments);
      }
      return AddPanel;
    }()
  }, {
    key: "GetPanelCount",
    value: function () {
      var _GetPanelCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ribbonCategory) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRRibbonCategoryGetPanelCount", [{
                ribbonCategory: ribbonCategory
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetPanelCount(_x5) {
        return _GetPanelCount.apply(this, arguments);
      }
      return GetPanelCount;
    }()
  }, {
    key: "GetPanelByIndex",
    value: function () {
      var _GetPanelByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ribbonCategory, nIndex) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRRibbonCategoryGetPanelByIndex", [{
                ribbonCategory: ribbonCategory
              }, {
                nIndex: nIndex
              }], [], JSFR_RibbonPanel_V5));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetPanelByIndex(_x6, _x7) {
        return _GetPanelByIndex.apply(this, arguments);
      }
      return GetPanelByIndex;
    }()
  }, {
    key: "GetPanelByName",
    value: function () {
      var _GetPanelByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ribbonCategory, panelName) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRRibbonCategoryGetPanelByName", [{
                ribbonCategory: ribbonCategory
              }, {
                panelName: panelName
              }], ["panelName"], JSFR_RibbonPanel_V5));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetPanelByName(_x8, _x9) {
        return _GetPanelByName.apply(this, arguments);
      }
      return GetPanelByName;
    }()
  }, {
    key: "GetName",
    value: function () {
      var _GetName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ribbonCategory, bsName) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRRibbonCategoryGetName", [{
                ribbonCategory: ribbonCategory
              }, {
                bsName: bsName
              }], ["bsName"]));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetName(_x10, _x11) {
        return _GetName.apply(this, arguments);
      }
      return GetName;
    }()
  }, {
    key: "RecalcLayout",
    value: function () {
      var _RecalcLayout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ribbonCategory, bRecalcPanels) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FRRibbonCategoryRecalcLayout", [{
                ribbonCategory: ribbonCategory
              }, {
                bRecalcPanels: bRecalcPanels
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function RecalcLayout(_x12, _x13) {
        return _RecalcLayout.apply(this, arguments);
      }
      return RecalcLayout;
    }()
  }]);
}(BaseClass);

function _callSuper$2h(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2h() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2h() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2h = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_RibbonBar_V5 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_RibbonBar_V5() {
    _classCallCheck(this, JSFR_RibbonBar_V5);
    return _callSuper$2h(this, JSFR_RibbonBar_V5, arguments);
  }
  _inherits(JSFR_RibbonBar_V5, _BaseClass);
  return _createClass(JSFR_RibbonBar_V5, [{
    key: "AddCategory",
    value: function () {
      var _AddCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ribbonBar, name, lpwsTitle) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRRibbonBarAddCategory", [{
                ribbonBar: ribbonBar
              }, {
                name: name
              }, {
                lpwsTitle: lpwsTitle
              }], ["name"], JSFR_RibbonCategory_V5));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function AddCategory(_x, _x2, _x3) {
        return _AddCategory.apply(this, arguments);
      }
      return AddCategory;
    }()
  }, {
    key: "GetCategoryCount",
    value: function () {
      var _GetCategoryCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ribbonBar) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRRibbonBarGetCategoryCount", [{
                ribbonBar: ribbonBar
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetCategoryCount(_x4) {
        return _GetCategoryCount.apply(this, arguments);
      }
      return GetCategoryCount;
    }()
  }, {
    key: "GetCategoryByIndex",
    value: function () {
      var _GetCategoryByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ribbonBar, nIndex) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRRibbonBarGetCategoryByIndex", [{
                ribbonBar: ribbonBar
              }, {
                nIndex: nIndex
              }], [], JSFR_RibbonCategory_V5));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetCategoryByIndex(_x5, _x6) {
        return _GetCategoryByIndex.apply(this, arguments);
      }
      return GetCategoryByIndex;
    }()
  }, {
    key: "GetCategoryByName",
    value: function () {
      var _GetCategoryByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ribbonBar, categoryName) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRRibbonBarGetCategoryByName", [{
                ribbonBar: ribbonBar
              }, {
                categoryName: categoryName
              }], ["categoryName"], JSFR_RibbonCategory_V5));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetCategoryByName(_x7, _x8) {
        return _GetCategoryByName.apply(this, arguments);
      }
      return GetCategoryByName;
    }()
  }, {
    key: "FindElementByName",
    value: function () {
      var _FindElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ribbonBar, categoryName, panelName, btnName) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FRRibbonBarFindElementByName", [{
                ribbonBar: ribbonBar
              }, {
                categoryName: categoryName
              }, {
                panelName: panelName
              }, {
                btnName: btnName
              }], ["categoryName", "panelName", "btnName"], JSFR_RibbonElement_V5));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function FindElementByName(_x9, _x10, _x11, _x12) {
        return _FindElementByName.apply(this, arguments);
      }
      return FindElementByName;
    }()
  }, {
    key: "RecalcLayout",
    value: function () {
      var _RecalcLayout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ribbonBar, bRecalcPanels) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FRRibbonBarRecalcLayout", [{
                ribbonBar: ribbonBar
              }, {
                bRecalcPanels: bRecalcPanels
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function RecalcLayout(_x13, _x14) {
        return _RecalcLayout.apply(this, arguments);
      }
      return RecalcLayout;
    }()
  }, {
    key: "GetActiveCategory",
    value: function () {
      var _GetActiveCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(ribbonBar) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FRRibbonBarGetActiveCategory", [{
                ribbonBar: ribbonBar
              }], [], JSFR_RibbonCategory_V5));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetActiveCategory(_x15) {
        return _GetActiveCategory.apply(this, arguments);
      }
      return GetActiveCategory;
    }()
  }, {
    key: "SetActiveCategory",
    value: function () {
      var _SetActiveCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(ribbonBar, categoryName) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FRRibbonBarSetActiveCategory", [{
                ribbonBar: ribbonBar
              }, {
                categoryName: categoryName
              }], ["categoryName"]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function SetActiveCategory(_x16, _x17) {
        return _SetActiveCategory.apply(this, arguments);
      }
      return SetActiveCategory;
    }()
  }]);
}(BaseClass);

function _callSuper$2g(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2g() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2g() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2g = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_App_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_App_V1() {
    _classCallCheck(this, JSFR_App_V1);
    return _callSuper$2g(this, JSFR_App_V1, arguments);
  }
  _inherits(JSFR_App_V1, _BaseClass);
  return _createClass(JSFR_App_V1, [{
    key: "GetName",
    value: function () {
      var _GetName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(outName) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FRAppGetName", [{
                outName: outName
              }], ["outName"]));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function GetName(_x) {
        return _GetName.apply(this, arguments);
      }
      return GetName;
    }()
  }, {
    key: "GetVersion",
    value: function () {
      var _GetVersion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(outVersion) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FRAppGetVersion", [{
                outVersion: outVersion
              }], ["outVersion"]));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetVersion(_x2) {
        return _GetVersion.apply(this, arguments);
      }
      return GetVersion;
    }()
  }, {
    key: "GetAppTitle",
    value: function () {
      var _GetAppTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(outTitle) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FRAppGetAppTitle", [{
                outTitle: outTitle
              }], ["outTitle"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetAppTitle(_x3) {
        return _GetAppTitle.apply(this, arguments);
      }
      return GetAppTitle;
    }()
  }, {
    key: "GetAppDataPath",
    value: function () {
      var _GetAppDataPath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(outAppPath) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FRAppGetAppDataPath", [{
                outAppPath: outAppPath
              }], ["outAppPath"]));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetAppDataPath(_x4) {
        return _GetAppDataPath.apply(this, arguments);
      }
      return GetAppDataPath;
    }()
  }, {
    key: "RegisterAppEventHandler",
    value: function () {
      var _RegisterAppEventHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(appEventCallbacks) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              appEventCallbacks.register();
              return _context5.abrupt("return", dispatchFun("FRAppRegisterAppEventHandler", [{
                appEventCallbacks: appEventCallbacks
              }], []));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function RegisterAppEventHandler(_x5) {
        return _RegisterAppEventHandler.apply(this, arguments);
      }
      return RegisterAppEventHandler;
    }()
  }, {
    key: "CountDocsOfPDDoc",
    value: function () {
      var _CountDocsOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FRAppCountDocsOfPDDoc", [], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function CountDocsOfPDDoc() {
        return _CountDocsOfPDDoc.apply(this, arguments);
      }
      return CountDocsOfPDDoc;
    }()
  }, {
    key: "GetDocOfPDDoc",
    value: function () {
      var _GetDocOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FRAppGetDocOfPDDoc", [{
                index: index
              }], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetDocOfPDDoc(_x6) {
        return _GetDocOfPDDoc.apply(this, arguments);
      }
      return GetDocOfPDDoc;
    }()
  }, {
    key: "GetActiveDocOfPDDoc",
    value: function () {
      var _GetActiveDocOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FRAppGetActiveDocOfPDDoc", [], [], JSFR_Doc_V1));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetActiveDocOfPDDoc() {
        return _GetActiveDocOfPDDoc.apply(this, arguments);
      }
      return GetActiveDocOfPDDoc;
    }()
  }, {
    key: "SetActiveDocOfPDDoc",
    value: function () {
      var _SetActiveDocOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(doc) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FRAppSetActiveDocOfPDDoc", [{
                doc: doc
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function SetActiveDocOfPDDoc(_x7) {
        return _SetActiveDocOfPDDoc.apply(this, arguments);
      }
      return SetActiveDocOfPDDoc;
    }()
  }, {
    key: "RegisterDocHandlerOfPDDoc",
    value: function () {
      var _RegisterDocHandlerOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(docEventCallbacks) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              docEventCallbacks.register();
              return _context10.abrupt("return", dispatchFun("FRAppRegisterDocHandlerOfPDDoc", [{
                docEventCallbacks: docEventCallbacks
              }], []));
            case 2:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function RegisterDocHandlerOfPDDoc(_x8) {
        return _RegisterDocHandlerOfPDDoc.apply(this, arguments);
      }
      return RegisterDocHandlerOfPDDoc;
    }()
  }, {
    key: "IsFullScreen",
    value: function () {
      var _IsFullScreen = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FRAppIsFullScreen", [], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function IsFullScreen() {
        return _IsFullScreen.apply(this, arguments);
      }
      return IsFullScreen;
    }()
  }, {
    key: "ShowFullScreen",
    value: function () {
      var _ShowFullScreen = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FRAppShowFullScreen", [], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function ShowFullScreen() {
        return _ShowFullScreen.apply(this, arguments);
      }
      return ShowFullScreen;
    }()
  }, {
    key: "EndFullScreen",
    value: function () {
      var _EndFullScreen = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FRAppEndFullScreen", [], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function EndFullScreen() {
        return _EndFullScreen.apply(this, arguments);
      }
      return EndFullScreen;
    }()
  }, {
    key: "RegisterSecurityHandler",
    value: function () {
      var _RegisterSecurityHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(name, callbacks) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              callbacks.register();
              return _context14.abrupt("return", dispatchFun("FRAppRegisterSecurityHandler", [{
                name: name
              }, {
                callbacks: callbacks
              }], []));
            case 2:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function RegisterSecurityHandler(_x9, _x10) {
        return _RegisterSecurityHandler.apply(this, arguments);
      }
      return RegisterSecurityHandler;
    }()
  }, {
    key: "UnRegisterSecurityHandler",
    value: function () {
      var _UnRegisterSecurityHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(name) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FRAppUnRegisterSecurityHandler", [{
                name: name
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function UnRegisterSecurityHandler(_x11) {
        return _UnRegisterSecurityHandler.apply(this, arguments);
      }
      return UnRegisterSecurityHandler;
    }()
  }, {
    key: "RegisterContentProvider",
    value: function () {
      var _RegisterContentProvider = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(contentProviderCallbacks) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              contentProviderCallbacks.register();
              return _context16.abrupt("return", dispatchFun("FRAppRegisterContentProvider", [{
                contentProviderCallbacks: contentProviderCallbacks
              }], []));
            case 2:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function RegisterContentProvider(_x12) {
        return _RegisterContentProvider.apply(this, arguments);
      }
      return RegisterContentProvider;
    }()
  }, {
    key: "GetMainFrameWnd",
    value: function () {
      var _GetMainFrameWnd = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FRAppGetMainFrameWnd", [], [], JSHwnd));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function GetMainFrameWnd() {
        return _GetMainFrameWnd.apply(this, arguments);
      }
      return GetMainFrameWnd;
    }()
  }, {
    key: "RegisterPageHandlerOfPDDoc",
    value: function () {
      var _RegisterPageHandlerOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(callbacks) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              callbacks.register();
              return _context18.abrupt("return", dispatchFun("FRAppRegisterPageHandlerOfPDDoc", [{
                callbacks: callbacks
              }], []));
            case 2:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function RegisterPageHandlerOfPDDoc(_x13) {
        return _RegisterPageHandlerOfPDDoc.apply(this, arguments);
      }
      return RegisterPageHandlerOfPDDoc;
    }()
  }, {
    key: "RegisterForContextMenuAddition",
    value: function () {
      var _RegisterForContextMenuAddition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(csName, proc, pClientData) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              proc.register();
              return _context19.abrupt("return", dispatchFun("FRAppRegisterForContextMenuAddition", [{
                csName: csName
              }, {
                proc: proc
              }, {
                pClientData: pClientData
              }], ["pClientData"]));
            case 2:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function RegisterForContextMenuAddition(_x14, _x15, _x16) {
        return _RegisterForContextMenuAddition.apply(this, arguments);
      }
      return RegisterForContextMenuAddition;
    }()
  }, {
    key: "RegisterForContextMenuAdditionJs",
    value: function () {
      var _RegisterForContextMenuAdditionJs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(csName, Menus) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FRAppRegisterForContextMenuAdditionJs", [{
                csName: csName
              }, {
                Menus: Menus
              }], []));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function RegisterForContextMenuAdditionJs(_x17, _x18) {
        return _RegisterForContextMenuAdditionJs.apply(this, arguments);
      }
      return RegisterForContextMenuAdditionJs;
    }()
  }, {
    key: "RegisterTaskPaneView",
    value: function () {
      var _RegisterTaskPaneView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(paneView) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              paneView.register();
              return _context21.abrupt("return", dispatchFun("FRAppRegisterTaskPaneView", [{
                paneView: paneView
              }], []));
            case 2:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function RegisterTaskPaneView(_x19) {
        return _RegisterTaskPaneView.apply(this, arguments);
      }
      return RegisterTaskPaneView;
    }()
  }, {
    key: "ShowTaskPane",
    value: function () {
      var _ShowTaskPane = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(nameOfPaneView, bShow) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FRAppShowTaskPane", [{
                nameOfPaneView: nameOfPaneView
              }, {
                bShow: bShow
              }], []));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function ShowTaskPane(_x20, _x21) {
        return _ShowTaskPane.apply(this, arguments);
      }
      return ShowTaskPane;
    }()
  }, {
    key: "GetRibbonBar",
    value: function () {
      var _GetRibbonBar = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(pParentWnd) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FRAppGetRibbonBar", [{
                pParentWnd: pParentWnd
              }], ["pParentWnd"], JSFR_RibbonBar_V5));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function GetRibbonBar(_x22) {
        return _GetRibbonBar.apply(this, arguments);
      }
      return GetRibbonBar;
    }()
  }, {
    key: "IsLicenseValidOrInTrial",
    value: function () {
      var _IsLicenseValidOrInTrial = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FRAppIsLicenseValidOrInTrial", [], []));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function IsLicenseValidOrInTrial() {
        return _IsLicenseValidOrInTrial.apply(this, arguments);
      }
      return IsLicenseValidOrInTrial;
    }()
  }, {
    key: "RegisterCmdMsgEventHandler",
    value: function () {
      var _RegisterCmdMsgEventHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(callbacks) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              callbacks.register();
              return _context25.abrupt("return", dispatchFun("FRAppRegisterCmdMsgEventHandler", [{
                callbacks: callbacks
              }], [], JSLPVOID$1));
            case 2:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function RegisterCmdMsgEventHandler(_x23) {
        return _RegisterCmdMsgEventHandler.apply(this, arguments);
      }
      return RegisterCmdMsgEventHandler;
    }()
  }, {
    key: "UnRegisterCmdMsgEventHandler",
    value: function () {
      var _UnRegisterCmdMsgEventHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(cmdMsgEventHandler) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FRAppUnRegisterCmdMsgEventHandler", [{
                cmdMsgEventHandler: cmdMsgEventHandler
              }], ["cmdMsgEventHandler"]));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function UnRegisterCmdMsgEventHandler(_x24) {
        return _UnRegisterCmdMsgEventHandler.apply(this, arguments);
      }
      return UnRegisterCmdMsgEventHandler;
    }()
  }, {
    key: "RemoveTaskPanelByName",
    value: function () {
      var _RemoveTaskPanelByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(nameOfPaneView) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FRAppRemoveTaskPanelByName", [{
                nameOfPaneView: nameOfPaneView
              }], []));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function RemoveTaskPanelByName(_x25) {
        return _RemoveTaskPanelByName.apply(this, arguments);
      }
      return RemoveTaskPanelByName;
    }()
  }, {
    key: "RegisterPOEventHandler",
    value: function () {
      var _RegisterPOEventHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(callbacks) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              callbacks.register();
              return _context28.abrupt("return", dispatchFun("FRAppRegisterPOEventHandler", [{
                callbacks: callbacks
              }], [], JSLPVOID$1));
            case 2:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function RegisterPOEventHandler(_x26) {
        return _RegisterPOEventHandler.apply(this, arguments);
      }
      return RegisterPOEventHandler;
    }()
  }, {
    key: "GetMainFrameWndCount",
    value: function () {
      var _GetMainFrameWndCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", dispatchFun("FRAppGetMainFrameWndCount", [], []));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function GetMainFrameWndCount() {
        return _GetMainFrameWndCount.apply(this, arguments);
      }
      return GetMainFrameWndCount;
    }()
  }, {
    key: "GetMainFrameWndByIndex",
    value: function () {
      var _GetMainFrameWndByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(nIndex) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", dispatchFun("FRAppGetMainFrameWndByIndex", [{
                nIndex: nIndex
              }], [], JSLPVOID$1));
            case 1:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function GetMainFrameWndByIndex(_x27) {
        return _GetMainFrameWndByIndex.apply(this, arguments);
      }
      return GetMainFrameWndByIndex;
    }()
  }, {
    key: "RegisterPanelToolHandler",
    value: function () {
      var _RegisterPanelToolHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(panelViewCallbacks) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              panelViewCallbacks.register();
              return _context31.abrupt("return", dispatchFun("FRAppRegisterPanelToolHandler", [{
                panelViewCallbacks: panelViewCallbacks
              }], [], JSLPVOID$1));
            case 2:
            case "end":
              return _context31.stop();
          }
        }, _callee31);
      }));
      function RegisterPanelToolHandler(_x28) {
        return _RegisterPanelToolHandler.apply(this, arguments);
      }
      return RegisterPanelToolHandler;
    }()
  }, {
    key: "IsTaskPaneShow",
    value: function () {
      var _IsTaskPaneShow = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(csName) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              return _context32.abrupt("return", dispatchFun("FRAppIsTaskPaneShow", [{
                csName: csName
              }], []));
            case 1:
            case "end":
              return _context32.stop();
          }
        }, _callee32);
      }));
      function IsTaskPaneShow(_x29) {
        return _IsTaskPaneShow.apply(this, arguments);
      }
      return IsTaskPaneShow;
    }()
  }, {
    key: "UnRegisterPOEventHandler",
    value: function () {
      var _UnRegisterPOEventHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(handler) {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              return _context33.abrupt("return", dispatchFun("FRAppUnRegisterPOEventHandler", [{
                handler: handler
              }], []));
            case 1:
            case "end":
              return _context33.stop();
          }
        }, _callee33);
      }));
      function UnRegisterPOEventHandler(_x30) {
        return _UnRegisterPOEventHandler.apply(this, arguments);
      }
      return UnRegisterPOEventHandler;
    }()
  }, {
    key: "AddFileAttachment2",
    value: function () {
      var _AddFileAttachment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(pDoc, info) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              return _context34.abrupt("return", dispatchFun("FRAppAddFileAttachment2", [{
                pDoc: pDoc
              }, {
                info: info
              }], []));
            case 1:
            case "end":
              return _context34.stop();
          }
        }, _callee34);
      }));
      function AddFileAttachment2(_x31, _x32) {
        return _AddFileAttachment.apply(this, arguments);
      }
      return AddFileAttachment2;
    }()
  }]);
}(BaseClass);

function _callSuper$2f(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2f() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2f() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2f = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Boolean_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Boolean_V1() {
    _classCallCheck(this, JSFPD_Boolean_V1);
    return _callSuper$2f(this, JSFPD_Boolean_V1, arguments);
  }
  _inherits(JSFPD_Boolean_V1, _BaseClass);
  return _createClass(JSFPD_Boolean_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDBooleanNew", [{
                value: value
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Identical",
    value: function () {
      var _Identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ObjBoolean, otherBoolean) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDBooleanIdentical", [{
                ObjBoolean: ObjBoolean
              }, {
                otherBoolean: otherBoolean
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Identical(_x2, _x3) {
        return _Identical.apply(this, arguments);
      }
      return Identical;
    }()
  }]);
}(BaseClass);

function _callSuper$2e(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2e() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2e() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2e = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Number_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Number_V1() {
    _classCallCheck(this, JSFPD_Number_V1);
    return _callSuper$2e(this, JSFPD_Number_V1, arguments);
  }
  _inherits(JSFPD_Number_V1, _BaseClass);
  return _createClass(JSFPD_Number_V1, [{
    key: "NewByInt",
    value: function () {
      var _NewByInt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDNumberNewByInt", [{
                value: value
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function NewByInt(_x) {
        return _NewByInt.apply(this, arguments);
      }
      return NewByInt;
    }()
  }, {
    key: "NewByFloat",
    value: function () {
      var _NewByFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDNumberNewByFloat", [{
                value: value
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function NewByFloat(_x2) {
        return _NewByFloat.apply(this, arguments);
      }
      return NewByFloat;
    }()
  }, {
    key: "NewByStr",
    value: function () {
      var _NewByStr = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(pStr) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDNumberNewByStr", [{
                pStr: pStr
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function NewByStr(_x3) {
        return _NewByStr.apply(this, arguments);
      }
      return NewByStr;
    }()
  }, {
    key: "NewFromData",
    value: function () {
      var _NewFromData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(bInteger, pData) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDNumberNewFromData", [{
                bInteger: bInteger
              }, {
                pData: pData
              }], ["pData"], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function NewFromData(_x4, _x5) {
        return _NewFromData.apply(this, arguments);
      }
      return NewFromData;
    }()
  }, {
    key: "Identical",
    value: function () {
      var _Identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(objNumber, other_number) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDNumberIdentical", [{
                objNumber: objNumber
              }, {
                other_number: other_number
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function Identical(_x6, _x7) {
        return _Identical.apply(this, arguments);
      }
      return Identical;
    }()
  }, {
    key: "GetString",
    value: function () {
      var _GetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(objNumber, outResult) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDNumberGetString", [{
                objNumber: objNumber
              }, {
                outResult: outResult
              }], ["outResult"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetString(_x8, _x9) {
        return _GetString.apply(this, arguments);
      }
      return GetString;
    }()
  }, {
    key: "SetString",
    value: function () {
      var _SetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(objNumber, str) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDNumberSetString", [{
                objNumber: objNumber
              }, {
                str: str
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function SetString(_x10, _x11) {
        return _SetString.apply(this, arguments);
      }
      return SetString;
    }()
  }, {
    key: "IsInteger",
    value: function () {
      var _IsInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(objNumber) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDNumberIsInteger", [{
                objNumber: objNumber
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function IsInteger(_x12) {
        return _IsInteger.apply(this, arguments);
      }
      return IsInteger;
    }()
  }, {
    key: "GetInteger",
    value: function () {
      var _GetInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(objNumber) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDNumberGetInteger", [{
                objNumber: objNumber
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetInteger(_x13) {
        return _GetInteger.apply(this, arguments);
      }
      return GetInteger;
    }()
  }, {
    key: "GetNumber",
    value: function () {
      var _GetNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(objNumber) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDNumberGetNumber", [{
                objNumber: objNumber
              }], []));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetNumber(_x14) {
        return _GetNumber.apply(this, arguments);
      }
      return GetNumber;
    }()
  }, {
    key: "SetNumber",
    value: function () {
      var _SetNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(objNumber, value) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDNumberSetNumber", [{
                objNumber: objNumber
              }, {
                value: value
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function SetNumber(_x15, _x16) {
        return _SetNumber.apply(this, arguments);
      }
      return SetNumber;
    }()
  }, {
    key: "GetFloat",
    value: function () {
      var _GetFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(objNumber) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDNumberGetFloat", [{
                objNumber: objNumber
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetFloat(_x17) {
        return _GetFloat.apply(this, arguments);
      }
      return GetFloat;
    }()
  }]);
}(BaseClass);

function _callSuper$2d(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2d() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2d() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2d = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_String_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_String_V1() {
    _classCallCheck(this, JSFPD_String_V1);
    return _callSuper$2d(this, JSFPD_String_V1, arguments);
  }
  _inherits(JSFPD_String_V1, _BaseClass);
  return _createClass(JSFPD_String_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(str, bHex) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDStringNew", [{
                str: str
              }, {
                bHex: bHex
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x, _x2) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "NewW",
    value: function () {
      var _NewW = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(wstr) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDStringNewW", [{
                wstr: wstr
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function NewW(_x3) {
        return _NewW.apply(this, arguments);
      }
      return NewW;
    }()
  }, {
    key: "GetString",
    value: function () {
      var _GetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(objString, outString) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDStringGetString", [{
                objString: objString
              }, {
                outString: outString
              }], ["outString"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetString(_x4, _x5) {
        return _GetString.apply(this, arguments);
      }
      return GetString;
    }()
  }, {
    key: "Identical",
    value: function () {
      var _Identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(objString, other_objString) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDStringIdentical", [{
                objString: objString
              }, {
                other_objString: other_objString
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function Identical(_x6, _x7) {
        return _Identical.apply(this, arguments);
      }
      return Identical;
    }()
  }, {
    key: "SetHex",
    value: function () {
      var _SetHex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(objString, bHex) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDStringSetHex", [{
                objString: objString
              }, {
                bHex: bHex
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function SetHex(_x8, _x9) {
        return _SetHex.apply(this, arguments);
      }
      return SetHex;
    }()
  }, {
    key: "IsHex",
    value: function () {
      var _IsHex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(objString) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDStringIsHex", [{
                objString: objString
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function IsHex(_x10) {
        return _IsHex.apply(this, arguments);
      }
      return IsHex;
    }()
  }]);
}(BaseClass);

function _callSuper$2c(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2c() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2c() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2c = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Name_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Name_V1() {
    _classCallCheck(this, JSFPD_Name_V1);
    return _callSuper$2c(this, JSFPD_Name_V1, arguments);
  }
  _inherits(JSFPD_Name_V1, _BaseClass);
  return _createClass(JSFPD_Name_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDNameNew", [{
                str: str
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "GetString",
    value: function () {
      var _GetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(objName, outString) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDNameGetString", [{
                objName: objName
              }, {
                outString: outString
              }], ["outString"]));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetString(_x2, _x3) {
        return _GetString.apply(this, arguments);
      }
      return GetString;
    }()
  }, {
    key: "Identical",
    value: function () {
      var _Identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(objName, other_objName) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDNameIdentical", [{
                objName: objName
              }, {
                other_objName: other_objName
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function Identical(_x4, _x5) {
        return _Identical.apply(this, arguments);
      }
      return Identical;
    }()
  }]);
}(BaseClass);

function _callSuper$2b(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2b() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2b() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2b = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Array_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Array_V1() {
    _classCallCheck(this, JSFPD_Array_V1);
    return _callSuper$2b(this, JSFPD_Array_V1, arguments);
  }
  _inherits(JSFPD_Array_V1, _BaseClass);
  return _createClass(JSFPD_Array_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDArrayNew", [], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "GetCount",
    value: function () {
      var _GetCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(objArray) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDArrayGetCount", [{
                objArray: objArray
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetCount(_x) {
        return _GetCount.apply(this, arguments);
      }
      return GetCount;
    }()
  }, {
    key: "GetElement",
    value: function () {
      var _GetElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDArrayGetElement", [{
                objArray: objArray
              }, {
                index: index
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetElement(_x2, _x3) {
        return _GetElement.apply(this, arguments);
      }
      return GetElement;
    }()
  }, {
    key: "GetElementValue",
    value: function () {
      var _GetElementValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDArrayGetElementValue", [{
                objArray: objArray
              }, {
                index: index
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetElementValue(_x4, _x5) {
        return _GetElementValue.apply(this, arguments);
      }
      return GetElementValue;
    }()
  }, {
    key: "GetMatrix",
    value: function () {
      var _GetMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(objArray) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDArrayGetMatrix", [{
                objArray: objArray
              }], [], JSFS_AffineMatrix_V1));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetMatrix(_x6) {
        return _GetMatrix.apply(this, arguments);
      }
      return GetMatrix;
    }()
  }, {
    key: "GetRect",
    value: function () {
      var _GetRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(objArray) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDArrayGetRect", [{
                objArray: objArray
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetRect(_x7) {
        return _GetRect.apply(this, arguments);
      }
      return GetRect;
    }()
  }, {
    key: "GetString",
    value: function () {
      var _GetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(objArray, index, outString) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDArrayGetString", [{
                objArray: objArray
              }, {
                index: index
              }, {
                outString: outString
              }], ["outString"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetString(_x8, _x9, _x10) {
        return _GetString.apply(this, arguments);
      }
      return GetString;
    }()
  }, {
    key: "GetInteger",
    value: function () {
      var _GetInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDArrayGetInteger", [{
                objArray: objArray
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetInteger(_x11, _x12) {
        return _GetInteger.apply(this, arguments);
      }
      return GetInteger;
    }()
  }, {
    key: "GetNumber",
    value: function () {
      var _GetNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDArrayGetNumber", [{
                objArray: objArray
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetNumber(_x13, _x14) {
        return _GetNumber.apply(this, arguments);
      }
      return GetNumber;
    }()
  }, {
    key: "GetDict",
    value: function () {
      var _GetDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDArrayGetDict", [{
                objArray: objArray
              }, {
                index: index
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetDict(_x15, _x16) {
        return _GetDict.apply(this, arguments);
      }
      return GetDict;
    }()
  }, {
    key: "GetStream",
    value: function () {
      var _GetStream = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDArrayGetStream", [{
                objArray: objArray
              }, {
                index: index
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetStream(_x17, _x18) {
        return _GetStream.apply(this, arguments);
      }
      return GetStream;
    }()
  }, {
    key: "GetArray",
    value: function () {
      var _GetArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDArrayGetArray", [{
                objArray: objArray
              }, {
                index: index
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetArray(_x19, _x20) {
        return _GetArray.apply(this, arguments);
      }
      return GetArray;
    }()
  }, {
    key: "GetFloat",
    value: function () {
      var _GetFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDArrayGetFloat", [{
                objArray: objArray
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetFloat(_x21, _x22) {
        return _GetFloat.apply(this, arguments);
      }
      return GetFloat;
    }()
  }, {
    key: "SetAt",
    value: function () {
      var _SetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(objArray, index, otherObj, objs) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDArraySetAt", [{
                objArray: objArray
              }, {
                index: index
              }, {
                otherObj: otherObj
              }, {
                objs: objs
              }], ["objs"]));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function SetAt(_x23, _x24, _x25, _x26) {
        return _SetAt.apply(this, arguments);
      }
      return SetAt;
    }()
  }, {
    key: "InsertAt",
    value: function () {
      var _InsertAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(objArray, index, otherObj, pDoc) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDArrayInsertAt", [{
                objArray: objArray
              }, {
                index: index
              }, {
                otherObj: otherObj
              }, {
                pDoc: pDoc
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function InsertAt(_x27, _x28, _x29, _x30) {
        return _InsertAt.apply(this, arguments);
      }
      return InsertAt;
    }()
  }, {
    key: "RemoveAt",
    value: function () {
      var _RemoveAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(objArray, index) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDArrayRemoveAt", [{
                objArray: objArray
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function RemoveAt(_x31, _x32) {
        return _RemoveAt.apply(this, arguments);
      }
      return RemoveAt;
    }()
  }, {
    key: "Add",
    value: function () {
      var _Add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(objArray, other_obj, pDoc) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDArrayAdd", [{
                objArray: objArray
              }, {
                other_obj: other_obj
              }, {
                pDoc: pDoc
              }], []));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function Add(_x33, _x34, _x35) {
        return _Add.apply(this, arguments);
      }
      return Add;
    }()
  }, {
    key: "AddNumber",
    value: function () {
      var _AddNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(objArray, num) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDArrayAddNumber", [{
                objArray: objArray
              }, {
                num: num
              }], []));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function AddNumber(_x36, _x37) {
        return _AddNumber.apply(this, arguments);
      }
      return AddNumber;
    }()
  }, {
    key: "AddInteger",
    value: function () {
      var _AddInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(objArray, value) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDArrayAddInteger", [{
                objArray: objArray
              }, {
                value: value
              }], []));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function AddInteger(_x38, _x39) {
        return _AddInteger.apply(this, arguments);
      }
      return AddInteger;
    }()
  }, {
    key: "AddString",
    value: function () {
      var _AddString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(objArray, str, nLen) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDArrayAddString", [{
                objArray: objArray
              }, {
                str: str
              }, {
                nLen: nLen
              }], []));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function AddString(_x40, _x41, _x42) {
        return _AddString.apply(this, arguments);
      }
      return AddString;
    }()
  }, {
    key: "AddName",
    value: function () {
      var _AddName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(objArray, szName) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FPDArrayAddName", [{
                objArray: objArray
              }, {
                szName: szName
              }], []));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function AddName(_x43, _x44) {
        return _AddName.apply(this, arguments);
      }
      return AddName;
    }()
  }, {
    key: "AddReferenceToDoc",
    value: function () {
      var _AddReferenceToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(objArray, doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FPDArrayAddReferenceToDoc", [{
                objArray: objArray
              }, {
                doc: doc
              }, {
                objNum: objNum
              }], []));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function AddReferenceToDoc(_x45, _x46, _x47) {
        return _AddReferenceToDoc.apply(this, arguments);
      }
      return AddReferenceToDoc;
    }()
  }, {
    key: "AddReferenceToFDFDoc",
    value: function () {
      var _AddReferenceToFDFDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(objArray, doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FPDArrayAddReferenceToFDFDoc", [{
                objArray: objArray
              }, {
                doc: doc
              }, {
                objNum: objNum
              }], []));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function AddReferenceToFDFDoc(_x48, _x49, _x50) {
        return _AddReferenceToFDFDoc.apply(this, arguments);
      }
      return AddReferenceToFDFDoc;
    }()
  }, {
    key: "AddReference2ToDoc",
    value: function () {
      var _AddReference2ToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(objArray, doc, obj) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FPDArrayAddReference2ToDoc", [{
                objArray: objArray
              }, {
                doc: doc
              }, {
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function AddReference2ToDoc(_x51, _x52, _x53) {
        return _AddReference2ToDoc.apply(this, arguments);
      }
      return AddReference2ToDoc;
    }()
  }, {
    key: "AddReference2ToFDFDoc",
    value: function () {
      var _AddReference2ToFDFDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(objArray, doc, obj) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FPDArrayAddReference2ToFDFDoc", [{
                objArray: objArray
              }, {
                doc: doc
              }, {
                obj: obj
              }], []));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function AddReference2ToFDFDoc(_x54, _x55, _x56) {
        return _AddReference2ToFDFDoc.apply(this, arguments);
      }
      return AddReference2ToFDFDoc;
    }()
  }, {
    key: "IsIdentical",
    value: function () {
      var _IsIdentical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(objArray, otherArray) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FPDArrayIsIdentical", [{
                objArray: objArray
              }, {
                otherArray: otherArray
              }], []));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function IsIdentical(_x57, _x58) {
        return _IsIdentical.apply(this, arguments);
      }
      return IsIdentical;
    }()
  }, {
    key: "AddNew",
    value: function () {
      var _AddNew = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(objArray, object_type) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FPDArrayAddNew", [{
                objArray: objArray
              }, {
                object_type: object_type
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function AddNew(_x59, _x60) {
        return _AddNew.apply(this, arguments);
      }
      return AddNew;
    }()
  }, {
    key: "Release",
    value: function () {
      var _Release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(objArray) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", dispatchFun("FPDArrayRelease", [{
                objArray: objArray
              }], []));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function Release(_x61) {
        return _Release.apply(this, arguments);
      }
      return Release;
    }()
  }]);
}(BaseClass);

function _callSuper$2a(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2a() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2a() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2a = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Dictionary_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Dictionary_V1() {
    _classCallCheck(this, JSFPD_Dictionary_V1);
    return _callSuper$2a(this, JSFPD_Dictionary_V1, arguments);
  }
  _inherits(JSFPD_Dictionary_V1, _BaseClass);
  return _createClass(JSFPD_Dictionary_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDDictionaryNew", [], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "GetElement",
    value: function () {
      var _GetElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDDictionaryGetElement", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function GetElement(_x, _x2) {
        return _GetElement.apply(this, arguments);
      }
      return GetElement;
    }()
  }, {
    key: "GetElementValue",
    value: function () {
      var _GetElementValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDDictionaryGetElementValue", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetElementValue(_x3, _x4) {
        return _GetElementValue.apply(this, arguments);
      }
      return GetElementValue;
    }()
  }, {
    key: "GetString",
    value: function () {
      var _GetString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(objDict, key, outString) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDDictionaryGetString", [{
                objDict: objDict
              }, {
                key: key
              }, {
                outString: outString
              }], ["key", "outString"]));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetString(_x5, _x6, _x7) {
        return _GetString.apply(this, arguments);
      }
      return GetString;
    }()
  }, {
    key: "GetUnicodeText",
    value: function () {
      var _GetUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(objDict, key, outUnicodeText) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDDictionaryGetUnicodeText", [{
                objDict: objDict
              }, {
                key: key
              }, {
                outUnicodeText: outUnicodeText
              }], ["key", "outUnicodeText"]));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetUnicodeText(_x8, _x9, _x10) {
        return _GetUnicodeText.apply(this, arguments);
      }
      return GetUnicodeText;
    }()
  }, {
    key: "GetInteger2",
    value: function () {
      var _GetInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(objDict, key, defaultInt) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDDictionaryGetInteger2", [{
                objDict: objDict
              }, {
                key: key
              }, {
                defaultInt: defaultInt
              }], ["key"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetInteger2(_x11, _x12, _x13) {
        return _GetInteger.apply(this, arguments);
      }
      return GetInteger2;
    }()
  }, {
    key: "GetNumber",
    value: function () {
      var _GetNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDDictionaryGetNumber", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetNumber(_x14, _x15) {
        return _GetNumber.apply(this, arguments);
      }
      return GetNumber;
    }()
  }, {
    key: "GetDict",
    value: function () {
      var _GetDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDDictionaryGetDict", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetDict(_x16, _x17) {
        return _GetDict.apply(this, arguments);
      }
      return GetDict;
    }()
  }, {
    key: "GetArray",
    value: function () {
      var _GetArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDDictionaryGetArray", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetArray(_x18, _x19) {
        return _GetArray.apply(this, arguments);
      }
      return GetArray;
    }()
  }, {
    key: "GetRect",
    value: function () {
      var _GetRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDDictionaryGetRect", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetRect(_x20, _x21) {
        return _GetRect.apply(this, arguments);
      }
      return GetRect;
    }()
  }, {
    key: "GetMatrix",
    value: function () {
      var _GetMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDDictionaryGetMatrix", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"], JSFS_AffineMatrix_V1));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetMatrix(_x22, _x23) {
        return _GetMatrix.apply(this, arguments);
      }
      return GetMatrix;
    }()
  }, {
    key: "GetFloat",
    value: function () {
      var _GetFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDDictionaryGetFloat", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"]));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetFloat(_x24, _x25) {
        return _GetFloat.apply(this, arguments);
      }
      return GetFloat;
    }()
  }, {
    key: "KeyExist",
    value: function () {
      var _KeyExist = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDDictionaryKeyExist", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"]));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function KeyExist(_x26, _x27) {
        return _KeyExist.apply(this, arguments);
      }
      return KeyExist;
    }()
  }, {
    key: "GetStartPosition",
    value: function () {
      var _GetStartPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(objDict) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDDictionaryGetStartPosition", [{
                objDict: objDict
              }], [], FS_POSITION));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function GetStartPosition(_x28) {
        return _GetStartPosition.apply(this, arguments);
      }
      return GetStartPosition;
    }()
  }, {
    key: "GetNextElement",
    value: function () {
      var _GetNextElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(objDict, outPos, outKey) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDDictionaryGetNextElement", [{
                objDict: objDict
              }, {
                outPos: outPos
              }, {
                outKey: outKey
              }], ["outPos", "outKey"], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function GetNextElement(_x29, _x30, _x31) {
        return _GetNextElement.apply(this, arguments);
      }
      return GetNextElement;
    }()
  }, {
    key: "SetAt",
    value: function () {
      var _SetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(objDict, key, obj, objs) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDDictionarySetAt", [{
                objDict: objDict
              }, {
                key: key
              }, {
                obj: obj
              }, {
                objs: objs
              }], ["key"]));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function SetAt(_x32, _x33, _x34, _x35) {
        return _SetAt.apply(this, arguments);
      }
      return SetAt;
    }()
  }, {
    key: "SetAtName",
    value: function () {
      var _SetAtName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(objDict, key, szName) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDDictionarySetAtName", [{
                objDict: objDict
              }, {
                key: key
              }, {
                szName: szName
              }], ["key"]));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function SetAtName(_x36, _x37, _x38) {
        return _SetAtName.apply(this, arguments);
      }
      return SetAtName;
    }()
  }, {
    key: "SetAtString",
    value: function () {
      var _SetAtString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(objDict, key, str) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDDictionarySetAtString", [{
                objDict: objDict
              }, {
                key: key
              }, {
                str: str
              }], ["key"]));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function SetAtString(_x39, _x40, _x41) {
        return _SetAtString.apply(this, arguments);
      }
      return SetAtString;
    }()
  }, {
    key: "SetAtInteger",
    value: function () {
      var _SetAtInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(objDict, key, i) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDDictionarySetAtInteger", [{
                objDict: objDict
              }, {
                key: key
              }, {
                i: i
              }], ["key"]));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function SetAtInteger(_x42, _x43, _x44) {
        return _SetAtInteger.apply(this, arguments);
      }
      return SetAtInteger;
    }()
  }, {
    key: "SetAtNumber",
    value: function () {
      var _SetAtNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(objDict, key, f) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDDictionarySetAtNumber", [{
                objDict: objDict
              }, {
                key: key
              }, {
                f: f
              }], ["key"]));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function SetAtNumber(_x45, _x46, _x47) {
        return _SetAtNumber.apply(this, arguments);
      }
      return SetAtNumber;
    }()
  }, {
    key: "SetAtReferenceToDoc",
    value: function () {
      var _SetAtReferenceToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(objDict, key, doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FPDDictionarySetAtReferenceToDoc", [{
                objDict: objDict
              }, {
                key: key
              }, {
                doc: doc
              }, {
                objNum: objNum
              }], ["key"]));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function SetAtReferenceToDoc(_x48, _x49, _x50, _x51) {
        return _SetAtReferenceToDoc.apply(this, arguments);
      }
      return SetAtReferenceToDoc;
    }()
  }, {
    key: "SetAtReference2ToDoc",
    value: function () {
      var _SetAtReference2ToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(objDict, key, doc, obj) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FPDDictionarySetAtReference2ToDoc", [{
                objDict: objDict
              }, {
                key: key
              }, {
                doc: doc
              }, {
                obj: obj
              }], ["key"]));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function SetAtReference2ToDoc(_x52, _x53, _x54, _x55) {
        return _SetAtReference2ToDoc.apply(this, arguments);
      }
      return SetAtReference2ToDoc;
    }()
  }, {
    key: "SetAtRect",
    value: function () {
      var _SetAtRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(objDict, key, rect) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FPDDictionarySetAtRect", [{
                objDict: objDict
              }, {
                key: key
              }, {
                rect: rect
              }], ["key"]));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function SetAtRect(_x56, _x57, _x58) {
        return _SetAtRect.apply(this, arguments);
      }
      return SetAtRect;
    }()
  }, {
    key: "SetAtMatrix",
    value: function () {
      var _SetAtMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(objDict, key, matrix) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FPDDictionarySetAtMatrix", [{
                objDict: objDict
              }, {
                key: key
              }, {
                matrix: matrix
              }], ["key"]));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function SetAtMatrix(_x59, _x60, _x61) {
        return _SetAtMatrix.apply(this, arguments);
      }
      return SetAtMatrix;
    }()
  }, {
    key: "SetAtBoolean",
    value: function () {
      var _SetAtBoolean = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(objDict, key, value) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FPDDictionarySetAtBoolean", [{
                objDict: objDict
              }, {
                key: key
              }, {
                value: value
              }], ["key"]));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function SetAtBoolean(_x62, _x63, _x64) {
        return _SetAtBoolean.apply(this, arguments);
      }
      return SetAtBoolean;
    }()
  }, {
    key: "RemoveAt",
    value: function () {
      var _RemoveAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FPDDictionaryRemoveAt", [{
                objDict: objDict
              }, {
                key: key
              }], ["key"]));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function RemoveAt(_x65, _x66) {
        return _RemoveAt.apply(this, arguments);
      }
      return RemoveAt;
    }()
  }, {
    key: "ReplaceKey",
    value: function () {
      var _ReplaceKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(objDict, oldkey, newKey) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FPDDictionaryReplaceKey", [{
                objDict: objDict
              }, {
                oldkey: oldkey
              }, {
                newKey: newKey
              }], ["oldkey", "newKey"]));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function ReplaceKey(_x67, _x68, _x69) {
        return _ReplaceKey.apply(this, arguments);
      }
      return ReplaceKey;
    }()
  }, {
    key: "Identical",
    value: function () {
      var _Identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(objDict, otherDict) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", dispatchFun("FPDDictionaryIdentical", [{
                objDict: objDict
              }, {
                otherDict: otherDict
              }], []));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function Identical(_x70, _x71) {
        return _Identical.apply(this, arguments);
      }
      return Identical;
    }()
  }, {
    key: "GetCount",
    value: function () {
      var _GetCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(objDict) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", dispatchFun("FPDDictionaryGetCount", [{
                objDict: objDict
              }], []));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function GetCount(_x72) {
        return _GetCount.apply(this, arguments);
      }
      return GetCount;
    }()
  }, {
    key: "AddValue",
    value: function () {
      var _AddValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(objDict, key, obj) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", dispatchFun("FPDDictionaryAddValue", [{
                objDict: objDict
              }, {
                key: key
              }, {
                obj: obj
              }], ["key"]));
            case 1:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function AddValue(_x73, _x74, _x75) {
        return _AddValue.apply(this, arguments);
      }
      return AddValue;
    }()
  }, {
    key: "GetBoolean2",
    value: function () {
      var _GetBoolean = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(objDict, key, bDefault) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              return _context31.abrupt("return", dispatchFun("FPDDictionaryGetBoolean2", [{
                objDict: objDict
              }, {
                key: key
              }, {
                bDefault: bDefault
              }], ["key"]));
            case 1:
            case "end":
              return _context31.stop();
          }
        }, _callee31);
      }));
      function GetBoolean2(_x76, _x77, _x78) {
        return _GetBoolean.apply(this, arguments);
      }
      return GetBoolean2;
    }()
  }, {
    key: "SetNewAt",
    value: function () {
      var _SetNewAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(objDict, key, object_type) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              return _context32.abrupt("return", dispatchFun("FPDDictionarySetNewAt", [{
                objDict: objDict
              }, {
                key: key
              }, {
                object_type: object_type
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context32.stop();
          }
        }, _callee32);
      }));
      function SetNewAt(_x79, _x80, _x81) {
        return _SetNewAt.apply(this, arguments);
      }
      return SetNewAt;
    }()
  }, {
    key: "AddReference",
    value: function () {
      var _AddReference = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(objDict, key, pDoc, objnum) {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              return _context33.abrupt("return", dispatchFun("FPDDictionaryAddReference", [{
                objDict: objDict
              }, {
                key: key
              }, {
                pDoc: pDoc
              }, {
                objnum: objnum
              }], []));
            case 1:
            case "end":
              return _context33.stop();
          }
        }, _callee33);
      }));
      function AddReference(_x82, _x83, _x84, _x85) {
        return _AddReference.apply(this, arguments);
      }
      return AddReference;
    }()
  }, {
    key: "Release",
    value: function () {
      var _Release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(objDict) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              return _context34.abrupt("return", dispatchFun("FPDDictionaryRelease", [{
                objDict: objDict
              }], []));
            case 1:
            case "end":
              return _context34.stop();
          }
        }, _callee34);
      }));
      function Release(_x86) {
        return _Release.apply(this, arguments);
      }
      return Release;
    }()
  }, {
    key: "GetInteger64",
    value: function () {
      var _GetInteger2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              return _context35.abrupt("return", dispatchFun("FPDDictionaryGetInteger64", [{
                objDict: objDict
              }, {
                key: key
              }], []));
            case 1:
            case "end":
              return _context35.stop();
          }
        }, _callee35);
      }));
      function GetInteger64(_x87, _x88) {
        return _GetInteger2.apply(this, arguments);
      }
      return GetInteger64;
    }()
  }, {
    key: "GetName",
    value: function () {
      var _GetName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(objDict, key) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              return _context36.abrupt("return", dispatchFun("FPDDictionaryGetName", [{
                objDict: objDict
              }, {
                key: key
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context36.stop();
          }
        }, _callee36);
      }));
      function GetName(_x89, _x90) {
        return _GetName.apply(this, arguments);
      }
      return GetName;
    }()
  }]);
}(BaseClass);

function _callSuper$29(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$29() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$29() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$29 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Color_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Color_V1() {
    _classCallCheck(this, JSFPD_Color_V1);
    return _callSuper$29(this, JSFPD_Color_V1, arguments);
  }
  _inherits(JSFPD_Color_V1, _BaseClass);
  return _createClass(JSFPD_Color_V1);
}(BaseClass);

function _callSuper$28(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$28() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$28() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$28 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_ColorState_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_ColorState_V1() {
    _classCallCheck(this, JSFPD_ColorState_V1);
    return _callSuper$28(this, JSFPD_ColorState_V1, arguments);
  }
  _inherits(JSFPD_ColorState_V1, _BaseClass);
  return _createClass(JSFPD_ColorState_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDColorStateNew", [], [], JSFPD_ColorState_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(clrState) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDColorStateDestroy", [{
                clrState: clrState
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetFillColor",
    value: function () {
      var _GetFillColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(clrState) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDColorStateGetFillColor", [{
                clrState: clrState
              }], [], JSFPD_Color_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetFillColor(_x2) {
        return _GetFillColor.apply(this, arguments);
      }
      return GetFillColor;
    }()
  }, {
    key: "GetStrokeColor",
    value: function () {
      var _GetStrokeColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(clrState) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDColorStateGetStrokeColor", [{
                clrState: clrState
              }], [], JSFPD_Color_V1));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetStrokeColor(_x3) {
        return _GetStrokeColor.apply(this, arguments);
      }
      return GetStrokeColor;
    }()
  }, {
    key: "SetFillColor",
    value: function () {
      var _SetFillColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(clrState, clrSpace, pValue, nValues) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDColorStateSetFillColor", [{
                clrState: clrState
              }, {
                clrSpace: clrSpace
              }, {
                pValue: pValue
              }, {
                nValues: nValues
              }], ["pValue"]));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function SetFillColor(_x4, _x5, _x6, _x7) {
        return _SetFillColor.apply(this, arguments);
      }
      return SetFillColor;
    }()
  }, {
    key: "SetStrokeColor",
    value: function () {
      var _SetStrokeColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(clrState, clrSpace, pValue, nValues) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDColorStateSetStrokeColor", [{
                clrState: clrState
              }, {
                clrSpace: clrSpace
              }, {
                pValue: pValue
              }, {
                nValues: nValues
              }], ["pValue"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function SetStrokeColor(_x8, _x9, _x10, _x11) {
        return _SetStrokeColor.apply(this, arguments);
      }
      return SetStrokeColor;
    }()
  }, {
    key: "IsNull",
    value: function () {
      var _IsNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(clrState) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDColorStateIsNull", [{
                clrState: clrState
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function IsNull(_x12) {
        return _IsNull.apply(this, arguments);
      }
      return IsNull;
    }()
  }, {
    key: "GetModify",
    value: function () {
      var _GetModify = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(clrState) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDColorStateGetModify", [{
                clrState: clrState
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetModify(_x13) {
        return _GetModify.apply(this, arguments);
      }
      return GetModify;
    }()
  }]);
}(BaseClass);

function _callSuper$27(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$27() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$27() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$27 = function _isNativeReflectConstruct() { return !!t; })(); }
var FloatPointer$2 = /*#__PURE__*/function (_BaseClass) {
  function FloatPointer() {
    _classCallCheck(this, FloatPointer);
    return _callSuper$27(this, FloatPointer, arguments);
  }
  _inherits(FloatPointer, _BaseClass);
  return _createClass(FloatPointer);
}(BaseClass);

function _callSuper$26(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$26() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$26() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$26 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_TextState_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_TextState_V1() {
    _classCallCheck(this, JSFPD_TextState_V1);
    return _callSuper$26(this, JSFPD_TextState_V1, arguments);
  }
  _inherits(JSFPD_TextState_V1, _BaseClass);
  return _createClass(JSFPD_TextState_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDTextStateNew", [], [], JSFPD_TextState_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(textState) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDTextStateDestroy", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetFont",
    value: function () {
      var _GetFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(textState) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDTextStateGetFont", [{
                textState: textState
              }], [], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetFont(_x2) {
        return _GetFont.apply(this, arguments);
      }
      return GetFont;
    }()
  }, {
    key: "SetFont",
    value: function () {
      var _SetFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(textState, font) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDTextStateSetFont", [{
                textState: textState
              }, {
                font: font
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function SetFont(_x3, _x4) {
        return _SetFont.apply(this, arguments);
      }
      return SetFont;
    }()
  }, {
    key: "GetFontSize",
    value: function () {
      var _GetFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(textState) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDTextStateGetFontSize", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetFontSize(_x5) {
        return _GetFontSize.apply(this, arguments);
      }
      return GetFontSize;
    }()
  }, {
    key: "GetMatrix",
    value: function () {
      var _GetMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(textState) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDTextStateGetMatrix", [{
                textState: textState
              }], [], FloatPointer$2));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetMatrix(_x6) {
        return _GetMatrix.apply(this, arguments);
      }
      return GetMatrix;
    }()
  }, {
    key: "GetFontSizeV",
    value: function () {
      var _GetFontSizeV = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(textState) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDTextStateGetFontSizeV", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetFontSizeV(_x7) {
        return _GetFontSizeV.apply(this, arguments);
      }
      return GetFontSizeV;
    }()
  }, {
    key: "GetFontSizeH",
    value: function () {
      var _GetFontSizeH = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(textState) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDTextStateGetFontSizeH", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetFontSizeH(_x8) {
        return _GetFontSizeH.apply(this, arguments);
      }
      return GetFontSizeH;
    }()
  }, {
    key: "GetBaselineAngle",
    value: function () {
      var _GetBaselineAngle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(textState) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDTextStateGetBaselineAngle", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetBaselineAngle(_x9) {
        return _GetBaselineAngle.apply(this, arguments);
      }
      return GetBaselineAngle;
    }()
  }, {
    key: "GetShearAngle",
    value: function () {
      var _GetShearAngle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(textState) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDTextStateGetShearAngle", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetShearAngle(_x10) {
        return _GetShearAngle.apply(this, arguments);
      }
      return GetShearAngle;
    }()
  }, {
    key: "SetFontSize",
    value: function () {
      var _SetFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(textState, fontSize) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDTextStateSetFontSize", [{
                textState: textState
              }, {
                fontSize: fontSize
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function SetFontSize(_x11, _x12) {
        return _SetFontSize.apply(this, arguments);
      }
      return SetFontSize;
    }()
  }, {
    key: "SetCharSpace",
    value: function () {
      var _SetCharSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(textState, fCharSpace) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDTextStateSetCharSpace", [{
                textState: textState
              }, {
                fCharSpace: fCharSpace
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function SetCharSpace(_x13, _x14) {
        return _SetCharSpace.apply(this, arguments);
      }
      return SetCharSpace;
    }()
  }, {
    key: "SetWordSpace",
    value: function () {
      var _SetWordSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(textState, fWordSpace) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDTextStateSetWordSpace", [{
                textState: textState
              }, {
                fWordSpace: fWordSpace
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function SetWordSpace(_x15, _x16) {
        return _SetWordSpace.apply(this, arguments);
      }
      return SetWordSpace;
    }()
  }, {
    key: "SetMatrix",
    value: function () {
      var _SetMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(textState, matrix) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDTextStateSetMatrix", [{
                textState: textState
              }, {
                matrix: matrix
              }], []));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function SetMatrix(_x17, _x18) {
        return _SetMatrix.apply(this, arguments);
      }
      return SetMatrix;
    }()
  }, {
    key: "SetTextMode",
    value: function () {
      var _SetTextMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(textState, iTextMode) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDTextStateSetTextMode", [{
                textState: textState
              }, {
                iTextMode: iTextMode
              }], []));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function SetTextMode(_x19, _x20) {
        return _SetTextMode.apply(this, arguments);
      }
      return SetTextMode;
    }()
  }, {
    key: "GetTextMode",
    value: function () {
      var _GetTextMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(textState) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDTextStateGetTextMode", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function GetTextMode(_x21) {
        return _GetTextMode.apply(this, arguments);
      }
      return GetTextMode;
    }()
  }, {
    key: "GetCharSpace",
    value: function () {
      var _GetCharSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(textState) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDTextStateGetCharSpace", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function GetCharSpace(_x22) {
        return _GetCharSpace.apply(this, arguments);
      }
      return GetCharSpace;
    }()
  }, {
    key: "GetWordSpace",
    value: function () {
      var _GetWordSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(textState) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDTextStateGetWordSpace", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function GetWordSpace(_x23) {
        return _GetWordSpace.apply(this, arguments);
      }
      return GetWordSpace;
    }()
  }, {
    key: "IsNull",
    value: function () {
      var _IsNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(textState) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDTextStateIsNull", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function IsNull(_x24) {
        return _IsNull.apply(this, arguments);
      }
      return IsNull;
    }()
  }, {
    key: "GetModify",
    value: function () {
      var _GetModify = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(textState) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDTextStateGetModify", [{
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function GetModify(_x25) {
        return _GetModify.apply(this, arguments);
      }
      return GetModify;
    }()
  }]);
}(BaseClass);

function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper$25(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$25() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$25() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$25 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPD_TextObjectItem = /*#__PURE__*/function (_BaseClass) {
  function FPD_TextObjectItem() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, FPD_TextObjectItem);
    return _callSuper$25(this, FPD_TextObjectItem, [_objectSpread$5(_objectSpread$5({}, obj), {}, {
      uuid: getUuid()
    })]);
  }
  _inherits(FPD_TextObjectItem, _BaseClass);
  return _createClass(FPD_TextObjectItem);
}(BaseClass);

function _callSuper$24(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$24() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$24() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$24 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_TextObject_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_TextObject_V1() {
    _classCallCheck(this, JSFPD_TextObject_V1);
    return _callSuper$24(this, JSFPD_TextObject_V1, arguments);
  }
  _inherits(JSFPD_TextObject_V1, _BaseClass);
  return _createClass(JSFPD_TextObject_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDTextObjectNew", [], [], JSFPD_PageObject_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New() {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(objText) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDTextObjectDestroy", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "CountItems",
    value: function () {
      var _CountItems = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(objText) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDTextObjectCountItems", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function CountItems(_x2) {
        return _CountItems.apply(this, arguments);
      }
      return CountItems;
    }()
  }, {
    key: "GetItemInfo",
    value: function () {
      var _GetItemInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(objText, index) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDTextObjectGetItemInfo", [{
                objText: objText
              }, {
                index: index
              }], [], FPD_TextObjectItem));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetItemInfo(_x3, _x4) {
        return _GetItemInfo.apply(this, arguments);
      }
      return GetItemInfo;
    }()
  }, {
    key: "CountChars",
    value: function () {
      var _CountChars = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(objText) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDTextObjectCountChars", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function CountChars(_x5) {
        return _CountChars.apply(this, arguments);
      }
      return CountChars;
    }()
  }, {
    key: "GetCharInfo",
    value: function () {
      var _GetCharInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(objText, index, outCharcode, outKerning) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDTextObjectGetCharInfo", [{
                objText: objText
              }, {
                index: index
              }, {
                outCharcode: outCharcode
              }, {
                outKerning: outKerning
              }], ["outCharcode", "outKerning"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetCharInfo(_x6, _x7, _x8, _x9) {
        return _GetCharInfo.apply(this, arguments);
      }
      return GetCharInfo;
    }()
  }, {
    key: "GetPosX",
    value: function () {
      var _GetPosX = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(objText) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDTextObjectGetPosX", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetPosX(_x10) {
        return _GetPosX.apply(this, arguments);
      }
      return GetPosX;
    }()
  }, {
    key: "GetPosY",
    value: function () {
      var _GetPosY = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(objText) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDTextObjectGetPosY", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetPosY(_x11) {
        return _GetPosY.apply(this, arguments);
      }
      return GetPosY;
    }()
  }, {
    key: "GetTextMatrix",
    value: function () {
      var _GetTextMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(objText, outMatrix) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDTextObjectGetTextMatrix", [{
                objText: objText
              }, {
                outMatrix: outMatrix
              }], ["outMatrix"]));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetTextMatrix(_x12, _x13) {
        return _GetTextMatrix.apply(this, arguments);
      }
      return GetTextMatrix;
    }()
  }, {
    key: "GetFont",
    value: function () {
      var _GetFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(objText) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDTextObjectGetFont", [{
                objText: objText
              }], [], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetFont(_x14) {
        return _GetFont.apply(this, arguments);
      }
      return GetFont;
    }()
  }, {
    key: "GetFontSize",
    value: function () {
      var _GetFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(objText) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDTextObjectGetFontSize", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function GetFontSize(_x15) {
        return _GetFontSize.apply(this, arguments);
      }
      return GetFontSize;
    }()
  }, {
    key: "SetEmpty",
    value: function () {
      var _SetEmpty = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(objText) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDTextObjectSetEmpty", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function SetEmpty(_x16) {
        return _SetEmpty.apply(this, arguments);
      }
      return SetEmpty;
    }()
  }, {
    key: "SetText",
    value: function () {
      var _SetText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(objText, strText) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDTextObjectSetText", [{
                objText: objText
              }, {
                strText: strText
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function SetText(_x17, _x18) {
        return _SetText.apply(this, arguments);
      }
      return SetText;
    }()
  }, {
    key: "SetText2",
    value: function () {
      var _SetText2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(objText, strTextArr, pKerning) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDTextObjectSetText2", [{
                objText: objText
              }, {
                strTextArr: strTextArr
              }, {
                pKerning: pKerning
              }], ["pKerning"]));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function SetText2(_x19, _x20, _x21) {
        return _SetText2.apply(this, arguments);
      }
      return SetText2;
    }()
  }, {
    key: "SetText3",
    value: function () {
      var _SetText3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(objText, nChars, pCharCodes, pKernings) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDTextObjectSetText3", [{
                objText: objText
              }, {
                nChars: nChars
              }, {
                pCharCodes: pCharCodes
              }, {
                pKernings: pKernings
              }], ["pCharCodes", "pKernings"]));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function SetText3(_x22, _x23, _x24, _x25) {
        return _SetText3.apply(this, arguments);
      }
      return SetText3;
    }()
  }, {
    key: "SetPosition",
    value: function () {
      var _SetPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(objText, x, y) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDTextObjectSetPosition", [{
                objText: objText
              }, {
                x: x
              }, {
                y: y
              }], []));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function SetPosition(_x26, _x27, _x28) {
        return _SetPosition.apply(this, arguments);
      }
      return SetPosition;
    }()
  }, {
    key: "SetTextState",
    value: function () {
      var _SetTextState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(objText, textState) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", dispatchFun("FPDTextObjectSetTextState", [{
                objText: objText
              }, {
                textState: textState
              }], []));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function SetTextState(_x29, _x30) {
        return _SetTextState.apply(this, arguments);
      }
      return SetTextState;
    }()
  }, {
    key: "Transform",
    value: function () {
      var _Transform = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(objText, matrix) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dispatchFun("FPDTextObjectTransform", [{
                objText: objText
              }, {
                matrix: matrix
              }], []));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function Transform(_x31, _x32) {
        return _Transform.apply(this, arguments);
      }
      return Transform;
    }()
  }, {
    key: "CalcCharPos",
    value: function () {
      var _CalcCharPos = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(objText, outPosArray) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", dispatchFun("FPDTextObjectCalcCharPos", [{
                objText: objText
              }, {
                outPosArray: outPosArray
              }], ["outPosArray"]));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function CalcCharPos(_x33, _x34) {
        return _CalcCharPos.apply(this, arguments);
      }
      return CalcCharPos;
    }()
  }, {
    key: "SetData",
    value: function () {
      var _SetData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(objText, nChars, pCharCodes, pCharPos, x, y) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", dispatchFun("FPDTextObjectSetData", [{
                objText: objText
              }, {
                nChars: nChars
              }, {
                pCharCodes: pCharCodes
              }, {
                pCharPos: pCharPos
              }, {
                x: x
              }, {
                y: y
              }], ["pCharCodes", "pCharPos"]));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function SetData(_x35, _x36, _x37, _x38, _x39, _x40) {
        return _SetData.apply(this, arguments);
      }
      return SetData;
    }()
  }, {
    key: "GetData",
    value: function () {
      var _GetData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(objText, outCharCount, outCharCodes, outCharPos) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dispatchFun("FPDTextObjectGetData", [{
                objText: objText
              }, {
                outCharCount: outCharCount
              }, {
                outCharCodes: outCharCodes
              }, {
                outCharPos: outCharPos
              }], ["outCharCount", "outCharCodes", "outCharPos"]));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function GetData(_x41, _x42, _x43, _x44) {
        return _GetData.apply(this, arguments);
      }
      return GetData;
    }()
  }, {
    key: "RecalcPositionData",
    value: function () {
      var _RecalcPositionData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(objText) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", dispatchFun("FPDTextObjectRecalcPositionData", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function RecalcPositionData(_x45) {
        return _RecalcPositionData.apply(this, arguments);
      }
      return RecalcPositionData;
    }()
  }, {
    key: "GetCharRect",
    value: function () {
      var _GetCharRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(objText, index, rect) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", dispatchFun("FPDTextObjectGetCharRect", [{
                objText: objText
              }, {
                index: index
              }, {
                rect: rect
              }], ["rect"]));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function GetCharRect(_x46, _x47, _x48) {
        return _GetCharRect.apply(this, arguments);
      }
      return GetCharRect;
    }()
  }, {
    key: "GetSpaceCharWidth",
    value: function () {
      var _GetSpaceCharWidth = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(objText) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dispatchFun("FPDTextObjectGetSpaceCharWidth", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function GetSpaceCharWidth(_x49) {
        return _GetSpaceCharWidth.apply(this, arguments);
      }
      return GetSpaceCharWidth;
    }()
  }, {
    key: "GetCharInfo2",
    value: function () {
      var _GetCharInfo2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(objText, index) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", dispatchFun("FPDTextObjectGetCharInfo2", [{
                objText: objText
              }, {
                index: index
              }], [], FPD_TextObjectItem));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function GetCharInfo2(_x50, _x51) {
        return _GetCharInfo2.apply(this, arguments);
      }
      return GetCharInfo2;
    }()
  }, {
    key: "GetIndex",
    value: function () {
      var _GetIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(objText) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", dispatchFun("FPDTextObjectGetIndex", [{
                objText: objText
              }], []));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function GetIndex(_x52) {
        return _GetIndex.apply(this, arguments);
      }
      return GetIndex;
    }()
  }, {
    key: "SetIndex",
    value: function () {
      var _SetIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(objText, index) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", dispatchFun("FPDTextObjectSetIndex", [{
                objText: objText
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function SetIndex(_x53, _x54) {
        return _SetIndex.apply(this, arguments);
      }
      return SetIndex;
    }()
  }, {
    key: "CreateCJKFont",
    value: function () {
      var _CreateCJKFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(fontName, fontsize, pdfDoc) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", dispatchFun("FPDTextObjectCreateCJKFont", [{
                fontName: fontName
              }, {
                fontsize: fontsize
              }, {
                pdfDoc: pdfDoc
              }], [], JSFPD_Font_V1));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function CreateCJKFont(_x55, _x56, _x57) {
        return _CreateCJKFont.apply(this, arguments);
      }
      return CreateCJKFont;
    }()
  }, {
    key: "SetCJKText",
    value: function () {
      var _SetCJKText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(objText, text, font) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", dispatchFun("FPDTextObjectSetCJKText", [{
                objText: objText
              }, {
                text: text
              }, {
                font: font
              }], []));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function SetCJKText(_x58, _x59, _x60) {
        return _SetCJKText.apply(this, arguments);
      }
      return SetCJKText;
    }()
  }]);
}(BaseClass);

function _callSuper$23(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$23() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$23() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$23 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_TextPage_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_TextPage_V1() {
    _classCallCheck(this, JSFPD_TextPage_V1);
    return _callSuper$23(this, JSFPD_TextPage_V1, arguments);
  }
  _inherits(JSFPD_TextPage_V1, _BaseClass);
  return _createClass(JSFPD_TextPage_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(page, flags) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDTextPageNew", [{
                page: page
              }, {
                flags: flags
              }], [], JSFPD_TextPage_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x, _x2) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(page) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDTextPageDestroy", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x3) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "ParseTextPage",
    value: function () {
      var _ParseTextPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(page) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDTextPageParseTextPage", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function ParseTextPage(_x4) {
        return _ParseTextPage.apply(this, arguments);
      }
      return ParseTextPage;
    }()
  }, {
    key: "IsParsered",
    value: function () {
      var _IsParsered = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(page) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDTextPageIsParsered", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function IsParsered(_x5) {
        return _IsParsered.apply(this, arguments);
      }
      return IsParsered;
    }()
  }, {
    key: "CountChars",
    value: function () {
      var _CountChars = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(page) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDTextPageCountChars", [{
                page: page
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function CountChars(_x6) {
        return _CountChars.apply(this, arguments);
      }
      return CountChars;
    }()
  }, {
    key: "GetCharInfo",
    value: function () {
      var _GetCharInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(page, index, outInfo) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDTextPageGetCharInfo", [{
                page: page
              }, {
                index: index
              }, {
                outInfo: outInfo
              }], ["outInfo"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetCharInfo(_x7, _x8, _x9) {
        return _GetCharInfo.apply(this, arguments);
      }
      return GetCharInfo;
    }()
  }, {
    key: "GetRectArray",
    value: function () {
      var _GetRectArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(page, start, nCount, outRectArray) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDTextPageGetRectArray", [{
                page: page
              }, {
                start: start
              }, {
                nCount: nCount
              }, {
                outRectArray: outRectArray
              }], ["outRectArray"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetRectArray(_x10, _x11, _x12, _x13) {
        return _GetRectArray.apply(this, arguments);
      }
      return GetRectArray;
    }()
  }, {
    key: "GetIndexAtPos",
    value: function () {
      var _GetIndexAtPos = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(page, x, y, xTorelance, yTorelance) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDTextPageGetIndexAtPos", [{
                page: page
              }, {
                x: x
              }, {
                y: y
              }, {
                xTorelance: xTorelance
              }, {
                yTorelance: yTorelance
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetIndexAtPos(_x14, _x15, _x16, _x17, _x18) {
        return _GetIndexAtPos.apply(this, arguments);
      }
      return GetIndexAtPos;
    }()
  }, {
    key: "GetOrderByDirection",
    value: function () {
      var _GetOrderByDirection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(page, order, direction) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDTextPageGetOrderByDirection", [{
                page: page
              }, {
                order: order
              }, {
                direction: direction
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function GetOrderByDirection(_x19, _x20, _x21) {
        return _GetOrderByDirection.apply(this, arguments);
      }
      return GetOrderByDirection;
    }()
  }, {
    key: "GetTextByRect",
    value: function () {
      var _GetTextByRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(page, rect, outText) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDTextPageGetTextByRect", [{
                page: page
              }, {
                rect: rect
              }, {
                outText: outText
              }], ["outText"]));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function GetTextByRect(_x22, _x23, _x24) {
        return _GetTextByRect.apply(this, arguments);
      }
      return GetTextByRect;
    }()
  }, {
    key: "CountRects",
    value: function () {
      var _CountRects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(page, start, nCount) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDTextPageCountRects", [{
                page: page
              }, {
                start: start
              }, {
                nCount: nCount
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function CountRects(_x25, _x26, _x27) {
        return _CountRects.apply(this, arguments);
      }
      return CountRects;
    }()
  }, {
    key: "GetRect",
    value: function () {
      var _GetRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(page, rectIndex) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDTextPageGetRect", [{
                page: page
              }, {
                rectIndex: rectIndex
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function GetRect(_x28, _x29) {
        return _GetRect.apply(this, arguments);
      }
      return GetRect;
    }()
  }, {
    key: "GetWordBreak",
    value: function () {
      var _GetWordBreak = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(page, index, direction) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDTextPageGetWordBreak", [{
                page: page
              }, {
                index: index
              }, {
                direction: direction
              }], []));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetWordBreak(_x30, _x31, _x32) {
        return _GetWordBreak.apply(this, arguments);
      }
      return GetWordBreak;
    }()
  }, {
    key: "GetPageText",
    value: function () {
      var _GetPageText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(page, start, nCount, outText) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDTextPageGetPageText", [{
                page: page
              }, {
                start: start
              }, {
                nCount: nCount
              }, {
                outText: outText
              }], ["outText"]));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function GetPageText(_x33, _x34, _x35, _x36) {
        return _GetPageText.apply(this, arguments);
      }
      return GetPageText;
    }()
  }, {
    key: "New2",
    value: function () {
      var _New2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(pObjs, flags) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDTextPageNew2", [{
                pObjs: pObjs
              }, {
                flags: flags
              }], [], JSFPD_TextPage_V1));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function New2(_x37, _x38) {
        return _New2.apply(this, arguments);
      }
      return New2;
    }()
  }, {
    key: "New3",
    value: function () {
      var _New3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(page, option) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", dispatchFun("FPDTextPageNew3", [{
                page: page
              }, {
                option: option
              }], [], JSFPD_TextPage_V1));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function New3(_x39, _x40) {
        return _New3.apply(this, arguments);
      }
      return New3;
    }()
  }]);
}(BaseClass);

function _callSuper$22(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$22() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$22() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$22 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_TextPageFind_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_TextPageFind_V1() {
    _classCallCheck(this, JSFPD_TextPageFind_V1);
    return _callSuper$22(this, JSFPD_TextPageFind_V1, arguments);
  }
  _inherits(JSFPD_TextPageFind_V1, _BaseClass);
  return _createClass(JSFPD_TextPageFind_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(textpage) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDTextPageFindNew", [{
                textpage: textpage
              }], [], JSFPD_TextPageFind_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(find) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDTextPageFindDestroy", [{
                find: find
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x2) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "FindFirst",
    value: function () {
      var _FindFirst = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(find, findwhat, flags, startPos) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDTextPageFindFindFirst", [{
                find: find
              }, {
                findwhat: findwhat
              }, {
                flags: flags
              }, {
                startPos: startPos
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function FindFirst(_x3, _x4, _x5, _x6) {
        return _FindFirst.apply(this, arguments);
      }
      return FindFirst;
    }()
  }, {
    key: "FindNext",
    value: function () {
      var _FindNext = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(find) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDTextPageFindFindNext", [{
                find: find
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function FindNext(_x7) {
        return _FindNext.apply(this, arguments);
      }
      return FindNext;
    }()
  }, {
    key: "FindPrev",
    value: function () {
      var _FindPrev = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(find) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDTextPageFindFindPrev", [{
                find: find
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function FindPrev(_x8) {
        return _FindPrev.apply(this, arguments);
      }
      return FindPrev;
    }()
  }, {
    key: "GetRectArray",
    value: function () {
      var _GetRectArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(find, outRects) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDTextPageFindGetRectArray", [{
                find: find
              }, {
                outRects: outRects
              }], ["outRects"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetRectArray(_x9, _x10) {
        return _GetRectArray.apply(this, arguments);
      }
      return GetRectArray;
    }()
  }]);
}(BaseClass);

function _callSuper$21(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$21() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$21() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$21 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Dest_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Dest_V1() {
    _classCallCheck(this, JSFPD_Dest_V1);
    return _callSuper$21(this, JSFPD_Dest_V1, arguments);
  }
  _inherits(JSFPD_Dest_V1, _BaseClass);
  return _createClass(JSFPD_Dest_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDDestNew", [{
                obj: obj
              }], [], JSFPD_Dest_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dest) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDDestDestroy", [{
                dest: dest
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x2) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetPageIndex",
    value: function () {
      var _GetPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(doc, dest) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDDestGetPageIndex", [{
                doc: doc
              }, {
                dest: dest
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetPageIndex(_x3, _x4) {
        return _GetPageIndex.apply(this, arguments);
      }
      return GetPageIndex;
    }()
  }, {
    key: "GetPageObjNum",
    value: function () {
      var _GetPageObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dest, pDoc) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDDestGetPageObjNum", [{
                dest: dest
              }, {
                pDoc: pDoc
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetPageObjNum(_x5, _x6) {
        return _GetPageObjNum.apply(this, arguments);
      }
      return GetPageObjNum;
    }()
  }, {
    key: "GetZoomMode",
    value: function () {
      var _GetZoomMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dest) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDDestGetZoomMode", [{
                dest: dest
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetZoomMode(_x7) {
        return _GetZoomMode.apply(this, arguments);
      }
      return GetZoomMode;
    }()
  }, {
    key: "GetPDFObject",
    value: function () {
      var _GetPDFObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dest, pObject) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDDestGetPDFObject", [{
                dest: dest
              }, {
                pObject: pObject
              }], ["pObject"]));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetPDFObject(_x8, _x9) {
        return _GetPDFObject.apply(this, arguments);
      }
      return GetPDFObject;
    }()
  }, {
    key: "CheckObjectIsNull",
    value: function () {
      var _CheckObjectIsNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dest) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDDestCheckObjectIsNull", [{
                dest: dest
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function CheckObjectIsNull(_x10) {
        return _CheckObjectIsNull.apply(this, arguments);
      }
      return CheckObjectIsNull;
    }()
  }, {
    key: "GetPDFObject2",
    value: function () {
      var _GetPDFObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dest) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDDestGetPDFObject2", [{
                dest: dest
              }], [], JSFPD_Object_V1));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetPDFObject2(_x11) {
        return _GetPDFObject2.apply(this, arguments);
      }
      return GetPDFObject2;
    }()
  }]);
}(BaseClass);

function _callSuper$20(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$20() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$20() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$20 = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Action_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Action_V1() {
    _classCallCheck(this, JSFPD_Action_V1);
    return _callSuper$20(this, JSFPD_Action_V1, arguments);
  }
  _inherits(JSFPD_Action_V1, _BaseClass);
  return _createClass(JSFPD_Action_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dict) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDActionNew", [{
                dict: dict
              }], [], JSFPD_Action_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "New2",
    value: function () {
      var _New2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(doc, actionType) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDActionNew2", [{
                doc: doc
              }, {
                actionType: actionType
              }], [], JSFPD_Action_V1));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function New2(_x2, _x3) {
        return _New2.apply(this, arguments);
      }
      return New2;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(action) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDActionDestroy", [{
                action: action
              }], []));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function Destroy(_x4) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetTypeName",
    value: function () {
      var _GetTypeName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(action, outTypeName) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDActionGetTypeName", [{
                action: action
              }, {
                outTypeName: outTypeName
              }], ["outTypeName"]));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function GetTypeName(_x5, _x6) {
        return _GetTypeName.apply(this, arguments);
      }
      return GetTypeName;
    }()
  }, {
    key: "GetType",
    value: function () {
      var _GetType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(action) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDActionGetType", [{
                action: action
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetType(_x7) {
        return _GetType.apply(this, arguments);
      }
      return GetType;
    }()
  }, {
    key: "SetDest",
    value: function () {
      var _SetDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(action, dest) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDActionSetDest", [{
                action: action
              }, {
                dest: dest
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function SetDest(_x8, _x9) {
        return _SetDest.apply(this, arguments);
      }
      return SetDest;
    }()
  }, {
    key: "GetFilePath",
    value: function () {
      var _GetFilePath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(action, outName) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDActionGetFilePath", [{
                action: action
              }, {
                outName: outName
              }], ["outName"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetFilePath(_x10, _x11) {
        return _GetFilePath.apply(this, arguments);
      }
      return GetFilePath;
    }()
  }, {
    key: "SetFilePath",
    value: function () {
      var _SetFilePath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(action, wszFilePath, bIsURL) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDActionSetFilePath", [{
                action: action
              }, {
                wszFilePath: wszFilePath
              }, {
                bIsURL: bIsURL
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function SetFilePath(_x12, _x13, _x14) {
        return _SetFilePath.apply(this, arguments);
      }
      return SetFilePath;
    }()
  }]);
}(BaseClass);

function _callSuper$1$(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1$() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1$() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1$ = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_Link_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_Link_V1() {
    _classCallCheck(this, JSFPD_Link_V1);
    return _callSuper$1$(this, JSFPD_Link_V1, arguments);
  }
  _inherits(JSFPD_Link_V1, _BaseClass);
  return _createClass(JSFPD_Link_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dict) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDLinkNew", [{
                dict: dict
              }], [], JSFPD_Link_V1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(link) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDLinkDestroy", [{
                link: link
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x2) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetLinkAtPoint",
    value: function () {
      var _GetLinkAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(doc, page, x, y, outLink) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDLinkGetLinkAtPoint", [{
                doc: doc
              }, {
                page: page
              }, {
                x: x
              }, {
                y: y
              }, {
                outLink: outLink
              }], ["outLink"]));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetLinkAtPoint(_x3, _x4, _x5, _x6, _x7) {
        return _GetLinkAtPoint.apply(this, arguments);
      }
      return GetLinkAtPoint;
    }()
  }, {
    key: "CountLinks",
    value: function () {
      var _CountLinks = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(doc, page) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDLinkCountLinks", [{
                doc: doc
              }, {
                page: page
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function CountLinks(_x8, _x9) {
        return _CountLinks.apply(this, arguments);
      }
      return CountLinks;
    }()
  }, {
    key: "GetLink",
    value: function () {
      var _GetLink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(doc, page, index, outLink) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDLinkGetLink", [{
                doc: doc
              }, {
                page: page
              }, {
                index: index
              }, {
                outLink: outLink
              }], ["outLink"]));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetLink(_x10, _x11, _x12, _x13) {
        return _GetLink.apply(this, arguments);
      }
      return GetLink;
    }()
  }, {
    key: "GetRect",
    value: function () {
      var _GetRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(link) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDLinkGetRect", [{
                link: link
              }], [], JSFS_FloatRect_V1));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function GetRect(_x14) {
        return _GetRect.apply(this, arguments);
      }
      return GetRect;
    }()
  }, {
    key: "GetDest",
    value: function () {
      var _GetDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(link, doc, outDest) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDLinkGetDest", [{
                link: link
              }, {
                doc: doc
              }, {
                outDest: outDest
              }], ["outDest"]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function GetDest(_x15, _x16, _x17) {
        return _GetDest.apply(this, arguments);
      }
      return GetDest;
    }()
  }, {
    key: "GetAction",
    value: function () {
      var _GetAction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(link, outAction) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDLinkGetAction", [{
                link: link
              }, {
                outAction: outAction
              }], ["outAction"]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function GetAction(_x18, _x19) {
        return _GetAction.apply(this, arguments);
      }
      return GetAction;
    }()
  }]);
}(BaseClass);

function _callSuper$1_(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1_() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1_() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1_ = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_AnnotList_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_AnnotList_V1() {
    _classCallCheck(this, JSFPD_AnnotList_V1);
    return _callSuper$1_(this, JSFPD_AnnotList_V1, arguments);
  }
  _inherits(JSFPD_AnnotList_V1, _BaseClass);
  return _createClass(JSFPD_AnnotList_V1, [{
    key: "New",
    value: function () {
      var _New = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", dispatchFun("FPDAnnotListNew", [{
                page: page
              }], [], JSFPD_AnnotList));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function New(_x) {
        return _New.apply(this, arguments);
      }
      return New;
    }()
  }, {
    key: "Destroy",
    value: function () {
      var _Destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(annotList) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", dispatchFun("FPDAnnotListDestroy", [{
                annotList: annotList
              }], []));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function Destroy(_x2) {
        return _Destroy.apply(this, arguments);
      }
      return Destroy;
    }()
  }, {
    key: "GetAt",
    value: function () {
      var _GetAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(annotList, index) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", dispatchFun("FPDAnnotListGetAt", [{
                annotList: annotList
              }, {
                index: index
              }], [], JSFPD_Annot_V1));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function GetAt(_x3, _x4) {
        return _GetAt.apply(this, arguments);
      }
      return GetAt;
    }()
  }, {
    key: "Count",
    value: function () {
      var _Count = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(annotList) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", dispatchFun("FPDAnnotListCount", [{
                annotList: annotList
              }], []));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function Count(_x5) {
        return _Count.apply(this, arguments);
      }
      return Count;
    }()
  }, {
    key: "GetIndex",
    value: function () {
      var _GetIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(annotList, annot) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", dispatchFun("FPDAnnotListGetIndex", [{
                annotList: annotList
              }, {
                annot: annot
              }], []));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function GetIndex(_x6, _x7) {
        return _GetIndex.apply(this, arguments);
      }
      return GetIndex;
    }()
  }, {
    key: "RemoveAll",
    value: function () {
      var _RemoveAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(annotList) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", dispatchFun("FPDAnnotListRemoveAll", [{
                annotList: annotList
              }], []));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function RemoveAll(_x8) {
        return _RemoveAll.apply(this, arguments);
      }
      return RemoveAll;
    }()
  }, {
    key: "Replace",
    value: function () {
      var _Replace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(annotList, index, annot) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", dispatchFun("FPDAnnotListReplace", [{
                annotList: annotList
              }, {
                index: index
              }, {
                annot: annot
              }], []));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function Replace(_x9, _x10, _x11) {
        return _Replace.apply(this, arguments);
      }
      return Replace;
    }()
  }, {
    key: "Insert",
    value: function () {
      var _Insert = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(annotList, index, annot) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", dispatchFun("FPDAnnotListInsert", [{
                annotList: annotList
              }, {
                index: index
              }, {
                annot: annot
              }], []));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function Insert(_x12, _x13, _x14) {
        return _Insert.apply(this, arguments);
      }
      return Insert;
    }()
  }, {
    key: "Remove",
    value: function () {
      var _Remove = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(annotList, index) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", dispatchFun("FPDAnnotListRemove", [{
                annotList: annotList
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function Remove(_x15, _x16) {
        return _Remove.apply(this, arguments);
      }
      return Remove;
    }()
  }, {
    key: "MoveToFirst",
    value: function () {
      var _MoveToFirst = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(annotList, index) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dispatchFun("FPDAnnotListMoveToFirst", [{
                annotList: annotList
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function MoveToFirst(_x17, _x18) {
        return _MoveToFirst.apply(this, arguments);
      }
      return MoveToFirst;
    }()
  }, {
    key: "MoveToLast",
    value: function () {
      var _MoveToLast = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(annotList, index) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", dispatchFun("FPDAnnotListMoveToLast", [{
                annotList: annotList
              }, {
                index: index
              }], []));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function MoveToLast(_x19, _x20) {
        return _MoveToLast.apply(this, arguments);
      }
      return MoveToLast;
    }()
  }, {
    key: "MoveTo",
    value: function () {
      var _MoveTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(annotList, annot, iNewIndex) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dispatchFun("FPDAnnotListMoveTo", [{
                annotList: annotList
              }, {
                annot: annot
              }, {
                iNewIndex: iNewIndex
              }], []));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function MoveTo(_x21, _x22, _x23) {
        return _MoveTo.apply(this, arguments);
      }
      return MoveTo;
    }()
  }, {
    key: "GetDocument",
    value: function () {
      var _GetDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(annotList) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", dispatchFun("FPDAnnotListGetDocument", [{
                annotList: annotList
              }], [], JSFPD_Doc_V1));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function GetDocument(_x24) {
        return _GetDocument.apply(this, arguments);
      }
      return GetDocument;
    }()
  }, {
    key: "GetPage",
    value: function () {
      var _GetPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(annotList) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", dispatchFun("FPDAnnotListGetPage", [{
                annotList: annotList
              }], [], JSFPD_Page_V1));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function GetPage(_x25) {
        return _GetPage.apply(this, arguments);
      }
      return GetPage;
    }()
  }, {
    key: "GetAnnotByDict",
    value: function () {
      var _GetAnnotByDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(annotList, pAnnotDict) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", dispatchFun("FPDAnnotListGetAnnotByDict", [{
                annotList: annotList
              }, {
                pAnnotDict: pAnnotDict
              }], [], JSFPD_Annot_V1));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function GetAnnotByDict(_x26, _x27) {
        return _GetAnnotByDict.apply(this, arguments);
      }
      return GetAnnotByDict;
    }()
  }]);
}(BaseClass);

function _callSuper$1Z(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1Z() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1Z() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1Z = function _isNativeReflectConstruct() { return !!t; })(); }
var FPD_ColorSpace = /*#__PURE__*/function (_BaseClass) {
  function FPD_ColorSpace() {
    _classCallCheck(this, FPD_ColorSpace);
    return _callSuper$1Z(this, FPD_ColorSpace, arguments);
  }
  _inherits(FPD_ColorSpace, _BaseClass);
  return _createClass(FPD_ColorSpace);
}(BaseClass);

var FS_GLOG_Type;
(function (FS_GLOG_Type) {
  FS_GLOG_Type[FS_GLOG_Type["FS_GLOG_INFO"] = 0] = "FS_GLOG_INFO";
  FS_GLOG_Type[FS_GLOG_Type["FS_GLOG_WARING"] = 1] = "FS_GLOG_WARING";
  FS_GLOG_Type[FS_GLOG_Type["FS_GLOG_ERROR"] = 2] = "FS_GLOG_ERROR";
})(FS_GLOG_Type || (FS_GLOG_Type = {}));
var FS_DIB_Format;
(function (FS_DIB_Format) {
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Invalid"] = 0] = "FS_DIB_Invalid";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_1bppMask"] = 257] = "FS_DIB_1bppMask";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_1bppRgb"] = 1] = "FS_DIB_1bppRgb";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_1bppCmyk"] = 1025] = "FS_DIB_1bppCmyk";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_8bppMask"] = 264] = "FS_DIB_8bppMask";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_8bppRgb"] = 8] = "FS_DIB_8bppRgb";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_8bppRgba"] = 520] = "FS_DIB_8bppRgba";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_8bppCmyk"] = 1032] = "FS_DIB_8bppCmyk";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_8bppCmyka"] = 1544] = "FS_DIB_8bppCmyka";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Gray"] = 4104] = "FS_DIB_Gray";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Rgb"] = 24] = "FS_DIB_Rgb";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Rgba"] = 536] = "FS_DIB_Rgba";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Rgb32"] = 32] = "FS_DIB_Rgb32";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Argb"] = 544] = "FS_DIB_Argb";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Cmyk"] = 1056] = "FS_DIB_Cmyk";
  FS_DIB_Format[FS_DIB_Format["FS_DIB_Cmyka"] = 1568] = "FS_DIB_Cmyka";
})(FS_DIB_Format || (FS_DIB_Format = {}));
var FS_DIB_Channel;
(function (FS_DIB_Channel) {
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Red"] = 1] = "FS_DIB_Red";
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Green"] = 2] = "FS_DIB_Green";
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Blue"] = 3] = "FS_DIB_Blue";
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Cyan"] = 4] = "FS_DIB_Cyan";
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Magenta"] = 5] = "FS_DIB_Magenta";
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Yellow"] = 6] = "FS_DIB_Yellow";
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Black"] = 7] = "FS_DIB_Black";
  FS_DIB_Channel[FS_DIB_Channel["FS_DIB_Alpha"] = 8] = "FS_DIB_Alpha";
})(FS_DIB_Channel || (FS_DIB_Channel = {}));
var FS_ListStyleType;
(function (FS_ListStyleType) {
  FS_ListStyleType[FS_ListStyleType["FS_kListStyle_None"] = 0] = "FS_kListStyle_None";
  FS_ListStyleType[FS_ListStyleType["FS_kListStyle_Repeat"] = 1] = "FS_kListStyle_Repeat";
  FS_ListStyleType[FS_ListStyleType["FS_kListStyle_Counter"] = 2] = "FS_kListStyle_Counter";
  FS_ListStyleType[FS_ListStyleType["FS_kListStyle_Unknown"] = 3] = "FS_kListStyle_Unknown";
})(FS_ListStyleType || (FS_ListStyleType = {}));
var FS_CounterStyleType;
(function (FS_CounterStyleType) {
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_None"] = 0] = "FS_kCounterStyle_None";
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_LowerLatin"] = 1] = "FS_kCounterStyle_LowerLatin";
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_UpperLatin"] = 2] = "FS_kCounterStyle_UpperLatin";
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_LowerRoman"] = 3] = "FS_kCounterStyle_LowerRoman";
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_UpperRoman"] = 4] = "FS_kCounterStyle_UpperRoman";
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_Decimal"] = 5] = "FS_kCounterStyle_Decimal";
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_CJKDecimal"] = 6] = "FS_kCounterStyle_CJKDecimal";
  FS_CounterStyleType[FS_CounterStyleType["FS_kCounterStyle_Unknown"] = 7] = "FS_kCounterStyle_Unknown";
})(FS_CounterStyleType || (FS_CounterStyleType = {}));
var FS_PrefixSuffixType;
(function (FS_PrefixSuffixType) {
  FS_PrefixSuffixType[FS_PrefixSuffixType["FS_kPrefixSuffix_None"] = 0] = "FS_kPrefixSuffix_None";
  FS_PrefixSuffixType[FS_PrefixSuffixType["FS_kPrefixSuffix_DotSuffix"] = 1] = "FS_kPrefixSuffix_DotSuffix";
  FS_PrefixSuffixType[FS_PrefixSuffixType["FS_kPrefixSuffix_RParenSuffix"] = 2] = "FS_kPrefixSuffix_RParenSuffix";
  FS_PrefixSuffixType[FS_PrefixSuffixType["FS_kPrefixSuffix_ParenAround"] = 3] = "FS_kPrefixSuffix_ParenAround";
  FS_PrefixSuffixType[FS_PrefixSuffixType["FS_kPrefixSuffix_Unknown"] = 4] = "FS_kPrefixSuffix_Unknown";
})(FS_PrefixSuffixType || (FS_PrefixSuffixType = {}));
var FS_ProgressiveStatus;
(function (FS_ProgressiveStatus) {
  FS_ProgressiveStatus[FS_ProgressiveStatus["FS_ProgressiveStatus_Ready"] = 0] = "FS_ProgressiveStatus_Ready";
  FS_ProgressiveStatus[FS_ProgressiveStatus["FS_ProgressiveStatus_ToBeContinued"] = 1] = "FS_ProgressiveStatus_ToBeContinued";
  FS_ProgressiveStatus[FS_ProgressiveStatus["FS_ProgressiveStatus_Found"] = 2] = "FS_ProgressiveStatus_Found";
  FS_ProgressiveStatus[FS_ProgressiveStatus["FS_ProgressiveStatus_NotFound"] = 3] = "FS_ProgressiveStatus_NotFound";
  FS_ProgressiveStatus[FS_ProgressiveStatus["FS_ProgressiveStatus_Failed"] = 4] = "FS_ProgressiveStatus_Failed";
  FS_ProgressiveStatus[FS_ProgressiveStatus["FS_ProgressiveStatus_Done"] = 5] = "FS_ProgressiveStatus_Done";
})(FS_ProgressiveStatus || (FS_ProgressiveStatus = {}));
var FS_Child_Type;
(function (FS_Child_Type) {
  FS_Child_Type[FS_Child_Type["Invalid"] = 0] = "Invalid";
  FS_Child_Type[FS_Child_Type["Element"] = 1] = "Element";
  FS_Child_Type[FS_Child_Type["Content"] = 2] = "Content";
})(FS_Child_Type || (FS_Child_Type = {}));
var FPD_EM_CODEENCODING;
(function (FPD_EM_CODEENCODING) {
  FPD_EM_CODEENCODING[FPD_EM_CODEENCODING["FPD_CODE_DEFAULT"] = 0] = "FPD_CODE_DEFAULT";
  FPD_EM_CODEENCODING[FPD_EM_CODEENCODING["FPD_CODE_UTF16"] = 1] = "FPD_CODE_UTF16";
  FPD_EM_CODEENCODING[FPD_EM_CODEENCODING["FPD_CODE_UTF8"] = 2] = "FPD_CODE_UTF8";
  FPD_EM_CODEENCODING[FPD_EM_CODEENCODING["FPD_CODE_BigFive"] = 3] = "FPD_CODE_BigFive";
  FPD_EM_CODEENCODING[FPD_EM_CODEENCODING["FPD_CODE_GBK"] = 4] = "FPD_CODE_GBK";
  FPD_EM_CODEENCODING[FPD_EM_CODEENCODING["FPD_CODE_ShiftJS"] = 5] = "FPD_CODE_ShiftJS";
  FPD_EM_CODEENCODING[FPD_EM_CODEENCODING["FPD_CODE_UHC"] = 6] = "FPD_CODE_UHC";
})(FPD_EM_CODEENCODING || (FPD_EM_CODEENCODING = {}));
var FS_DIB_IMAGE_TYPE;
(function (FS_DIB_IMAGE_TYPE) {
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_UNKNOWN"] = 0] = "FS_DIB_IMAGE_UNKNOWN";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_BMP"] = 1] = "FS_DIB_IMAGE_BMP";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_JPG"] = 2] = "FS_DIB_IMAGE_JPG";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_PNG"] = 3] = "FS_DIB_IMAGE_PNG";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_GIF"] = 4] = "FS_DIB_IMAGE_GIF";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_TIF"] = 5] = "FS_DIB_IMAGE_TIF";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_JPX"] = 6] = "FS_DIB_IMAGE_JPX";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_JPX_DATA"] = 7] = "FS_DIB_IMAGE_JPX_DATA";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_JBIG2"] = 8] = "FS_DIB_IMAGE_JBIG2";
  FS_DIB_IMAGE_TYPE[FS_DIB_IMAGE_TYPE["FS_DIB_IMAGE_MAX"] = 9] = "FS_DIB_IMAGE_MAX";
})(FS_DIB_IMAGE_TYPE || (FS_DIB_IMAGE_TYPE = {}));
var FS_DIB_RESUNIT;
(function (FS_DIB_RESUNIT) {
  FS_DIB_RESUNIT[FS_DIB_RESUNIT["FS_DIB_RESUNIT_NONE"] = 0] = "FS_DIB_RESUNIT_NONE";
  FS_DIB_RESUNIT[FS_DIB_RESUNIT["FS_DIB_RESUNIT_INCH"] = 1] = "FS_DIB_RESUNIT_INCH";
  FS_DIB_RESUNIT[FS_DIB_RESUNIT["FS_DIB_RESUNIT_CENTIMETER"] = 2] = "FS_DIB_RESUNIT_CENTIMETER";
  FS_DIB_RESUNIT[FS_DIB_RESUNIT["FS_DIB_RESUNIT_METER"] = 3] = "FS_DIB_RESUNIT_METER";
})(FS_DIB_RESUNIT || (FS_DIB_RESUNIT = {}));
var FS_APPMODE;
(function (FS_APPMODE) {
  FS_APPMODE[FS_APPMODE["FS_APPMODE_LIGHT"] = 0] = "FS_APPMODE_LIGHT";
  FS_APPMODE[FS_APPMODE["FS_APPMODE_DARK"] = 1] = "FS_APPMODE_DARK";
})(FS_APPMODE || (FS_APPMODE = {}));
var FS_BTNSTATE;
(function (FS_BTNSTATE) {
  FS_BTNSTATE[FS_BTNSTATE["FS_BTNSTATE_NORMAL"] = 0] = "FS_BTNSTATE_NORMAL";
  FS_BTNSTATE[FS_BTNSTATE["FS_BTNSTATE_SELECT"] = 1] = "FS_BTNSTATE_SELECT";
})(FS_BTNSTATE || (FS_BTNSTATE = {}));
var FS_ICONSIZE;
(function (FS_ICONSIZE) {
  FS_ICONSIZE[FS_ICONSIZE["FS_ICONSIZE_16"] = 0] = "FS_ICONSIZE_16";
  FS_ICONSIZE[FS_ICONSIZE["FS_ICONSIZE_24"] = 1] = "FS_ICONSIZE_24";
  FS_ICONSIZE[FS_ICONSIZE["FS_ICONSIZE_32"] = 2] = "FS_ICONSIZE_32";
  FS_ICONSIZE[FS_ICONSIZE["FS_ICONSIZE_36"] = 3] = "FS_ICONSIZE_36";
  FS_ICONSIZE[FS_ICONSIZE["FS_ICONSIZE_48"] = 4] = "FS_ICONSIZE_48";
  FS_ICONSIZE[FS_ICONSIZE["FS_ICONSIZE_64"] = 5] = "FS_ICONSIZE_64";
})(FS_ICONSIZE || (FS_ICONSIZE = {}));
var FSCODEC_IMAGE_TYPE;
(function (FSCODEC_IMAGE_TYPE) {
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_UNKNOWN"] = 0] = "FSCODEC_IMAGE_UNKNOWN";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_BMP"] = 1] = "FSCODEC_IMAGE_BMP";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_JPG"] = 2] = "FSCODEC_IMAGE_JPG";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_PNG"] = 3] = "FSCODEC_IMAGE_PNG";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_GIF"] = 4] = "FSCODEC_IMAGE_GIF";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_TIF"] = 5] = "FSCODEC_IMAGE_TIF";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_JPX"] = 6] = "FSCODEC_IMAGE_JPX";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_JPX_DATA"] = 7] = "FSCODEC_IMAGE_JPX_DATA";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_JBIG2"] = 8] = "FSCODEC_IMAGE_JBIG2";
  FSCODEC_IMAGE_TYPE[FSCODEC_IMAGE_TYPE["FSCODEC_IMAGE_MAX"] = 9] = "FSCODEC_IMAGE_MAX";
})(FSCODEC_IMAGE_TYPE || (FSCODEC_IMAGE_TYPE = {}));
var FSMONOALRITHEMETIC;
(function (FSMONOALRITHEMETIC) {
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_MeanThreshold"] = 0] = "FSMONO_MeanThreshold";
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_HuangFuzzyThreshold"] = 1] = "FSMONO_HuangFuzzyThreshold";
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_MinimumThreshold"] = 2] = "FSMONO_MinimumThreshold";
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_IntermodesThreshold"] = 3] = "FSMONO_IntermodesThreshold";
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_PTileThreshold"] = 4] = "FSMONO_PTileThreshold";
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_IterativeBestThreshold"] = 5] = "FSMONO_IterativeBestThreshold";
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_OSTUThreshold"] = 6] = "FSMONO_OSTUThreshold";
  FSMONOALRITHEMETIC[FSMONOALRITHEMETIC["FSMONO_IsoDataThreshold"] = 7] = "FSMONO_IsoDataThreshold";
})(FSMONOALRITHEMETIC || (FSMONOALRITHEMETIC = {}));
var FS_ICCWorkingSpace;
(function (FS_ICCWorkingSpace) {
  FS_ICCWorkingSpace[FS_ICCWorkingSpace["FSIcc_WSRGB"] = 0] = "FSIcc_WSRGB";
  FS_ICCWorkingSpace[FS_ICCWorkingSpace["FSIcc_WSCMYK"] = 1] = "FSIcc_WSCMYK";
  FS_ICCWorkingSpace[FS_ICCWorkingSpace["FSIcc_WSGRAYSCALE"] = 2] = "FSIcc_WSGRAYSCALE";
})(FS_ICCWorkingSpace || (FS_ICCWorkingSpace = {}));
var FS_ICCCs;
(function (FS_ICCCs) {
  FS_ICCCs[FS_ICCCs["FSIccCS_Unknown"] = 0] = "FSIccCS_Unknown";
  FS_ICCCs[FS_ICCCs["FSIccCS_XYZ"] = 1] = "FSIccCS_XYZ";
  FS_ICCCs[FS_ICCCs["FSIccCS_Lab"] = 2] = "FSIccCS_Lab";
  FS_ICCCs[FS_ICCCs["FSIccCS_Luv"] = 3] = "FSIccCS_Luv";
  FS_ICCCs[FS_ICCCs["FSIccCS_YCbCr"] = 4] = "FSIccCS_YCbCr";
  FS_ICCCs[FS_ICCCs["FSIccCS_Yxy"] = 5] = "FSIccCS_Yxy";
  FS_ICCCs[FS_ICCCs["FSIccCS_Hsv"] = 6] = "FSIccCS_Hsv";
  FS_ICCCs[FS_ICCCs["FSIccCS_Hls"] = 7] = "FSIccCS_Hls";
  FS_ICCCs[FS_ICCCs["FSIccCS_Gray"] = 8] = "FSIccCS_Gray";
  FS_ICCCs[FS_ICCCs["FSIccCS_Rgb"] = 9] = "FSIccCS_Rgb";
  FS_ICCCs[FS_ICCCs["FSIccCS_Cmyk"] = 10] = "FSIccCS_Cmyk";
  FS_ICCCs[FS_ICCCs["FSIccCS_Cmy"] = 11] = "FSIccCS_Cmy";
})(FS_ICCCs || (FS_ICCCs = {}));
var FS_PNG_FILTER;
(function (FS_PNG_FILTER) {
  FS_PNG_FILTER[FS_PNG_FILTER["FSNO_FILTER"] = 0] = "FSNO_FILTER";
  FS_PNG_FILTER[FS_PNG_FILTER["FSFILTER_NONE"] = 8] = "FSFILTER_NONE";
  FS_PNG_FILTER[FS_PNG_FILTER["FSFILTER_SUB"] = 16] = "FSFILTER_SUB";
  FS_PNG_FILTER[FS_PNG_FILTER["FSFILTER_UP"] = 32] = "FSFILTER_UP";
  FS_PNG_FILTER[FS_PNG_FILTER["FSFILTER_AVG"] = 64] = "FSFILTER_AVG";
  FS_PNG_FILTER[FS_PNG_FILTER["FSFILTER_PAETH"] = 128] = "FSFILTER_PAETH";
  FS_PNG_FILTER[FS_PNG_FILTER["FSFILTER_ADAPTIVE"] = 248] = "FSFILTER_ADAPTIVE";
})(FS_PNG_FILTER || (FS_PNG_FILTER = {}));
var FS_JPEG_FORMAT;
(function (FS_JPEG_FORMAT) {
  FS_JPEG_FORMAT[FS_JPEG_FORMAT["FSJPEGSTANDARD"] = 0] = "FSJPEGSTANDARD";
  FS_JPEG_FORMAT[FS_JPEG_FORMAT["FSJPEGOPTIMIZED"] = 1] = "FSJPEGOPTIMIZED";
  FS_JPEG_FORMAT[FS_JPEG_FORMAT["FSJPEGPROGRESSIVE"] = 2] = "FSJPEGPROGRESSIVE";
  FS_JPEG_FORMAT[FS_JPEG_FORMAT["FSJPEGPROGRESSIVE_3_SCANS"] = 3] = "FSJPEGPROGRESSIVE_3_SCANS";
  FS_JPEG_FORMAT[FS_JPEG_FORMAT["FSJPEGPROGRESSIVE_4_SCANS"] = 4] = "FSJPEGPROGRESSIVE_4_SCANS";
  FS_JPEG_FORMAT[FS_JPEG_FORMAT["FSJPEGPROGRESSIVE_5_SCANS"] = 5] = "FSJPEGPROGRESSIVE_5_SCANS";
})(FS_JPEG_FORMAT || (FS_JPEG_FORMAT = {}));
var FS_IMAGE_TYPE;
(function (FS_IMAGE_TYPE) {
  FS_IMAGE_TYPE[FS_IMAGE_TYPE["FS_IMAGE_PNG"] = 0] = "FS_IMAGE_PNG";
  FS_IMAGE_TYPE[FS_IMAGE_TYPE["FS_IMAGE_BMP"] = 1] = "FS_IMAGE_BMP";
  FS_IMAGE_TYPE[FS_IMAGE_TYPE["FS_IMAGE_ICON"] = 2] = "FS_IMAGE_ICON";
})(FS_IMAGE_TYPE || (FS_IMAGE_TYPE = {}));
var FS_JP2_Color_Space;
(function (FS_JP2_Color_Space) {
  FS_JP2_Color_Space[FS_JP2_Color_Space["FS_JP2_Colorspace_Gray"] = 10] = "FS_JP2_Colorspace_Gray";
  FS_JP2_Color_Space[FS_JP2_Color_Space["FS_JP2_Colorspace_RGBa"] = 20] = "FS_JP2_Colorspace_RGBa";
  FS_JP2_Color_Space[FS_JP2_Color_Space["FS_JP2_Colorspace_RGB_YCCa"] = 30] = "FS_JP2_Colorspace_RGB_YCCa";
  FS_JP2_Color_Space[FS_JP2_Color_Space["FS_JP2_Colorspace_ICCa"] = 40] = "FS_JP2_Colorspace_ICCa";
  FS_JP2_Color_Space[FS_JP2_Color_Space["FS_JP2_Colorspace_CMYKa"] = 50] = "FS_JP2_Colorspace_CMYKa";
})(FS_JP2_Color_Space || (FS_JP2_Color_Space = {}));
var FS_ProgressiveJpx_EncodeStatus;
(function (FS_ProgressiveJpx_EncodeStatus) {
  FS_ProgressiveJpx_EncodeStatus[FS_ProgressiveJpx_EncodeStatus["FS_ProgressiveJpx_Ready"] = 0] = "FS_ProgressiveJpx_Ready";
  FS_ProgressiveJpx_EncodeStatus[FS_ProgressiveJpx_EncodeStatus["FS_ProgressiveJpx_ToBeContinued"] = 1] = "FS_ProgressiveJpx_ToBeContinued";
  FS_ProgressiveJpx_EncodeStatus[FS_ProgressiveJpx_EncodeStatus["FS_ProgressiveJpx_Done"] = 2] = "FS_ProgressiveJpx_Done";
  FS_ProgressiveJpx_EncodeStatus[FS_ProgressiveJpx_EncodeStatus["FS_ProgressiveJpx_Failed"] = 3] = "FS_ProgressiveJpx_Failed";
})(FS_ProgressiveJpx_EncodeStatus || (FS_ProgressiveJpx_EncodeStatus = {}));
var FRDOCVIEW_LAYOUTMODE;
(function (FRDOCVIEW_LAYOUTMODE) {
  FRDOCVIEW_LAYOUTMODE[FRDOCVIEW_LAYOUTMODE["FR_LAYOUTMODE_SINGLE"] = 0] = "FR_LAYOUTMODE_SINGLE";
  FRDOCVIEW_LAYOUTMODE[FRDOCVIEW_LAYOUTMODE["FR_LAYOUTMODE_CONTINUOUS"] = 1] = "FR_LAYOUTMODE_CONTINUOUS";
  FRDOCVIEW_LAYOUTMODE[FRDOCVIEW_LAYOUTMODE["FR_LAYOUTMODE_FACING"] = 2] = "FR_LAYOUTMODE_FACING";
  FRDOCVIEW_LAYOUTMODE[FRDOCVIEW_LAYOUTMODE["FR_LAYOUTMODE_CONTINUOUS_FACING"] = 3] = "FR_LAYOUTMODE_CONTINUOUS_FACING";
  FRDOCVIEW_LAYOUTMODE[FRDOCVIEW_LAYOUTMODE["FR_LAYOUTMODE_AUTOMATIC"] = 4] = "FR_LAYOUTMODE_AUTOMATIC";
})(FRDOCVIEW_LAYOUTMODE || (FRDOCVIEW_LAYOUTMODE = {}));
var FRDOCVIEW_ZOOMTYPE;
(function (FRDOCVIEW_ZOOMTYPE) {
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_NONE"] = 0] = "FR_ZOOM_MODE_NONE";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_ACTUAL_SCALE"] = 1] = "FR_ZOOM_MODE_ACTUAL_SCALE";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_ACTUAL_SIZE"] = 2] = "FR_ZOOM_MODE_ACTUAL_SIZE";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_FIT_PAGE"] = 3] = "FR_ZOOM_MODE_FIT_PAGE";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_FIT_WIDTH"] = 4] = "FR_ZOOM_MODE_FIT_WIDTH";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_FIT_HEIGHT"] = 5] = "FR_ZOOM_MODE_FIT_HEIGHT";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_FIT_RECTANGLE"] = 6] = "FR_ZOOM_MODE_FIT_RECTANGLE";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_FIT_VISIBLE"] = 7] = "FR_ZOOM_MODE_FIT_VISIBLE";
  FRDOCVIEW_ZOOMTYPE[FRDOCVIEW_ZOOMTYPE["FR_ZOOM_MODE_AUTOMATIC"] = 8] = "FR_ZOOM_MODE_AUTOMATIC";
})(FRDOCVIEW_ZOOMTYPE || (FRDOCVIEW_ZOOMTYPE = {}));
var FR_ContentChangeType;
(function (FR_ContentChangeType) {
  FR_ContentChangeType[FR_ContentChangeType["FR_ContentChangeType_None"] = 0] = "FR_ContentChangeType_None";
  FR_ContentChangeType[FR_ContentChangeType["FR_ContentChangeType_Add"] = 1] = "FR_ContentChangeType_Add";
  FR_ContentChangeType[FR_ContentChangeType["FR_ContentChangeType_Delete"] = 2] = "FR_ContentChangeType_Delete";
  FR_ContentChangeType[FR_ContentChangeType["FR_ContentChangeType_Modify"] = 3] = "FR_ContentChangeType_Modify";
})(FR_ContentChangeType || (FR_ContentChangeType = {}));
var FR_FormatType;
(function (FR_FormatType) {
  FR_FormatType[FR_FormatType["FRNoneFormatType"] = 0] = "FRNoneFormatType";
  FR_FormatType[FR_FormatType["FRCommentFormatType"] = 1] = "FRCommentFormatType";
  FR_FormatType[FR_FormatType["FRMeasureFormatType"] = 2] = "FRMeasureFormatType";
  FR_FormatType[FR_FormatType["FREditFormatType"] = 3] = "FREditFormatType";
  FR_FormatType[FR_FormatType["FRImageFormatType"] = 4] = "FRImageFormatType";
  FR_FormatType[FR_FormatType["FRUnknownFormatType"] = 5] = "FRUnknownFormatType";
})(FR_FormatType || (FR_FormatType = {}));
var FR_ImportType;
(function (FR_ImportType) {
  FR_ImportType[FR_ImportType["FR_IMPORT_CREATE"] = 0] = "FR_IMPORT_CREATE";
  FR_ImportType[FR_ImportType["FR_IMPORT_ADDTO"] = 1] = "FR_IMPORT_ADDTO";
  FR_ImportType[FR_ImportType["FR_IMPORT_COPY"] = 2] = "FR_IMPORT_COPY";
})(FR_ImportType || (FR_ImportType = {}));
var FR_MsgBtnType;
(function (FR_MsgBtnType) {
  FR_MsgBtnType[FR_MsgBtnType["FR_MBOK"] = 0] = "FR_MBOK";
  FR_MsgBtnType[FR_MsgBtnType["FR_MBOKCANCEL"] = 1] = "FR_MBOKCANCEL";
  FR_MsgBtnType[FR_MsgBtnType["FR_MBABORTRETRYIGNORE"] = 2] = "FR_MBABORTRETRYIGNORE";
  FR_MsgBtnType[FR_MsgBtnType["FR_MBYESNOCANCEL"] = 3] = "FR_MBYESNOCANCEL";
  FR_MsgBtnType[FR_MsgBtnType["FR_MBYESNO"] = 4] = "FR_MBYESNO";
  FR_MsgBtnType[FR_MsgBtnType["FR_MBRETRYCANCEL"] = 5] = "FR_MBRETRYCANCEL";
})(FR_MsgBtnType || (FR_MsgBtnType = {}));
var FR_MsgType;
(function (FR_MsgType) {
  FR_MsgType[FR_MsgType["FR_MBICONWARNING"] = 0] = "FR_MBICONWARNING";
  FR_MsgType[FR_MsgType["FR_MBICONERROR"] = 1] = "FR_MBICONERROR";
  FR_MsgType[FR_MsgType["FR_MBICONQUESTION"] = 2] = "FR_MBICONQUESTION";
  FR_MsgType[FR_MsgType["FR_MBICONINFORMATION"] = 3] = "FR_MBICONINFORMATION";
})(FR_MsgType || (FR_MsgType = {}));
var FR_CURSORSTYLE;
(function (FR_CURSORSTYLE) {
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_ARROW"] = 0] = "FR_FXCT_ARROW";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_NESW"] = 1] = "FR_FXCT_NESW";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_NWSE"] = 2] = "FR_FXCT_NWSE";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_VBEAM"] = 3] = "FR_FXCT_VBEAM";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_HBEAM"] = 4] = "FR_FXCT_HBEAM";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_HAND"] = 5] = "FR_FXCT_HAND";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_SIZEALL"] = 6] = "FR_FXCT_SIZEALL";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_WE"] = 7] = "FR_FXCT_WE";
  FR_CURSORSTYLE[FR_CURSORSTYLE["FR_FXCT_NS"] = 8] = "FR_FXCT_NS";
})(FR_CURSORSTYLE || (FR_CURSORSTYLE = {}));
var FRAnnotEventType;
(function (FRAnnotEventType) {
  FRAnnotEventType[FRAnnotEventType["FR_DocClose_TYPE"] = 0] = "FR_DocClose_TYPE";
  FRAnnotEventType[FRAnnotEventType["FR_DocOpen_TYPE"] = 1] = "FR_DocOpen_TYPE";
  FRAnnotEventType[FRAnnotEventType["FR_OPER_TYPE"] = 2] = "FR_OPER_TYPE";
})(FRAnnotEventType || (FRAnnotEventType = {}));
var FRDECMFileDialogType;
(function (FRDECMFileDialogType) {
  FRDECMFileDialogType[FRDECMFileDialogType["FR_ECMFileDialog_Open_Default"] = 0] = "FR_ECMFileDialog_Open_Default";
  FRDECMFileDialogType[FRDECMFileDialogType["FR_ECMFileDialog_Open_GetFileOnly"] = 1] = "FR_ECMFileDialog_Open_GetFileOnly";
  FRDECMFileDialogType[FRDECMFileDialogType["FR_ECMFileDialog_Save_Default"] = 2] = "FR_ECMFileDialog_Save_Default";
  FRDECMFileDialogType[FRDECMFileDialogType["FR_ECMFileDialog_Save_Export"] = 3] = "FR_ECMFileDialog_Save_Export";
  FRDECMFileDialogType[FRDECMFileDialogType["FR_ECMFileDialog_Open_Save"] = 4] = "FR_ECMFileDialog_Open_Save";
})(FRDECMFileDialogType || (FRDECMFileDialogType = {}));
var FPD_FORMOPERATYPE;
(function (FPD_FORMOPERATYPE) {
  FPD_FORMOPERATYPE[FPD_FORMOPERATYPE["FPDFORMADD"] = 0] = "FPDFORMADD";
  FPD_FORMOPERATYPE[FPD_FORMOPERATYPE["FPDFORMCHANGE"] = 1] = "FPDFORMCHANGE";
  FPD_FORMOPERATYPE[FPD_FORMOPERATYPE["FPDFORMDELETE"] = 2] = "FPDFORMDELETE";
})(FPD_FORMOPERATYPE || (FPD_FORMOPERATYPE = {}));
var FR_STARTPAGETABTYPE;
(function (FR_STARTPAGETABTYPE) {
  FR_STARTPAGETABTYPE[FR_STARTPAGETABTYPE["FRHOME"] = 0] = "FRHOME";
  FR_STARTPAGETABTYPE[FR_STARTPAGETABTYPE["FRSHARED"] = 1] = "FRSHARED";
  FR_STARTPAGETABTYPE[FR_STARTPAGETABTYPE["FRVIDEO_TUTORIALS"] = 2] = "FRVIDEO_TUTORIALS";
})(FR_STARTPAGETABTYPE || (FR_STARTPAGETABTYPE = {}));
var FRDirectoryType;
(function (FRDirectoryType) {
  FRDirectoryType[FRDirectoryType["FR_DIRECTORY_PATH_SYSTEM"] = 0] = "FR_DIRECTORY_PATH_SYSTEM";
  FRDirectoryType[FRDirectoryType["FR_DIRECTORY_PATH_APPLICATION"] = 1] = "FR_DIRECTORY_PATH_APPLICATION";
  FRDirectoryType[FRDirectoryType["FR_DIRECTORY_PATH_PLUGIN"] = 2] = "FR_DIRECTORY_PATH_PLUGIN";
  FRDirectoryType[FRDirectoryType["FR_DIRECTORY_PATH_USERSPECIFY"] = 3] = "FR_DIRECTORY_PATH_USERSPECIFY";
})(FRDirectoryType || (FRDirectoryType = {}));
var FRSubscriptionFlowName;
(function (FRSubscriptionFlowName) {
  FRSubscriptionFlowName[FRSubscriptionFlowName["FR_SUBSCRIBE"] = 0] = "FR_SUBSCRIBE";
  FRSubscriptionFlowName[FRSubscriptionFlowName["FR_EXTEND_SUBSCRIBE"] = 1] = "FR_EXTEND_SUBSCRIBE";
  FRSubscriptionFlowName[FRSubscriptionFlowName["FR_SUBSCRIB_MANAGE"] = 2] = "FR_SUBSCRIB_MANAGE";
  FRSubscriptionFlowName[FRSubscriptionFlowName["FR_EXTEND_SUBSCRIBE_AUTO"] = 3] = "FR_EXTEND_SUBSCRIBE_AUTO";
  FRSubscriptionFlowName[FRSubscriptionFlowName["FR_SUBSCRIB_DEACTIVE"] = 4] = "FR_SUBSCRIB_DEACTIVE";
})(FRSubscriptionFlowName || (FRSubscriptionFlowName = {}));
var FRPDFA_PDFVersion;
(function (FRPDFA_PDFVersion) {
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_1a_Verify"] = 1] = "FRPDFA_1a_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_1b_Verify"] = 2] = "FRPDFA_1b_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_2a_Verify"] = 3] = "FRPDFA_2a_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_2b_Verify"] = 4] = "FRPDFA_2b_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_2u_Verify"] = 5] = "FRPDFA_2u_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_3a_Verify"] = 6] = "FRPDFA_3a_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_3b_Verify"] = 7] = "FRPDFA_3b_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_3u_Verify"] = 8] = "FRPDFA_3u_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_1a_Convert"] = 9] = "FRPDFA_1a_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_1b_Convert"] = 10] = "FRPDFA_1b_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_2a_Convert"] = 11] = "FRPDFA_2a_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_2b_Convert"] = 12] = "FRPDFA_2b_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_2u_Convert"] = 13] = "FRPDFA_2u_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_3a_Convert"] = 14] = "FRPDFA_3a_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_3b_Convert"] = 15] = "FRPDFA_3b_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_3u_Convert"] = 16] = "FRPDFA_3u_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFA_Remove"] = 17] = "FRPDFA_Remove";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFE_Verify"] = 18] = "FRPDFE_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFE_Convert"] = 19] = "FRPDFE_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFE_Remove"] = 20] = "FRPDFE_Remove";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFVT_Verify"] = 21] = "FRPDFVT_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_1a_Verify"] = 22] = "FRPDFX_1a_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_3_Verify"] = 23] = "FRPDFX_3_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4_Verify"] = 24] = "FRPDFX_4_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4p_Verify"] = 25] = "FRPDFX_4p_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_5g_Verify"] = 26] = "FRPDFX_5g_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_5pg_Verify"] = 27] = "FRPDFX_5pg_Verify";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_1a_GRACol_2006_Convert"] = 28] = "FRPDFX_1a_GRACol_2006_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_1a_ISO_V2_ECI_Convert"] = 29] = "FRPDFX_1a_ISO_V2_ECI_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_1a_JC_2001_Convert"] = 30] = "FRPDFX_1a_JC_2001_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_1a_PSO_Convert"] = 31] = "FRPDFX_1a_PSO_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_3_GRACol_2006_Convert"] = 32] = "FRPDFX_3_GRACol_2006_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_3_ISO_V2_ECI_Convert"] = 33] = "FRPDFX_3_ISO_V2_ECI_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_3_JC_2001_Convert"] = 34] = "FRPDFX_3_JC_2001_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_3_PSO_Convert"] = 35] = "FRPDFX_3_PSO_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4_GRACol_2006_Convert"] = 36] = "FRPDFX_4_GRACol_2006_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4_ISO_V2_ECI_Convert"] = 37] = "FRPDFX_4_ISO_V2_ECI_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4_JC_2001_Convert"] = 38] = "FRPDFX_4_JC_2001_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4_LayerView_Convert"] = 39] = "FRPDFX_4_LayerView_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4_PSO_Convert"] = 40] = "FRPDFX_4_PSO_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_4p_Convert"] = 41] = "FRPDFX_4p_Convert";
  FRPDFA_PDFVersion[FRPDFA_PDFVersion["FRPDFX_Remove"] = 42] = "FRPDFX_Remove";
})(FRPDFA_PDFVersion || (FRPDFA_PDFVersion = {}));
var FR_LOG_LEVEL;
(function (FR_LOG_LEVEL) {
  FR_LOG_LEVEL[FR_LOG_LEVEL["FR_INFO"] = 0] = "FR_INFO";
  FR_LOG_LEVEL[FR_LOG_LEVEL["FR_WARNING"] = 1] = "FR_WARNING";
  FR_LOG_LEVEL[FR_LOG_LEVEL["FR_ERROR"] = 2] = "FR_ERROR";
  FR_LOG_LEVEL[FR_LOG_LEVEL["FR_FATAL"] = 3] = "FR_FATAL";
})(FR_LOG_LEVEL || (FR_LOG_LEVEL = {}));
var FR_JSActionReturn;
(function (FR_JSActionReturn) {
  FR_JSActionReturn[FR_JSActionReturn["FRJSACTION_DOCDESTROY"] = -1] = "FRJSACTION_DOCDESTROY";
  FR_JSActionReturn[FR_JSActionReturn["FRJSACTION_FAILED"] = 0] = "FRJSACTION_FAILED";
  FR_JSActionReturn[FR_JSActionReturn["FRJSACTION_SUCCESS"] = 1] = "FRJSACTION_SUCCESS";
})(FR_JSActionReturn || (FR_JSActionReturn = {}));
var FRAsstEmojiType;
(function (FRAsstEmojiType) {
  FRAsstEmojiType[FRAsstEmojiType["FR_EMOJI_NORMALE"] = 0] = "FR_EMOJI_NORMALE";
  FRAsstEmojiType[FRAsstEmojiType["FR_EMOJI_FIXED"] = 1] = "FR_EMOJI_FIXED";
  FRAsstEmojiType[FRAsstEmojiType["FR_EMOJI_MESSAGE"] = 2] = "FR_EMOJI_MESSAGE";
  FRAsstEmojiType[FRAsstEmojiType["FR_EMOJI_SLEEP"] = 3] = "FR_EMOJI_SLEEP";
  FRAsstEmojiType[FRAsstEmojiType["FR_EMOJI_ERROR"] = 4] = "FR_EMOJI_ERROR";
  FRAsstEmojiType[FRAsstEmojiType["FR_EMOJI_ALERT"] = 5] = "FR_EMOJI_ALERT";
  FRAsstEmojiType[FRAsstEmojiType["FR_EMOJI_GREAT"] = 6] = "FR_EMOJI_GREAT";
})(FRAsstEmojiType || (FRAsstEmojiType = {}));
var FR_SKINSTYLE;
(function (FR_SKINSTYLE) {
  FR_SKINSTYLE[FR_SKINSTYLE["FRDefault"] = 0] = "FRDefault";
  FR_SKINSTYLE[FR_SKINSTYLE["FRLight"] = 1] = "FRLight";
  FR_SKINSTYLE[FR_SKINSTYLE["FRDark"] = 2] = "FRDark";
})(FR_SKINSTYLE || (FR_SKINSTYLE = {}));
var FR_WINDOW_CORNER_TYPE;
(function (FR_WINDOW_CORNER_TYPE) {
  FR_WINDOW_CORNER_TYPE[FR_WINDOW_CORNER_TYPE["FRDWMWCP_DEFAULT"] = 0] = "FRDWMWCP_DEFAULT";
  FR_WINDOW_CORNER_TYPE[FR_WINDOW_CORNER_TYPE["FRDWMWCP_DONOTROUND"] = 1] = "FRDWMWCP_DONOTROUND";
  FR_WINDOW_CORNER_TYPE[FR_WINDOW_CORNER_TYPE["FRDWMWCP_ROUND"] = 2] = "FRDWMWCP_ROUND";
  FR_WINDOW_CORNER_TYPE[FR_WINDOW_CORNER_TYPE["FRDWMWCP_ROUNDSMALL"] = 3] = "FRDWMWCP_ROUNDSMALL";
})(FR_WINDOW_CORNER_TYPE || (FR_WINDOW_CORNER_TYPE = {}));
var FRFMTribool;
(function (FRFMTribool) {
  FRFMTribool[FRFMTribool["FR_FMFalse"] = 0] = "FR_FMFalse";
  FRFMTribool[FRFMTribool["FR_FMTrue"] = 1] = "FR_FMTrue";
  FRFMTribool[FRFMTribool["FR_FMIndeterminate"] = 2] = "FR_FMIndeterminate";
})(FRFMTribool || (FRFMTribool = {}));
var FRActionWizardLogType;
(function (FRActionWizardLogType) {
  FRActionWizardLogType[FRActionWizardLogType["FR_ActionWizardLog_NoType"] = 0] = "FR_ActionWizardLog_NoType";
  FRActionWizardLogType[FRActionWizardLogType["FR_ActionWizardLog_Error"] = 1] = "FR_ActionWizardLog_Error";
  FRActionWizardLogType[FRActionWizardLogType["FR_ActionWizardLog_Warning"] = 2] = "FR_ActionWizardLog_Warning";
  FRActionWizardLogType[FRActionWizardLogType["FR_ActionWizardLog_Skip"] = 3] = "FR_ActionWizardLog_Skip";
  FRActionWizardLogType[FRActionWizardLogType["FR_ActionWizardLog_More"] = 4] = "FR_ActionWizardLog_More";
})(FRActionWizardLogType || (FRActionWizardLogType = {}));
var FRActionWizardExcuteStatus;
(function (FRActionWizardExcuteStatus) {
  FRActionWizardExcuteStatus[FRActionWizardExcuteStatus["FR_EXCUTE_STATUS_DONTSUPPORT"] = 0] = "FR_EXCUTE_STATUS_DONTSUPPORT";
  FRActionWizardExcuteStatus[FRActionWizardExcuteStatus["FR_EXCUTE_STATUS_FAILED"] = 1] = "FR_EXCUTE_STATUS_FAILED";
  FRActionWizardExcuteStatus[FRActionWizardExcuteStatus["FR_EXCUTE_STATUS_SUCESS"] = 2] = "FR_EXCUTE_STATUS_SUCESS";
  FRActionWizardExcuteStatus[FRActionWizardExcuteStatus["FR_EXCUTE_STATUS_CANCEL"] = 3] = "FR_EXCUTE_STATUS_CANCEL";
  FRActionWizardExcuteStatus[FRActionWizardExcuteStatus["FR_EXCUTE_STATUS_SHOWPROMPT"] = 4] = "FR_EXCUTE_STATUS_SHOWPROMPT";
})(FRActionWizardExcuteStatus || (FRActionWizardExcuteStatus = {}));
var FR_RETYPE;
(function (FR_RETYPE) {
  FR_RETYPE[FR_RETYPE["FR_COMPARE_NONETYPE"] = -1] = "FR_COMPARE_NONETYPE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_DELETE_TEXT"] = 1] = "FR_COMPARE_DELETE_TEXT";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_INSERT_TEXT"] = 2] = "FR_COMPARE_INSERT_TEXT";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_REPLACE_TEXT"] = 3] = "FR_COMPARE_REPLACE_TEXT";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_DELETE_IMAGE"] = 4] = "FR_COMPARE_DELETE_IMAGE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_INSERT_IMAGE"] = 5] = "FR_COMPARE_INSERT_IMAGE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_REPLACE_IMAGE"] = 6] = "FR_COMPARE_REPLACE_IMAGE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_DELETE_PATH"] = 7] = "FR_COMPARE_DELETE_PATH";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_INSERT_PATH"] = 8] = "FR_COMPARE_INSERT_PATH";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_REPLACE_PATH"] = 9] = "FR_COMPARE_REPLACE_PATH";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_DELETE_SHADING"] = 10] = "FR_COMPARE_DELETE_SHADING";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_INSERT_SHADING"] = 11] = "FR_COMPARE_INSERT_SHADING";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_REPLACE_SHADING"] = 12] = "FR_COMPARE_REPLACE_SHADING";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_DELETE_ANNOT"] = 13] = "FR_COMPARE_DELETE_ANNOT";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_INSERT_ANNOT"] = 14] = "FR_COMPARE_INSERT_ANNOT";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_REPLACE_ANNOT"] = 15] = "FR_COMPARE_REPLACE_ANNOT";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_DELETE_TABLE"] = 16] = "FR_COMPARE_DELETE_TABLE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_INSERT_TABLE"] = 17] = "FR_COMPARE_INSERT_TABLE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_REPLACE_TABLE"] = 18] = "FR_COMPARE_REPLACE_TABLE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_MATCH"] = 19] = "FR_COMPARE_MATCH";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_TEXT_ATTRICHANGE"] = 20] = "FR_COMPARE_TEXT_ATTRICHANGE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_INSERT_PAGE"] = 21] = "FR_COMPARE_INSERT_PAGE";
  FR_RETYPE[FR_RETYPE["FR_COMPARE_DELETE_PAGE"] = 22] = "FR_COMPARE_DELETE_PAGE";
})(FR_RETYPE || (FR_RETYPE = {}));
var FR_PDFAccessibilityCheckerState;
(function (FR_PDFAccessibilityCheckerState) {
  FR_PDFAccessibilityCheckerState[FR_PDFAccessibilityCheckerState["FRPDFAccessibility_Checker_None"] = 0] = "FRPDFAccessibility_Checker_None";
  FR_PDFAccessibilityCheckerState[FR_PDFAccessibilityCheckerState["FRPDFAccessibility_Checker_Passed"] = 1] = "FRPDFAccessibility_Checker_Passed";
  FR_PDFAccessibilityCheckerState[FR_PDFAccessibilityCheckerState["FRPDFAccessibility_Checker_Failed"] = 2] = "FRPDFAccessibility_Checker_Failed";
  FR_PDFAccessibilityCheckerState[FR_PDFAccessibilityCheckerState["FRPDFAccessibility_Checker_HumanCheck"] = 3] = "FRPDFAccessibility_Checker_HumanCheck";
  FR_PDFAccessibilityCheckerState[FR_PDFAccessibilityCheckerState["FRPDFAccessibility_Checker_Skipped"] = 4] = "FRPDFAccessibility_Checker_Skipped";
  FR_PDFAccessibilityCheckerState[FR_PDFAccessibilityCheckerState["FRPDFAccessibility_Checker_HumanPassed"] = 5] = "FRPDFAccessibility_Checker_HumanPassed";
  FR_PDFAccessibilityCheckerState[FR_PDFAccessibilityCheckerState["FRPDFAccessibility_Checker_HumanFailed"] = 6] = "FRPDFAccessibility_Checker_HumanFailed";
})(FR_PDFAccessibilityCheckerState || (FR_PDFAccessibilityCheckerState = {}));
var FR_ActionWizardItmeDataType;
(function (FR_ActionWizardItmeDataType) {
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_invalid"] = 0] = "FRdt_invalid";
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_boolean"] = 1] = "FRdt_boolean";
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_integer"] = 2] = "FRdt_integer";
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_double"] = 3] = "FRdt_double";
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_atom"] = 4] = "FRdt_atom";
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_text"] = 5] = "FRdt_text";
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_null"] = 6] = "FRdt_null";
  FR_ActionWizardItmeDataType[FR_ActionWizardItmeDataType["FRdt_string"] = 7] = "FRdt_string";
})(FR_ActionWizardItmeDataType || (FR_ActionWizardItmeDataType = {}));
var FRCommentsAnnotIconState;
(function (FRCommentsAnnotIconState) {
  FRCommentsAnnotIconState[FRCommentsAnnotIconState["FR_IconState_NONE"] = -1] = "FR_IconState_NONE";
  FRCommentsAnnotIconState[FRCommentsAnnotIconState["FR_IconState_PUBLISH_SUCCESS"] = 1] = "FR_IconState_PUBLISH_SUCCESS";
  FRCommentsAnnotIconState[FRCommentsAnnotIconState["FR_IconState_PUBLISH_FAILED"] = 2] = "FR_IconState_PUBLISH_FAILED";
  FRCommentsAnnotIconState[FRCommentsAnnotIconState["FR_IconState_REVIEW"] = 3] = "FR_IconState_REVIEW";
  FRCommentsAnnotIconState[FRCommentsAnnotIconState["FR_IconState_UNREVIEW"] = 4] = "FR_IconState_UNREVIEW";
})(FRCommentsAnnotIconState || (FRCommentsAnnotIconState = {}));
var FR_PrintOrientationType;
(function (FR_PrintOrientationType) {
  FR_PrintOrientationType[FR_PrintOrientationType["FRORITYPE_AUTO"] = 0] = "FRORITYPE_AUTO";
  FR_PrintOrientationType[FR_PrintOrientationType["FRORITYPE_PORTRAIT"] = 1] = "FRORITYPE_PORTRAIT";
  FR_PrintOrientationType[FR_PrintOrientationType["FRORITYPE_LANDSCAPE"] = 2] = "FRORITYPE_LANDSCAPE";
})(FR_PrintOrientationType || (FR_PrintOrientationType = {}));
var FR_OtherToPDF;
(function (FR_OtherToPDF) {
  FR_OtherToPDF[FR_OtherToPDF["FRConvertToPDF"] = 0] = "FRConvertToPDF";
  FR_OtherToPDF[FR_OtherToPDF["FRInsertImage"] = 1] = "FRInsertImage";
  FR_OtherToPDF[FR_OtherToPDF["FRInsertFromFile"] = 2] = "FRInsertFromFile";
})(FR_OtherToPDF || (FR_OtherToPDF = {}));
var FR_PDFToOther;
(function (FR_PDFToOther) {
  FR_PDFToOther[FR_PDFToOther["FRExtractPage"] = 0] = "FRExtractPage";
  FR_PDFToOther[FR_PDFToOther["FRSplitPage"] = 1] = "FRSplitPage";
  FR_PDFToOther[FR_PDFToOther["FRSaveToImage"] = 2] = "FRSaveToImage";
})(FR_PDFToOther || (FR_PDFToOther = {}));
var FR_ScanType;
(function (FR_ScanType) {
  FR_ScanType[FR_ScanType["FR_SCANTYPE_HOMESCAN"] = 0] = "FR_SCANTYPE_HOMESCAN";
  FR_ScanType[FR_ScanType["FR_SCANTYPE_PPO"] = 1] = "FR_SCANTYPE_PPO";
  FR_ScanType[FR_ScanType["FR_SCANTYPE_FORM"] = 2] = "FR_SCANTYPE_FORM";
  FR_ScanType[FR_ScanType["FR_SCANTYPE_COMBINE"] = 3] = "FR_SCANTYPE_COMBINE";
})(FR_ScanType || (FR_ScanType = {}));
var FR_ScanShowDialogType;
(function (FR_ScanShowDialogType) {
  FR_ScanShowDialogType[FR_ScanShowDialogType["FR_SHOWNONE"] = 0] = "FR_SHOWNONE";
  FR_ScanShowDialogType[FR_ScanShowDialogType["FR_HIDEPOSTCONFIG"] = 1] = "FR_HIDEPOSTCONFIG";
  FR_ScanShowDialogType[FR_ScanShowDialogType["FR_MANGERCONFIG"] = 2] = "FR_MANGERCONFIG";
  FR_ScanShowDialogType[FR_ScanShowDialogType["FR_PPO_SHOWCUSTOM"] = 3] = "FR_PPO_SHOWCUSTOM";
  FR_ScanShowDialogType[FR_ScanShowDialogType["FR_FORM_SHOWCUSTOM"] = 4] = "FR_FORM_SHOWCUSTOM";
  FR_ScanShowDialogType[FR_ScanShowDialogType["FR_COMBINE_SHOWCUSTOM"] = 5] = "FR_COMBINE_SHOWCUSTOM";
})(FR_ScanShowDialogType || (FR_ScanShowDialogType = {}));
var FR_ConvertMediaErrorType;
(function (FR_ConvertMediaErrorType) {
  FR_ConvertMediaErrorType[FR_ConvertMediaErrorType["SUCCESS"] = 0] = "SUCCESS";
  FR_ConvertMediaErrorType[FR_ConvertMediaErrorType["FAIL"] = 1] = "FAIL";
  FR_ConvertMediaErrorType[FR_ConvertMediaErrorType["CANCEL"] = 2] = "CANCEL";
})(FR_ConvertMediaErrorType || (FR_ConvertMediaErrorType = {}));
var FR_JSProcType;
(function (FR_JSProcType) {
  FR_JSProcType[FR_JSProcType["FR_JSPROCTYPE_Mark"] = 0] = "FR_JSPROCTYPE_Mark";
  FR_JSProcType[FR_JSProcType["FR_JSACTION_Exec"] = 1] = "FR_JSACTION_Exec";
  FR_JSProcType[FR_JSProcType["FR_JSACTION_Enable"] = 2] = "FR_JSACTION_Enable";
})(FR_JSProcType || (FR_JSProcType = {}));
var FRRSA_UNDOTYPE;
(function (FRRSA_UNDOTYPE) {
  FRRSA_UNDOTYPE[FRRSA_UNDOTYPE["FRRSA_CREATE"] = 0] = "FRRSA_CREATE";
  FRRSA_UNDOTYPE[FRRSA_UNDOTYPE["FRRSA_MOVE"] = 1] = "FRRSA_MOVE";
  FRRSA_UNDOTYPE[FRRSA_UNDOTYPE["FRRSA_MOVETOPAGE"] = 2] = "FRRSA_MOVETOPAGE";
  FRRSA_UNDOTYPE[FRRSA_UNDOTYPE["FRRSA_ROTATE"] = 3] = "FRRSA_ROTATE";
})(FRRSA_UNDOTYPE || (FRRSA_UNDOTYPE = {}));
var FR_PACKAGELANG;
(function (FR_PACKAGELANG) {
  FR_PACKAGELANG[FR_PACKAGELANG["FR_CHINESE_VERSION"] = 0] = "FR_CHINESE_VERSION";
  FR_PACKAGELANG[FR_PACKAGELANG["FR_JAPANESE_VERSION"] = 1] = "FR_JAPANESE_VERSION";
  FR_PACKAGELANG[FR_PACKAGELANG["FR_KOKR_VERSION"] = 2] = "FR_KOKR_VERSION";
  FR_PACKAGELANG[FR_PACKAGELANG["FR_ML_VERSION"] = 3] = "FR_ML_VERSION";
  FR_PACKAGELANG[FR_PACKAGELANG["FR_TW_VERSION"] = 4] = "FR_TW_VERSION";
  FR_PACKAGELANG[FR_PACKAGELANG["FR_EN_VERSION"] = 5] = "FR_EN_VERSION";
})(FR_PACKAGELANG || (FR_PACKAGELANG = {}));
var FROriginalDocType;
(function (FROriginalDocType) {
  FROriginalDocType[FROriginalDocType["FR_ORI_DOCTYPE_PDF"] = 0] = "FR_ORI_DOCTYPE_PDF";
  FROriginalDocType[FROriginalDocType["FR_ORI_DOCTYPE_DYNAMIC_XFA"] = 1] = "FR_ORI_DOCTYPE_DYNAMIC_XFA";
  FROriginalDocType[FROriginalDocType["FR_ORI_DOCTYPE_STATIC_XFA"] = 2] = "FR_ORI_DOCTYPE_STATIC_XFA";
  FROriginalDocType[FROriginalDocType["FR_ORI_DOCTYPE_FDF"] = 3] = "FR_ORI_DOCTYPE_FDF";
  FROriginalDocType[FROriginalDocType["FR_ORI_DOCTYPE_XDP"] = 4] = "FR_ORI_DOCTYPE_XDP";
  FROriginalDocType[FROriginalDocType["FR_ORI_DOCTYPE_XFDF"] = 5] = "FR_ORI_DOCTYPE_XFDF";
  FROriginalDocType[FROriginalDocType["FR_ORI_DOCTYPE_PPDF"] = 6] = "FR_ORI_DOCTYPE_PPDF";
})(FROriginalDocType || (FROriginalDocType = {}));
var FRCreateDocSource;
(function (FRCreateDocSource) {
  FRCreateDocSource[FRCreateDocSource["FR_DOC_SOURCE_NORMAL"] = 0] = "FR_DOC_SOURCE_NORMAL";
  FRCreateDocSource[FRCreateDocSource["FR_DOC_SOURCE_BLANK"] = 1] = "FR_DOC_SOURCE_BLANK";
  FRCreateDocSource[FRCreateDocSource["FR_DOC_SOURCE_FROM_FILE"] = 2] = "FR_DOC_SOURCE_FROM_FILE";
  FRCreateDocSource[FRCreateDocSource["FR_DOC_SOURCE_FROM_MULTIPLE_FILES"] = 3] = "FR_DOC_SOURCE_FROM_MULTIPLE_FILES";
  FRCreateDocSource[FRCreateDocSource["FR_DOC_SOURCE_FROM_SCANNER"] = 4] = "FR_DOC_SOURCE_FROM_SCANNER";
  FRCreateDocSource[FRCreateDocSource["FR_DOC_SOURCE_FROM_CLIPBOARD"] = 5] = "FR_DOC_SOURCE_FROM_CLIPBOARD";
  FRCreateDocSource[FRCreateDocSource["FR_DOC_SOURCE_PDF_PORTFOLIO"] = 6] = "FR_DOC_SOURCE_PDF_PORTFOLIO";
})(FRCreateDocSource || (FRCreateDocSource = {}));
var FRPermReqObj;
(function (FRPermReqObj) {
  FRPermReqObj[FRPermReqObj["FRPermReqObjDoc"] = 1] = "FRPermReqObjDoc";
})(FRPermReqObj || (FRPermReqObj = {}));
var FRPermReqOpr;
(function (FRPermReqOpr) {
  FRPermReqOpr[FRPermReqOpr["FRPermReqOprCopy"] = 0] = "FRPermReqOprCopy";
  FRPermReqOpr[FRPermReqOpr["FRPermReqOprExport"] = 1] = "FRPermReqOprExport";
})(FRPermReqOpr || (FRPermReqOpr = {}));
var FRPermReqStatus;
(function (FRPermReqStatus) {
  FRPermReqStatus[FRPermReqStatus["FRPermReqDenied"] = -1] = "FRPermReqDenied";
  FRPermReqStatus[FRPermReqStatus["FRPermReqGranted"] = 0] = "FRPermReqGranted";
})(FRPermReqStatus || (FRPermReqStatus = {}));
var FR_TabOrder;
(function (FR_TabOrder) {
  FR_TabOrder[FR_TabOrder["FRMixOrOthers"] = -1] = "FRMixOrOthers";
  FR_TabOrder[FR_TabOrder["FRUnspecified"] = 1] = "FRUnspecified";
  FR_TabOrder[FR_TabOrder["FRRowOrder"] = 2] = "FRRowOrder";
  FR_TabOrder[FR_TabOrder["FRColumnOrder"] = 3] = "FRColumnOrder";
  FR_TabOrder[FR_TabOrder["FRStructureOrder"] = 4] = "FRStructureOrder";
  FR_TabOrder[FR_TabOrder["FRManually"] = 5] = "FRManually";
})(FR_TabOrder || (FR_TabOrder = {}));
var FR_MailtoResult;
(function (FR_MailtoResult) {
  FR_MailtoResult[FR_MailtoResult["FRMailtoFailed"] = 0] = "FRMailtoFailed";
  FR_MailtoResult[FR_MailtoResult["FRMailtoSuccess"] = 1] = "FRMailtoSuccess";
  FR_MailtoResult[FR_MailtoResult["FRMailtoUserAbort"] = 2] = "FRMailtoUserAbort";
})(FR_MailtoResult || (FR_MailtoResult = {}));
var FR_SUPPORT_FILE_TYPE;
(function (FR_SUPPORT_FILE_TYPE) {
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_UnknownFileType"] = 0] = "FR_UnknownFileType";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_MS_WordFile"] = 1] = "FR_MS_WordFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_MS_PorwerPointFile"] = 2] = "FR_MS_PorwerPointFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_MS_ExcelFile"] = 3] = "FR_MS_ExcelFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_MS_ProjectFile"] = 4] = "FR_MS_ProjectFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_MS_VisioFile"] = 5] = "FR_MS_VisioFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_MS_OutLook"] = 6] = "FR_MS_OutLook";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_KS_WordFile"] = 7] = "FR_KS_WordFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_KS_PowerPointFile"] = 8] = "FR_KS_PowerPointFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_KS_ExcelFile"] = 9] = "FR_KS_ExcelFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_TextFile"] = 10] = "FR_TextFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_ImageFile"] = 11] = "FR_ImageFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_HtmlFile"] = 12] = "FR_HtmlFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_PdfFile"] = 13] = "FR_PdfFile";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_HCOM_HWP"] = 14] = "FR_HCOM_HWP";
  FR_SUPPORT_FILE_TYPE[FR_SUPPORT_FILE_TYPE["FR_XpsFile"] = 15] = "FR_XpsFile";
})(FR_SUPPORT_FILE_TYPE || (FR_SUPPORT_FILE_TYPE = {}));
var FR_TagPDF_PanelType;
(function (FR_TagPDF_PanelType) {
  FR_TagPDF_PanelType[FR_TagPDF_PanelType["FRTagPDF_TagsPanel"] = 1] = "FRTagPDF_TagsPanel";
  FR_TagPDF_PanelType[FR_TagPDF_PanelType["FRTagPDF_OrderPanel"] = 2] = "FRTagPDF_OrderPanel";
  FR_TagPDF_PanelType[FR_TagPDF_PanelType["FRTagPDF_ContentPanel"] = 3] = "FRTagPDF_ContentPanel";
})(FR_TagPDF_PanelType || (FR_TagPDF_PanelType = {}));
var FR_PIECE_INFO_KEY;
(function (FR_PIECE_INFO_KEY) {
  FR_PIECE_INFO_KEY[FR_PIECE_INFO_KEY["FR_PI_FAVORITE"] = 0] = "FR_PI_FAVORITE";
  FR_PIECE_INFO_KEY[FR_PIECE_INFO_KEY["FR_PI_DEFAULT_WH"] = 1] = "FR_PI_DEFAULT_WH";
  FR_PIECE_INFO_KEY[FR_PIECE_INFO_KEY["FR_PI_APP_CLOST_DEL"] = 2] = "FR_PI_APP_CLOST_DEL";
  FR_PIECE_INFO_KEY[FR_PIECE_INFO_KEY["FR_PI_SIGN_IDX"] = 3] = "FR_PI_SIGN_IDX";
  FR_PIECE_INFO_KEY[FR_PIECE_INFO_KEY["FR_PI_DEFAULT_CROP_WH"] = 4] = "FR_PI_DEFAULT_CROP_WH";
})(FR_PIECE_INFO_KEY || (FR_PIECE_INFO_KEY = {}));
var FRRS_PASSWORD;
(function (FRRS_PASSWORD) {
  FRRS_PASSWORD[FRRS_PASSWORD["FRRS_NOPERMISSION"] = 0] = "FRRS_NOPERMISSION";
  FRRS_PASSWORD[FRRS_PASSWORD["FRRS_PASSWORDBLANK"] = 1] = "FRRS_PASSWORDBLANK";
  FRRS_PASSWORD[FRRS_PASSWORD["FRRS_HASPERMISSION"] = 2] = "FRRS_HASPERMISSION";
})(FRRS_PASSWORD || (FRRS_PASSWORD = {}));
var FREnhancementAlogrithms;
(function (FREnhancementAlogrithms) {
  FREnhancementAlogrithms[FREnhancementAlogrithms["FR_GRAY_LEVEL_TRANS"] = 0] = "FR_GRAY_LEVEL_TRANS";
})(FREnhancementAlogrithms || (FREnhancementAlogrithms = {}));
var FRThreshAlogrithm;
(function (FRThreshAlogrithm) {
  FRThreshAlogrithm[FRThreshAlogrithm["FR_FIXED_THRESH"] = 0] = "FR_FIXED_THRESH";
  FRThreshAlogrithm[FRThreshAlogrithm["FR_OTSU"] = 1] = "FR_OTSU";
})(FRThreshAlogrithm || (FRThreshAlogrithm = {}));
var FRPRINT_PERMISSON;
(function (FRPRINT_PERMISSON) {
  FRPRINT_PERMISSON[FRPRINT_PERMISSON["FR_PRINT_NONE"] = 0] = "FR_PRINT_NONE";
  FRPRINT_PERMISSON[FRPRINT_PERMISSON["FR_PRINT_LOW"] = 1] = "FR_PRINT_LOW";
  FRPRINT_PERMISSON[FRPRINT_PERMISSON["FR_PRINT_HIGH"] = 2] = "FR_PRINT_HIGH";
})(FRPRINT_PERMISSON || (FRPRINT_PERMISSON = {}));
var FRCHANGE_PERMISSON;
(function (FRCHANGE_PERMISSON) {
  FRCHANGE_PERMISSON[FRCHANGE_PERMISSON["FR_CHANGE_NONE"] = 0] = "FR_CHANGE_NONE";
  FRCHANGE_PERMISSON[FRCHANGE_PERMISSON["FR_CHANGE_INSERTDELROTATE"] = 1] = "FR_CHANGE_INSERTDELROTATE";
  FRCHANGE_PERMISSON[FRCHANGE_PERMISSON["FR_CHANGE_FORMFILL"] = 2] = "FR_CHANGE_FORMFILL";
  FRCHANGE_PERMISSON[FRCHANGE_PERMISSON["FR_CHANGE_COMMENTSFORMFILL"] = 3] = "FR_CHANGE_COMMENTSFORMFILL";
  FRCHANGE_PERMISSON[FRCHANGE_PERMISSON["FR_CHANGE_ANYEXCEPTEXTRACT"] = 4] = "FR_CHANGE_ANYEXCEPTEXTRACT";
})(FRCHANGE_PERMISSON || (FRCHANGE_PERMISSON = {}));
var FRPROPERTITY_PERMISSON;
(function (FRPROPERTITY_PERMISSON) {
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSON_PRINTING"] = 0] = "FR_PERMISSON_PRINTING";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSION_CHANGEDOC"] = 1] = "FR_PERMISSION_CHANGEDOC";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSON_DOCASSEMBLY"] = 2] = "FR_PERMISSON_DOCASSEMBLY";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSION_CONTENTCOPY"] = 3] = "FR_PERMISSION_CONTENTCOPY";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSION_CONTENTCOPYACCESS"] = 4] = "FR_PERMISSION_CONTENTCOPYACCESS";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSON_PAGEEXTRACT"] = 5] = "FR_PERMISSON_PAGEEXTRACT";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSON_COMMENT"] = 6] = "FR_PERMISSON_COMMENT";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSON_FILLFORM"] = 7] = "FR_PERMISSON_FILLFORM";
  FRPROPERTITY_PERMISSON[FRPROPERTITY_PERMISSON["FR_PERMISSON_SIGN"] = 8] = "FR_PERMISSON_SIGN";
})(FRPROPERTITY_PERMISSON || (FRPROPERTITY_PERMISSON = {}));
var FR_AUTOCOMPLETECHOICE;
(function (FR_AUTOCOMPLETECHOICE) {
  FR_AUTOCOMPLETECHOICE[FR_AUTOCOMPLETECHOICE["FRAUTOCOMPLETEOFF"] = 0] = "FRAUTOCOMPLETEOFF";
  FR_AUTOCOMPLETECHOICE[FR_AUTOCOMPLETECHOICE["FRAUTOCOMPLETEBASIC"] = 1] = "FRAUTOCOMPLETEBASIC";
  FR_AUTOCOMPLETECHOICE[FR_AUTOCOMPLETECHOICE["FRAUTOCOMPLETEADVANCED"] = 2] = "FRAUTOCOMPLETEADVANCED";
})(FR_AUTOCOMPLETECHOICE || (FR_AUTOCOMPLETECHOICE = {}));
var FR_SIG_TYPE;
(function (FR_SIG_TYPE) {
  FR_SIG_TYPE[FR_SIG_TYPE["FR_SIG_NONE"] = 0] = "FR_SIG_NONE";
  FR_SIG_TYPE[FR_SIG_TYPE["FR_SIG_TRUE"] = 1] = "FR_SIG_TRUE";
  FR_SIG_TYPE[FR_SIG_TYPE["FR_SIG_DOMDP"] = 2] = "FR_SIG_DOMDP";
})(FR_SIG_TYPE || (FR_SIG_TYPE = {}));
var FR_SGToolMode;
(function (FR_SGToolMode) {
  FR_SGToolMode[FR_SGToolMode["FRTM_NONE"] = -1] = "FRTM_NONE";
  FR_SGToolMode[FR_SGToolMode["FRTM_SIGN"] = 1] = "FRTM_SIGN";
  FR_SGToolMode[FR_SGToolMode["FRTM_FIELD"] = 2] = "FRTM_FIELD";
  FR_SGToolMode[FR_SGToolMode["FRTM_CERTIFY"] = 3] = "FRTM_CERTIFY";
})(FR_SGToolMode || (FR_SGToolMode = {}));
var FR_SG_HANDLE;
(function (FR_SG_HANDLE) {
  FR_SG_HANDLE[FR_SG_HANDLE["FR_SIG_HANDLE_SUCCESS"] = 0] = "FR_SIG_HANDLE_SUCCESS";
  FR_SG_HANDLE[FR_SG_HANDLE["FR_SIG_HANDLE_FAIL"] = 1] = "FR_SIG_HANDLE_FAIL";
  FR_SG_HANDLE[FR_SG_HANDLE["FR_SIG_HANDLE_NONE"] = 2] = "FR_SIG_HANDLE_NONE";
})(FR_SG_HANDLE || (FR_SG_HANDLE = {}));
var FR_SIG_MODIFYDETECTOR_RESULT;
(function (FR_SIG_MODIFYDETECTOR_RESULT) {
  FR_SIG_MODIFYDETECTOR_RESULT[FR_SIG_MODIFYDETECTOR_RESULT["FR_SIG_MODIFYDETECTOR_UNCHANGE"] = 0] = "FR_SIG_MODIFYDETECTOR_UNCHANGE";
  FR_SIG_MODIFYDETECTOR_RESULT[FR_SIG_MODIFYDETECTOR_RESULT["FR_SIG_MODIFYDETECTOR_CHANGE"] = 1] = "FR_SIG_MODIFYDETECTOR_CHANGE";
  FR_SIG_MODIFYDETECTOR_RESULT[FR_SIG_MODIFYDETECTOR_RESULT["FR_SIG_MODIFYDETECTOR_ERROR"] = 2] = "FR_SIG_MODIFYDETECTOR_ERROR";
})(FR_SIG_MODIFYDETECTOR_RESULT || (FR_SIG_MODIFYDETECTOR_RESULT = {}));
var FR_SIG_MODIFYDETECTOR_TYPE;
(function (FR_SIG_MODIFYDETECTOR_TYPE) {
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_FORMCREATE"] = 0] = "FR_SIG_MODIFYDETECTOR_FORMCREATE";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_FORMDELETE"] = 1] = "FR_SIG_MODIFYDETECTOR_FORMDELETE";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_FORMFILLIN"] = 2] = "FR_SIG_MODIFYDETECTOR_FORMFILLIN";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_FORMMODIFY"] = 3] = "FR_SIG_MODIFYDETECTOR_FORMMODIFY";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_ANNOTCREATE"] = 4] = "FR_SIG_MODIFYDETECTOR_ANNOTCREATE";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_ANNOTDELETE"] = 5] = "FR_SIG_MODIFYDETECTOR_ANNOTDELETE";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_ANNOTMODIFY"] = 6] = "FR_SIG_MODIFYDETECTOR_ANNOTMODIFY";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_PAGECREATE"] = 7] = "FR_SIG_MODIFYDETECTOR_PAGECREATE";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_PAGEDELETE"] = 8] = "FR_SIG_MODIFYDETECTOR_PAGEDELETE";
  FR_SIG_MODIFYDETECTOR_TYPE[FR_SIG_MODIFYDETECTOR_TYPE["FR_SIG_MODIFYDETECTOR_PAGEMODIFY"] = 9] = "FR_SIG_MODIFYDETECTOR_PAGEMODIFY";
})(FR_SIG_MODIFYDETECTOR_TYPE || (FR_SIG_MODIFYDETECTOR_TYPE = {}));
var FR_SIG_UPDATESTATE;
(function (FR_SIG_UPDATESTATE) {
  FR_SIG_UPDATESTATE[FR_SIG_UPDATESTATE["FR_SIG_UPDATE_OK"] = 0] = "FR_SIG_UPDATE_OK";
  FR_SIG_UPDATESTATE[FR_SIG_UPDATESTATE["FR_SIG_UPDATE_NONEED"] = 1] = "FR_SIG_UPDATE_NONEED";
  FR_SIG_UPDATESTATE[FR_SIG_UPDATESTATE["FR_SIG_UPDATE_ERROR"] = 2] = "FR_SIG_UPDATE_ERROR";
})(FR_SIG_UPDATESTATE || (FR_SIG_UPDATESTATE = {}));
var FR_SG_ICONTYPE;
(function (FR_SG_ICONTYPE) {
  FR_SG_ICONTYPE[FR_SG_ICONTYPE["FR_SGIT_NONE"] = 0] = "FR_SGIT_NONE";
  FR_SG_ICONTYPE[FR_SG_ICONTYPE["FR_SGIT_GRAPHICS"] = 1] = "FR_SGIT_GRAPHICS";
  FR_SG_ICONTYPE[FR_SG_ICONTYPE["FR_SGIT_NAME"] = 2] = "FR_SGIT_NAME";
  FR_SG_ICONTYPE[FR_SG_ICONTYPE["FR_SGIT_DRAW"] = 3] = "FR_SGIT_DRAW";
})(FR_SG_ICONTYPE || (FR_SG_ICONTYPE = {}));
var FR_SG_TEXTDIR;
(function (FR_SG_TEXTDIR) {
  FR_SG_TEXTDIR[FR_SG_TEXTDIR["FR_SGTD_AUTO"] = 0] = "FR_SGTD_AUTO";
  FR_SG_TEXTDIR[FR_SG_TEXTDIR["FR_SGTD_LEFTTORIGHT"] = 1] = "FR_SGTD_LEFTTORIGHT";
  FR_SG_TEXTDIR[FR_SG_TEXTDIR["FR_SGTD_RIGHTTOLEFT"] = 2] = "FR_SGTD_RIGHTTOLEFT";
})(FR_SG_TEXTDIR || (FR_SG_TEXTDIR = {}));
var FR_SG_PERMISSION;
(function (FR_SG_PERMISSION) {
  FR_SG_PERMISSION[FR_SG_PERMISSION["FR_APG_NONE"] = 0] = "FR_APG_NONE";
  FR_SG_PERMISSION[FR_SG_PERMISSION["FR_APG_ONE"] = 1] = "FR_APG_ONE";
  FR_SG_PERMISSION[FR_SG_PERMISSION["FR_APG_TWO"] = 2] = "FR_APG_TWO";
  FR_SG_PERMISSION[FR_SG_PERMISSION["FR_APG_THREE"] = 3] = "FR_APG_THREE";
  FR_SG_PERMISSION[FR_SG_PERMISSION["FR_APG_LOCK"] = 4] = "FR_APG_LOCK";
  FR_SG_PERMISSION[FR_SG_PERMISSION["FR_APG_READONLY"] = 5] = "FR_APG_READONLY";
})(FR_SG_PERMISSION || (FR_SG_PERMISSION = {}));
var FRSIG_MODIFYDETECTOR_RESULT;
(function (FRSIG_MODIFYDETECTOR_RESULT) {
  FRSIG_MODIFYDETECTOR_RESULT[FRSIG_MODIFYDETECTOR_RESULT["FRSIG_MODIFYDETECTOR_UNCHANGE"] = 0] = "FRSIG_MODIFYDETECTOR_UNCHANGE";
  FRSIG_MODIFYDETECTOR_RESULT[FRSIG_MODIFYDETECTOR_RESULT["FRSIG_MODIFYDETECTOR_CHANGE"] = 1] = "FRSIG_MODIFYDETECTOR_CHANGE";
  FRSIG_MODIFYDETECTOR_RESULT[FRSIG_MODIFYDETECTOR_RESULT["FRSIG_MODIFYDETECTOR_ERROR"] = 2] = "FRSIG_MODIFYDETECTOR_ERROR";
})(FRSIG_MODIFYDETECTOR_RESULT || (FRSIG_MODIFYDETECTOR_RESULT = {}));
var FRSIG_MODIFYDETECTOR_TYPE;
(function (FRSIG_MODIFYDETECTOR_TYPE) {
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_FORMCREATE"] = 0] = "FRSIG_MODIFYDETECTOR_FORMCREATE";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_FORMDELETE"] = 1] = "FRSIG_MODIFYDETECTOR_FORMDELETE";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_FORMFILLIN"] = 2] = "FRSIG_MODIFYDETECTOR_FORMFILLIN";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_FORMMODIFY"] = 3] = "FRSIG_MODIFYDETECTOR_FORMMODIFY";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_ANNOTCREATE"] = 4] = "FRSIG_MODIFYDETECTOR_ANNOTCREATE";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_ANNOTDELETE"] = 5] = "FRSIG_MODIFYDETECTOR_ANNOTDELETE";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_ANNOTMODIFY"] = 6] = "FRSIG_MODIFYDETECTOR_ANNOTMODIFY";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_PAGECREATE"] = 7] = "FRSIG_MODIFYDETECTOR_PAGECREATE";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_PAGEDELETE"] = 8] = "FRSIG_MODIFYDETECTOR_PAGEDELETE";
  FRSIG_MODIFYDETECTOR_TYPE[FRSIG_MODIFYDETECTOR_TYPE["FRSIG_MODIFYDETECTOR_PAGEMODIFY"] = 9] = "FRSIG_MODIFYDETECTOR_PAGEMODIFY";
})(FRSIG_MODIFYDETECTOR_TYPE || (FRSIG_MODIFYDETECTOR_TYPE = {}));
var FR_SIGHTYPE;
(function (FR_SIGHTYPE) {
  FR_SIGHTYPE[FR_SIGHTYPE["FRSIGNNONE"] = 0] = "FRSIGNNONE";
  FR_SIGHTYPE[FR_SIGHTYPE["FRSIGNATURE"] = 1] = "FRSIGNATURE";
  FR_SIGHTYPE[FR_SIGHTYPE["FRDOCMDP"] = 2] = "FRDOCMDP";
})(FR_SIGHTYPE || (FR_SIGHTYPE = {}));
var FR_AnnotMsgType;
(function (FR_AnnotMsgType) {
  FR_AnnotMsgType[FR_AnnotMsgType["FR_AnnotOnLDown"] = 0] = "FR_AnnotOnLDown";
  FR_AnnotMsgType[FR_AnnotMsgType["FR_AnnotOnLUp"] = 1] = "FR_AnnotOnLUp";
  FR_AnnotMsgType[FR_AnnotMsgType["FR_AnnotOnRUp"] = 2] = "FR_AnnotOnRUp";
  FR_AnnotMsgType[FR_AnnotMsgType["FR_AnnotOnRDown"] = 3] = "FR_AnnotOnRDown";
})(FR_AnnotMsgType || (FR_AnnotMsgType = {}));
var FHTML_WEB_ERROR_CODE;
(function (FHTML_WEB_ERROR_CODE) {
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_NONE_ERROR"] = 0] = "FHTML_NONE_ERROR";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CANNOT_CONNECT"] = 1] = "FHTML_CANNOT_CONNECT";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CERTIFICATE_COMMON_NAME_IS_INCORRECT"] = 2] = "FHTML_CERTIFICATE_COMMON_NAME_IS_INCORRECT";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CERTIFICATE_EXPIRED"] = 3] = "FHTML_CERTIFICATE_EXPIRED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CERTIFICATE_IS_INVALID"] = 4] = "FHTML_CERTIFICATE_IS_INVALID";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CERTIFCATE_REVOKED"] = 5] = "FHTML_CERTIFCATE_REVOKED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CLIENT_CERTIFICATE_CONTAINS_ERRORS"] = 6] = "FHTML_CLIENT_CERTIFICATE_CONTAINS_ERRORS";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CONNECTION_ABORTED"] = 7] = "FHTML_CONNECTION_ABORTED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_CONNECTION_RESET"] = 8] = "FHTML_CONNECTION_RESET";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_DISCONNECTED"] = 9] = "FHTML_DISCONNECTED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_ERROR_HTTP_INVALID_SERVER_RESPONSE"] = 10] = "FHTML_ERROR_HTTP_INVALID_SERVER_RESPONSE";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_HOST_NAME_NOT_RESOLVED"] = 11] = "FHTML_HOST_NAME_NOT_RESOLVED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_OPERATION_CANCELED"] = 12] = "FHTML_OPERATION_CANCELED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_REDIRECT_FAILED"] = 13] = "FHTML_REDIRECT_FAILED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_SERVER_UREACHABLE"] = 14] = "FHTML_SERVER_UREACHABLE";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_TIMEOUT"] = 15] = "FHTML_TIMEOUT";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_UNEXPECTED_ERROR"] = 16] = "FHTML_UNEXPECTED_ERROR";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_UNKNOWN"] = 17] = "FHTML_UNKNOWN";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_VALID_AUTHENTICATION_CREDENTIALS_REQUIRED"] = 18] = "FHTML_VALID_AUTHENTICATION_CREDENTIALS_REQUIRED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_VALID_PROXY_AUTHENTICATION_REQUIRED"] = 19] = "FHTML_VALID_PROXY_AUTHENTICATION_REQUIRED";
  FHTML_WEB_ERROR_CODE[FHTML_WEB_ERROR_CODE["FHTML_UNKNOWN_ERROR"] = 20] = "FHTML_UNKNOWN_ERROR";
})(FHTML_WEB_ERROR_CODE || (FHTML_WEB_ERROR_CODE = {}));
var FRRibbonStyleButtonType;
(function (FRRibbonStyleButtonType) {
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_Button"] = 0] = "FR_RibbonStyle_Button";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_Edit"] = 1] = "FR_RibbonStyle_Edit";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_CheckBox"] = 2] = "FR_RibbonStyle_CheckBox";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_RadioBox"] = 3] = "FR_RibbonStyle_RadioBox";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_MenuButton"] = 4] = "FR_RibbonStyle_MenuButton";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_SliderCtrl"] = 5] = "FR_RibbonStyle_SliderCtrl";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_LinkButton"] = 6] = "FR_RibbonStyle_LinkButton";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_ComboGalleryCtrl"] = 7] = "FR_RibbonStyle_ComboGalleryCtrl";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_GalleryCtrl"] = 8] = "FR_RibbonStyle_GalleryCtrl";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_Static"] = 9] = "FR_RibbonStyle_Static";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_ListBox"] = 10] = "FR_RibbonStyle_ListBox";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_ColorButton"] = 11] = "FR_RibbonStyle_ColorButton";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_ComboBox"] = 12] = "FR_RibbonStyle_ComboBox";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_FontComboBox"] = 13] = "FR_RibbonStyle_FontComboBox";
  FRRibbonStyleButtonType[FRRibbonStyleButtonType["FR_RibbonStyle_SpinBtn"] = 14] = "FR_RibbonStyle_SpinBtn";
})(FRRibbonStyleButtonType || (FRRibbonStyleButtonType = {}));
var FRRibbonStyleImageSide;
(function (FRRibbonStyleImageSide) {
  FRRibbonStyleImageSide[FRRibbonStyleImageSide["FR_RibbonStyle_LeftImage"] = 0] = "FR_RibbonStyle_LeftImage";
  FRRibbonStyleImageSide[FRRibbonStyleImageSide["FR_RibbonStyle_RightImage"] = 1] = "FR_RibbonStyle_RightImage";
  FRRibbonStyleImageSide[FRRibbonStyleImageSide["FR_RibbonStyle_TopImage"] = 2] = "FR_RibbonStyle_TopImage";
})(FRRibbonStyleImageSide || (FRRibbonStyleImageSide = {}));
var FRRibbonStyleFlatType;
(function (FRRibbonStyleFlatType) {
  FRRibbonStyleFlatType[FRRibbonStyleFlatType["FR_RibbonStyle_FlatType_3D"] = 0] = "FR_RibbonStyle_FlatType_3D";
  FRRibbonStyleFlatType[FRRibbonStyleFlatType["FR_RibbonStyle_FlatType_Flat"] = 1] = "FR_RibbonStyle_FlatType_Flat";
  FRRibbonStyleFlatType[FRRibbonStyleFlatType["FR_RibbonStyle_FlatType_NoBorders"] = 2] = "FR_RibbonStyle_FlatType_NoBorders";
})(FRRibbonStyleFlatType || (FRRibbonStyleFlatType = {}));
var FRStatusBarLocation;
(function (FRStatusBarLocation) {
  FRStatusBarLocation[FRStatusBarLocation["FR_STATUSBAR_LOCATION_LEFT"] = 0] = "FR_STATUSBAR_LOCATION_LEFT";
  FRStatusBarLocation[FRStatusBarLocation["FR_STATUSBAR_LOCATION_CENTER"] = 1] = "FR_STATUSBAR_LOCATION_CENTER";
  FRStatusBarLocation[FRStatusBarLocation["FR_STATUSBAR_LOCATION_RIGHT"] = 2] = "FR_STATUSBAR_LOCATION_RIGHT";
})(FRStatusBarLocation || (FRStatusBarLocation = {}));
var FRFORMAT_ALIGN;
(function (FRFORMAT_ALIGN) {
  FRFORMAT_ALIGN[FRFORMAT_ALIGN["FRFORMAT_ALIGN_LEFT"] = 0] = "FRFORMAT_ALIGN_LEFT";
  FRFORMAT_ALIGN[FRFORMAT_ALIGN["FRFORMAT_ALIGN_CENTER"] = 1] = "FRFORMAT_ALIGN_CENTER";
  FRFORMAT_ALIGN[FRFORMAT_ALIGN["FRFORMAT_ALIGN_RIGHT"] = 2] = "FRFORMAT_ALIGN_RIGHT";
  FRFORMAT_ALIGN[FRFORMAT_ALIGN["FRFORMAT_ALIGN_JUSTIFY"] = 3] = "FRFORMAT_ALIGN_JUSTIFY";
})(FRFORMAT_ALIGN || (FRFORMAT_ALIGN = {}));
var FRFormatToolArrangeInfo;
(function (FRFormatToolArrangeInfo) {
  FRFormatToolArrangeInfo[FRFormatToolArrangeInfo["FRFormatToolArrangeInfo_ALIGN"] = 0] = "FRFormatToolArrangeInfo_ALIGN";
  FRFormatToolArrangeInfo[FRFormatToolArrangeInfo["FRFormatToolArrangeInfo_CENTER"] = 1] = "FRFormatToolArrangeInfo_CENTER";
  FRFormatToolArrangeInfo[FRFormatToolArrangeInfo["FRFormatToolArrangeInfo_DISTRIBUTE"] = 2] = "FRFormatToolArrangeInfo_DISTRIBUTE";
})(FRFormatToolArrangeInfo || (FRFormatToolArrangeInfo = {}));
var FRFormatToolArrangeAlignInfo;
(function (FRFormatToolArrangeAlignInfo) {
  FRFormatToolArrangeAlignInfo[FRFormatToolArrangeAlignInfo["FRFormatToolArrangeAlignInfo_LEFT"] = 0] = "FRFormatToolArrangeAlignInfo_LEFT";
  FRFormatToolArrangeAlignInfo[FRFormatToolArrangeAlignInfo["FRFormatToolArrangeAlignInfo_RIGHT"] = 1] = "FRFormatToolArrangeAlignInfo_RIGHT";
  FRFormatToolArrangeAlignInfo[FRFormatToolArrangeAlignInfo["FRFormatToolArrangeAlignInfo_TOP"] = 2] = "FRFormatToolArrangeAlignInfo_TOP";
  FRFormatToolArrangeAlignInfo[FRFormatToolArrangeAlignInfo["FRFormatToolArrangeAlignInfo_BOTTOM"] = 3] = "FRFormatToolArrangeAlignInfo_BOTTOM";
  FRFormatToolArrangeAlignInfo[FRFormatToolArrangeAlignInfo["FRFormatToolArrangeAlignInfo_VER"] = 4] = "FRFormatToolArrangeAlignInfo_VER";
  FRFormatToolArrangeAlignInfo[FRFormatToolArrangeAlignInfo["FRFormatToolArrangeAlignInfo_HOR"] = 5] = "FRFormatToolArrangeAlignInfo_HOR";
})(FRFormatToolArrangeAlignInfo || (FRFormatToolArrangeAlignInfo = {}));
var FRFormatToolArrangeCenterInfo;
(function (FRFormatToolArrangeCenterInfo) {
  FRFormatToolArrangeCenterInfo[FRFormatToolArrangeCenterInfo["FRFormatToolArrangeCenterInfo_VER"] = 0] = "FRFormatToolArrangeCenterInfo_VER";
  FRFormatToolArrangeCenterInfo[FRFormatToolArrangeCenterInfo["FRFormatToolArrangeCenterInfo_HOR"] = 1] = "FRFormatToolArrangeCenterInfo_HOR";
  FRFormatToolArrangeCenterInfo[FRFormatToolArrangeCenterInfo["FRFormatToolArrangeCenterInfo_BOTH"] = 2] = "FRFormatToolArrangeCenterInfo_BOTH";
})(FRFormatToolArrangeCenterInfo || (FRFormatToolArrangeCenterInfo = {}));
var FRFormatToolArrangeDistributeInfo;
(function (FRFormatToolArrangeDistributeInfo) {
  FRFormatToolArrangeDistributeInfo[FRFormatToolArrangeDistributeInfo["FRFormatToolArrangeDistributeInfo_VER"] = 0] = "FRFormatToolArrangeDistributeInfo_VER";
  FRFormatToolArrangeDistributeInfo[FRFormatToolArrangeDistributeInfo["FRFormatToolArrangeDistributeInfo_HOR"] = 1] = "FRFormatToolArrangeDistributeInfo_HOR";
})(FRFormatToolArrangeDistributeInfo || (FRFormatToolArrangeDistributeInfo = {}));
var FRFormatToolWritingDirection;
(function (FRFormatToolWritingDirection) {
  FRFormatToolWritingDirection[FRFormatToolWritingDirection["FR_LEFT_TO_RIGHT"] = 0] = "FR_LEFT_TO_RIGHT";
  FRFormatToolWritingDirection[FRFormatToolWritingDirection["FR_RIGHT_TO_LEFT"] = 1] = "FR_RIGHT_TO_LEFT";
})(FRFormatToolWritingDirection || (FRFormatToolWritingDirection = {}));
var FRFormatToolContextCategoryType;
(function (FRFormatToolContextCategoryType) {
  FRFormatToolContextCategoryType[FRFormatToolContextCategoryType["FR_CATOGRY_COMMENT_FORMAT"] = 0] = "FR_CATOGRY_COMMENT_FORMAT";
  FRFormatToolContextCategoryType[FRFormatToolContextCategoryType["FR_CATOGRY_OBJECT_FORMAT"] = 1] = "FR_CATOGRY_OBJECT_FORMAT";
  FRFormatToolContextCategoryType[FRFormatToolContextCategoryType["FR_CATOGRY_ARRANGE_FORMAT"] = 2] = "FR_CATOGRY_ARRANGE_FORMAT";
})(FRFormatToolContextCategoryType || (FRFormatToolContextCategoryType = {}));
var FRMSGIMPORTANCE;
(function (FRMSGIMPORTANCE) {
  FRMSGIMPORTANCE[FRMSGIMPORTANCE["FR_IMPO_LOW"] = 0] = "FR_IMPO_LOW";
  FRMSGIMPORTANCE[FRMSGIMPORTANCE["FR_IMPO_HIGH"] = 1] = "FR_IMPO_HIGH";
})(FRMSGIMPORTANCE || (FRMSGIMPORTANCE = {}));
var FRRibbonStyleTextAlignType;
(function (FRRibbonStyleTextAlignType) {
  FRRibbonStyleTextAlignType[FRRibbonStyleTextAlignType["FR_RibbonStyle_Align_Left"] = 0] = "FR_RibbonStyle_Align_Left";
  FRRibbonStyleTextAlignType[FRRibbonStyleTextAlignType["FR_RibbonStyle_Align_Right"] = 1] = "FR_RibbonStyle_Align_Right";
  FRRibbonStyleTextAlignType[FRRibbonStyleTextAlignType["FR_RibbonStyle_Align_Center"] = 2] = "FR_RibbonStyle_Align_Center";
})(FRRibbonStyleTextAlignType || (FRRibbonStyleTextAlignType = {}));
var FRMessageBarElementAlignment;
(function (FRMessageBarElementAlignment) {
  FRMessageBarElementAlignment[FRMessageBarElementAlignment["FR_ALIGN_LEFT"] = 1] = "FR_ALIGN_LEFT";
  FRMessageBarElementAlignment[FRMessageBarElementAlignment["FR_ALIGN_RIGHT"] = 2] = "FR_ALIGN_RIGHT";
})(FRMessageBarElementAlignment || (FRMessageBarElementAlignment = {}));
var FRMessageBarIconType;
(function (FRMessageBarIconType) {
  FRMessageBarIconType[FRMessageBarIconType["FR_MessageBar_ICON_USER"] = 0] = "FR_MessageBar_ICON_USER";
  FRMessageBarIconType[FRMessageBarIconType["FR_MessageBar_ICON_WARNING"] = 1] = "FR_MessageBar_ICON_WARNING";
  FRMessageBarIconType[FRMessageBarIconType["FR_MessageBar_ICON_OK"] = 2] = "FR_MessageBar_ICON_OK";
  FRMessageBarIconType[FRMessageBarIconType["FR_MessageBar_ICON_ERROR"] = 3] = "FR_MessageBar_ICON_ERROR";
})(FRMessageBarIconType || (FRMessageBarIconType = {}));
var FR_Ribbon_Element_Type;
(function (FR_Ribbon_Element_Type) {
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_NULL"] = -1] = "FR_RIBBON_NULL";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_BUTTON"] = 1] = "FR_RIBBON_BUTTON";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_LABEL"] = 2] = "FR_RIBBON_LABEL";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_EDIT"] = 3] = "FR_RIBBON_EDIT";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_CHECKBOX"] = 4] = "FR_RIBBON_CHECKBOX";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_RADIOBUTTON"] = 5] = "FR_RIBBON_RADIOBUTTON";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_COMBOBOX"] = 6] = "FR_RIBBON_COMBOBOX";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_FONTCOMBOBOX"] = 7] = "FR_RIBBON_FONTCOMBOBOX";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_PALETTEBUTTON"] = 8] = "FR_RIBBON_PALETTEBUTTON";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_LISTBUTTON"] = 9] = "FR_RIBBON_LISTBUTTON";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_COLORBUTTON"] = 10] = "FR_RIBBON_COLORBUTTON";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_SLIDER"] = 11] = "FR_RIBBON_SLIDER";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_SEPARATOR"] = 12] = "FR_RIBBON_SEPARATOR";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_BACKSTAGEITEM"] = 13] = "FR_RIBBON_BACKSTAGEITEM";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_HYPERLINK"] = 14] = "FR_RIBBON_HYPERLINK";
  FR_Ribbon_Element_Type[FR_Ribbon_Element_Type["FR_RIBBON_CAPTIONBUTTON"] = 15] = "FR_RIBBON_CAPTIONBUTTON";
})(FR_Ribbon_Element_Type || (FR_Ribbon_Element_Type = {}));
var FR_Common_Control_Type;
(function (FR_Common_Control_Type) {
  FR_Common_Control_Type[FR_Common_Control_Type["FR_CommonControl_UNKNOWN"] = -1] = "FR_CommonControl_UNKNOWN";
  FR_Common_Control_Type[FR_Common_Control_Type["FR_CommonControl_BUTTON"] = 0] = "FR_CommonControl_BUTTON";
  FR_Common_Control_Type[FR_Common_Control_Type["FR_CommonControl_DROPDOWNBUTTON"] = 1] = "FR_CommonControl_DROPDOWNBUTTON";
  FR_Common_Control_Type[FR_Common_Control_Type["FR_CommonControl_DROPDOWNACTION"] = 2] = "FR_CommonControl_DROPDOWNACTION";
  FR_Common_Control_Type[FR_Common_Control_Type["FR_CommonControl_CHECKBOX"] = 3] = "FR_CommonControl_CHECKBOX";
})(FR_Common_Control_Type || (FR_Common_Control_Type = {}));
var FR_RIBBON_LISTBUTTON_ALIGNEDSIDE;
(function (FR_RIBBON_LISTBUTTON_ALIGNEDSIDE) {
  FR_RIBBON_LISTBUTTON_ALIGNEDSIDE[FR_RIBBON_LISTBUTTON_ALIGNEDSIDE["FR_BUTTON_ALIGN_RIGHT"] = 0] = "FR_BUTTON_ALIGN_RIGHT";
  FR_RIBBON_LISTBUTTON_ALIGNEDSIDE[FR_RIBBON_LISTBUTTON_ALIGNEDSIDE["FR_BUTTON_ALIGN_UP"] = 1] = "FR_BUTTON_ALIGN_UP";
  FR_RIBBON_LISTBUTTON_ALIGNEDSIDE[FR_RIBBON_LISTBUTTON_ALIGNEDSIDE["FR_BUTTON_ALIGN_DOWN"] = 2] = "FR_BUTTON_ALIGN_DOWN";
})(FR_RIBBON_LISTBUTTON_ALIGNEDSIDE || (FR_RIBBON_LISTBUTTON_ALIGNEDSIDE = {}));
var FRRibbonBackStageViewItemXMoveType;
(function (FRRibbonBackStageViewItemXMoveType) {
  FRRibbonBackStageViewItemXMoveType[FRRibbonBackStageViewItemXMoveType["FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_NONE"] = 0] = "FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_NONE";
  FRRibbonBackStageViewItemXMoveType[FRRibbonBackStageViewItemXMoveType["FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_HORZ"] = 1] = "FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_HORZ";
  FRRibbonBackStageViewItemXMoveType[FRRibbonBackStageViewItemXMoveType["FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_VERT"] = 2] = "FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_VERT";
  FRRibbonBackStageViewItemXMoveType[FRRibbonBackStageViewItemXMoveType["FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_BOTH"] = 3] = "FRRIBBONBACKSTAGEVIEWITEM_MOVETYPE_BOTH";
})(FRRibbonBackStageViewItemXMoveType || (FRRibbonBackStageViewItemXMoveType = {}));
var FRRibbonBackStageViewItemXSizeType;
(function (FRRibbonBackStageViewItemXSizeType) {
  FRRibbonBackStageViewItemXSizeType[FRRibbonBackStageViewItemXSizeType["FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_NONE"] = 0] = "FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_NONE";
  FRRibbonBackStageViewItemXSizeType[FRRibbonBackStageViewItemXSizeType["FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_HORZ"] = 1] = "FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_HORZ";
  FRRibbonBackStageViewItemXSizeType[FRRibbonBackStageViewItemXSizeType["FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_VERT"] = 2] = "FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_VERT";
  FRRibbonBackStageViewItemXSizeType[FRRibbonBackStageViewItemXSizeType["FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_BOTH"] = 3] = "FRRIBBONBACKSTAGEVIEWITEM_SIZETYPE_BOTH";
})(FRRibbonBackStageViewItemXSizeType || (FRRibbonBackStageViewItemXSizeType = {}));
var FR_ButtonStyleSkinMode;
(function (FR_ButtonStyleSkinMode) {
  FR_ButtonStyleSkinMode[FR_ButtonStyleSkinMode["FR_skin_Default"] = 0] = "FR_skin_Default";
  FR_ButtonStyleSkinMode[FR_ButtonStyleSkinMode["FR_skin_Light"] = 1] = "FR_skin_Light";
})(FR_ButtonStyleSkinMode || (FR_ButtonStyleSkinMode = {}));
var FR_FLOATBAR_SIDE;
(function (FR_FLOATBAR_SIDE) {
  FR_FLOATBAR_SIDE[FR_FLOATBAR_SIDE["FR_FLOATBAR_SIDE_NONE"] = 0] = "FR_FLOATBAR_SIDE_NONE";
  FR_FLOATBAR_SIDE[FR_FLOATBAR_SIDE["FR_FLOATBAR_SIDE_LEFT"] = 1] = "FR_FLOATBAR_SIDE_LEFT";
  FR_FLOATBAR_SIDE[FR_FLOATBAR_SIDE["FR_FLOATBAR_SIDE_RIGHT"] = 2] = "FR_FLOATBAR_SIDE_RIGHT";
})(FR_FLOATBAR_SIDE || (FR_FLOATBAR_SIDE = {}));
var FPD_LineCap;
(function (FPD_LineCap) {
  FPD_LineCap[FPD_LineCap["FPD_LineCapButt"] = 0] = "FPD_LineCapButt";
  FPD_LineCap[FPD_LineCap["FPD_LineCapRound"] = 1] = "FPD_LineCapRound";
  FPD_LineCap[FPD_LineCap["FPD_LineCapSquare"] = 2] = "FPD_LineCapSquare";
})(FPD_LineCap || (FPD_LineCap = {}));
var FPD_LineJoin;
(function (FPD_LineJoin) {
  FPD_LineJoin[FPD_LineJoin["FPD_LineJoinMiter"] = 0] = "FPD_LineJoinMiter";
  FPD_LineJoin[FPD_LineJoin["FPD_LineJoinRound"] = 1] = "FPD_LineJoinRound";
  FPD_LineJoin[FPD_LineJoin["FPD_LineJoinBevel"] = 2] = "FPD_LineJoinBevel";
})(FPD_LineJoin || (FPD_LineJoin = {}));
var FPD_MarkItemParamType;
(function (FPD_MarkItemParamType) {
  FPD_MarkItemParamType[FPD_MarkItemParamType["NoneItem"] = 0] = "NoneItem";
  FPD_MarkItemParamType[FPD_MarkItemParamType["PropertiesDict"] = 1] = "PropertiesDict";
  FPD_MarkItemParamType[FPD_MarkItemParamType["PropertiesArray"] = 2] = "PropertiesArray";
  FPD_MarkItemParamType[FPD_MarkItemParamType["DirectDict"] = 3] = "DirectDict";
  FPD_MarkItemParamType[FPD_MarkItemParamType["DirectArray"] = 4] = "DirectArray";
  FPD_MarkItemParamType[FPD_MarkItemParamType["MCID"] = 5] = "MCID";
})(FPD_MarkItemParamType || (FPD_MarkItemParamType = {}));
var FPD_CHARTYPE;
(function (FPD_CHARTYPE) {
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Unknown"] = 0] = "FPD_CHARTYPE_Unknown";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Tab"] = 2048] = "FPD_CHARTYPE_Tab";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Space"] = 4096] = "FPD_CHARTYPE_Space";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Control"] = 6144] = "FPD_CHARTYPE_Control";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Combination"] = 8192] = "FPD_CHARTYPE_Combination";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Numeric"] = 10240] = "FPD_CHARTYPE_Numeric";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Normal"] = 12288] = "FPD_CHARTYPE_Normal";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_ArabicAlef"] = 14336] = "FPD_CHARTYPE_ArabicAlef";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_ArabicSpecial"] = 16384] = "FPD_CHARTYPE_ArabicSpecial";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_ArabicDistortion"] = 18432] = "FPD_CHARTYPE_ArabicDistortion";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_ArabicNormal"] = 20480] = "FPD_CHARTYPE_ArabicNormal";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_ArabicForm"] = 22528] = "FPD_CHARTYPE_ArabicForm";
  FPD_CHARTYPE[FPD_CHARTYPE["FPD_CHARTYPE_Arabic"] = 24576] = "FPD_CHARTYPE_Arabic";
})(FPD_CHARTYPE || (FPD_CHARTYPE = {}));
var FPD_ProgressiveStatus;
(function (FPD_ProgressiveStatus) {
  FPD_ProgressiveStatus[FPD_ProgressiveStatus["FPD_Ready"] = 0] = "FPD_Ready";
  FPD_ProgressiveStatus[FPD_ProgressiveStatus["FPD_ToBeContinued"] = 1] = "FPD_ToBeContinued";
  FPD_ProgressiveStatus[FPD_ProgressiveStatus["FPD_Found"] = 2] = "FPD_Found";
  FPD_ProgressiveStatus[FPD_ProgressiveStatus["FPD_NotFound"] = 3] = "FPD_NotFound";
  FPD_ProgressiveStatus[FPD_ProgressiveStatus["FPD_Failed"] = 4] = "FPD_Failed";
  FPD_ProgressiveStatus[FPD_ProgressiveStatus["FPD_Done"] = 5] = "FPD_Done";
})(FPD_ProgressiveStatus || (FPD_ProgressiveStatus = {}));
var FPD_AFRelationship;
(function (FPD_AFRelationship) {
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_Unspecified"] = 0] = "FPD_AFRelationship_Unspecified";
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_Source"] = 1] = "FPD_AFRelationship_Source";
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_Data"] = 2] = "FPD_AFRelationship_Data";
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_Alternative"] = 3] = "FPD_AFRelationship_Alternative";
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_Supplement"] = 4] = "FPD_AFRelationship_Supplement";
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_EncryptedPayload"] = 5] = "FPD_AFRelationship_EncryptedPayload";
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_FormData"] = 6] = "FPD_AFRelationship_FormData";
  FPD_AFRelationship[FPD_AFRelationship["FPD_AFRelationship_Schema"] = 7] = "FPD_AFRelationship_Schema";
})(FPD_AFRelationship || (FPD_AFRelationship = {}));
var FPD_OCC_UsageType;
(function (FPD_OCC_UsageType) {
  FPD_OCC_UsageType[FPD_OCC_UsageType["View"] = 0] = "View";
  FPD_OCC_UsageType[FPD_OCC_UsageType["Design"] = 1] = "Design";
  FPD_OCC_UsageType[FPD_OCC_UsageType["Print"] = 2] = "Print";
  FPD_OCC_UsageType[FPD_OCC_UsageType["Export"] = 3] = "Export";
})(FPD_OCC_UsageType || (FPD_OCC_UsageType = {}));
var FPD_OCGState;
(function (FPD_OCGState) {
  FPD_OCGState[FPD_OCGState["ON"] = 0] = "ON";
  FPD_OCGState[FPD_OCGState["OFF"] = 1] = "OFF";
  FPD_OCGState[FPD_OCGState["Toggle"] = 2] = "Toggle";
})(FPD_OCGState || (FPD_OCGState = {}));
var FPD_ActionType;
(function (FPD_ActionType) {
  FPD_ActionType[FPD_ActionType["UnknownType"] = 0] = "UnknownType";
  FPD_ActionType[FPD_ActionType["GoTo"] = 1] = "GoTo";
  FPD_ActionType[FPD_ActionType["GoToR"] = 2] = "GoToR";
  FPD_ActionType[FPD_ActionType["GoToE"] = 3] = "GoToE";
  FPD_ActionType[FPD_ActionType["Launch"] = 4] = "Launch";
  FPD_ActionType[FPD_ActionType["Thread"] = 5] = "Thread";
  FPD_ActionType[FPD_ActionType["URI"] = 6] = "URI";
  FPD_ActionType[FPD_ActionType["Sound"] = 7] = "Sound";
  FPD_ActionType[FPD_ActionType["Movie"] = 8] = "Movie";
  FPD_ActionType[FPD_ActionType["Hide"] = 9] = "Hide";
  FPD_ActionType[FPD_ActionType["Named"] = 10] = "Named";
  FPD_ActionType[FPD_ActionType["SubmitForm"] = 11] = "SubmitForm";
  FPD_ActionType[FPD_ActionType["ResetForm"] = 12] = "ResetForm";
  FPD_ActionType[FPD_ActionType["ImportData"] = 13] = "ImportData";
  FPD_ActionType[FPD_ActionType["JavaScript"] = 14] = "JavaScript";
  FPD_ActionType[FPD_ActionType["SetOCGState"] = 15] = "SetOCGState";
  FPD_ActionType[FPD_ActionType["Rendition"] = 16] = "Rendition";
  FPD_ActionType[FPD_ActionType["Trans"] = 17] = "Trans";
  FPD_ActionType[FPD_ActionType["GoTo3DView"] = 18] = "GoTo3DView";
})(FPD_ActionType || (FPD_ActionType = {}));
var FPD_AActionType;
(function (FPD_AActionType) {
  FPD_AActionType[FPD_AActionType["CursorEnter"] = 0] = "CursorEnter";
  FPD_AActionType[FPD_AActionType["CursorExit"] = 1] = "CursorExit";
  FPD_AActionType[FPD_AActionType["ButtonDown"] = 2] = "ButtonDown";
  FPD_AActionType[FPD_AActionType["ButtonUp"] = 3] = "ButtonUp";
  FPD_AActionType[FPD_AActionType["GetInputFocus"] = 4] = "GetInputFocus";
  FPD_AActionType[FPD_AActionType["LoseInputFocus"] = 5] = "LoseInputFocus";
  FPD_AActionType[FPD_AActionType["PageOpen"] = 6] = "PageOpen";
  FPD_AActionType[FPD_AActionType["PageClose"] = 7] = "PageClose";
  FPD_AActionType[FPD_AActionType["PageVisible"] = 8] = "PageVisible";
  FPD_AActionType[FPD_AActionType["PageInvisible"] = 9] = "PageInvisible";
  FPD_AActionType[FPD_AActionType["OpenPage"] = 10] = "OpenPage";
  FPD_AActionType[FPD_AActionType["ClosePage"] = 11] = "ClosePage";
  FPD_AActionType[FPD_AActionType["KeyStroke"] = 12] = "KeyStroke";
  FPD_AActionType[FPD_AActionType["Format"] = 13] = "Format";
  FPD_AActionType[FPD_AActionType["Validate"] = 14] = "Validate";
  FPD_AActionType[FPD_AActionType["Calculate"] = 15] = "Calculate";
  FPD_AActionType[FPD_AActionType["CloseDocument"] = 16] = "CloseDocument";
  FPD_AActionType[FPD_AActionType["SaveDocument"] = 17] = "SaveDocument";
  FPD_AActionType[FPD_AActionType["DocumentSaved"] = 18] = "DocumentSaved";
  FPD_AActionType[FPD_AActionType["PrintDocument"] = 19] = "PrintDocument";
  FPD_AActionType[FPD_AActionType["DocumentPrinted"] = 20] = "DocumentPrinted";
})(FPD_AActionType || (FPD_AActionType = {}));
var FPD_AnnotAppearanceMode;
(function (FPD_AnnotAppearanceMode) {
  FPD_AnnotAppearanceMode[FPD_AnnotAppearanceMode["NormalAppearanceMode"] = 0] = "NormalAppearanceMode";
  FPD_AnnotAppearanceMode[FPD_AnnotAppearanceMode["RolloverAppearanceMode"] = 1] = "RolloverAppearanceMode";
  FPD_AnnotAppearanceMode[FPD_AnnotAppearanceMode["DownAppearanceMode"] = 2] = "DownAppearanceMode";
})(FPD_AnnotAppearanceMode || (FPD_AnnotAppearanceMode = {}));
var FPD_FormFieldType;
(function (FPD_FormFieldType) {
  FPD_FormFieldType[FPD_FormFieldType["FormField_Unknown"] = 0] = "FormField_Unknown";
  FPD_FormFieldType[FPD_FormFieldType["FormField_PushButton"] = 1] = "FormField_PushButton";
  FPD_FormFieldType[FPD_FormFieldType["FormField_RadioButton"] = 2] = "FormField_RadioButton";
  FPD_FormFieldType[FPD_FormFieldType["FormField_CheckBox"] = 3] = "FormField_CheckBox";
  FPD_FormFieldType[FPD_FormFieldType["FormField_TextField"] = 4] = "FormField_TextField";
  FPD_FormFieldType[FPD_FormFieldType["FormField_RichText"] = 5] = "FormField_RichText";
  FPD_FormFieldType[FPD_FormFieldType["FormField_File"] = 6] = "FormField_File";
  FPD_FormFieldType[FPD_FormFieldType["FormField_ListBox"] = 7] = "FormField_ListBox";
  FPD_FormFieldType[FPD_FormFieldType["FormField_ComboBox"] = 8] = "FormField_ComboBox";
  FPD_FormFieldType[FPD_FormFieldType["FormField_Sign"] = 9] = "FormField_Sign";
})(FPD_FormFieldType || (FPD_FormFieldType = {}));
var FPD_IconScaleMethod;
(function (FPD_IconScaleMethod) {
  FPD_IconScaleMethod[FPD_IconScaleMethod["IconScaleMethod_Always"] = 0] = "IconScaleMethod_Always";
  FPD_IconScaleMethod[FPD_IconScaleMethod["IconScaleMethod_Bigger"] = 1] = "IconScaleMethod_Bigger";
  FPD_IconScaleMethod[FPD_IconScaleMethod["IconScaleMethod_Smaller"] = 2] = "IconScaleMethod_Smaller";
  FPD_IconScaleMethod[FPD_IconScaleMethod["IconScaleMethod_Never"] = 3] = "IconScaleMethod_Never";
})(FPD_IconScaleMethod || (FPD_IconScaleMethod = {}));
var FPD_FormCtrlHighlightingMode;
(function (FPD_FormCtrlHighlightingMode) {
  FPD_FormCtrlHighlightingMode[FPD_FormCtrlHighlightingMode["FormCtrlHL_None"] = 0] = "FormCtrlHL_None";
  FPD_FormCtrlHighlightingMode[FPD_FormCtrlHighlightingMode["FormCtrlHL_Invert"] = 1] = "FormCtrlHL_Invert";
  FPD_FormCtrlHighlightingMode[FPD_FormCtrlHighlightingMode["FormCtrlHL_Outline"] = 2] = "FormCtrlHL_Outline";
  FPD_FormCtrlHighlightingMode[FPD_FormCtrlHighlightingMode["FormCtrlHL_Push"] = 3] = "FormCtrlHL_Push";
  FPD_FormCtrlHighlightingMode[FPD_FormCtrlHighlightingMode["FormCtrlHL_ToggleMode"] = 4] = "FormCtrlHL_ToggleMode";
})(FPD_FormCtrlHighlightingMode || (FPD_FormCtrlHighlightingMode = {}));
var FPD_MediaPermission;
(function (FPD_MediaPermission) {
  FPD_MediaPermission[FPD_MediaPermission["TempNever"] = 0] = "TempNever";
  FPD_MediaPermission[FPD_MediaPermission["TempExtract"] = 1] = "TempExtract";
  FPD_MediaPermission[FPD_MediaPermission["TempAccess"] = 2] = "TempAccess";
  FPD_MediaPermission[FPD_MediaPermission["TempAlways"] = 3] = "TempAlways";
})(FPD_MediaPermission || (FPD_MediaPermission = {}));
var FPD_MediaPlayParamType;
(function (FPD_MediaPlayParamType) {
  FPD_MediaPlayParamType[FPD_MediaPlayParamType["MustBeHonored"] = 0] = "MustBeHonored";
  FPD_MediaPlayParamType[FPD_MediaPlayParamType["BestEffort"] = 1] = "BestEffort";
})(FPD_MediaPlayParamType || (FPD_MediaPlayParamType = {}));
var FPD_MediaPlayerType;
(function (FPD_MediaPlayerType) {
  FPD_MediaPlayerType[FPD_MediaPlayerType["MustUsed"] = 0] = "MustUsed";
  FPD_MediaPlayerType[FPD_MediaPlayerType["Available"] = 1] = "Available";
  FPD_MediaPlayerType[FPD_MediaPlayerType["NotUsed"] = 2] = "NotUsed";
})(FPD_MediaPlayerType || (FPD_MediaPlayerType = {}));
var FPD_VRICreatedTimeType;
(function (FPD_VRICreatedTimeType) {
  FPD_VRICreatedTimeType[FPD_VRICreatedTimeType["FPDVRINone"] = 0] = "FPDVRINone";
  FPD_VRICreatedTimeType[FPD_VRICreatedTimeType["FPDVRIDate"] = 1] = "FPDVRIDate";
  FPD_VRICreatedTimeType[FPD_VRICreatedTimeType["FPDVRITimestamp"] = 2] = "FPDVRITimestamp";
  FPD_VRICreatedTimeType[FPD_VRICreatedTimeType["FPDVRIDateAndTimestamp"] = 3] = "FPDVRIDateAndTimestamp";
})(FPD_VRICreatedTimeType || (FPD_VRICreatedTimeType = {}));
var FPD_VERIFYTIMETYPE;
(function (FPD_VERIFYTIMETYPE) {
  FPD_VERIFYTIMETYPE[FPD_VERIFYTIMETYPE["FPDTIMETYPE_CURRENTTIME"] = 0] = "FPDTIMETYPE_CURRENTTIME";
  FPD_VERIFYTIMETYPE[FPD_VERIFYTIMETYPE["FPDTIMETYPE_SIGNTIME"] = 1] = "FPDTIMETYPE_SIGNTIME";
  FPD_VERIFYTIMETYPE[FPD_VERIFYTIMETYPE["FPDTIMETYPE_STAMPTIME"] = 2] = "FPDTIMETYPE_STAMPTIME";
  FPD_VERIFYTIMETYPE[FPD_VERIFYTIMETYPE["FPDTIMETYPE_VEROTIME"] = 3] = "FPDTIMETYPE_VEROTIME";
})(FPD_VERIFYTIMETYPE || (FPD_VERIFYTIMETYPE = {}));
var FPD_OCSPSTATUSTYPE;
(function (FPD_OCSPSTATUSTYPE) {
  FPD_OCSPSTATUSTYPE[FPD_OCSPSTATUSTYPE["FPDIN_DOC"] = 0] = "FPDIN_DOC";
  FPD_OCSPSTATUSTYPE[FPD_OCSPSTATUSTYPE["FPDIN_SIGNINFO"] = 1] = "FPDIN_SIGNINFO";
  FPD_OCSPSTATUSTYPE[FPD_OCSPSTATUSTYPE["FPDIN_CRLLOCAL"] = 2] = "FPDIN_CRLLOCAL";
  FPD_OCSPSTATUSTYPE[FPD_OCSPSTATUSTYPE["FPDIN_ONLINE"] = 3] = "FPDIN_ONLINE";
})(FPD_OCSPSTATUSTYPE || (FPD_OCSPSTATUSTYPE = {}));
var FPD_OCSPSTATUS;
(function (FPD_OCSPSTATUS) {
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_CERTSTATUS_NONE"] = 0] = "FPDOCSP_CERTSTATUS_NONE";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_SUCCESSFUL"] = 1] = "FPDOCSP_RESPONSE_STATUS_SUCCESSFUL";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_MALFORMEDREQUEST"] = 2] = "FPDOCSP_RESPONSE_STATUS_MALFORMEDREQUEST";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_INTERNALERROR"] = 3] = "FPDOCSP_RESPONSE_STATUS_INTERNALERROR";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_TRYLATER"] = 4] = "FPDOCSP_RESPONSE_STATUS_TRYLATER";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_SIGREQUIRED"] = 5] = "FPDOCSP_RESPONSE_STATUS_SIGREQUIRED";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_SELF"] = 6] = "FPDOCSP_RESPONSE_STATUS_SELF";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_CERTTIME"] = 7] = "FPDOCSP_RESPONSE_STATUS_CERTTIME";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_CRL_CERTTIME"] = 8] = "FPDOCSP_RESPONSE_STATUS_CRL_CERTTIME";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_UNAUTHORIZED"] = 9] = "FPDOCSP_RESPONSE_STATUS_UNAUTHORIZED";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_OCSPERROR"] = 10] = "FPDOCSP_RESPONSE_STATUS_OCSPERROR";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_CRLERROR"] = 11] = "FPDOCSP_RESPONSE_STATUS_CRLERROR";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_OCSPNOCHECK"] = 12] = "FPDOCSP_RESPONSE_STATUS_OCSPNOCHECK";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_NOCHAIN"] = 13] = "FPDOCSP_RESPONSE_STATUS_NOCHAIN";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_CERTSTATUS_NOOCSPORCRL"] = 14] = "FPDOCSP_CERTSTATUS_NOOCSPORCRL";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_CERTSTATUS_SIGNINVALID"] = 15] = "FPDOCSP_CERTSTATUS_SIGNINVALID";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_CERTSTATUS_TRUSTCHAIN"] = 16] = "FPDOCSP_CERTSTATUS_TRUSTCHAIN";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_CERTSTATUS_GOOD"] = 17] = "FPDOCSP_CERTSTATUS_GOOD";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_CERTSTATUS_REVOKED"] = 18] = "FPDOCSP_CERTSTATUS_REVOKED";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_CERTSTATUS_UNKNOWN"] = 19] = "FPDOCSP_CERTSTATUS_UNKNOWN";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDCRL_CERTSTATUS_GOOD"] = 20] = "FPDCRL_CERTSTATUS_GOOD";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDCRL_CERTSTATUS_REVOKED"] = 21] = "FPDCRL_CERTSTATUS_REVOKED";
  FPD_OCSPSTATUS[FPD_OCSPSTATUS["FPDOCSP_RESPONSE_STATUS_CHAINCERTTIME"] = 22] = "FPDOCSP_RESPONSE_STATUS_CHAINCERTTIME";
})(FPD_OCSPSTATUS || (FPD_OCSPSTATUS = {}));
var FPDOCSP_PROCESSTYPE;
(function (FPDOCSP_PROCESSTYPE) {
  FPDOCSP_PROCESSTYPE[FPDOCSP_PROCESSTYPE["FPDOCSP_OCSP"] = 0] = "FPDOCSP_OCSP";
  FPDOCSP_PROCESSTYPE[FPDOCSP_PROCESSTYPE["FPDOCSP_CRL"] = 1] = "FPDOCSP_CRL";
})(FPDOCSP_PROCESSTYPE || (FPDOCSP_PROCESSTYPE = {}));
var FPD_TIMETYPE;
(function (FPD_TIMETYPE) {
  FPD_TIMETYPE[FPD_TIMETYPE["FPDSPECIFY_TIME"] = 0] = "FPDSPECIFY_TIME";
  FPD_TIMETYPE[FPD_TIMETYPE["FPDCUR_TIME"] = 1] = "FPDCUR_TIME";
})(FPD_TIMETYPE || (FPD_TIMETYPE = {}));
var FPD_REOVACATIONTEXT;
(function (FPD_REOVACATIONTEXT) {
  FPD_REOVACATIONTEXT[FPD_REOVACATIONTEXT["FPDCHECK"] = 0] = "FPDCHECK";
  FPD_REOVACATIONTEXT[FPD_REOVACATIONTEXT["FPDDOWNLOADCRL"] = 1] = "FPDDOWNLOADCRL";
  FPD_REOVACATIONTEXT[FPD_REOVACATIONTEXT["FPDDOWNLOADOCSP"] = 2] = "FPDDOWNLOADOCSP";
})(FPD_REOVACATIONTEXT || (FPD_REOVACATIONTEXT = {}));
var FPD_ResponseType;
(function (FPD_ResponseType) {
  FPD_ResponseType[FPD_ResponseType["FPDNOT_SET"] = 0] = "FPDNOT_SET";
  FPD_ResponseType[FPD_ResponseType["FPDCRL"] = 1] = "FPDCRL";
  FPD_ResponseType[FPD_ResponseType["FPDOCSP"] = 2] = "FPDOCSP";
})(FPD_ResponseType || (FPD_ResponseType = {}));
var FPD_VerifyResult;
(function (FPD_VerifyResult) {
  FPD_VerifyResult[FPD_VerifyResult["FPDVERIFY_SUCCESS"] = 0] = "FPDVERIFY_SUCCESS";
  FPD_VerifyResult[FPD_VerifyResult["FPDNO_HANDLER"] = 1] = "FPDNO_HANDLER";
  FPD_VerifyResult[FPD_VerifyResult["FPDLOAD_SIG_FAILED"] = 2] = "FPDLOAD_SIG_FAILED";
  FPD_VerifyResult[FPD_VerifyResult["FPDALLOC_FAILED"] = 3] = "FPDALLOC_FAILED";
  FPD_VerifyResult[FPD_VerifyResult["FPDDTS_CHECK_FAILED"] = 4] = "FPDDTS_CHECK_FAILED";
  FPD_VerifyResult[FPD_VerifyResult["FPDSWITCH_VERSION_FAILED"] = 5] = "FPDSWITCH_VERSION_FAILED";
  FPD_VerifyResult[FPD_VerifyResult["FPDLOAD_DSS_FAILED"] = 6] = "FPDLOAD_DSS_FAILED";
  FPD_VerifyResult[FPD_VerifyResult["FPDLOAD_DTS_TIME_FAILED"] = 7] = "FPDLOAD_DTS_TIME_FAILED";
  FPD_VerifyResult[FPD_VerifyResult["FPDEMPTY_POINTER_ERROR"] = 8] = "FPDEMPTY_POINTER_ERROR";
  FPD_VerifyResult[FPD_VerifyResult["FPDVERIFY_MODE_NOT_SET"] = 9] = "FPDVERIFY_MODE_NOT_SET";
})(FPD_VerifyResult || (FPD_VerifyResult = {}));
var FPD_LTVState;
(function (FPD_LTVState) {
  FPD_LTVState[FPD_LTVState["FPDINACTIVE"] = 0] = "FPDINACTIVE";
  FPD_LTVState[FPD_LTVState["FPDLTV_ENABLE"] = 1] = "FPDLTV_ENABLE";
  FPD_LTVState[FPD_LTVState["FPDLTV_NOT_ENABLE"] = 2] = "FPDLTV_NOT_ENABLE";
})(FPD_LTVState || (FPD_LTVState = {}));
var FPD_SigTimeType;
(function (FPD_SigTimeType) {
  FPD_SigTimeType[FPD_SigTimeType["FPDSIG_CREATE_TIME"] = 0] = "FPDSIG_CREATE_TIME";
  FPD_SigTimeType[FPD_SigTimeType["FPDSIG_TST_TIME"] = 1] = "FPDSIG_TST_TIME";
  FPD_SigTimeType[FPD_SigTimeType["FPDCURRENT_TIME"] = 2] = "FPDCURRENT_TIME";
  FPD_SigTimeType[FPD_SigTimeType["FPDTU_TIME"] = 3] = "FPDTU_TIME";
})(FPD_SigTimeType || (FPD_SigTimeType = {}));
var FPD_VerifyMode;
(function (FPD_VerifyMode) {
  FPD_VerifyMode[FPD_VerifyMode["FPDMODE_ETSI"] = 0] = "FPDMODE_ETSI";
  FPD_VerifyMode[FPD_VerifyMode["FPDMODE_ACROBAT"] = 1] = "FPDMODE_ACROBAT";
})(FPD_VerifyMode || (FPD_VerifyMode = {}));
var FPD_RevocationReason;
(function (FPD_RevocationReason) {
  FPD_RevocationReason[FPD_RevocationReason["FPDNO_STATUS"] = -1] = "FPDNO_STATUS";
  FPD_RevocationReason[FPD_RevocationReason["FPDUNSPECIFIED"] = 0] = "FPDUNSPECIFIED";
  FPD_RevocationReason[FPD_RevocationReason["FPDKEY_COMPROMISE"] = 1] = "FPDKEY_COMPROMISE";
  FPD_RevocationReason[FPD_RevocationReason["FPDCA_COMPROMISE"] = 2] = "FPDCA_COMPROMISE";
  FPD_RevocationReason[FPD_RevocationReason["FPDAFFILIATION_CHANGED"] = 3] = "FPDAFFILIATION_CHANGED";
  FPD_RevocationReason[FPD_RevocationReason["FPDSUPERSEDED"] = 4] = "FPDSUPERSEDED";
  FPD_RevocationReason[FPD_RevocationReason["FPDCESSATION_OF_OPERATION"] = 5] = "FPDCESSATION_OF_OPERATION";
  FPD_RevocationReason[FPD_RevocationReason["FPDCERTIFICATE_HOLD"] = 6] = "FPDCERTIFICATE_HOLD";
  FPD_RevocationReason[FPD_RevocationReason["FPDREMOVE_FROM_CRL"] = 7] = "FPDREMOVE_FROM_CRL";
  FPD_RevocationReason[FPD_RevocationReason["FPDPRIVILEGE_WITH_DRAWN"] = 8] = "FPDPRIVILEGE_WITH_DRAWN";
  FPD_RevocationReason[FPD_RevocationReason["FPDAA_COMPROMISE"] = 9] = "FPDAA_COMPROMISE";
})(FPD_RevocationReason || (FPD_RevocationReason = {}));
var FPD_CertStatus;
(function (FPD_CertStatus) {
  FPD_CertStatus[FPD_CertStatus["FPDCERTSTATUS_GOOD"] = 0] = "FPDCERTSTATUS_GOOD";
  FPD_CertStatus[FPD_CertStatus["FPDCERTSTATUS_REVOKED"] = 1] = "FPDCERTSTATUS_REVOKED";
  FPD_CertStatus[FPD_CertStatus["FPDCERTSTATUS_EXPIRE"] = 2] = "FPDCERTSTATUS_EXPIRE";
  FPD_CertStatus[FPD_CertStatus["FPDCERTSTATUS_UNKNOWN"] = 3] = "FPDCERTSTATUS_UNKNOWN";
})(FPD_CertStatus || (FPD_CertStatus = {}));
var FPD_ResponseInfoLocation;
(function (FPD_ResponseInfoLocation) {
  FPD_ResponseInfoLocation[FPD_ResponseInfoLocation["FPDLOCATION_NOT_SET"] = 0] = "FPDLOCATION_NOT_SET";
  FPD_ResponseInfoLocation[FPD_ResponseInfoLocation["FPDLOCATION_DSS"] = 1] = "FPDLOCATION_DSS";
  FPD_ResponseInfoLocation[FPD_ResponseInfoLocation["FPDLOCATION_SIG"] = 2] = "FPDLOCATION_SIG";
  FPD_ResponseInfoLocation[FPD_ResponseInfoLocation["FPDLOCATION_ONLINE"] = 3] = "FPDLOCATION_ONLINE";
})(FPD_ResponseInfoLocation || (FPD_ResponseInfoLocation = {}));
var FPD_OBJECTTYPE;
(function (FPD_OBJECTTYPE) {
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_SIGN"] = 0] = "FPDSIGNOBJECT_SIGN";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_SIGNREEOR"] = 1] = "FPDSIGNOBJECT_SIGNREEOR";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_ANNOT"] = 2] = "FPDSIGNOBJECT_ANNOT";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_FORM"] = 3] = "FPDSIGNOBJECT_FORM";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_DOCFILE"] = 4] = "FPDSIGNOBJECT_DOCFILE";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_PAGE"] = 5] = "FPDSIGNOBJECT_PAGE";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_DOC"] = 6] = "FPDSIGNOBJECT_DOC";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_FILE"] = 7] = "FPDSIGNOBJECT_FILE";
  FPD_OBJECTTYPE[FPD_OBJECTTYPE["FPDSIGNOBJECT_INCREMENTAL"] = 8] = "FPDSIGNOBJECT_INCREMENTAL";
})(FPD_OBJECTTYPE || (FPD_OBJECTTYPE = {}));
var FPD_MODIFYTYPE;
(function (FPD_MODIFYTYPE) {
  FPD_MODIFYTYPE[FPD_MODIFYTYPE["FPDSIGNMODIFY_DELETE"] = 0] = "FPDSIGNMODIFY_DELETE";
  FPD_MODIFYTYPE[FPD_MODIFYTYPE["FPDSIGNMODIFY_CREATE"] = 1] = "FPDSIGNMODIFY_CREATE";
  FPD_MODIFYTYPE[FPD_MODIFYTYPE["FPDSIGNMODIFY_EDIT"] = 2] = "FPDSIGNMODIFY_EDIT";
  FPD_MODIFYTYPE[FPD_MODIFYTYPE["FPDSIGNMODIFY_PROPERTY"] = 3] = "FPDSIGNMODIFY_PROPERTY";
  FPD_MODIFYTYPE[FPD_MODIFYTYPE["FPDSIGNMODIFY_MISCELLANESOUS"] = 4] = "FPDSIGNMODIFY_MISCELLANESOUS";
  FPD_MODIFYTYPE[FPD_MODIFYTYPE["FPDSIGNMODIFY_XFA"] = 5] = "FPDSIGNMODIFY_XFA";
  FPD_MODIFYTYPE[FPD_MODIFYTYPE["FPDSIGNMODIFY_INCREMENTALJUMP"] = 6] = "FPDSIGNMODIFY_INCREMENTALJUMP";
})(FPD_MODIFYTYPE || (FPD_MODIFYTYPE = {}));
var FPD_CHECKRESULT;
(function (FPD_CHECKRESULT) {
  FPD_CHECKRESULT[FPD_CHECKRESULT["FPDCHECK_NOMODIFY"] = 0] = "FPDCHECK_NOMODIFY";
  FPD_CHECKRESULT[FPD_CHECKRESULT["FPDCHECK_NOCANMODIFY"] = 1] = "FPDCHECK_NOCANMODIFY";
  FPD_CHECKRESULT[FPD_CHECKRESULT["FPDCHECK_CANMODIFY"] = 2] = "FPDCHECK_CANMODIFY";
  FPD_CHECKRESULT[FPD_CHECKRESULT["FPDCHECK_A"] = 3] = "FPDCHECK_A";
  FPD_CHECKRESULT[FPD_CHECKRESULT["FPDCHECK_ERROR"] = 4] = "FPDCHECK_ERROR";
  FPD_CHECKRESULT[FPD_CHECKRESULT["FPDCHECK_INCREMENTALERROR"] = 5] = "FPDCHECK_INCREMENTALERROR";
})(FPD_CHECKRESULT || (FPD_CHECKRESULT = {}));
var FPD_PERRESULT;
(function (FPD_PERRESULT) {
  FPD_PERRESULT[FPD_PERRESULT["FPDPER_NOMODIFY"] = 1] = "FPDPER_NOMODIFY";
  FPD_PERRESULT[FPD_PERRESULT["FPDPER_CANFILLINFORM"] = 2] = "FPDPER_CANFILLINFORM";
  FPD_PERRESULT[FPD_PERRESULT["FPDPER_CANANNOTANDFILL"] = 3] = "FPDPER_CANANNOTANDFILL";
  FPD_PERRESULT[FPD_PERRESULT["FPDPER_ALL"] = 4] = "FPDPER_ALL";
})(FPD_PERRESULT || (FPD_PERRESULT = {}));
var FPD_CertInfoType;
(function (FPD_CertInfoType) {
  FPD_CertInfoType[FPD_CertInfoType["FPDNone"] = 0] = "FPDNone";
  FPD_CertInfoType[FPD_CertInfoType["FPDCertPath"] = 1] = "FPDCertPath";
  FPD_CertInfoType[FPD_CertInfoType["FPDCertID"] = 2] = "FPDCertID";
  FPD_CertInfoType[FPD_CertInfoType["FPDCertFileStream"] = 3] = "FPDCertFileStream";
})(FPD_CertInfoType || (FPD_CertInfoType = {}));
var FPD_RequestResult;
(function (FPD_RequestResult) {
  FPD_RequestResult[FPD_RequestResult["FPDSUCCESS"] = 0] = "FPDSUCCESS";
  FPD_RequestResult[FPD_RequestResult["FPDERROR_CREATE_SOCKET"] = 1] = "FPDERROR_CREATE_SOCKET";
  FPD_RequestResult[FPD_RequestResult["FPDERROR_CONNECT_FAILED"] = 2] = "FPDERROR_CONNECT_FAILED";
  FPD_RequestResult[FPD_RequestResult["FPDERROR_SEND_DATA"] = 3] = "FPDERROR_SEND_DATA";
  FPD_RequestResult[FPD_RequestResult["FPDERROR_RECEIVE_DATA"] = 4] = "FPDERROR_RECEIVE_DATA";
  FPD_RequestResult[FPD_RequestResult["FPDERROR_REQUEST_FAILED"] = 5] = "FPDERROR_REQUEST_FAILED";
  FPD_RequestResult[FPD_RequestResult["FPDERROR_CANNOT_GET_DATA"] = 6] = "FPDERROR_CANNOT_GET_DATA";
  FPD_RequestResult[FPD_RequestResult["FPDERROR_OUT_OF_MEMORY"] = 7] = "FPDERROR_OUT_OF_MEMORY";
})(FPD_RequestResult || (FPD_RequestResult = {}));
var FPD_CHAINROOTVERITY_RESULT;
(function (FPD_CHAINROOTVERITY_RESULT) {
  FPD_CHAINROOTVERITY_RESULT[FPD_CHAINROOTVERITY_RESULT["FPDCHAINROOTVERITY_VALID"] = 0] = "FPDCHAINROOTVERITY_VALID";
  FPD_CHAINROOTVERITY_RESULT[FPD_CHAINROOTVERITY_RESULT["FPDCHAINROOTVERITY_INVALID"] = 1] = "FPDCHAINROOTVERITY_INVALID";
  FPD_CHAINROOTVERITY_RESULT[FPD_CHAINROOTVERITY_RESULT["FPDCHAINROOTVERITY_INVALID_MID"] = 2] = "FPDCHAINROOTVERITY_INVALID_MID";
  FPD_CHAINROOTVERITY_RESULT[FPD_CHAINROOTVERITY_RESULT["FPDCHAINROOTVERITY_INVALID_POLICYR"] = 3] = "FPDCHAINROOTVERITY_INVALID_POLICYR";
})(FPD_CHAINROOTVERITY_RESULT || (FPD_CHAINROOTVERITY_RESULT = {}));
var FPD_REVOCATION_TYPE;
(function (FPD_REVOCATION_TYPE) {
  FPD_REVOCATION_TYPE[FPD_REVOCATION_TYPE["FPDREVOCATION_NONE"] = 0] = "FPDREVOCATION_NONE";
  FPD_REVOCATION_TYPE[FPD_REVOCATION_TYPE["FPDREVOCATION_OK"] = 1] = "FPDREVOCATION_OK";
  FPD_REVOCATION_TYPE[FPD_REVOCATION_TYPE["FPDREVOCATION_REVOCATION"] = 2] = "FPDREVOCATION_REVOCATION";
  FPD_REVOCATION_TYPE[FPD_REVOCATION_TYPE["FPDREVOCATION_CHAIN_REVOCATION"] = 3] = "FPDREVOCATION_CHAIN_REVOCATION";
  FPD_REVOCATION_TYPE[FPD_REVOCATION_TYPE["FPDREVOCATION_UNKOWN"] = 4] = "FPDREVOCATION_UNKOWN";
})(FPD_REVOCATION_TYPE || (FPD_REVOCATION_TYPE = {}));
var FPD_LTVTYPE;
(function (FPD_LTVTYPE) {
  FPD_LTVTYPE[FPD_LTVTYPE["FPDLTV_ENABLED"] = 0] = "FPDLTV_ENABLED";
  FPD_LTVTYPE[FPD_LTVTYPE["FPDLTV_NOTENABLED"] = 1] = "FPDLTV_NOTENABLED";
  FPD_LTVTYPE[FPD_LTVTYPE["FPDLTV_NONE"] = 2] = "FPDLTV_NONE";
})(FPD_LTVTYPE || (FPD_LTVTYPE = {}));
var FPD_CADESLEVEL;
(function (FPD_CADESLEVEL) {
  FPD_CADESLEVEL[FPD_CADESLEVEL["FPDCADES_NONE"] = 0] = "FPDCADES_NONE";
  FPD_CADESLEVEL[FPD_CADESLEVEL["FPDCADES_B"] = 1] = "FPDCADES_B";
  FPD_CADESLEVEL[FPD_CADESLEVEL["FPDCADES_T"] = 2] = "FPDCADES_T";
  FPD_CADESLEVEL[FPD_CADESLEVEL["FPDCADES_LT"] = 3] = "FPDCADES_LT";
  FPD_CADESLEVEL[FPD_CADESLEVEL["FPDCADES_LTA"] = 4] = "FPDCADES_LTA";
})(FPD_CADESLEVEL || (FPD_CADESLEVEL = {}));
var FPD_CertificateStatus;
(function (FPD_CertificateStatus) {
  FPD_CertificateStatus[FPD_CertificateStatus["FPD_Valid"] = 0] = "FPD_Valid";
  FPD_CertificateStatus[FPD_CertificateStatus["FPD_Expired"] = 1] = "FPD_Expired";
  FPD_CertificateStatus[FPD_CertificateStatus["FPD_NotSupported"] = 2] = "FPD_NotSupported";
  FPD_CertificateStatus[FPD_CertificateStatus["FPD_ErrorData"] = 3] = "FPD_ErrorData";
  FPD_CertificateStatus[FPD_CertificateStatus["FPD_WrongPassword"] = 4] = "FPD_WrongPassword";
  FPD_CertificateStatus[FPD_CertificateStatus["FPD_WrongPath"] = 5] = "FPD_WrongPath";
})(FPD_CertificateStatus || (FPD_CertificateStatus = {}));
var FPD_DigestAlgorithm;
(function (FPD_DigestAlgorithm) {
  FPD_DigestAlgorithm[FPD_DigestAlgorithm["FPD_SHA1"] = 0] = "FPD_SHA1";
  FPD_DigestAlgorithm[FPD_DigestAlgorithm["FPD_SHA256"] = 1] = "FPD_SHA256";
  FPD_DigestAlgorithm[FPD_DigestAlgorithm["FPD_SHA384"] = 2] = "FPD_SHA384";
  FPD_DigestAlgorithm[FPD_DigestAlgorithm["FPD_SHA512"] = 3] = "FPD_SHA512";
  FPD_DigestAlgorithm[FPD_DigestAlgorithm["FPD_RIPEMD160"] = 4] = "FPD_RIPEMD160";
})(FPD_DigestAlgorithm || (FPD_DigestAlgorithm = {}));
var FPD_SignatureHandlerType;
(function (FPD_SignatureHandlerType) {
  FPD_SignatureHandlerType[FPD_SignatureHandlerType["FPD_PKCS7"] = 0] = "FPD_PKCS7";
  FPD_SignatureHandlerType[FPD_SignatureHandlerType["FPD_CADES"] = 1] = "FPD_CADES";
  FPD_SignatureHandlerType[FPD_SignatureHandlerType["FPD_RFC3161"] = 2] = "FPD_RFC3161";
})(FPD_SignatureHandlerType || (FPD_SignatureHandlerType = {}));
var FPD_DownLoadStatus;
(function (FPD_DownLoadStatus) {
  FPD_DownLoadStatus[FPD_DownLoadStatus["FPDDR_SUCCESS"] = 0] = "FPDDR_SUCCESS";
  FPD_DownLoadStatus[FPD_DownLoadStatus["FPDDR_FAILED"] = 1] = "FPDDR_FAILED";
})(FPD_DownLoadStatus || (FPD_DownLoadStatus = {}));
var FPDXFA_WIDGETORDER;
(function (FPDXFA_WIDGETORDER) {
  FPDXFA_WIDGETORDER[FPDXFA_WIDGETORDER["FPDXFA_WIDGETORDER_PreOrder"] = 0] = "FPDXFA_WIDGETORDER_PreOrder";
})(FPDXFA_WIDGETORDER || (FPDXFA_WIDGETORDER = {}));
var FPDXFA_ELEMENT;
(function (FPDXFA_ELEMENT) {
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Ps"] = 0] = "FPDXFA_ELEMENT_Ps";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_To"] = 1] = "FPDXFA_ELEMENT_To";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Ui"] = 2] = "FPDXFA_ELEMENT_Ui";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_RecordSet"] = 3] = "FPDXFA_ELEMENT_RecordSet";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SubsetBelow"] = 4] = "FPDXFA_ELEMENT_SubsetBelow";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SubformSet"] = 5] = "FPDXFA_ELEMENT_SubformSet";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AdobeExtensionLevel"] = 6] = "FPDXFA_ELEMENT_AdobeExtensionLevel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Typeface"] = 7] = "FPDXFA_ELEMENT_Typeface";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Break"] = 8] = "FPDXFA_ELEMENT_Break";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_FontInfo"] = 9] = "FPDXFA_ELEMENT_FontInfo";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NumberPattern"] = 10] = "FPDXFA_ELEMENT_NumberPattern";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DynamicRender"] = 11] = "FPDXFA_ELEMENT_DynamicRender";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PrintScaling"] = 12] = "FPDXFA_ELEMENT_PrintScaling";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_CheckButton"] = 13] = "FPDXFA_ELEMENT_CheckButton";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DatePatterns"] = 14] = "FPDXFA_ELEMENT_DatePatterns";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SourceSet"] = 15] = "FPDXFA_ELEMENT_SourceSet";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Amd"] = 16] = "FPDXFA_ELEMENT_Amd";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Arc"] = 17] = "FPDXFA_ELEMENT_Arc";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Day"] = 18] = "FPDXFA_ELEMENT_Day";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Era"] = 19] = "FPDXFA_ELEMENT_Era";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Jog"] = 20] = "FPDXFA_ELEMENT_Jog";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Log"] = 21] = "FPDXFA_ELEMENT_Log";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Map"] = 22] = "FPDXFA_ELEMENT_Map";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Mdp"] = 23] = "FPDXFA_ELEMENT_Mdp";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_BreakBefore"] = 24] = "FPDXFA_ELEMENT_BreakBefore";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Oid"] = 25] = "FPDXFA_ELEMENT_Oid";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Pcl"] = 26] = "FPDXFA_ELEMENT_Pcl";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Pdf"] = 27] = "FPDXFA_ELEMENT_Pdf";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Ref"] = 28] = "FPDXFA_ELEMENT_Ref";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Uri"] = 29] = "FPDXFA_ELEMENT_Uri";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Xdc"] = 30] = "FPDXFA_ELEMENT_Xdc";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Xdp"] = 31] = "FPDXFA_ELEMENT_Xdp";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Xfa"] = 32] = "FPDXFA_ELEMENT_Xfa";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Xsl"] = 33] = "FPDXFA_ELEMENT_Xsl";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Zpl"] = 34] = "FPDXFA_ELEMENT_Zpl";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Cache"] = 35] = "FPDXFA_ELEMENT_Cache";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Margin"] = 36] = "FPDXFA_ELEMENT_Margin";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_KeyUsage"] = 37] = "FPDXFA_ELEMENT_KeyUsage";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Exclude"] = 38] = "FPDXFA_ELEMENT_Exclude";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ChoiceList"] = 39] = "FPDXFA_ELEMENT_ChoiceList";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Level"] = 40] = "FPDXFA_ELEMENT_Level";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_LabelPrinter"] = 41] = "FPDXFA_ELEMENT_LabelPrinter";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_CalendarSymbols"] = 42] = "FPDXFA_ELEMENT_CalendarSymbols";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Para"] = 43] = "FPDXFA_ELEMENT_Para";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Part"] = 44] = "FPDXFA_ELEMENT_Part";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Pdfa"] = 45] = "FPDXFA_ELEMENT_Pdfa";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Filter"] = 46] = "FPDXFA_ELEMENT_Filter";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Present"] = 47] = "FPDXFA_ELEMENT_Present";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Pagination"] = 48] = "FPDXFA_ELEMENT_Pagination";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Encoding"] = 49] = "FPDXFA_ELEMENT_Encoding";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Event"] = 50] = "FPDXFA_ELEMENT_Event";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Whitespace"] = 51] = "FPDXFA_ELEMENT_Whitespace";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DefaultUi"] = 52] = "FPDXFA_ELEMENT_DefaultUi";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DataModel"] = 53] = "FPDXFA_ELEMENT_DataModel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Barcode"] = 54] = "FPDXFA_ELEMENT_Barcode";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_TimePattern"] = 55] = "FPDXFA_ELEMENT_TimePattern";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_BatchOutput"] = 56] = "FPDXFA_ELEMENT_BatchOutput";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Enforce"] = 57] = "FPDXFA_ELEMENT_Enforce";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_CurrencySymbols"] = 58] = "FPDXFA_ELEMENT_CurrencySymbols";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AddSilentPrint"] = 59] = "FPDXFA_ELEMENT_AddSilentPrint";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Rename"] = 60] = "FPDXFA_ELEMENT_Rename";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Operation"] = 61] = "FPDXFA_ELEMENT_Operation";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Typefaces"] = 62] = "FPDXFA_ELEMENT_Typefaces";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SubjectDNs"] = 63] = "FPDXFA_ELEMENT_SubjectDNs";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Issuers"] = 64] = "FPDXFA_ELEMENT_Issuers";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SignaturePseudoModel"] = 65] = "FPDXFA_ELEMENT_SignaturePseudoModel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_WsdlConnection"] = 66] = "FPDXFA_ELEMENT_WsdlConnection";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Debug"] = 67] = "FPDXFA_ELEMENT_Debug";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Delta"] = 68] = "FPDXFA_ELEMENT_Delta";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EraNames"] = 69] = "FPDXFA_ELEMENT_EraNames";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ModifyAnnots"] = 70] = "FPDXFA_ELEMENT_ModifyAnnots";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_StartNode"] = 71] = "FPDXFA_ELEMENT_StartNode";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Button"] = 72] = "FPDXFA_ELEMENT_Button";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Format"] = 73] = "FPDXFA_ELEMENT_Format";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Border"] = 74] = "FPDXFA_ELEMENT_Border";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Area"] = 75] = "FPDXFA_ELEMENT_Area";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Hyphenation"] = 76] = "FPDXFA_ELEMENT_Hyphenation";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Text"] = 77] = "FPDXFA_ELEMENT_Text";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Time"] = 78] = "FPDXFA_ELEMENT_Time";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Type"] = 79] = "FPDXFA_ELEMENT_Type";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Overprint"] = 80] = "FPDXFA_ELEMENT_Overprint";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Certificates"] = 81] = "FPDXFA_ELEMENT_Certificates";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EncryptionMethods"] = 82] = "FPDXFA_ELEMENT_EncryptionMethods";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SetProperty"] = 83] = "FPDXFA_ELEMENT_SetProperty";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PrinterName"] = 84] = "FPDXFA_ELEMENT_PrinterName";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_StartPage"] = 85] = "FPDXFA_ELEMENT_StartPage";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PageOffset"] = 86] = "FPDXFA_ELEMENT_PageOffset";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DateTime"] = 87] = "FPDXFA_ELEMENT_DateTime";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Comb"] = 88] = "FPDXFA_ELEMENT_Comb";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Pattern"] = 89] = "FPDXFA_ELEMENT_Pattern";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_IfEmpty"] = 90] = "FPDXFA_ELEMENT_IfEmpty";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SuppressBanner"] = 91] = "FPDXFA_ELEMENT_SuppressBanner";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_OutputBin"] = 92] = "FPDXFA_ELEMENT_OutputBin";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Field"] = 93] = "FPDXFA_ELEMENT_Field";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Agent"] = 94] = "FPDXFA_ELEMENT_Agent";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_OutputXSL"] = 95] = "FPDXFA_ELEMENT_OutputXSL";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AdjustData"] = 96] = "FPDXFA_ELEMENT_AdjustData";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AutoSave"] = 97] = "FPDXFA_ELEMENT_AutoSave";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ContentArea"] = 98] = "FPDXFA_ELEMENT_ContentArea";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EventPseudoModel"] = 99] = "FPDXFA_ELEMENT_EventPseudoModel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_WsdlAddress"] = 100] = "FPDXFA_ELEMENT_WsdlAddress";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Solid"] = 101] = "FPDXFA_ELEMENT_Solid";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DateTimeSymbols"] = 102] = "FPDXFA_ELEMENT_DateTimeSymbols";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EncryptionLevel"] = 103] = "FPDXFA_ELEMENT_EncryptionLevel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Edge"] = 104] = "FPDXFA_ELEMENT_Edge";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDFPDXFA_ELEMENT_Stipple"] = 105] = "FPDFPDXFA_ELEMENT_Stipple";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Attributes"] = 106] = "FPDXFA_ELEMENT_Attributes";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_VersionControl"] = 107] = "FPDXFA_ELEMENT_VersionControl";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Meridiem"] = 108] = "FPDXFA_ELEMENT_Meridiem";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ExclGroup"] = 109] = "FPDXFA_ELEMENT_ExclGroup";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ToolTip"] = 110] = "FPDXFA_ELEMENT_ToolTip";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Compress"] = 111] = "FPDXFA_ELEMENT_Compress";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Reason"] = 112] = "FPDXFA_ELEMENT_Reason";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Execute"] = 113] = "FPDXFA_ELEMENT_Execute";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ContentCopy"] = 114] = "FPDXFA_ELEMENT_ContentCopy";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DateTimeEdit"] = 115] = "FPDXFA_ELEMENT_DateTimeEdit";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Config"] = 116] = "FPDXFA_ELEMENT_Config";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Image"] = 117] = "FPDXFA_ELEMENT_Image";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SharpxHTML"] = 118] = "FPDXFA_ELEMENT_SharpxHTML";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NumberOfCopies"] = 119] = "FPDXFA_ELEMENT_NumberOfCopies";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_BehaviorOverride"] = 120] = "FPDXFA_ELEMENT_BehaviorOverride";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_TimeStamp"] = 121] = "FPDXFA_ELEMENT_TimeStamp";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Month"] = 122] = "FPDXFA_ELEMENT_Month";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ViewerPreferences"] = 123] = "FPDXFA_ELEMENT_ViewerPreferences";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ScriptModel"] = 124] = "FPDXFA_ELEMENT_ScriptModel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Decimal"] = 125] = "FPDXFA_ELEMENT_Decimal";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Subform"] = 126] = "FPDXFA_ELEMENT_Subform";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Select"] = 127] = "FPDXFA_ELEMENT_Select";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Window"] = 128] = "FPDXFA_ELEMENT_Window";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_LocaleSet"] = 129] = "FPDXFA_ELEMENT_LocaleSet";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Handler"] = 130] = "FPDXFA_ELEMENT_Handler";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_HostPseudoModel"] = 131] = "FPDXFA_ELEMENT_HostPseudoModel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Presence"] = 132] = "FPDXFA_ELEMENT_Presence";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Record"] = 133] = "FPDXFA_ELEMENT_Record";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Embed"] = 134] = "FPDXFA_ELEMENT_Embed";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Version"] = 135] = "FPDXFA_ELEMENT_Version";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Command"] = 136] = "FPDXFA_ELEMENT_Command";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Copies"] = 137] = "FPDXFA_ELEMENT_Copies";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Staple"] = 138] = "FPDXFA_ELEMENT_Staple";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SubmitFormat"] = 139] = "FPDXFA_ELEMENT_SubmitFormat";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Boolean"] = 140] = "FPDXFA_ELEMENT_Boolean";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Message"] = 141] = "FPDXFA_ELEMENT_Message";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Output"] = 142] = "FPDXFA_ELEMENT_Output";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PsMap"] = 143] = "FPDXFA_ELEMENT_PsMap";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ExcludeNS"] = 144] = "FPDXFA_ELEMENT_ExcludeNS";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Assist"] = 145] = "FPDXFA_ELEMENT_Assist";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Picture"] = 146] = "FPDXFA_ELEMENT_Picture";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Traversal"] = 147] = "FPDXFA_ELEMENT_Traversal";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SilentPrint"] = 148] = "FPDXFA_ELEMENT_SilentPrint";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_WebClient"] = 149] = "FPDXFA_ELEMENT_WebClient";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_LayoutPseudoModel"] = 150] = "FPDXFA_ELEMENT_LayoutPseudoModel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Producer"] = 151] = "FPDXFA_ELEMENT_Producer";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Corner"] = 152] = "FPDXFA_ELEMENT_Corner";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_MsgId"] = 153] = "FPDXFA_ELEMENT_MsgId";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Color"] = 154] = "FPDXFA_ELEMENT_Color";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Keep"] = 155] = "FPDXFA_ELEMENT_Keep";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Query"] = 156] = "FPDXFA_ELEMENT_Query";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Insert"] = 157] = "FPDXFA_ELEMENT_Insert";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ImageEdit"] = 158] = "FPDXFA_ELEMENT_ImageEdit";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Validate"] = 159] = "FPDXFA_ELEMENT_Validate";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DigestMethods"] = 160] = "FPDXFA_ELEMENT_DigestMethods";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NumberPatterns"] = 161] = "FPDXFA_ELEMENT_NumberPatterns";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PageSet"] = 162] = "FPDXFA_ELEMENT_PageSet";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Integer"] = 163] = "FPDXFA_ELEMENT_Integer";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SoapAddress"] = 164] = "FPDXFA_ELEMENT_SoapAddress";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Equate"] = 165] = "FPDXFA_ELEMENT_Equate";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_FormFieldFilling"] = 166] = "FPDXFA_ELEMENT_FormFieldFilling";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PageRange"] = 167] = "FPDXFA_ELEMENT_PageRange";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Update"] = 168] = "FPDXFA_ELEMENT_Update";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ConnectString"] = 169] = "FPDXFA_ELEMENT_ConnectString";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Mode"] = 170] = "FPDXFA_ELEMENT_Mode";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Layout"] = 171] = "FPDXFA_ELEMENT_Layout";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Sharpxml"] = 172] = "FPDXFA_ELEMENT_Sharpxml";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_XsdConnection"] = 173] = "FPDXFA_ELEMENT_XsdConnection";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Traverse"] = 174] = "FPDXFA_ELEMENT_Traverse";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Encodings"] = 175] = "FPDXFA_ELEMENT_Encodings";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Template"] = 176] = "FPDXFA_ELEMENT_Template";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Acrobat"] = 177] = "FPDXFA_ELEMENT_Acrobat";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ValidationMessaging"] = 178] = "FPDXFA_ELEMENT_ValidationMessaging";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Signing"] = 179] = "FPDXFA_ELEMENT_Signing";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DataWindow"] = 180] = "FPDXFA_ELEMENT_DataWindow";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Script"] = 181] = "FPDXFA_ELEMENT_Script";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AddViewerPreferences"] = 182] = "FPDXFA_ELEMENT_AddViewerPreferences";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AlwaysEmbed"] = 183] = "FPDXFA_ELEMENT_AlwaysEmbed";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PasswordEdit"] = 184] = "FPDXFA_ELEMENT_PasswordEdit";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NumericEdit"] = 185] = "FPDXFA_ELEMENT_NumericEdit";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EncryptionMethod"] = 186] = "FPDXFA_ELEMENT_EncryptionMethod";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Change"] = 187] = "FPDXFA_ELEMENT_Change";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PageArea"] = 188] = "FPDXFA_ELEMENT_PageArea";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SubmitUrl"] = 189] = "FPDXFA_ELEMENT_SubmitUrl";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Oids"] = 190] = "FPDXFA_ELEMENT_Oids";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Signature"] = 191] = "FPDXFA_ELEMENT_Signature";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ADBE_JSConsole"] = 192] = "FPDXFA_ELEMENT_ADBE_JSConsole";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Caption"] = 193] = "FPDXFA_ELEMENT_Caption";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Relevant"] = 194] = "FPDXFA_ELEMENT_Relevant";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_FlipLabel"] = 195] = "FPDXFA_ELEMENT_FlipLabel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ExData"] = 196] = "FPDXFA_ELEMENT_ExData";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DayNames"] = 197] = "FPDXFA_ELEMENT_DayNames";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SoapAction"] = 198] = "FPDXFA_ELEMENT_SoapAction";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DefaultTypeface"] = 199] = "FPDXFA_ELEMENT_DefaultTypeface";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Manifest"] = 200] = "FPDXFA_ELEMENT_Manifest";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Overflow"] = 201] = "FPDXFA_ELEMENT_Overflow";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Linear"] = 202] = "FPDXFA_ELEMENT_Linear";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_CurrencySymbol"] = 203] = "FPDXFA_ELEMENT_CurrencySymbol";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Delete"] = 204] = "FPDXFA_ELEMENT_Delete";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Deltas"] = 205] = "FPDXFA_ELEMENT_Deltas";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DigestMethod"] = 206] = "FPDXFA_ELEMENT_DigestMethod";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_InstanceManager"] = 207] = "FPDXFA_ELEMENT_InstanceManager";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EquateRange"] = 208] = "FPDXFA_ELEMENT_EquateRange";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Medium"] = 209] = "FPDXFA_ELEMENT_Medium";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_TextEdit"] = 210] = "FPDXFA_ELEMENT_TextEdit";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_TemplateCache"] = 211] = "FPDXFA_ELEMENT_TemplateCache";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_CompressObjectStream"] = 212] = "FPDXFA_ELEMENT_CompressObjectStream";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DataValue"] = 213] = "FPDXFA_ELEMENT_DataValue";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AccessibleContent"] = 214] = "FPDXFA_ELEMENT_AccessibleContent";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NodeList"] = 215] = "FPDXFA_ELEMENT_NodeList";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_IncludeXDPContent"] = 216] = "FPDXFA_ELEMENT_IncludeXDPContent";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_XmlConnection"] = 217] = "FPDXFA_ELEMENT_XmlConnection";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ValidateApprovalSignatures"] = 218] = "FPDXFA_ELEMENT_ValidateApprovalSignatures";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SignData"] = 219] = "FPDXFA_ELEMENT_SignData";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Packets"] = 220] = "FPDXFA_ELEMENT_Packets";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DatePattern"] = 221] = "FPDXFA_ELEMENT_DatePattern";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DuplexOption"] = 222] = "FPDXFA_ELEMENT_DuplexOption";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Base"] = 223] = "FPDXFA_ELEMENT_Base";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Bind"] = 224] = "FPDXFA_ELEMENT_Bind";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Compression"] = 225] = "FPDXFA_ELEMENT_Compression";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_User"] = 226] = "FPDXFA_ELEMENT_User";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Rectangle"] = 227] = "FPDXFA_ELEMENT_Rectangle";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EffectiveOutputPolicy"] = 228] = "FPDXFA_ELEMENT_EffectiveOutputPolicy";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ADBE_JSDebugger"] = 229] = "FPDXFA_ELEMENT_ADBE_JSDebugger";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Acrobat7"] = 230] = "FPDXFA_ELEMENT_Acrobat7";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Interactive"] = 231] = "FPDXFA_ELEMENT_Interactive";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Locale"] = 232] = "FPDXFA_ELEMENT_Locale";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_CurrentPage"] = 233] = "FPDXFA_ELEMENT_CurrentPage";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Data"] = 234] = "FPDXFA_ELEMENT_Data";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Date"] = 235] = "FPDXFA_ELEMENT_Date";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Desc"] = 236] = "FPDXFA_ELEMENT_Desc";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Encrypt"] = 237] = "FPDXFA_ELEMENT_Encrypt";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Draw"] = 238] = "FPDXFA_ELEMENT_Draw";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Encryption"] = 239] = "FPDXFA_ELEMENT_Encryption";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_MeridiemNames"] = 240] = "FPDXFA_ELEMENT_MeridiemNames";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Messaging"] = 241] = "FPDXFA_ELEMENT_Messaging";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Speak"] = 242] = "FPDXFA_ELEMENT_Speak";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DataGroup"] = 243] = "FPDXFA_ELEMENT_DataGroup";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Common"] = 244] = "FPDXFA_ELEMENT_Common";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Sharptext"] = 245] = "FPDXFA_ELEMENT_Sharptext";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PaginationOverride"] = 246] = "FPDXFA_ELEMENT_PaginationOverride";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Reasons"] = 247] = "FPDXFA_ELEMENT_Reasons";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SignatureProperties"] = 248] = "FPDXFA_ELEMENT_SignatureProperties";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Threshold"] = 249] = "FPDXFA_ELEMENT_Threshold";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_AppearanceFilter"] = 250] = "FPDXFA_ELEMENT_AppearanceFilter";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Fill"] = 251] = "FPDXFA_ELEMENT_Fill";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Font"] = 252] = "FPDXFA_ELEMENT_Font";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Form"] = 253] = "FPDXFA_ELEMENT_Form";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_MediumInfo"] = 254] = "FPDXFA_ELEMENT_MediumInfo";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Certificate"] = 255] = "FPDXFA_ELEMENT_Certificate";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Password"] = 256] = "FPDXFA_ELEMENT_Password";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_RunScripts"] = 257] = "FPDXFA_ELEMENT_RunScripts";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Trace"] = 258] = "FPDXFA_ELEMENT_Trace";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Float"] = 259] = "FPDXFA_ELEMENT_Float";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_RenderPolicy"] = 260] = "FPDXFA_ELEMENT_RenderPolicy";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_LogPseudoModel"] = 261] = "FPDXFA_ELEMENT_LogPseudoModel";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Destination"] = 262] = "FPDXFA_ELEMENT_Destination";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Value"] = 263] = "FPDXFA_ELEMENT_Value";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Bookend"] = 264] = "FPDXFA_ELEMENT_Bookend";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ExObject"] = 265] = "FPDXFA_ELEMENT_ExObject";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_OpenAction"] = 266] = "FPDXFA_ELEMENT_OpenAction";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NeverEmbed"] = 267] = "FPDXFA_ELEMENT_NeverEmbed";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_BindItems"] = 268] = "FPDXFA_ELEMENT_BindItems";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Calculate"] = 269] = "FPDXFA_ELEMENT_Calculate";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Print"] = 270] = "FPDXFA_ELEMENT_Print";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Extras"] = 271] = "FPDXFA_ELEMENT_Extras";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Proto"] = 272] = "FPDXFA_ELEMENT_Proto";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DSigData"] = 273] = "FPDXFA_ELEMENT_DSigData";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Creator"] = 274] = "FPDXFA_ELEMENT_Creator";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Connect"] = 275] = "FPDXFA_ELEMENT_Connect";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Permissions"] = 276] = "FPDXFA_ELEMENT_Permissions";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_ConnectionSet"] = 277] = "FPDXFA_ELEMENT_ConnectionSet";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Submit"] = 278] = "FPDXFA_ELEMENT_Submit";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Range"] = 279] = "FPDXFA_ELEMENT_Range";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Linearized"] = 280] = "FPDXFA_ELEMENT_Linearized";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Packet"] = 281] = "FPDXFA_ELEMENT_Packet";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_RootElement"] = 282] = "FPDXFA_ELEMENT_RootElement";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PlaintextMetadata"] = 283] = "FPDXFA_ELEMENT_PlaintextMetadata";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NumberSymbols"] = 284] = "FPDXFA_ELEMENT_NumberSymbols";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PrintHighQuality"] = 285] = "FPDXFA_ELEMENT_PrintHighQuality";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Driver"] = 286] = "FPDXFA_ELEMENT_Driver";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_IncrementalLoad"] = 287] = "FPDXFA_ELEMENT_IncrementalLoad";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_SubjectDN"] = 288] = "FPDXFA_ELEMENT_SubjectDN";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_CompressLogicalStructure"] = 289] = "FPDXFA_ELEMENT_CompressLogicalStructure";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_IncrementalMerge"] = 290] = "FPDXFA_ELEMENT_IncrementalMerge";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Radial"] = 291] = "FPDXFA_ELEMENT_Radial";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Variables"] = 292] = "FPDXFA_ELEMENT_Variables";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_TimePatterns"] = 293] = "FPDXFA_ELEMENT_TimePatterns";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_EffectiveInputPolicy"] = 294] = "FPDXFA_ELEMENT_EffectiveInputPolicy";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NameAttr"] = 295] = "FPDXFA_ELEMENT_NameAttr";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Conformance"] = 296] = "FPDXFA_ELEMENT_Conformance";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Transform"] = 297] = "FPDXFA_ELEMENT_Transform";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_LockDocument"] = 298] = "FPDXFA_ELEMENT_LockDocument";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_BreakAfter"] = 299] = "FPDXFA_ELEMENT_BreakAfter";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Line"] = 300] = "FPDXFA_ELEMENT_Line";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_List"] = 301] = "FPDXFA_ELEMENT_List";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Source"] = 302] = "FPDXFA_ELEMENT_Source";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Occur"] = 303] = "FPDXFA_ELEMENT_Occur";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_PickTrayByPDFSize"] = 304] = "FPDXFA_ELEMENT_PickTrayByPDFSize";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_MonthNames"] = 305] = "FPDXFA_ELEMENT_MonthNames";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Severity"] = 306] = "FPDXFA_ELEMENT_Severity";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_GroupParent"] = 307] = "FPDXFA_ELEMENT_GroupParent";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_DocumentAssembly"] = 308] = "FPDXFA_ELEMENT_DocumentAssembly";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_NumberSymbol"] = 309] = "FPDXFA_ELEMENT_NumberSymbol";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Tagged"] = 310] = "FPDXFA_ELEMENT_Tagged";
  FPDXFA_ELEMENT[FPDXFA_ELEMENT["FPDXFA_ELEMENT_Items"] = 311] = "FPDXFA_ELEMENT_Items";
})(FPDXFA_ELEMENT || (FPDXFA_ELEMENT = {}));
var FPDXFA_ATTRIBUTEENUM;
(function (FPDXFA_ATTRIBUTEENUM) {
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Asterisk"] = 0] = "FPDXFA_ATTRIBUTEENUM_Asterisk";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Slash"] = 1] = "FPDXFA_ATTRIBUTEENUM_Slash";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Backslash"] = 2] = "FPDXFA_ATTRIBUTEENUM_Backslash";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_On"] = 3] = "FPDXFA_ATTRIBUTEENUM_On";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Tb"] = 4] = "FPDXFA_ATTRIBUTEENUM_Tb";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Up"] = 5] = "FPDXFA_ATTRIBUTEENUM_Up";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MetaData"] = 6] = "FPDXFA_ATTRIBUTEENUM_MetaData";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Delegate"] = 7] = "FPDXFA_ATTRIBUTEENUM_Delegate";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PostSubmit"] = 8] = "FPDXFA_ATTRIBUTEENUM_PostSubmit";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Name"] = 9] = "FPDXFA_ATTRIBUTEENUM_Name";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Cross"] = 10] = "FPDXFA_ATTRIBUTEENUM_Cross";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Next"] = 11] = "FPDXFA_ATTRIBUTEENUM_Next";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_None"] = 12] = "FPDXFA_ATTRIBUTEENUM_None";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ShortEdge"] = 13] = "FPDXFA_ATTRIBUTEENUM_ShortEdge";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_1mod10_1mod11"] = 14] = "FPDXFA_ATTRIBUTEENUM_1mod10_1mod11";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Height"] = 15] = "FPDXFA_ATTRIBUTEENUM_Height";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_CrossDiagonal"] = 16] = "FPDXFA_ATTRIBUTEENUM_CrossDiagonal";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_All"] = 17] = "FPDXFA_ATTRIBUTEENUM_All";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Any"] = 18] = "FPDXFA_ATTRIBUTEENUM_Any";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ToRight"] = 19] = "FPDXFA_ATTRIBUTEENUM_ToRight";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MatchTemplate"] = 20] = "FPDXFA_ATTRIBUTEENUM_MatchTemplate";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Dpl"] = 21] = "FPDXFA_ATTRIBUTEENUM_Dpl";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Invisible"] = 22] = "FPDXFA_ATTRIBUTEENUM_Invisible";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Fit"] = 23] = "FPDXFA_ATTRIBUTEENUM_Fit";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Width"] = 24] = "FPDXFA_ATTRIBUTEENUM_Width";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PreSubmit"] = 25] = "FPDXFA_ATTRIBUTEENUM_PreSubmit";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Ipl"] = 26] = "FPDXFA_ATTRIBUTEENUM_Ipl";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_FlateCompress"] = 27] = "FPDXFA_ATTRIBUTEENUM_FlateCompress";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Med"] = 28] = "FPDXFA_ATTRIBUTEENUM_Med";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Odd"] = 29] = "FPDXFA_ATTRIBUTEENUM_Odd";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Off"] = 30] = "FPDXFA_ATTRIBUTEENUM_Off";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Pdf"] = 31] = "FPDXFA_ATTRIBUTEENUM_Pdf";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Row"] = 32] = "FPDXFA_ATTRIBUTEENUM_Row";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Top"] = 33] = "FPDXFA_ATTRIBUTEENUM_Top";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Xdp"] = 34] = "FPDXFA_ATTRIBUTEENUM_Xdp";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Xfd"] = 35] = "FPDXFA_ATTRIBUTEENUM_Xfd";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Xml"] = 36] = "FPDXFA_ATTRIBUTEENUM_Xml";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Zip"] = 37] = "FPDXFA_ATTRIBUTEENUM_Zip";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Zpl"] = 38] = "FPDXFA_ATTRIBUTEENUM_Zpl";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Visible"] = 39] = "FPDXFA_ATTRIBUTEENUM_Visible";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Exclude"] = 40] = "FPDXFA_ATTRIBUTEENUM_Exclude";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Filler"] = 41] = "FPDXFA_ATTRIBUTEENUM_Filler";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MouseEnter"] = 42] = "FPDXFA_ATTRIBUTEENUM_MouseEnter";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Pair"] = 43] = "FPDXFA_ATTRIBUTEENUM_Pair";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MoveLast"] = 44] = "FPDXFA_ATTRIBUTEENUM_MoveLast";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ExportAndImport"] = 45] = "FPDXFA_ATTRIBUTEENUM_ExportAndImport";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Push"] = 46] = "FPDXFA_ATTRIBUTEENUM_Push";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Portrait"] = 47] = "FPDXFA_ATTRIBUTEENUM_Portrait";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Default"] = 48] = "FPDXFA_ATTRIBUTEENUM_Default";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_StoredProc"] = 49] = "FPDXFA_ATTRIBUTEENUM_StoredProc";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_StayBOF"] = 50] = "FPDXFA_ATTRIBUTEENUM_StayBOF";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_StayEOF"] = 51] = "FPDXFA_ATTRIBUTEENUM_StayEOF";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PostPrint"] = 52] = "FPDXFA_ATTRIBUTEENUM_PostPrint";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_UsCarrier"] = 53] = "FPDXFA_ATTRIBUTEENUM_UsCarrier";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Right"] = 54] = "FPDXFA_ATTRIBUTEENUM_Right";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PreOpen"] = 55] = "FPDXFA_ATTRIBUTEENUM_PreOpen";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Actual"] = 56] = "FPDXFA_ATTRIBUTEENUM_Actual";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Rest"] = 57] = "FPDXFA_ATTRIBUTEENUM_Rest";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_TopCenter"] = 58] = "FPDXFA_ATTRIBUTEENUM_TopCenter";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_StandardSymbol"] = 59] = "FPDXFA_ATTRIBUTEENUM_StandardSymbol";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Initialize"] = 60] = "FPDXFA_ATTRIBUTEENUM_Initialize";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_JustifyAll"] = 61] = "FPDXFA_ATTRIBUTEENUM_JustifyAll";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Normal"] = 62] = "FPDXFA_ATTRIBUTEENUM_Normal";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Landscape"] = 63] = "FPDXFA_ATTRIBUTEENUM_Landscape";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_NonInteractive"] = 64] = "FPDXFA_ATTRIBUTEENUM_NonInteractive";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MouseExit"] = 65] = "FPDXFA_ATTRIBUTEENUM_MouseExit";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Minus"] = 66] = "FPDXFA_ATTRIBUTEENUM_Minus";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DiagonalLeft"] = 67] = "FPDXFA_ATTRIBUTEENUM_DiagonalLeft";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_SimplexPaginated"] = 68] = "FPDXFA_ATTRIBUTEENUM_SimplexPaginated";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Document"] = 69] = "FPDXFA_ATTRIBUTEENUM_Document";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Warning"] = 70] = "FPDXFA_ATTRIBUTEENUM_Warning";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Auto"] = 71] = "FPDXFA_ATTRIBUTEENUM_Auto";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Below"] = 72] = "FPDXFA_ATTRIBUTEENUM_Below";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_BottomLeft"] = 73] = "FPDXFA_ATTRIBUTEENUM_BottomLeft";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_BottomCenter"] = 74] = "FPDXFA_ATTRIBUTEENUM_BottomCenter";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Tcpl"] = 75] = "FPDXFA_ATTRIBUTEENUM_Tcpl";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Text"] = 76] = "FPDXFA_ATTRIBUTEENUM_Text";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Grouping"] = 77] = "FPDXFA_ATTRIBUTEENUM_Grouping";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_SecureSymbol"] = 78] = "FPDXFA_ATTRIBUTEENUM_SecureSymbol";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PreExecute"] = 79] = "FPDXFA_ATTRIBUTEENUM_PreExecute";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DocClose"] = 80] = "FPDXFA_ATTRIBUTEENUM_DocClose";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Keyset"] = 81] = "FPDXFA_ATTRIBUTEENUM_Keyset";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Vertical"] = 82] = "FPDXFA_ATTRIBUTEENUM_Vertical";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PreSave"] = 83] = "FPDXFA_ATTRIBUTEENUM_PreSave";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PreSign"] = 84] = "FPDXFA_ATTRIBUTEENUM_PreSign";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Bottom"] = 85] = "FPDXFA_ATTRIBUTEENUM_Bottom";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ToTop"] = 86] = "FPDXFA_ATTRIBUTEENUM_ToTop";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Verify"] = 87] = "FPDXFA_ATTRIBUTEENUM_Verify";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_First"] = 88] = "FPDXFA_ATTRIBUTEENUM_First";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ContentArea"] = 89] = "FPDXFA_ATTRIBUTEENUM_ContentArea";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Solid"] = 90] = "FPDXFA_ATTRIBUTEENUM_Solid";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Pessimistic"] = 91] = "FPDXFA_ATTRIBUTEENUM_Pessimistic";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DuplexPaginated"] = 92] = "FPDXFA_ATTRIBUTEENUM_DuplexPaginated";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Round"] = 93] = "FPDXFA_ATTRIBUTEENUM_Round";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Remerge"] = 94] = "FPDXFA_ATTRIBUTEENUM_Remerge";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Ordered"] = 95] = "FPDXFA_ATTRIBUTEENUM_Ordered";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Percent"] = 96] = "FPDXFA_ATTRIBUTEENUM_Percent";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Even"] = 97] = "FPDXFA_ATTRIBUTEENUM_Even";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Exit"] = 98] = "FPDXFA_ATTRIBUTEENUM_Exit";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ToolTip"] = 99] = "FPDXFA_ATTRIBUTEENUM_ToolTip";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_OrderedOccurrence"] = 100] = "FPDXFA_ATTRIBUTEENUM_OrderedOccurrence";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ReadOnly"] = 101] = "FPDXFA_ATTRIBUTEENUM_ReadOnly";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Currency"] = 102] = "FPDXFA_ATTRIBUTEENUM_Currency";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Concat"] = 103] = "FPDXFA_ATTRIBUTEENUM_Concat";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Thai"] = 104] = "FPDXFA_ATTRIBUTEENUM_Thai";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Embossed"] = 105] = "FPDXFA_ATTRIBUTEENUM_Embossed";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Formdata"] = 106] = "FPDXFA_ATTRIBUTEENUM_Formdata";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Greek"] = 107] = "FPDXFA_ATTRIBUTEENUM_Greek";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Decimal"] = 108] = "FPDXFA_ATTRIBUTEENUM_Decimal";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Select"] = 109] = "FPDXFA_ATTRIBUTEENUM_Select";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_LongEdge"] = 110] = "FPDXFA_ATTRIBUTEENUM_LongEdge";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Protected"] = 111] = "FPDXFA_ATTRIBUTEENUM_Protected";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_BottomRight"] = 112] = "FPDXFA_ATTRIBUTEENUM_BottomRight";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Zero"] = 113] = "FPDXFA_ATTRIBUTEENUM_Zero";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ForwardOnly"] = 114] = "FPDXFA_ATTRIBUTEENUM_ForwardOnly";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DocReady"] = 115] = "FPDXFA_ATTRIBUTEENUM_DocReady";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Hidden"] = 116] = "FPDXFA_ATTRIBUTEENUM_Hidden";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Include"] = 117] = "FPDXFA_ATTRIBUTEENUM_Include";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Dashed"] = 118] = "FPDXFA_ATTRIBUTEENUM_Dashed";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MultiSelect"] = 119] = "FPDXFA_ATTRIBUTEENUM_MultiSelect";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Inactive"] = 120] = "FPDXFA_ATTRIBUTEENUM_Inactive";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Embed"] = 121] = "FPDXFA_ATTRIBUTEENUM_Embed";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Static"] = 122] = "FPDXFA_ATTRIBUTEENUM_Static";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_OnEntry"] = 123] = "FPDXFA_ATTRIBUTEENUM_OnEntry";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Cyrillic"] = 124] = "FPDXFA_ATTRIBUTEENUM_Cyrillic";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_TopRight"] = 125] = "FPDXFA_ATTRIBUTEENUM_TopRight";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Hebrew"] = 126] = "FPDXFA_ATTRIBUTEENUM_Hebrew";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_TopLeft"] = 127] = "FPDXFA_ATTRIBUTEENUM_TopLeft";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Center"] = 128] = "FPDXFA_ATTRIBUTEENUM_Center";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MoveFirst"] = 129] = "FPDXFA_ATTRIBUTEENUM_MoveFirst";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Diamond"] = 130] = "FPDXFA_ATTRIBUTEENUM_Diamond";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PageOdd"] = 131] = "FPDXFA_ATTRIBUTEENUM_PageOdd";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_1mod10"] = 132] = "FPDXFA_ATTRIBUTEENUM_1mod10";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Korean"] = 133] = "FPDXFA_ATTRIBUTEENUM_Korean";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_AboveEmbedded"] = 134] = "FPDXFA_ATTRIBUTEENUM_AboveEmbedded";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ZipCompress"] = 135] = "FPDXFA_ATTRIBUTEENUM_ZipCompress";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Numeric"] = 136] = "FPDXFA_ATTRIBUTEENUM_Numeric";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Circle"] = 137] = "FPDXFA_ATTRIBUTEENUM_Circle";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ToBottom"] = 138] = "FPDXFA_ATTRIBUTEENUM_ToBottom";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Inverted"] = 139] = "FPDXFA_ATTRIBUTEENUM_Inverted";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Update"] = 140] = "FPDXFA_ATTRIBUTEENUM_Update";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Isoname"] = 141] = "FPDXFA_ATTRIBUTEENUM_Isoname";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Server"] = 142] = "FPDXFA_ATTRIBUTEENUM_Server";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Position"] = 143] = "FPDXFA_ATTRIBUTEENUM_Position";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MiddleCenter"] = 144] = "FPDXFA_ATTRIBUTEENUM_MiddleCenter";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Optional"] = 145] = "FPDXFA_ATTRIBUTEENUM_Optional";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_UsePrinterSetting"] = 146] = "FPDXFA_ATTRIBUTEENUM_UsePrinterSetting";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Outline"] = 147] = "FPDXFA_ATTRIBUTEENUM_Outline";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_IndexChange"] = 148] = "FPDXFA_ATTRIBUTEENUM_IndexChange";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Change"] = 149] = "FPDXFA_ATTRIBUTEENUM_Change";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PageArea"] = 150] = "FPDXFA_ATTRIBUTEENUM_PageArea";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Once"] = 151] = "FPDXFA_ATTRIBUTEENUM_Once";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Only"] = 152] = "FPDXFA_ATTRIBUTEENUM_Only";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Open"] = 153] = "FPDXFA_ATTRIBUTEENUM_Open";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Caption"] = 154] = "FPDXFA_ATTRIBUTEENUM_Caption";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Raised"] = 155] = "FPDXFA_ATTRIBUTEENUM_Raised";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Justify"] = 156] = "FPDXFA_ATTRIBUTEENUM_Justify";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_RefAndDescendants"] = 157] = "FPDXFA_ATTRIBUTEENUM_RefAndDescendants";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Short"] = 158] = "FPDXFA_ATTRIBUTEENUM_Short";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PageFront"] = 159] = "FPDXFA_ATTRIBUTEENUM_PageFront";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Monospace"] = 160] = "FPDXFA_ATTRIBUTEENUM_Monospace";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Middle"] = 161] = "FPDXFA_ATTRIBUTEENUM_Middle";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PrePrint"] = 162] = "FPDXFA_ATTRIBUTEENUM_PrePrint";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Always"] = 163] = "FPDXFA_ATTRIBUTEENUM_Always";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Unknown"] = 164] = "FPDXFA_ATTRIBUTEENUM_Unknown";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ToLeft"] = 165] = "FPDXFA_ATTRIBUTEENUM_ToLeft";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Above"] = 166] = "FPDXFA_ATTRIBUTEENUM_Above";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DashDot"] = 167] = "FPDXFA_ATTRIBUTEENUM_DashDot";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Gregorian"] = 168] = "FPDXFA_ATTRIBUTEENUM_Gregorian";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Roman"] = 169] = "FPDXFA_ATTRIBUTEENUM_Roman";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MouseDown"] = 170] = "FPDXFA_ATTRIBUTEENUM_MouseDown";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Symbol"] = 171] = "FPDXFA_ATTRIBUTEENUM_Symbol";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PageEven"] = 172] = "FPDXFA_ATTRIBUTEENUM_PageEven";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Sign"] = 173] = "FPDXFA_ATTRIBUTEENUM_Sign";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_AddNew"] = 174] = "FPDXFA_ATTRIBUTEENUM_AddNew";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Star"] = 175] = "FPDXFA_ATTRIBUTEENUM_Star";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Optimistic"] = 176] = "FPDXFA_ATTRIBUTEENUM_Optimistic";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Rl_tb"] = 177] = "FPDXFA_ATTRIBUTEENUM_Rl_tb";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MiddleRight"] = 178] = "FPDXFA_ATTRIBUTEENUM_MiddleRight";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Maintain"] = 179] = "FPDXFA_ATTRIBUTEENUM_Maintain";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Package"] = 180] = "FPDXFA_ATTRIBUTEENUM_Package";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_SimplifiedChinese"] = 181] = "FPDXFA_ATTRIBUTEENUM_SimplifiedChinese";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ToCenter"] = 182] = "FPDXFA_ATTRIBUTEENUM_ToCenter";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Back"] = 183] = "FPDXFA_ATTRIBUTEENUM_Back";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Unspecified"] = 184] = "FPDXFA_ATTRIBUTEENUM_Unspecified";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_BatchOptimistic"] = 185] = "FPDXFA_ATTRIBUTEENUM_BatchOptimistic";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Bold"] = 186] = "FPDXFA_ATTRIBUTEENUM_Bold";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Both"] = 187] = "FPDXFA_ATTRIBUTEENUM_Both";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Butt"] = 188] = "FPDXFA_ATTRIBUTEENUM_Butt";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Client"] = 189] = "FPDXFA_ATTRIBUTEENUM_Client";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_2mod10"] = 190] = "FPDXFA_ATTRIBUTEENUM_2mod10";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ImageOnly"] = 191] = "FPDXFA_ATTRIBUTEENUM_ImageOnly";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Horizontal"] = 192] = "FPDXFA_ATTRIBUTEENUM_Horizontal";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Dotted"] = 193] = "FPDXFA_ATTRIBUTEENUM_Dotted";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_UserControl"] = 194] = "FPDXFA_ATTRIBUTEENUM_UserControl";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DiagonalRight"] = 195] = "FPDXFA_ATTRIBUTEENUM_DiagonalRight";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ConsumeData"] = 196] = "FPDXFA_ATTRIBUTEENUM_ConsumeData";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Check"] = 197] = "FPDXFA_ATTRIBUTEENUM_Check";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Data"] = 198] = "FPDXFA_ATTRIBUTEENUM_Data";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Down"] = 199] = "FPDXFA_ATTRIBUTEENUM_Down";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_SansSerif"] = 200] = "FPDXFA_ATTRIBUTEENUM_SansSerif";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Inline"] = 201] = "FPDXFA_ATTRIBUTEENUM_Inline";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_TraditionalChinese"] = 202] = "FPDXFA_ATTRIBUTEENUM_TraditionalChinese";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Warn"] = 203] = "FPDXFA_ATTRIBUTEENUM_Warn";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_RefOnly"] = 204] = "FPDXFA_ATTRIBUTEENUM_RefOnly";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_InteractiveForms"] = 205] = "FPDXFA_ATTRIBUTEENUM_InteractiveForms";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Word"] = 206] = "FPDXFA_ATTRIBUTEENUM_Word";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Unordered"] = 207] = "FPDXFA_ATTRIBUTEENUM_Unordered";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Required"] = 208] = "FPDXFA_ATTRIBUTEENUM_Required";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ImportOnly"] = 209] = "FPDXFA_ATTRIBUTEENUM_ImportOnly";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_BelowEmbedded"] = 210] = "FPDXFA_ATTRIBUTEENUM_BelowEmbedded";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Japanese"] = 211] = "FPDXFA_ATTRIBUTEENUM_Japanese";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Full"] = 212] = "FPDXFA_ATTRIBUTEENUM_Full";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Rl_row"] = 213] = "FPDXFA_ATTRIBUTEENUM_Rl_row";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Vietnamese"] = 214] = "FPDXFA_ATTRIBUTEENUM_Vietnamese";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_EastEuropeanRoman"] = 215] = "FPDXFA_ATTRIBUTEENUM_EastEuropeanRoman";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MouseUp"] = 216] = "FPDXFA_ATTRIBUTEENUM_MouseUp";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ExportOnly"] = 217] = "FPDXFA_ATTRIBUTEENUM_ExportOnly";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Clear"] = 218] = "FPDXFA_ATTRIBUTEENUM_Clear";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Click"] = 219] = "FPDXFA_ATTRIBUTEENUM_Click";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Base64"] = 220] = "FPDXFA_ATTRIBUTEENUM_Base64";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Close"] = 221] = "FPDXFA_ATTRIBUTEENUM_Close";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Host"] = 222] = "FPDXFA_ATTRIBUTEENUM_Host";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Global"] = 223] = "FPDXFA_ATTRIBUTEENUM_Global";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Blank"] = 224] = "FPDXFA_ATTRIBUTEENUM_Blank";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Table"] = 225] = "FPDXFA_ATTRIBUTEENUM_Table";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Import"] = 226] = "FPDXFA_ATTRIBUTEENUM_Import";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Custom"] = 227] = "FPDXFA_ATTRIBUTEENUM_Custom";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_MiddleLeft"] = 228] = "FPDXFA_ATTRIBUTEENUM_MiddleLeft";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PostExecute"] = 229] = "FPDXFA_ATTRIBUTEENUM_PostExecute";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_NotBlank"] = 230] = "FPDXFA_ATTRIBUTEENUM_NotBlank";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Radix"] = 231] = "FPDXFA_ATTRIBUTEENUM_Radix";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PostOpen"] = 232] = "FPDXFA_ATTRIBUTEENUM_PostOpen";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Enter"] = 233] = "FPDXFA_ATTRIBUTEENUM_Enter";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Ignore"] = 234] = "FPDXFA_ATTRIBUTEENUM_Ignore";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Lr_tb"] = 235] = "FPDXFA_ATTRIBUTEENUM_Lr_tb";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Fantasy"] = 236] = "FPDXFA_ATTRIBUTEENUM_Fantasy";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Italic"] = 237] = "FPDXFA_ATTRIBUTEENUM_Italic";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Author"] = 238] = "FPDXFA_ATTRIBUTEENUM_Author";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ToEdge"] = 239] = "FPDXFA_ATTRIBUTEENUM_ToEdge";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Choice"] = 240] = "FPDXFA_ATTRIBUTEENUM_Choice";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Disabled"] = 241] = "FPDXFA_ATTRIBUTEENUM_Disabled";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_CrossHatch"] = 242] = "FPDXFA_ATTRIBUTEENUM_CrossHatch";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DataRef"] = 243] = "FPDXFA_ATTRIBUTEENUM_DataRef";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_DashDotDot"] = 244] = "FPDXFA_ATTRIBUTEENUM_DashDotDot";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Square"] = 245] = "FPDXFA_ATTRIBUTEENUM_Square";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Dynamic"] = 246] = "FPDXFA_ATTRIBUTEENUM_Dynamic";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Manual"] = 247] = "FPDXFA_ATTRIBUTEENUM_Manual";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Etched"] = 248] = "FPDXFA_ATTRIBUTEENUM_Etched";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_ValidationState"] = 249] = "FPDXFA_ATTRIBUTEENUM_ValidationState";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Cursive"] = 250] = "FPDXFA_ATTRIBUTEENUM_Cursive";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Last"] = 251] = "FPDXFA_ATTRIBUTEENUM_Last";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Left"] = 252] = "FPDXFA_ATTRIBUTEENUM_Left";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Link"] = 253] = "FPDXFA_ATTRIBUTEENUM_Link";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Long"] = 254] = "FPDXFA_ATTRIBUTEENUM_Long";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_InternationalCarrier"] = 255] = "FPDXFA_ATTRIBUTEENUM_InternationalCarrier";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PDF1_3"] = 256] = "FPDXFA_ATTRIBUTEENUM_PDF1_3";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PDF1_6"] = 257] = "FPDXFA_ATTRIBUTEENUM_PDF1_6";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Serif"] = 258] = "FPDXFA_ATTRIBUTEENUM_Serif";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PostSave"] = 259] = "FPDXFA_ATTRIBUTEENUM_PostSave";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Ready"] = 260] = "FPDXFA_ATTRIBUTEENUM_Ready";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_PostSign"] = 261] = "FPDXFA_ATTRIBUTEENUM_PostSign";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Arabic"] = 262] = "FPDXFA_ATTRIBUTEENUM_Arabic";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Error"] = 263] = "FPDXFA_ATTRIBUTEENUM_Error";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Urlencoded"] = 264] = "FPDXFA_ATTRIBUTEENUM_Urlencoded";
  FPDXFA_ATTRIBUTEENUM[FPDXFA_ATTRIBUTEENUM["FPDXFA_ATTRIBUTEENUM_Lowered"] = 265] = "FPDXFA_ATTRIBUTEENUM_Lowered";
})(FPDXFA_ATTRIBUTEENUM || (FPDXFA_ATTRIBUTEENUM = {}));
var FPDXFA_EVENTTYPE;
(function (FPDXFA_EVENTTYPE) {
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Click"] = 0] = "FPDXFA_EVENT_Click";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Change"] = 1] = "FPDXFA_EVENT_Change";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_DocClose"] = 2] = "FPDXFA_EVENT_DocClose";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_DocReady"] = 3] = "FPDXFA_EVENT_DocReady";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Enter"] = 4] = "FPDXFA_EVENT_Enter";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Exit"] = 5] = "FPDXFA_EVENT_Exit";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Full"] = 6] = "FPDXFA_EVENT_Full";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_IndexChange"] = 7] = "FPDXFA_EVENT_IndexChange";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Initialize"] = 8] = "FPDXFA_EVENT_Initialize";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_MouseDown"] = 9] = "FPDXFA_EVENT_MouseDown";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_MouseEnter"] = 10] = "FPDXFA_EVENT_MouseEnter";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_MouseExit"] = 11] = "FPDXFA_EVENT_MouseExit";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_MouseUp"] = 12] = "FPDXFA_EVENT_MouseUp";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PostExecute"] = 13] = "FPDXFA_EVENT_PostExecute";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PostOpen"] = 14] = "FPDXFA_EVENT_PostOpen";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PostPrint"] = 15] = "FPDXFA_EVENT_PostPrint";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PostSave"] = 16] = "FPDXFA_EVENT_PostSave";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PostSign"] = 17] = "FPDXFA_EVENT_PostSign";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PostSubmit"] = 18] = "FPDXFA_EVENT_PostSubmit";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PreExecute"] = 19] = "FPDXFA_EVENT_PreExecute";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PreOpen"] = 20] = "FPDXFA_EVENT_PreOpen";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PrePrint"] = 21] = "FPDXFA_EVENT_PrePrint";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PreSave"] = 22] = "FPDXFA_EVENT_PreSave";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PreSign"] = 23] = "FPDXFA_EVENT_PreSign";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_PreSubmit"] = 24] = "FPDXFA_EVENT_PreSubmit";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Ready"] = 25] = "FPDXFA_EVENT_Ready";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_InitCalculate"] = 26] = "FPDXFA_EVENT_InitCalculate";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_InitVariables"] = 27] = "FPDXFA_EVENT_InitVariables";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Calculate"] = 28] = "FPDXFA_EVENT_Calculate";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Validate"] = 29] = "FPDXFA_EVENT_Validate";
  FPDXFA_EVENTTYPE[FPDXFA_EVENTTYPE["FPDXFA_EVENT_Unknown"] = 30] = "FPDXFA_EVENT_Unknown";
})(FPDXFA_EVENTTYPE || (FPDXFA_EVENTTYPE = {}));
var FPD_TraverseCommand;
(function (FPD_TraverseCommand) {
  FPD_TraverseCommand[FPD_TraverseCommand["FPD_TraverseContinue"] = 0] = "FPD_TraverseContinue";
  FPD_TraverseCommand[FPD_TraverseCommand["FPD_TraverseSkipChildren"] = 1] = "FPD_TraverseSkipChildren";
  FPD_TraverseCommand[FPD_TraverseCommand["FPD_TraverseBreak"] = 2] = "FPD_TraverseBreak";
})(FPD_TraverseCommand || (FPD_TraverseCommand = {}));
var FPD_EntityType;
(function (FPD_EntityType) {
  FPD_EntityType[FPD_EntityType["FPD_EntityElement"] = 0] = "FPD_EntityElement";
  FPD_EntityType[FPD_EntityType["FPD_EntityMarkedContentSeq"] = 1] = "FPD_EntityMarkedContentSeq";
  FPD_EntityType[FPD_EntityType["FPD_EntityObject"] = 2] = "FPD_EntityObject";
})(FPD_EntityType || (FPD_EntityType = {}));
var FPD_StructElementInfo;
(function (FPD_StructElementInfo) {
  FPD_StructElementInfo[FPD_StructElementInfo["FPD_StructElementInfo_Title"] = 0] = "FPD_StructElementInfo_Title";
  FPD_StructElementInfo[FPD_StructElementInfo["FPD_StructElementInfo_Lang"] = 1] = "FPD_StructElementInfo_Lang";
  FPD_StructElementInfo[FPD_StructElementInfo["FPD_StructElementInfo_AltDesc"] = 2] = "FPD_StructElementInfo_AltDesc";
  FPD_StructElementInfo[FPD_StructElementInfo["FPD_StructElementInfo_ExpandedForm"] = 3] = "FPD_StructElementInfo_ExpandedForm";
  FPD_StructElementInfo[FPD_StructElementInfo["FPD_StructElementInfo_ActualText"] = 4] = "FPD_StructElementInfo_ActualText";
})(FPD_StructElementInfo || (FPD_StructElementInfo = {}));
var FPD_ObjectType;
(function (FPD_ObjectType) {
  FPD_ObjectType[FPD_ObjectType["FPD_ObjInvalid"] = 0] = "FPD_ObjInvalid";
  FPD_ObjectType[FPD_ObjectType["FPD_ObjImage"] = 1] = "FPD_ObjImage";
  FPD_ObjectType[FPD_ObjectType["FPD_ObjForm"] = 2] = "FPD_ObjForm";
  FPD_ObjectType[FPD_ObjectType["FPD_ObjAnnot"] = 3] = "FPD_ObjAnnot";
})(FPD_ObjectType || (FPD_ObjectType = {}));
var FPD_FINDTEMPLATETYPE;
(function (FPD_FINDTEMPLATETYPE) {
  FPD_FINDTEMPLATETYPE[FPD_FINDTEMPLATETYPE["FPD_FIND_VISIBLE"] = 0] = "FPD_FIND_VISIBLE";
  FPD_FINDTEMPLATETYPE[FPD_FINDTEMPLATETYPE["FPD_FIND_INVISIBLE"] = 1] = "FPD_FIND_INVISIBLE";
  FPD_FINDTEMPLATETYPE[FPD_FINDTEMPLATETYPE["FPD_FIND_ALL"] = 2] = "FPD_FIND_ALL";
})(FPD_FINDTEMPLATETYPE || (FPD_FINDTEMPLATETYPE = {}));
var FPD_EngineType;
(function (FPD_EngineType) {
  FPD_EngineType[FPD_EngineType["FPD_ENGINE_SKF"] = 0] = "FPD_ENGINE_SKF";
  FPD_EngineType[FPD_EngineType["FPD_ENGINE_PKCS11"] = 1] = "FPD_ENGINE_PKCS11";
})(FPD_EngineType || (FPD_EngineType = {}));
var FPD_FlattenCompression;
(function (FPD_FlattenCompression) {
  FPD_FlattenCompression[FPD_FlattenCompression["FPD_CCITTG3"] = 0] = "FPD_CCITTG3";
  FPD_FlattenCompression[FPD_FlattenCompression["FPD_CCITTG4"] = 1] = "FPD_CCITTG4";
  FPD_FlattenCompression[FPD_FlattenCompression["FPD_ZIP"] = 2] = "FPD_ZIP";
  FPD_FlattenCompression[FPD_FlattenCompression["FPD_RunLength"] = 3] = "FPD_RunLength";
  FPD_FlattenCompression[FPD_FlattenCompression["FPD_JPEG"] = 4] = "FPD_JPEG";
  FPD_FlattenCompression[FPD_FlattenCompression["FPD_JPEG2000"] = 5] = "FPD_JPEG2000";
})(FPD_FlattenCompression || (FPD_FlattenCompression = {}));
var FPD_FlattenQuality;
(function (FPD_FlattenQuality) {
  FPD_FlattenQuality[FPD_FlattenQuality["FPD_Minimum"] = 0] = "FPD_Minimum";
  FPD_FlattenQuality[FPD_FlattenQuality["FPD_Low"] = 1] = "FPD_Low";
  FPD_FlattenQuality[FPD_FlattenQuality["FPD_Medium"] = 2] = "FPD_Medium";
  FPD_FlattenQuality[FPD_FlattenQuality["FPD_Hight"] = 3] = "FPD_Hight";
  FPD_FlattenQuality[FPD_FlattenQuality["FPD_Maximum"] = 4] = "FPD_Maximum";
})(FPD_FlattenQuality || (FPD_FlattenQuality = {}));
var FPD_EXTRACT_STATE;
(function (FPD_EXTRACT_STATE) {
  FPD_EXTRACT_STATE[FPD_EXTRACT_STATE["FPD_EXTRACT_ERROR"] = 0] = "FPD_EXTRACT_ERROR";
  FPD_EXTRACT_STATE[FPD_EXTRACT_STATE["FPD_EXTRACT_SUCCESS"] = 1] = "FPD_EXTRACT_SUCCESS";
  FPD_EXTRACT_STATE[FPD_EXTRACT_STATE["FPD_EXTRACT_PASSWORD"] = 2] = "FPD_EXTRACT_PASSWORD";
  FPD_EXTRACT_STATE[FPD_EXTRACT_STATE["FPD_EXTRACT_CERT"] = 3] = "FPD_EXTRACT_CERT";
  FPD_EXTRACT_STATE[FPD_EXTRACT_STATE["FPD_EXTRACT_ACCESS"] = 4] = "FPD_EXTRACT_ACCESS";
  FPD_EXTRACT_STATE[FPD_EXTRACT_STATE["FPD_EXTRACT_SIGNATURE_CERTIFY"] = 5] = "FPD_EXTRACT_SIGNATURE_CERTIFY";
})(FPD_EXTRACT_STATE || (FPD_EXTRACT_STATE = {}));
var FPD_ColorSpaceAbbr;
(function (FPD_ColorSpaceAbbr) {
  FPD_ColorSpaceAbbr[FPD_ColorSpaceAbbr["FPD_BW"] = 0] = "FPD_BW";
  FPD_ColorSpaceAbbr[FPD_ColorSpaceAbbr["FPD_sGray"] = 1] = "FPD_sGray";
  FPD_ColorSpaceAbbr[FPD_ColorSpaceAbbr["FPD_sRGB"] = 2] = "FPD_sRGB";
  FPD_ColorSpaceAbbr[FPD_ColorSpaceAbbr["FPD_CMYK"] = 3] = "FPD_CMYK";
})(FPD_ColorSpaceAbbr || (FPD_ColorSpaceAbbr = {}));
var FPD_RenderingIntent;
(function (FPD_RenderingIntent) {
  FPD_RenderingIntent[FPD_RenderingIntent["FPD_Perceptual"] = 0] = "FPD_Perceptual";
  FPD_RenderingIntent[FPD_RenderingIntent["FPD_RelColorimetric"] = 1] = "FPD_RelColorimetric";
  FPD_RenderingIntent[FPD_RenderingIntent["FPD_Saturation"] = 2] = "FPD_Saturation";
  FPD_RenderingIntent[FPD_RenderingIntent["FPD_AbsColorimetric"] = 3] = "FPD_AbsColorimetric";
})(FPD_RenderingIntent || (FPD_RenderingIntent = {}));
var FPD_ConvertOption;
(function (FPD_ConvertOption) {
  FPD_ConvertOption[FPD_ConvertOption["FPD_None"] = 0] = "FPD_None";
  FPD_ConvertOption[FPD_ConvertOption["FPD_EmbedProfile"] = 1] = "FPD_EmbedProfile";
  FPD_ConvertOption[FPD_ConvertOption["FPD_PreserveBlack"] = 2] = "FPD_PreserveBlack";
  FPD_ConvertOption[FPD_ConvertOption["FPD_ProGrayToCmykB"] = 4] = "FPD_ProGrayToCmykB";
  FPD_ConvertOption[FPD_ConvertOption["FPD_PreserveCmykPri"] = 8] = "FPD_PreserveCmykPri";
})(FPD_ConvertOption || (FPD_ConvertOption = {}));
var FPD_ConvertResult;
(function (FPD_ConvertResult) {
  FPD_ConvertResult[FPD_ConvertResult["FPD_Error"] = 0] = "FPD_Error";
  FPD_ConvertResult[FPD_ConvertResult["FPD_Success"] = 1] = "FPD_Success";
  FPD_ConvertResult[FPD_ConvertResult["FPD_NotConvert"] = 2] = "FPD_NotConvert";
})(FPD_ConvertResult || (FPD_ConvertResult = {}));
var FPD_EnumColorSpace;
(function (FPD_EnumColorSpace) {
  FPD_EnumColorSpace[FPD_EnumColorSpace["FPD_Unknown"] = -1] = "FPD_Unknown";
  FPD_EnumColorSpace[FPD_EnumColorSpace["FPD_IccGray"] = 1] = "FPD_IccGray";
  FPD_EnumColorSpace[FPD_EnumColorSpace["FPD_IccRgb"] = 2] = "FPD_IccRgb";
  FPD_EnumColorSpace[FPD_EnumColorSpace["FPD_IccCmyk"] = 3] = "FPD_IccCmyk";
})(FPD_EnumColorSpace || (FPD_EnumColorSpace = {}));
var FPD_Show;
(function (FPD_Show) {
  FPD_Show[FPD_Show["FPDShow_All"] = 0] = "FPDShow_All";
  FPD_Show[FPD_Show["FPDShow_DeviceCMYK"] = 1] = "FPDShow_DeviceCMYK";
  FPD_Show[FPD_Show["FPDShow_NotDeviceCMYK"] = 2] = "FPDShow_NotDeviceCMYK";
  FPD_Show[FPD_Show["FPDShow_ICCBasedCMYK"] = 3] = "FPDShow_ICCBasedCMYK";
  FPD_Show[FPD_Show["FPDShow_SpotColor"] = 4] = "FPDShow_SpotColor";
  FPD_Show[FPD_Show["FPDShow_DeviceCMYKAndSpot"] = 5] = "FPDShow_DeviceCMYKAndSpot";
  FPD_Show[FPD_Show["FPDShow_NotDeviceCMYKOrSpot"] = 6] = "FPDShow_NotDeviceCMYKOrSpot";
  FPD_Show[FPD_Show["FPDShow_DeviceN"] = 7] = "FPDShow_DeviceN";
  FPD_Show[FPD_Show["FPDShow_CMYK"] = 8] = "FPDShow_CMYK";
  FPD_Show[FPD_Show["FPDShow_RGB"] = 9] = "FPDShow_RGB";
  FPD_Show[FPD_Show["FPDShow_DeviceRGB"] = 10] = "FPDShow_DeviceRGB";
  FPD_Show[FPD_Show["FPDShow_ICCBasedRGB"] = 11] = "FPDShow_ICCBasedRGB";
  FPD_Show[FPD_Show["FPDShow_Gray"] = 12] = "FPDShow_Gray";
  FPD_Show[FPD_Show["FPDShow_DeviceGray"] = 13] = "FPDShow_DeviceGray";
  FPD_Show[FPD_Show["FPDShow_CalGray"] = 14] = "FPDShow_CalGray";
  FPD_Show[FPD_Show["FPDShow_Calibrated"] = 15] = "FPDShow_Calibrated";
  FPD_Show[FPD_Show["FPDShow_Lab"] = 16] = "FPDShow_Lab";
  FPD_Show[FPD_Show["FPDShow_Device"] = 17] = "FPDShow_Device";
  FPD_Show[FPD_Show["FPDShow_Images"] = 18] = "FPDShow_Images";
  FPD_Show[FPD_Show["FPDShow_SolidColor"] = 19] = "FPDShow_SolidColor";
  FPD_Show[FPD_Show["FPDShow_SmoothShades"] = 20] = "FPDShow_SmoothShades";
  FPD_Show[FPD_Show["FPDShow_RegistrationColor"] = 21] = "FPDShow_RegistrationColor";
  FPD_Show[FPD_Show["FPDShow_Text"] = 22] = "FPDShow_Text";
  FPD_Show[FPD_Show["FPDShow_LineArt"] = 23] = "FPDShow_LineArt";
})(FPD_Show || (FPD_Show = {}));
var FPD_Preview;
(function (FPD_Preview) {
  FPD_Preview[FPD_Preview["FPD_Separations"] = 0] = "FPD_Separations";
  FPD_Preview[FPD_Preview["FPD_ColorWarnings"] = 1] = "FPD_ColorWarnings";
  FPD_Preview[FPD_Preview["FPD_ObjectInspector"] = 2] = "FPD_ObjectInspector";
})(FPD_Preview || (FPD_Preview = {}));
var FPD_ColorantType;
(function (FPD_ColorantType) {
  FPD_ColorantType[FPD_ColorantType["FPD_Process"] = 0] = "FPD_Process";
  FPD_ColorantType[FPD_ColorantType["FPD_Spot"] = 1] = "FPD_Spot";
})(FPD_ColorantType || (FPD_ColorantType = {}));
var FPD_BookmarkPosition;
(function (FPD_BookmarkPosition) {
  FPD_BookmarkPosition[FPD_BookmarkPosition["PosFirstChild"] = 0] = "PosFirstChild";
  FPD_BookmarkPosition[FPD_BookmarkPosition["PosNextSibling"] = 3] = "PosNextSibling";
})(FPD_BookmarkPosition || (FPD_BookmarkPosition = {}));
var FPD_BookmarkFontStyle;
(function (FPD_BookmarkFontStyle) {
  FPD_BookmarkFontStyle[FPD_BookmarkFontStyle["normal"] = 0] = "normal";
  FPD_BookmarkFontStyle[FPD_BookmarkFontStyle["italic"] = 1] = "italic";
  FPD_BookmarkFontStyle[FPD_BookmarkFontStyle["bold"] = 2] = "bold";
})(FPD_BookmarkFontStyle || (FPD_BookmarkFontStyle = {}));

function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper$1Y(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1Y() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1Y() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1Y = function _isNativeReflectConstruct() { return !!t; })(); }
var FR_WatemarkElementInfo = /*#__PURE__*/function (_BaseClass) {
  function FR_WatemarkElementInfo() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, FR_WatemarkElementInfo);
    return _callSuper$1Y(this, FR_WatemarkElementInfo, [_objectSpread$4(_objectSpread$4({}, obj), {}, {
      uuid: getUuid()
    })]);
  }
  _inherits(FR_WatemarkElementInfo, _BaseClass);
  return _createClass(FR_WatemarkElementInfo);
}(BaseClass);

function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper$1X(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1X() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1X() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1X = function _isNativeReflectConstruct() { return !!t; })(); }
var FR_HeaderFooterElementInfo = /*#__PURE__*/function (_BaseClass) {
  function FR_HeaderFooterElementInfo() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, FR_HeaderFooterElementInfo);
    return _callSuper$1X(this, FR_HeaderFooterElementInfo, [_objectSpread$3(_objectSpread$3({}, obj), {}, {
      uuid: getUuid()
    })]);
  }
  _inherits(FR_HeaderFooterElementInfo, _BaseClass);
  return _createClass(FR_HeaderFooterElementInfo);
}(BaseClass);

function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper$1W(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1W() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1W() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1W = function _isNativeReflectConstruct() { return !!t; })(); }
var FR_SaveDocOption = /*#__PURE__*/function (_BaseClass) {
  function FR_SaveDocOption() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, FR_SaveDocOption);
    return _callSuper$1W(this, FR_SaveDocOption, [_objectSpread$2(_objectSpread$2({}, obj), {}, {
      uuid: getUuid()
    })]);
  }
  _inherits(FR_SaveDocOption, _BaseClass);
  return _createClass(FR_SaveDocOption);
}(BaseClass);

function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper$1V(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1V() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1V() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1V = function _isNativeReflectConstruct() { return !!t; })(); }
var FPD_BookmarkDestinationInfo = /*#__PURE__*/function (_BaseClass) {
  function FPD_BookmarkDestinationInfo() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, FPD_BookmarkDestinationInfo);
    return _callSuper$1V(this, FPD_BookmarkDestinationInfo, [_objectSpread$1(_objectSpread$1({}, obj), {}, {
      uuid: getUuid()
    })]);
  }
  _inherits(FPD_BookmarkDestinationInfo, _BaseClass);
  return _createClass(FPD_BookmarkDestinationInfo);
}(BaseClass);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper$1U(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1U() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1U() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1U = function _isNativeReflectConstruct() { return !!t; })(); }
var FPD_BookmarkProperty = /*#__PURE__*/function (_BaseClass) {
  function FPD_BookmarkProperty() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, FPD_BookmarkProperty);
    return _callSuper$1U(this, FPD_BookmarkProperty, [_objectSpread(_objectSpread({}, obj), {}, {
      uuid: getUuid()
    })]);
  }
  _inherits(FPD_BookmarkProperty, _BaseClass);
  return _createClass(FPD_BookmarkProperty);
}(BaseClass);

function _callSuper$1T(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1T() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1T() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1T = function _isNativeReflectConstruct() { return !!t; })(); }
var FRComputeEnabledProc$1 = /*#__PURE__*/function (_BaseCallbacks) {
  function FRComputeEnabledProc() {
    _classCallCheck(this, FRComputeEnabledProc);
    return _callSuper$1T(this, FRComputeEnabledProc, arguments);
  }
  _inherits(FRComputeEnabledProc, _BaseCallbacks);
  return _createClass(FRComputeEnabledProc, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FRComputeEnabledProc: [["clientData", JSLPVOID$1]]
      }[key] || [];
    }
  }]);
}(BaseCallbacks);

function _callSuper$1S(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1S() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1S() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1S = function _isNativeReflectConstruct() { return !!t; })(); }
var FRContextMenuPopUpProc = /*#__PURE__*/function (_BaseCallbacks) {
  function FRContextMenuPopUpProc() {
    _classCallCheck(this, FRContextMenuPopUpProc);
    return _callSuper$1S(this, FRContextMenuPopUpProc, arguments);
  }
  _inherits(FRContextMenuPopUpProc, _BaseCallbacks);
  return _createClass(FRContextMenuPopUpProc, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FRContextMenuPopUpProc: [["pClientData", JSLPVOID$1], ["popUpMenu", JSFR_Menu_V1]]
      }[key] || [];
    }
  }]);
}(BaseCallbacks);

function _callSuper$1R(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1R() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1R() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1R = function _isNativeReflectConstruct() { return !!t; })(); }
var FS_ByteString = /*#__PURE__*/function (_BaseClass) {
  function FS_ByteString() {
    _classCallCheck(this, FS_ByteString);
    return _callSuper$1R(this, FS_ByteString, arguments);
  }
  _inherits(FS_ByteString, _BaseClass);
  return _createClass(FS_ByteString);
}(BaseClass);

function _callSuper$1Q(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1Q() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1Q() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1Q = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_RenderDevice_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_RenderDevice_V1() {
    _classCallCheck(this, JSFPD_RenderDevice_V1);
    return _callSuper$1Q(this, JSFPD_RenderDevice_V1, arguments);
  }
  _inherits(JSFPD_RenderDevice_V1, _BaseClass);
  return _createClass(JSFPD_RenderDevice_V1);
}(BaseClass);

function _callSuper$1P(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1P() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1P() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1P = function _isNativeReflectConstruct() { return !!t; })(); }
var IntPointer$2 = /*#__PURE__*/function (_BaseClass) {
  function IntPointer() {
    _classCallCheck(this, IntPointer);
    return _callSuper$1P(this, IntPointer, arguments);
  }
  _inherits(IntPointer, _BaseClass);
  return _createClass(IntPointer);
}(BaseClass);

function _callSuper$1O(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1O() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1O() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1O = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_DIBitmap_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_DIBitmap_V1() {
    _classCallCheck(this, JSFS_DIBitmap_V1);
    return _callSuper$1O(this, JSFS_DIBitmap_V1, arguments);
  }
  _inherits(JSFS_DIBitmap_V1, _BaseClass);
  return _createClass(JSFS_DIBitmap_V1);
}(BaseClass);

function _callSuper$1N(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1N() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1N() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1N = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_Page_V14 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_Page_V14() {
    _classCallCheck(this, JSFR_Page_V14);
    return _callSuper$1N(this, JSFR_Page_V14, arguments);
  }
  _inherits(JSFR_Page_V14, _BaseClass);
  return _createClass(JSFR_Page_V14);
}(BaseClass);

function _callSuper$1M(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1M() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1M() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1M = function _isNativeReflectConstruct() { return !!t; })(); }
var FS_WideString = /*#__PURE__*/function (_BaseClass) {
  function FS_WideString() {
    _classCallCheck(this, FS_WideString);
    return _callSuper$1M(this, FS_WideString, arguments);
  }
  _inherits(FS_WideString, _BaseClass);
  return _createClass(FS_WideString);
}(BaseClass);

function _callSuper$1L(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1L() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1L() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1L = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_DevicePoint_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_DevicePoint_V1() {
    _classCallCheck(this, JSFS_DevicePoint_V1);
    return _callSuper$1L(this, JSFS_DevicePoint_V1, arguments);
  }
  _inherits(JSFS_DevicePoint_V1, _BaseClass);
  return _createClass(JSFS_DevicePoint_V1);
}(BaseClass);

function _callSuper$1K(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1K() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1K() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1K = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_HDC_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_HDC_V1() {
    _classCallCheck(this, JSFS_HDC_V1);
    return _callSuper$1K(this, JSFS_HDC_V1, arguments);
  }
  _inherits(JSFS_HDC_V1, _BaseClass);
  return _createClass(JSFS_HDC_V1);
}(BaseClass);

function _callSuper$1J(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1J() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1J() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1J = function _isNativeReflectConstruct() { return !!t; })(); }
var FR_DocSaveProc = /*#__PURE__*/function (_BaseCallbacks) {
  function FR_DocSaveProc() {
    _classCallCheck(this, FR_DocSaveProc);
    return _callSuper$1J(this, FR_DocSaveProc, arguments);
  }
  _inherits(FR_DocSaveProc, _BaseCallbacks);
  return _createClass(FR_DocSaveProc, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FR_DocSaveProc: [["frDoc", JSFR_Doc_V1], ["pwszFilePath", undefined], ["pProcData", JSLPVOID$1]]
      }[key] || [];
    }
  }]);
}(BaseCallbacks);

function _callSuper$1I(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1I() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1I() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1I = function _isNativeReflectConstruct() { return !!t; })(); }
var FRRibbonElementImageInitProc$1 = /*#__PURE__*/function (_BaseCallbacks) {
  function FRRibbonElementImageInitProc() {
    _classCallCheck(this, FRRibbonElementImageInitProc);
    return _callSuper$1I(this, FRRibbonElementImageInitProc, arguments);
  }
  _inherits(FRRibbonElementImageInitProc, _BaseCallbacks);
  return _createClass(FRRibbonElementImageInitProc, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FRRibbonElementImageInitProc: [["ribbonElement", JSFR_RibbonElement_V5], ["clientData", JSLPVOID$1]]
      }[key] || [];
    }
  }]);
}(BaseCallbacks);

function _callSuper$1H(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1H() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1H() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1H = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_Tool_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_Tool_V1() {
    _classCallCheck(this, JSFR_Tool_V1);
    return _callSuper$1H(this, JSFR_Tool_V1, arguments);
  }
  _inherits(JSFR_Tool_V1, _BaseClass);
  return _createClass(JSFR_Tool_V1);
}(BaseClass);

function _callSuper$1G(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1G() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1G() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1G = function _isNativeReflectConstruct() { return !!t; })(); }
var FR_AppEventCallbacks = /*#__PURE__*/function (_BaseCallbacks) {
  function FR_AppEventCallbacks() {
    _classCallCheck(this, FR_AppEventCallbacks);
    return _callSuper$1G(this, FR_AppEventCallbacks, arguments);
  }
  _inherits(FR_AppEventCallbacks, _BaseCallbacks);
  return _createClass(FR_AppEventCallbacks, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FRAppOnLangUIChange: [["clientData", JSLPVOID$1]],
        FRAppOnActivate: [["clientData", JSLPVOID$1], ["bActive", undefined]],
        FRAppWillQuit: [["clientData", JSLPVOID$1]],
        FRAppOnDownload: [["clientData", JSLPVOID$1], ["lpModuleName", undefined]],
        FRAppOnToolChanged: [["clientData", JSLPVOID$1], ["deactiveTool", JSFR_Tool_V1], ["activeTool", JSFR_Tool_V1]],
        FRAppOnSkinChange: [["clientData", JSLPVOID$1]],
        FRAppOnShowFullScreen: [["clientData", JSLPVOID$1]],
        FRAppOnHideFullScreen: [["clientData", JSLPVOID$1]],
        FRAppOnResetToolbars: [["clientData", JSLPVOID$1]],
        FRAppOnRunCommandLine: [["clientData", JSLPVOID$1]],
        FRAppOnDrop: [["clientData", JSLPVOID$1], ["lpszPath", undefined]],
        FRAppOnTextViewChange: [["clientData", JSLPVOID$1], ["nViewType", undefined]],
        FRAppOnRecentFileListChange: [["clientData", JSLPVOID$1], ["arrFileList", JSFS_WideStringArray_V1]],
        FRAppOnShowRibbonFilePage: [["clientData", JSLPVOID$1]],
        FRAppOnCloseRibbonFilePage: [["clientData", JSLPVOID$1]],
        FRAppOnRibbonElementsLoadFinish: [["clientData", JSLPVOID$1], ["pParentWnd", JSLPVOID$1]],
        FRAppOnOpenDocument: [["clientData", JSLPVOID$1], ["lpszFilePath", undefined]],
        FRAppOnRibbonCategoryClicked: [["clientData", JSLPVOID$1], ["bChanged", undefined]],
        FRAppOnMainFrmLoadFinish: [["clientData", JSLPVOID$1]],
        FRAppOnRibbonUILayoutFinish: [["clientData", JSLPVOID$1], ["pParentWnd", JSLPVOID$1]],
        FRAppOnShowTaskPane: [["clientData", JSLPVOID$1], ["bShow", undefined]],
        FRAppOnShowPopupMenu: [["clientData", JSLPVOID$1]],
        FRAppOnDidOpenAllFiles: [["clientData", JSLPVOID$1]],
        FRAppOnMainFrameWillClose: [["clientData", JSLPVOID$1], ["bCanClose", undefined]],
        FRAppMainFrameOnSize: [["clientData", JSLPVOID$1]],
        FRAppMainFrameOnLoadWinPlacementFinish: [["clientData", JSLPVOID$1], ["hMainframe", JSHwnd]],
        FRAppPluginOnLoaded: [["clientData", JSLPVOID$1], ["lpszPluginName", undefined]],
        FRAppOnDidCloseRibbonFilePage: [["clientData", JSLPVOID$1]],
        FRAppOnRibbonCategoryChanged: [["clientData", JSLPVOID$1], ["lpsCategoryName", undefined]],
        FRAppWillConvertPDF: [["clientData", JSLPVOID$1], ["inPath", undefined], ["outPath", undefined]],
        FRAppDidConvertPDF: [["clientData", JSLPVOID$1], ["inPath", undefined], ["outPath", undefined]],
        FRWillSignatureDoc: [["clientData", JSLPVOID$1], ["pDocument", JSFR_Doc_V1], ["outPath", undefined]],
        FRDidSignatureDoc: [["clientData", JSLPVOID$1], ["outPath", undefined]],
        FROnAppWillCombineMultiFile: [["clientData", JSLPVOID$1], ["allneedfile", JSFS_WideStringArray_V1]],
        FROnAppDidCombineMultiFile: [["clientData", JSLPVOID$1], ["outfile", undefined], ["usedfile", JSFS_WideStringArray_V1]],
        FROnShowReadMode: [["clientData", JSLPVOID$1]],
        FROnExitReadMode: [["clientData", JSLPVOID$1]],
        FRMainFrameOnMove: [["clientData", JSLPVOID$1], ["pFrame", JSLPVOID$1]],
        FRAppOnRibbonCategoryBeforeChange: [["clientData", JSLPVOID$1], ["lpsCategoryName", undefined]],
        FRAppOnPreModalCustomizeRibbonDlg: [["clientData", JSLPVOID$1]],
        FRAppOnUpdateRibbonByAccel: [["clientData", JSLPVOID$1], ["accel", undefined], ["wsElementName", undefined]],
        FRAppOnUpdateRibbonUI: [["clientData", JSLPVOID$1], ["bsCategoryName", undefined], ["bsPanelName", undefined], ["bsElementName", undefined]],
        FRAppPluginOnWillUnLoaded: [["clientData", JSLPVOID$1], ["lpszPluginName", undefined]],
        FRAppOnUpdateActionRibbonUI: [["clientData", JSLPVOID$1], ["bsElementName", undefined]],
        FRAppOnDecryptFile: [["clientData", JSLPVOID$1], ["pszInPath", undefined], ["pszOutPath", FS_WideString]],
        FRAppOnDeleteDecryptFile: [["clientData", JSLPVOID$1], ["pszPath", undefined]],
        FRAppOnShowRibbonFilePageFinish: [["clientData", JSLPVOID$1]],
        FRAppOnRibbonCustomizeSync: [["clientData", JSLPVOID$1], ["bCustomXml", undefined]],
        FRAppOnChangedTaskPane: [["clientData", JSLPVOID$1], ["bsName", undefined]]
      }[key] || [];
    }
  }]);
}(BaseCallbacks);

function _callSuper$1F(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1F() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1F() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1F = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_WordArray_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_WordArray_V1() {
    _classCallCheck(this, JSFS_WordArray_V1);
    return _callSuper$1F(this, JSFS_WordArray_V1, arguments);
  }
  _inherits(JSFS_WordArray_V1, _BaseClass);
  return _createClass(JSFS_WordArray_V1);
}(BaseClass);

function _callSuper$1E(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1E() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1E() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1E = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFR_ThumbnailView_V3 = /*#__PURE__*/function (_BaseClass) {
  function JSFR_ThumbnailView_V3() {
    _classCallCheck(this, JSFR_ThumbnailView_V3);
    return _callSuper$1E(this, JSFR_ThumbnailView_V3, arguments);
  }
  _inherits(JSFR_ThumbnailView_V3, _BaseClass);
  return _createClass(JSFR_ThumbnailView_V3);
}(BaseClass);

function _callSuper$1D(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1D() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1D() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1D = function _isNativeReflectConstruct() { return !!t; })(); }
var FR_ScrollBarThumbnailView_V6 = /*#__PURE__*/function (_BaseClass) {
  function FR_ScrollBarThumbnailView_V6() {
    _classCallCheck(this, FR_ScrollBarThumbnailView_V6);
    return _callSuper$1D(this, FR_ScrollBarThumbnailView_V6, arguments);
  }
  _inherits(FR_ScrollBarThumbnailView_V6, _BaseClass);
  return _createClass(FR_ScrollBarThumbnailView_V6);
}(BaseClass);

function _callSuper$1C(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1C() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1C() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1C = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_MapPtrToPtr_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_MapPtrToPtr_V1() {
    _classCallCheck(this, JSFS_MapPtrToPtr_V1);
    return _callSuper$1C(this, JSFS_MapPtrToPtr_V1, arguments);
  }
  _inherits(JSFS_MapPtrToPtr_V1, _BaseClass);
  return _createClass(JSFS_MapPtrToPtr_V1);
}(BaseClass);

function _callSuper$1B(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1B() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1B() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1B = function _isNativeReflectConstruct() { return !!t; })(); }
var FPD_FormField = /*#__PURE__*/function (_BaseClass) {
  function FPD_FormField() {
    _classCallCheck(this, FPD_FormField);
    return _callSuper$1B(this, FPD_FormField, arguments);
  }
  _inherits(FPD_FormField, _BaseClass);
  return _createClass(FPD_FormField);
}(BaseClass);

function _callSuper$1A(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1A() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1A() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1A = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_OCGroup_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_OCGroup_V1() {
    _classCallCheck(this, JSFPD_OCGroup_V1);
    return _callSuper$1A(this, JSFPD_OCGroup_V1, arguments);
  }
  _inherits(JSFPD_OCGroup_V1, _BaseClass);
  return _createClass(JSFPD_OCGroup_V1);
}(BaseClass);

function _callSuper$1z(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1z() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1z() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1z = function _isNativeReflectConstruct() { return !!t; })(); }
var FR_DocEventCallbacks = /*#__PURE__*/function (_BaseCallbacks) {
  function FR_DocEventCallbacks() {
    _classCallCheck(this, FR_DocEventCallbacks);
    return _callSuper$1z(this, FR_DocEventCallbacks, arguments);
  }
  _inherits(FR_DocEventCallbacks, _BaseCallbacks);
  return _createClass(FR_DocEventCallbacks, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FRDocWillOpen: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocDidOpen: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnActivate: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnDeactivate: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocWillSave: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bSaveAs", undefined]],
        FRDocDidSave: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bSaveAs", undefined]],
        FRDocWillClose: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocDidClose: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocDidCopy: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocWillPrint: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocDidPrint: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnChange: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnPermissionChange: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocWillDraw: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1], ["dc", JSFS_HDC_V1]],
        FRDocDidDraw: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1], ["dc", JSFS_HDC_V1]],
        FRDocOnWillInsertPages: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["iInsertAt", undefined], ["nPages", undefined]],
        FRDocOnDidInsertPages: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["iInsertAt", undefined], ["nPages", undefined]],
        FRDocOnWillDeletePages: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["arrDelPages", JSFS_WordArray_V1]],
        FRDocOnDidDeletePages: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["arrDelPages", JSFS_WordArray_V1]],
        FRDocOnWillModifyPageAttribute: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["iPage", undefined]],
        FRDocOnDidModifyPageAttribute: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["iPage", undefined]],
        FRDocOnWindowCreate: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnWindowDestroy: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnFrameCreate: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["hFrameWnd", JSHwnd]],
        FRDocOnFrameDestroy: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["hFrameWnd", JSHwnd]],
        FRDocOnAnnotSelectionChanged: [["clientData", JSLPVOID$1]],
        FRDocOnAutoScrollBegin: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1]],
        FRDocOnAutoScrollEnd: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1]],
        FRDocOnFinishRender: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1]],
        FRDocThumbnailWillDraw: [["clientData", JSLPVOID$1], ["thumbnailView", JSFR_ThumbnailView_V3], ["dc", JSFS_HDC_V1]],
        FRDocThumbnailDidDraw: [["clientData", JSLPVOID$1], ["thumbnailView", JSFR_ThumbnailView_V3], ["dc", JSFS_HDC_V1]],
        FRDocScrollBarThumbnailViewWillDraw: [["clientData", JSLPVOID$1], ["thumbnailView", FR_ScrollBarThumbnailView_V6], ["dc", JSFS_HDC_V1]],
        FRDocDidFileClose: [["clientData", JSLPVOID$1], ["lpwsFilePath", undefined]],
        FRDocCanBeSaved: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        OnDocPromptToSave: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bCancel", undefined]],
        FRDocWillReOpen: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bMemDoc", undefined]],
        FRDocDidReOpen: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bMemDoc", undefined]],
        FRDocOnFrameSize: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["hFrameWnd", JSHwnd], ["rcClient", JSFS_Rect_V1]],
        FRDocOnWillActivate: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnWillDeactivate: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnOtherDocActivate: [["clientData", JSLPVOID$1]],
        FRDocOnOtherDocDeactivate: [["clientData", JSLPVOID$1]],
        FRDocOnOtherDocClose: [["clientData", JSLPVOID$1]],
        FRDocDidSave2: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bSaveAs", undefined], ["bPromptToSave", undefined]],
        FRDocOnKeyDown: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1], ["nKeyCode", undefined], ["nFlags", undefined]],
        FRDocOnKeyUp: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1], ["nKeyCode", undefined], ["nFlags", undefined]],
        FRDocOnChar: [["clientData", JSLPVOID$1], ["docView", JSFR_DocView_V1], ["nKeyCode", undefined], ["nFlags", undefined]],
        FRDocOnLButtonDown: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnLButtonUp: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnLButtonDblClk: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnMouseMove: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnRButtonDown: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnRButtonUp: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnRButtonDblClk: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnMouseWheel: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["nFlags", undefined], ["zDelta", undefined], ["point", JSFS_DevicePoint_V1]],
        FRDocOnDrawAnnot: [["clientData", JSLPVOID$1], ["pageView", JSFR_PageView_V1], ["frAnnot", JSFR_Annot_V5], ["hDC", JSFS_HDC_V1], ["renderDevice", JSFPD_RenderDevice_V1], ["user2Device", JSFS_AffineMatrix_V1], ["rcWindow", JSFS_Rect_V1]],
        FRDocOnDocCollectActionData: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["lpwsOperatorType", undefined], ["lpwsOperator", undefined], ["valueMap", JSFS_MapPtrToPtr_V1]],
        FRDocWillOpen2: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["lpwsFilePath", undefined]],
        FRDocOnOptimizerFinish: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocCanBeClose: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnReOpenFailed: [["clientData", JSLPVOID$1], ["lpwsFilePath", undefined]],
        FRDocWillSave2: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bSaveAs", undefined], ["lpwsFilePath", undefined]],
        FRDocCustomizeSaveAsDlg: [["clientData", JSLPVOID$1], ["bCanSupportPDFOnly", undefined], ["bChoise", undefined], ["pwszFilePath", undefined], ["iIndex", IntPointer$2]],
        FRDocSaveAsBeforeReopen: [["clientData", JSLPVOID$1], ["wsFileName", undefined]],
        FRDocCanPaste: [["clientData", JSLPVOID$1]],
        OnMouseClickOnText: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["wsText", undefined], ["rect", JSFS_Rect_V1]],
        FRDocOwnerSaveAs: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["wszPathName", undefined]],
        FRDocOnCanDetach: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocDelayDidOpen: [["doc", JSFR_Doc_V1]],
        FRDocOnActivate2: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bMainfrmActivating", undefined]],
        FRDocOnDeactivate2: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bMainfrmActivating", undefined]],
        FRDocOnOtherDocActivate2: [["clientData", JSLPVOID$1], ["bMainfrmActivating", undefined]],
        FRDocOnAnnotSetFocusEnd: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["focusAnnot", JSFR_Annot_V5]],
        FRDocOnAnnotRelease: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["releasedAnnot", JSFR_Annot_V5], ["eType", undefined]],
        FRDocIsECMFile: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["wszPathName", undefined], ["bsECMPluginName", undefined]],
        FRDocSaveAsFinish: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["bWillReopen", undefined]],
        FRFormFieldChanged: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["formField", FPD_FormField], ["operatype", undefined]],
        FRAnnotAdd: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["annot", JSFR_Annot_V5], ["eType", undefined]],
        FRNotifyOCContextModify: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FROnDocCurrentWndProvideChange: [["clientData", JSLPVOID$1], ["pDoc", JSFR_Doc_V1], ["csWndProvideName", undefined]],
        FROnDocPageLabelChange: [["clientData", JSLPVOID$1], ["pDoc", JSFR_Doc_V1]],
        FROnAnnotMoveToOtherPage: [["clientData", JSLPVOID$1], ["pDoc", JSFR_Doc_V1], ["pAnnotMove", JSFR_Annot_V5], ["pSrcPage", JSFR_Page_V14]],
        FRDocSaveAsWithPlugin: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["lpwsPluginName", undefined], ["nOutRet", IntPointer$2]],
        OnMouseClickOnText2: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["wsText", undefined], ["pathArray", JSFS_PtrArray_V1]],
        FRDocOnAnnotKillFocus: [["clientData", JSLPVOID$1], ["pDoc", JSFR_Doc_V1], ["pFocusAnnot", JSFR_Annot_V5]],
        FRFormFieldChanged2: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["formField", FPD_FormField], ["operatype", undefined], ["bcontainCommitData", undefined]],
        FRDocOnAnnotSetFocus: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["focusAnnot", JSFR_Annot_V5]],
        FRDocOnPageVisibleEventFinish: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocOnWillDShowFloatyBar: [["clientData", JSLPVOID$1], ["pDoc", JSFR_Doc_V1], ["bsCurToolhandleName", undefined], ["pAryBeShowBtnName", JSFS_ByteStringArray_V1]],
        FRFileCanBeSave: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1]],
        FRDocWillSaveToOther: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["csFilterName", undefined], ["csSaveFile", undefined]],
        FRDocOCGStateChanged: [["clientData", JSLPVOID$1], ["doc", JSFR_Doc_V1], ["affectedPages", JSFS_WordArray_V1], ["pOCGChange", JSFPD_OCGroup_V1], ["bVisible", undefined]]
      }[key] || [];
    }
  }]);
}(BaseCallbacks);

function _callSuper$1y(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1y() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1y() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1y = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFS_FloatPoint_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFS_FloatPoint_V1() {
    _classCallCheck(this, JSFS_FloatPoint_V1);
    return _callSuper$1y(this, JSFS_FloatPoint_V1, arguments);
  }
  _inherits(JSFS_FloatPoint_V1, _BaseClass);
  return _createClass(JSFS_FloatPoint_V1);
}(BaseClass);

function _callSuper$1x(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1x() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1x() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1x = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFileAttachmentInfo = /*#__PURE__*/function (_BaseClass) {
  function JSFileAttachmentInfo() {
    _classCallCheck(this, JSFileAttachmentInfo);
    return _callSuper$1x(this, JSFileAttachmentInfo, arguments);
  }
  _inherits(JSFileAttachmentInfo, _BaseClass);
  return _createClass(JSFileAttachmentInfo);
}(BaseClass);

function _callSuper$1w(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1w() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1w() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1w = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_ParseOptions_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_ParseOptions_V1() {
    _classCallCheck(this, JSFPD_ParseOptions_V1);
    return _callSuper$1w(this, JSFPD_ParseOptions_V1, arguments);
  }
  _inherits(JSFPD_ParseOptions_V1, _BaseClass);
  return _createClass(JSFPD_ParseOptions_V1);
}(BaseClass);

function _callSuper$1v(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1v() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1v() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1v = function _isNativeReflectConstruct() { return !!t; })(); }
var JSFPD_FontEncoding_V1 = /*#__PURE__*/function (_BaseClass) {
  function JSFPD_FontEncoding_V1() {
    _classCallCheck(this, JSFPD_FontEncoding_V1);
    return _callSuper$1v(this, JSFPD_FontEncoding_V1, arguments);
  }
  _inherits(JSFPD_FontEncoding_V1, _BaseClass);
  return _createClass(JSFPD_FontEncoding_V1);
}(BaseClass);

function _callSuper$1u(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1u() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1u() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1u = function _isNativeReflectConstruct() { return !!t; })(); }
var JS_FPDCRT_DATETIMEZONE = /*#__PURE__*/function (_BaseClass) {
  function JS_FPDCRT_DATETIMEZONE() {
    _classCallCheck(this, JS_FPDCRT_DATETIMEZONE);
    return _callSuper$1u(this, JS_FPDCRT_DATETIMEZONE, arguments);
  }
  _inherits(JS_FPDCRT_DATETIMEZONE, _BaseClass);
  return _createClass(JS_FPDCRT_DATETIMEZONE);
}(BaseClass);

var FPDPT_CLOSEFIGURE = 0x01;
var FPDPT_LINETO = 0x02;
var FPDPT_BEZIERTO = 0x04;
var FPDPT_MOVETO = 0x06;
var FPDPT_TYPE = 0x06;
var FPD_PAGEOBJ_TEXT = 1;
var FPD_PAGEOBJ_PATH = 2;
var FPD_PAGEOBJ_IMAGE = 3;
var FPD_PAGEOBJ_SHADING = 4;
var FPD_PAGEOBJ_FORM = 5;
var FPD_PAGEOBJ_INLINES = 6;
var FPD_PAGE_EMPTY = 7;
var _FS_WIN32_DESKTOP_ = 1;
var _FS_WIN32_MOBILE_ = 2;
var _FS_WIN64_ = 3;
var _FS_LINUX_DESKTOP_ = 4;
var _FS_LINUX_EMBEDDED_ = 5;
var _FS_SYMBIAN_ = 6;
var _FS_MACOSX_ = 7;
var _FS_EMBEDDED_ = 8;
var _FS_SOLARIS_ = 9;
var _FS_PALMOS_ = 10;
var _FS_NETBSD_ = 11;
var _FS_ANDROID_ = 12;
var _FS_VXWORKS_ = 13;
var _FS_MTK_ = 14;
var _FS_OS_ = "_FS_EMBEDDED_";
var _FS_VC6_ = 1;
var _FS_VC7_ = 2;
var _FS_VC8_ = 3;
var _FS_GCC_ = 4;
var _FS_ADS_ = 5;
var _FS_RVCT_ = 6;
var _FS_IARCC_ = 7;
var _FS_NOKIA_X86_ = 8;
var _FS_METROWERKS_ = 9;
var _FS_PACC_ = 10;
var _FS_TMS470_ = 11;
var _FS_MIPS_SDE_ = 12;
var _FS_COMPILER_ = "_FS_TMS470_";
var _FS_X86_ = 1;
var _FS_ARM_ = 2;
var _FS_POWERPC_ = 3;
var _FS_SPARC_ = 4;
var _FS_IA64_ = 5;
var _FS_MIPS_ = 6;
var _FS_X64_ = 7;
var _FS_ARM64_ = 8;
var _FS_MIPS64_ = 9;
var _FS_LOONGARCH64_ = 10;
var _FS_CPU_ = "_FS_MIPS_";
var _FS_BIG_ENDIAN_ = 1;
var _FS_LITTLE_ENDIAN_ = 2;
var _FS_ENDIAN_ = "_FS_LITTLE_ENDIAN_";
var _FS_DEFAULT_TARGET_ = 0;
var _FS_BREW_ = 1;
var FS_ASSERT = "assert";
var FSSYS_qsort = "FXSYS_qsort";
var TRUE = 1;
var FALSE = 0;
var NULL = 0;
var FS_UUIDTYPE_INVALID = -1;
var FS_UUIDTYPE_WINDOWS_TIME_MAC = 0x10001010;
var FS_UUIDTYPE_WINDOWS_TIME_RANDOM = 0x10001101;
var FS_UUIDTYPE_WINDOWS_RANDOM_HIGHQUALITY = 0x10001000;
var FS_UUIDTYPE_WINDOWS_RANDOM = 0x10000010;
var FS_UUIDTYPE_WINDOWS_OTHER = 0x10001111;
var FS_DIB_DEFAULT = 0x0;
var FS_DIB_DOWNSAMPLE = 0x04;
var FS_DIB_INTERPOL = 0x20;
var FS_DIB_PALETTE_LOC = 0x01;
var FS_DIB_PALETTE_WIN = 0x02;
var FS_DIB_PALETTE_MAC = 0x04;
var FSFILL_ALTERNATE = 1;
var FSFILL_WINDING = 2;
var FSFILL_FULLCOVER = 4;
var FSFILL_RECT_AA = 8;
var FS_DIB_BLEND_NORMAL = 0;
var FS_DIB_BLEND_MULTIPLY = 1;
var FS_DIB_BLEND_SCREEN = 2;
var FS_DIB_BLEND_OVERLAY = 3;
var FS_DIB_BLEND_DARKEN = 4;
var FS_DIB_BLEND_LIGHTEN = 5;
var FS_DIB_BLEND_COLORDODGE = 6;
var FS_DIB_BLEND_COLORBURN = 7;
var FS_DIB_BLEND_HARDLIGHT = 8;
var FS_DIB_BLEND_SOFTLIGHT = 9;
var FS_DIB_BLEND_DIFFERENCE = 10;
var FS_DIB_BLEND_EXCLUSION = 11;
var FS_DIB_BLEND_NONSEPARABLE = 21;
var FS_DIB_BLEND_HUE = 21;
var FS_DIB_BLEND_SATURATION = 22;
var FS_DIB_BLEND_COLOR = 23;
var FS_DIB_BLEND_LUMINOSITY = 24;
var FS_DIB_BLEND_UNSUPPORTED = -1;
var FS_DIB_EXIFTAG_USHORT_RESUNIT = 296;
var FS_DIB_EXIFTAG_FLOAT_DPIX = 282;
var FS_DIB_EXIFTAG_FLOAT_DPIY = 283;
var FS_DIB_EXIFTAG_USHORT_ORIENTATION = 274;
var FS_DIB_EXIFTAG_STRING_MANUFACTURER = 271;
var FS_DIB_EXIFTAG_STRING_MODULE = 272;
var FS_DIB_EXIFTAG_STRING_SOFTWARE = 305;
var FS_DIB_EXIFTAG_STRING_IAMGEDESCRIPTION = 270;
var FS_DIB_EXIFTAG_STRING_DATETIME = 306;
var FS_DIB_EXIFTAG_STRING_COPYRIGHT = 33432;
var FS_FILEMODE_Write = 0;
var FS_FILEMODE_ReadOnly = 1;
var FS_FILEMODE_Truncate = 2;
var FSIcc_INTENT_PERCEPTUAL = 0;
var FSIcc_INTENT_RELATIVE_COLORIMETRIC = 1;
var FSIcc_INTENT_SATURATION = 2;
var FSIcc_INTENT_ABSOLUTE_COLORIMETRIC = 3;
var FSIcc_FLAGS_DEFAULT = 0x0000;
var FSIcc_FLAGS_BLACKPOINTCOMPENSATION = 0x2000;
var FSIcc_FLAGS_NOWHITEONWHITEFIXUP = 0x0004;
var FSIcc_FLAGS_HIGHRESPRECALC = 0x0400;
var FSIcc_FLAGS_LOWRESPRECALC = 0x0800;
var FSIcc_FLAGS_GAMUTCHECK = 0x1000;
var FSIcc_FLAGS_SOFTPROOFING = 0x4000;
var FS_JPX_COMPRESSION_LEVEL_LOSSLESS = 1;
var FS_JPX_COMPRESSION_LEVEL_MAXIMUM = 2;
var FS_JPX_COMPRESSION_LEVEL_HIGH = 4;
var FS_JPX_COMPRESSION_LEVEL_MEDIUM = 8;
var FS_JPX_COMPRESSION_LEVEL_LOW = 16;
var FS_JPX_COMPRESSION_LEVEL_MINIMUM = 32;
var FS_JPX_COMPRESSION_LEVEL_USERDEFINED = 64;
var FS_UnCompress_OK = 0;
var FS_UnCompress_STREAM_END = 1;
var FS_UnCompress_NEED_DICT = 2;
var FS_UnCompress_ERRNO = -1;
var FS_UnCompress_STREAM_ERROR = -2;
var FS_UnCompress_DATA_ERROR = -3;
var FS_UnCompress_MEM_ERROR = -4;
var FS_UnCompress_BUF_ERROR = -5;
var FS_UnCompress_VERSION_ERROR = -6;
var FS_FORMAT_SIGNED = 1;
var FS_FORMAT_HEX = 2;
var FS_FORMAT_CAPITAL = 4;
var FDRM_DESC_TYPE_Contents = "Contents";
var FDRM_DESC_TYPE_TOC = "TOC";
var FDRM_DESC_TYPE_Resource = "Resource";
var FDRM_DESC_TYPE_Permission = "Permission";
var FDRM_DESC_TYPE_Encryption = "Encryption";
var FDRM_DESC_TYPE_Certificate = "Certificate";
var FDRM_DESC_TYPE_Envelope = "Envelope";
var FDRM_DESC_TYPE_Foac = "Foac";
var FDRM_FOAC_TYPE_Request = "FoxitFOACRequest";
var FDRM_FOAC_TYPE_Answer = "FoxitFOACAnswer";
var FR_NAME_HAND = "Hand";
var FR_NAME_SELECTTEXT = "Select Text";
var FR_NAME_FINDTEXT = "Find Text Tool";
var FR_NAME_SNAPSHOT = "Snapshot Tool";
var FR_NAME_ANNOT = "Annot";
var FR_NAME_RECTANGLELINK = "Rectangle Link Tool";
var FR_NAME_QUADRILATERALLINK = "Quadrilateral Link Tool";
var FR_NAME_ARROW = "Arrow";
var FR_NAME_LINE = "Line";
var FR_NAME_DIMENSION = "Dimension Tool";
var FR_NAME_SQUARE = "Square Tool";
var FR_NAME_RECTANGLE = "Rectangle";
var FR_NAME_CIRCLE = "Circle Tool";
var FR_NAME_ELLIPSE = "Ellipse";
var FR_NAME_POLYGON = "Polygon";
var FR_NAME_CLOUDY = "Cloudy";
var FR_NAME_POLYLINE = "Polyline Tool";
var FR_NAME_PENCIL = "Pencil";
var FR_NAME_RUBBER = "Rubber Tool";
var FR_NAME_EDITSELECT = "Edit Selected Text";
var FR_NAME_HIGHLIGHT = "Highlight Tool";
var FR_NAME_UNDERLINE = "Underline Tool";
var FR_NAME_STRIKEOUT = "Strikeout Tool";
var FR_NAME_SQUIGGLY = "Squiggly Tool";
var FR_NAME_REPLACE = "Replace Tool";
var FR_NAME_CARET = "Insert Text Tool";
var FR_NAME_NOTE = "Note Tool";
var FR_NAME_PUSHBUTTON = "Push Button Tool";
var FR_NAME_CHECKBOX = "Check Box Tool";
var FR_NAME_RADIOBUTTON = "Radio Button Tool";
var FR_NAME_COMBOBOX = "Combo Box Tool";
var FR_NAME_LISTBOX = "List Box Tool";
var FR_NAME_TEXTFIELD = "Text Field Tool";
var FR_NAME_DISTANCE = "Distance Tool";
var FR_NAME_PERIMETER = "Perimeter Tool";
var FR_NAME_AREA = "Area Tool";
var FR_NAME_SCREEN = "Image Tool";
var FR_NAME_FAA_TOOLNAME = "FileAttachment Tool";
var FR_NAME_DFA_TOOLNAME = "Attach a file";
var FR_NAME_LOUPETOOL = "Loupe Tool";
var FR_NAME_MANGIFIER = "Magnifier";
var FR_NAME_TYPEWRITER = "Typewriter";
var FR_NAME_TEXTBOX = "Textbox";
var FR_NAME_CALLOUT = "Callout";
var FR_NAME_SOUND = "Sound Tool";
var FR_NAME_MOVIE = "Movie Tool";
var FR_NAME_ADVANCEDSEARCHPAGE = "Search";
var FR_NAME_STAMP = "Stamp";
var FR_NAME_TYPEDOT = "Add Dot";
var FR_NAME_TYPECHECK = "Add Check Mark";
var FR_NAME_TYPEX = "Add X";
var FR_NAME_TYPELINE = "Add Line";
var FR_NAME_TYPERECT = "Add Rounded Rectangle";
var FR_NAME_ADDTEXT = "Add Text";
var FR_PERM_PRINT = 0x0004;
var FR_PERM_MODIFY_CONTENT = 0x0008;
var FR_PERM_EXTRACT_COPY = 0x0010;
var FR_PERM_EXTRACT_ACCESS = 0x0200;
var FR_PERM_ANNOTATE = 0x0020;
var FR_PERM_FILL_FORM = 0x0100;
var FR_PERM_ASSEMBLE = 0x0400;
var FR_PERM_PRINT_HIGN = 0x0800;
var FRCIPHER_NONE = 0;
var FRCIPHER_RC4 = 1;
var FRCIPHER_AES = 2;
var FR_ST_TEXT = "Text";
var FR_ST_BITMAP = "Bitmap";
var FR_ST_ANNOTATION = "Annotation";
var FR_ST_THUMBNAIL = "Thumbnail";
var FR_ST_BOOKMARK = "Bookmark";
var FR_CT_ANNOTATION = "Annotation";
var FR_CT_TOUCHUP = "Touchup";
var FR_TASKPANE_ADVSEARCH = "AdvSearchTaskPane";
var FR_FUNCTION_SELECTTEXT = "LSelectText";
var FR_FUNCTION_FIND = "LFind";
var FR_FUNCTION_HIGHLIGHT = "LHighlight";
var FR_FUNCTION_SQUIGGLYUNDERLINE = "LSquigglyUnderline";
var FR_FUNCTION_UNDERLINE = "LUnderline";
var FR_FUNCTION_TYPEWRITER = "LTypewriter";
var FR_FUNCTION_STRIKEOUT = "LStrikeout";
var FR_FUNCTION_REPLACETEXT = "LReplaceText";
var FR_FUNCTION_INSERTTEXT = "LInsertText";
var FR_FUNCTION_CALLOUT = "LCallout";
var FR_FUNCTION_TEXTBOX = "LTextbox";
var FR_FUNCTION_NOTE = "LNote";
var FR_FUNCTION_SNAPSHOT = "LSnapShot";
var ACTION_COPY = "LCopy";
var ACTION_CUT = "LCut";
var ACTION_FIND = "LFind";
var ACTION_SELECT = "LSelect";
var ACTION_EDIT = "LEdit";
var FR_OEM_GENERAL = "OEM";
var FR_OEM_HPCM = "HPCommercial";
var FR_OEM_HPCS = "HPConsumer";
var FR_OEM_ASUS = "Asus";
var FR_OEM_LENOVO = "Lenovo";
var FR_UNIT_POINT = 0;
var FR_UNIT_INCH = 1;
var FR_UNIT_CM = 2;
var FR_UNIT_PICA = 3;
var FR_UNIT_MM = 4;
var FR_LANGUAGE_NAME_DEFAULT = 0;
var FR_LANGUAGE_NAME_ARABIC = 1;
var FR_LANGUAGE_NAME_BULGARIAN = 2;
var FR_LANGUAGE_NAME_HUNGARIAN = 3;
var FR_LANGUAGE_NAME_CATALAN = 4;
var FR_LANGUAGE_NAME_CZECH = 5;
var FR_LANGUAGE_NAME_CHINESE_SIMPLIFIED = 6;
var FR_LANGUAGE_NAME_CHINESE_TRADITIONAL = 7;
var FR_LANGUAGE_NAME_DANISH = 8;
var FR_LANGUAGE_NAME_DUTCH = 9;
var FR_LANGUAGE_NAME_ENGLISH = 10;
var FR_LANGUAGE_NAME_ESTONIAN = 11;
var FR_LANGUAGE_NAME_FINNISH = 12;
var FR_LANGUAGE_NAME_FRENCH = 13;
var FR_LANGUAGE_NAME_GALICIAN = 14;
var FR_LANGUAGE_NAME_GERMAN = 15;
var FR_LANGUAGE_NAME_GREEK = 16;
var FR_LANGUAGE_NAME_ITALIAN = 17;
var FR_LANGUAGE_NAME_KOREAN = 18;
var FR_LANGUAGE_NAME_lATVIAN = 19;
var FR_LANGUAGE_NAME_LITHUANIAN = 20;
var FR_LANGUAGE_NAME_NORWEGIAN = 21;
var FR_LANGUAGE_NAME_POLISH = 22;
var FR_LANGUAGE_NAME_PORTUGUESE = 23;
var FR_LANGUAGE_NAME_PORTUGUESE_BRAZILIAN = 24;
var FR_LANGUAGE_NAME_ROMANIAN = 25;
var FR_LANGUAGE_NAME_RUSSIAN = 26;
var FR_LANGUAGE_NAME_SLOVENIAN = 27;
var FR_LANGUAGE_NAME_SPANISH = 28;
var FR_LANGUAGE_NAME_SWEDISH = 29;
var FR_LANGUAGE_NAME_TURKISH = 30;
var FR_LANGUAGE_NAME_HEBREW = 31;
var FR_LANGUAGE_NAME_JAPANESE = 32;
var FR_LANGUAGE_NAME_THAI = 33;
var FR_LANGUAGE_NAME_VALENCIAN = 34;
var FR_PANEL_LOCATION_TOP = 1;
var FR_PANEL_LOCATION_LEFT = 2;
var FR_VT_SOFTRETURN = 0xFFFE;
var FR_VT_SECTION_FLG = 0x0D;
var FR_VT_TEXT_HIDCHAR = 0xFFF8;
var FR_VT_TEXT_UNICODEINVALID = 0xFFFF;
var FR_EMBED_CHARSET = 0x7FFFFFFF;
var FR_VT_WORD_STYLE_BOLD = 0x40000;
var FR_VT_WORD_STYLE_ITALIC = 0x40;
var FR_VT_WORD_STYLE_NORMAL = 0x0000;
var FR_VT_WORD_STYLE_HIGHLIGHT = 0x0001;
var FR_VT_WORD_STYLE_UNDERLINE = 0x0002;
var FR_VT_WORD_STYLE_CROSSOUT = 0x0004;
var FR_VT_WORD_STYLE_SQUIGGLY = 0x0008;
var FR_VT_WORD_STYLE_DUALCROSSOUT = 0x0010;
var FR_VT_WORD_STYLE_FORMXOBJECT = 0x0020;
var FR_VT_WORD_STYLE_LINE_END_TYPESET_SPACE = 0x0080;
var FR_TEXT_OP_NONE = 0;
var FR_TEXT_OP_CREATE = 0x1;
var FR_TEXT_OP_DELETE = 0x2;
var FR_TEXT_OP_EDIT = 0x4;
var FR_TEXT_OP_POSTION_CHANGE = 0x8;
var FR_TEXT_OP_ROTATE = 0x10;
var FR_TEXT_OP_SHEAR = 0x20;
var FR_TEXT_OP_RESIZE = 0x40;
var FR_TEXT_OP_SPLIT = 0x80;
var FR_TEXT_OP_MERGE = 0x100;
var FR_TEXT_OP_ON_UNDO = 0;
var FR_TEXT_OP_ON_REDO = 1;
var FR_TEXT_OP_ON_RELEASE = 2;
var FR_ACTIONWIZARD_NOPRESET = 0x000;
var FR_ACTIONWIZARD_PRESET = 0x001;
var FR_ACTIONWIZARD_PROMPTUSER = 0x002;
var FR_ACTIONWIZARD_NOCREATE = 0x004;
var FR_FILTER_EXCEL = 0x01;
var FR_FILTER_WORD = 0x02;
var FR_FILTER_POWERPOINT = 0x04;
var FR_FILTER_TEXT = 0x08;
var FR_FILTER_IMAGE = 0x10;
var FR_FILTER_HTML = 0x20;
var FR_FILTER_PDF = 0x40;
var FR_FILTER_PROJECT = 0x80;
var FR_FILTER_VISIO = 0x100;
var FR_FILTER_WPS = 0x200;
var FR_FILTER_HWP = 0x400;
var FR_FILTER_OUTLOOK = 0x800;
var FR_FILTER_XPS = 0x1000;
var FR_FILTER_CAD = 0x2000;
var FR_FILTER_ALLFORMAT = 0x4000;
var FR_FILTER_ALL = FR_FILTER_EXCEL | FR_FILTER_WORD | FR_FILTER_POWERPOINT | FR_FILTER_TEXT | FR_FILTER_IMAGE | FR_FILTER_HTML | FR_FILTER_PDF | FR_FILTER_PROJECT | FR_FILTER_VISIO | FR_FILTER_WPS | FR_FILTER_HWP | FR_FILTER_OUTLOOK | FR_FILTER_XPS | FR_FILTER_CAD | FR_FILTER_ALLFORMAT;
var COMPARE_NONE = 0x000;
var COMPARE_TEXT = 0x001;
var COMPARE_TABLE = 0x002;
var COMPARE_TEXT_ATTRI_EQUAL = 0;
var COMPARE_TEXT_ATTRI_FONTCHANGE = 0x00000001;
var COMPARE_TEXT_ATTRI_FONTSIZECHANGE = 0x00000002;
var COMPARE_TEXT_ATTRI_FONTCOLORCHANGE = 0x00000004;
var COMPARE_TEXT_ATTRI_LINE = 0x00000008;
var FRBAC_POINTER = 0;
var FRBAC_SELECT = 1;
var FRBAC_CROSS = 2;
var FRBAC_HBEAM = 3;
var FRBAC_SIZEALL = 4;
var FRBAC_SIZENESW = 5;
var FRBAC_SIZENS = 6;
var FRBAC_SIZENWSE = 7;
var FRBAC_SIZEWE = 8;
var FRBAC_SELECTCOPY = 9;
var FRBAC_SELECTDRAG = 10;
var FRBAC_SELECTNODRAG = 11;
var FRBAC_SELECTCAPTION = 12;
var FR_PRINT_RANGE_ALL = 0;
var FR_PRINT_RANGE_CURRENT_VIEW = 1;
var FR_PRINT_RANGE_CURRENT_PAGE = 2;
var FR_PRINT_RANGE_PAGES = 3;
var FR_PRINT_RANGE_PORTFOLIO_SELECTED = 4;
var FR_PRINT_RANGE_PORTFOLIO_ALL = 5;
var FR_PRINT_SUBSET_ALL = 0;
var FR_PRINT_SUBSET_OLD = 1;
var FR_PRINT_SUBSET_EVEN = 2;
var FR_PRINT_ROTATE_MODE_NOMAL = 0;
var FR_PRINT_ROTATE_MODE_CLOCKWISE = 1;
var FR_PRINT_ROTATE_MODE_COUNTERCLOCKWISE = 2;
var FR_PRINT_ZOOM_MODE_NONE = 0;
var FR_PRINT_ZOOM_MODE_FIT_PAPER = 1;
var FR_PRINT_ZOOM_MODE_REDUCE_PAPER = 2;
var FR_PRINT_ZOOM_MODE_MULTIPLE_PAGES = 3;
var FR_PRINT_ZOOM_MODE_CUSTOM_SCALES = 4;
var FR_PRINT_ZOOM_MODE_TILE_LARGE_PAGES = 5;
var FR_PRINT_ZOOM_MODE_BOOKLET = 6;
var FR_PRINT_DISP_MODE_SINGLE_PAGE = 0;
var FR_PRINT_DISP_MODE_FACING = 1;
var FR_PRINT_ORDER_HORZ = 0;
var FR_PRINT_ORDER_HORZ_REVERSED = 1;
var FR_PRINT_ORDER_VERT = 2;
var FR_PRINT_ORDER_VERT_REVERSED = 3;
var FR_PRINT_WHAT_DOCUMENT = 0;
var FR_PRINT_WHAT_DOCUMENT_MAKEUPS = 1;
var FR_PRINT_WHAT_DOCUMENT_STAMPS = 2;
var FR_PRINT_WHAT_FORM_FIELDS_ONLY = 3;
var FR_PRINT_FACING_2 = 0;
var FR_PRINT_FACING_4 = 1;
var FR_PRINT_FACING_6 = 2;
var FR_PRINT_FACING_9 = 3;
var FR_PRINT_FACING_16 = 4;
var FR_PRINT_FACING_CUSTOM = 5;
var FR_PRINT_BOOKLET_BINDING_RIGHT = 0;
var FR_PRINT_BOOKLET_BINDING_LEFT = 1;
var FR_PRINT_BOOKLET_SUBSET_BOTH = 0;
var FR_PRINT_BOOKLET_SUBSET_FRONT = 1;
var FR_PRINT_BOOKLET_SUBSET_BACK = 2;
var FR_PRINT_HANDLING_NONE = 1;
var FR_PRINT_HANDLING_TILELARGEPAGES = 2;
var FR_PRINT_HANDLING_MULTIPEPAGESPERSHEET = 3;
var FR_PRINT_HANDLING_BOOKLET = 4;
var FR_FMT_TEXT_COLOR = 1;
var FR_FMT_FONT_NAME = 2;
var FR_FMT_FONT_SIZE = 3;
var FR_FMT_BORDER_COLOR = 4;
var FR_FMT_FILL_COLOR = 5;
var FR_FMT_BOLD = 6;
var FR_FMT_ITALIC = 7;
var FR_FMT_ALIGN_LEFT = 8;
var FR_FMT_ALIGN_CENTER = 9;
var FR_FMT_ALIGN_RIGHT = 10;
var FR_FMT_CHAR_SPACE = 11;
var FR_FMT_HORZ_SCALE = 12;
var FR_FMT_LINE_LEADING = 13;
var FR_FMT_UNDERLINE = 14;
var FR_FMT_CROSS = 15;
var FR_FMT_SUPERSCRIPT = 16;
var FR_FMT_SUBSCRIPT = 17;
var FR_FMT_INDENT = 18;
var FR_FMT_DEDENT = 19;
var FR_FMT_WORDSPACE = 20;
var FR_FMT_LINECOLOR = 4;
var FR_FMT_WRITING_DIR = 21;
var FR_FMT_OPACITY = 22;
var FR_FMT_BULLET_SYMBOL = 23;
var FR_FMT_ALIGN_JUSTIFY = 24;
var FR_FMT_PARAGRAPH_SPACING = 25;
var FR_FMT_MODE = 28;
var FR_TOOLBAR_NAME_BASIC_TOOLS = "Basic Tools";
var FR_TOOLBAR_NAME_FILE_TOOLS = "File";
var FR_TOOLBAR_NAME_NAVIGATION_TOOLS = "Navigation";
var FR_TOOLBAR_NAME_ZOOM_TOOLS = "Zoom";
var FR_TOOLBAR_NAME_ROTATEVIEW_TOOLS = "Rotate View";
var FR_TOOLBAR_NAME_FULLSCREEN_TOOLS = "Full Screen";
var FR_TOOLBAR_NAME_TEXTVIEWER_TOOLS = "Text Viwer";
var FR_TOOLBAR_NAME_FLYOUTZOOM_TOOLS = "Zoom Flyout";
var FR_TOOLBAR_NAME_FAVORITE_TOOLS = "Favorite Tools";
var FR_TOOLBAR_NAME_MARKUP_TOOLS = "Commenting Tools";
var FR_TOOLBAR_NAME_FORM_TOOLS = "Form Tools";
var FR_TOOLBAR_NAME_DRAWING_TOOLS = "Drawing Markup Tools";
var FR_TOOLBAR_NAME_TEXT_TOOLS = "Smart Text Tools";
var FR_TOOLBAR_NAME_LINK_TOOLS = "Link Tools";
var FR_TOOLBAR_NAME_MEAS_TOOLS = "Measure Tools";
var FR_TOOLBAR_NAME_MMEDIA_TOOLS = "Multimedia Tools";
var FR_TOOLBAR_NAME_ADVANCED_TOOLS = "Advanced Editing";
var FR_TOOLBAR_NAME_FATACH_TOOLS = "FileAttachment Tools";
var FR_TOOLBAR_NAME_MARKUPS_TOOS = "Markup Tools";
var FR_TOOLBAR_NAME_DRAWING2_TOOLS = "Drawing";
var FR_TOOLBAR_NAME_STAMP_TOOLS = "Stamp Tools";
var FR_TOOLBAR_NAME_FORMAT_TOOLS = "Format Tools";
var FR_TOOLBAR_NAME_FREETEXT_TOOLS = "Typewriter Tools";
var FR_TOOLBAR_NAME_FIND_TOOLS = "Find ToolBar";
var FR_TOOLBAR_NAME_SECURITY_TOOLS = "Security Editing Tools";
var FR_TOOLBAR_NAME_PROPERTY_TOOLS = "Property Tools";
var FR_TOOLBAR_NAME_DIGITAL_TOOLS = "Digital Signature Tools";
var FR_MENU_ENABLE_SAVEAS = "SaveAs";
var FR_MENU_ENABLE_EMAIL = "Email";
var FR_MENU_ENABLE_SNAPSHOT = "Snapshot";
var FR_MENU_ENABLE_STAMP = "Stamp";
var FR_DOCTYPE_PDF = 0;
var FR_DOCTYPE_DYNIMIC_XFA = 1;
var FR_DOCTYPE_STATIC_XFA = 2;
var FR_SIG_STATE_UNSIGNED = 0x00000001;
var FR_SIG_STATE_SIGNED = 0x00000002;
var FR_SIG_VERIFY_VALID = 0x00000004;
var FR_SIG_VERIFY_INVALID = 0x00000008;
var FR_SIG_VERIFY_ERRORDATA = 0x00000010;
var FR_SIG_VERIFY_NOSUPPORTWAY = 0x00000020;
var FR_SIG_VERIFY_ERRORBYTERANGE = 0x00000040;
var FR_SIG_VERIFY_CHANGE = 0x00000080;
var FR_SIG_VERIFY_INCREDIBLE = 0x00000100;
var FR_SIG_VERIFY_SMIDINVALID = 0x00000200;
var FR_SIG_VERIFY_NONECHANGE = 0x00000400;
var FR_SIG_VERIFY_ISSUER_NOVERIFY = 0x00000800;
var FR_SIG_VERIFY_ISSUER_VALID = 0x00001000;
var FR_SIG_VERIFY_ISSUER_UNKNOW = 0x00002000;
var FR_SIG_VERIFY_ISSUER_REVOKE = 0x00004000;
var FR_SIG_VERIFY_ISSUER_EXPIRE = 0x00008000;
var FR_SIG_VERIFY_ISSUER_UNCHECK = 0x00010000;
var FR_SIG_VERIFY_ISSUER_CURRENT = 0x00020000;
var FR_SIG_TIMESTAMP_NONE = 0x00040000;
var FR_SIG_TIMESTAMP_DOC = 0x00080000;
var FR_SIG_TIMESTAMP_VALID = 0x00100000;
var FR_SIG_TIMESTAMP_INVALID = 0x00200000;
var FR_SIG_TIMESTAMP_EXPIRE = 0x00400000;
var FR_SIG_TIMESTAMP_ISSUER_ISUNKNOWN = 0x00800000;
var FR_SIG_TIMESTAMP_ISSUER_ISVALID = 0x01000000;
var FR_SIG_TIMESTAMP_TIMEBEFORE = 0x02000000;
var FR_SIG_STATE_CERT_CANNOT_GET_VRI = 0x04000000;
var FR_SIG_VERIFY_CHANGE_LEGAL = 0x08000000;
var FR_SIG_VERIFY_CHANGE_ILLEGAL = 0x10000000;
var FR_SIG_STATE_UNKNOWN = 0x80000000;
var FR_SIG_VERIFY_ISSUER_INVALID = 0x20000000;
var FR_SIG_VERIFY_ISSUER_ONESIGNER = 0x40000000;
var FR_SIG_STATE_SUB_NONE = 0x00000000;
var FR_SIG_STATE_SUB_ALG_NOSUPPORTWAY = 0x00000001;
var FR_SIG_STATE_SUB_POLICYRESTRICTIONSNOPDFSIG = 0x00000002;
var FR_SIG_SHOW_NAME = 0x001;
var FR_SIG_SHOW_LOCATION = 0x002;
var FR_SIG_SHOW_DN = 0x004;
var FR_SIG_SHOW_DATE = 0x008;
var FR_SIG_SHOW_REASON = 0x010;
var FR_SIG_SHOW_LABEL = 0x020;
var FR_SIG_SHOW_FOXITFLOGO = 0x040;
var FR_SIG_SHOW_ALL = FR_SIG_SHOW_NAME | FR_SIG_SHOW_LOCATION | FR_SIG_SHOW_DN | FR_SIG_SHOW_DATE | FR_SIG_SHOW_REASON | FR_SIG_SHOW_LABEL | FR_SIG_SHOW_FOXITFLOGO;
var FRBA_MOVETYPE_NONE = 0;
var FRBA_MOVETYPE_MOVE = 1;
var FRBA_MOVETYPE_ELSE = 2;
var FRBBS_SOLID = 0;
var FRBBS_DASH = 1;
var FRBBS_BEVELED = 2;
var FRBBS_INSET = 3;
var FRBBS_UNDERLINE = 4;
var FR_MENU_NAME_FILE = "File";
var FR_MENU_NAME_EDIT = "Edit";
var FR_MENU_NAME_VIEW = "View";
var FR_MENU_NAME_TOOLS = "Tools";
var FR_MENU_NAME_HELP = "Help";
var FR_CURSOR_TYPE_ARROW = 0;
var FR_CURSOR_TYPE_CROSS = 1;
var FR_CURSOR_TYPE_HELP = 2;
var FR_CURSOR_TYPE_SIZEALL = 3;
var FR_CURSOR_TYPE_SIZENESW = 4;
var FR_CURSOR_TYPE_SIZENS = 5;
var FR_CURSOR_TYPE_SIZENWSE = 6;
var FR_CURSOR_TYPE_SIZEWE = 7;
var FR_CURSOR_TYPE_UPARROW = 8;
var FR_CURSOR_TYPE_WAIT = 9;
var FR_ROTATE_POS_TOP = 0;
var FR_ROTATE_POS_RIGHT = 1;
var FR_ROTATE_POS_BOTTOM = 2;
var FR_ROTATE_POS_LEFT = 3;
var FR_PDFZOOM_XYZ = 1;
var FR_PDFZOOM_FITPAGE = 2;
var FR_PDFZOOM_FITHORZ = 3;
var FR_PDFZOOM_FITVERT = 4;
var FR_PDFZOOM_FITRECT = 5;
var FR_PDFZOOM_FITBBOX = 6;
var FR_PDFZOOM_FITBHORZ = 7;
var FR_PDFZOOM_FITBVERT = 8;
var FR_SOURCE_TYPE_UNKNOWN = -1;
var FR_SOURCE_TYPE_ANNOTS = 0;
var FR_SOURCE_TYPE_BOOKMARK = 1;
var FR_SOURCE_TYPE_PAGE = 2;
var FR_SOURCE_TYPE_PAGEOBJECTS = 3;
var FR_SOURCE_TYPE_USER = 4;
var FR_SOURCE_TYPE_TAG = 5;
var FR_SOURCE_TYPE_MULTIBOOKMARK = 6;
var FRD_LAYOUT_PREVIEW = 0;
var FRD_LAYOUT_THUMBBAIL = 1;
var FRD_ZMODE_NONE = 0;
var FRD_ZMODE_CUSTOM = 1;
var FRD_ZMODE_ACTUAL_SIZE = 2;
var FRD_ZMODE_FIT_PAGE = 3;
var FRD_ZMODE_FIT_WIDTH = 4;
var FRD_ZMODE_FIT_HEIGHT = 5;
var FRD_ZMODE_FIT_RECTANGLE = 6;
var FRD_ZMODE_FIT_VISIBLE = 7;
var FRD_BRMODE_SINGLE = 0;
var FRD_BRMODE_CONTINUOUS = 1;
var FRD_BRMODE_SINGLE_FACING = 2;
var FRD_BRMODE_CONTINUOUS_FACING = 3;
var FRMS_ACTIVATE_MACHINE = 0x01;
var FRMS_ACTIVATE_CREDENTIAL = 0x02;
var FRMS_NEEDS_MACHINE_ACTIVATION = 0x8004CF3D;
var FRMS_NEEDS_CREDENTIAL_ACTIVATION = 0x8004CF3E;
var FPD_CHANGE_NONE = 0;
var FPD_CHANGE_STRETCH = 0x0001;
var FPD_CHANGE_FORMAT = 0x0002;
var FPD_STRETCH_OFF = -1;
var FPD_STRETCH_DEFAULT = 0;
var FPD_STRETCH_DOWNSAMPLE = "FXDIB_DOWNSAMPLE";
var FPD_STRETCH_BICUBIC = "FXDIB_BICUBIC_INTERPOL";
var FPD_STRETCH_INTERPOL = "FXDIB_INTERPOL";
var FPD_STRETCH_NOSMOOTH = "FXDIB_NOSMOOTH";
var FPD_IMAGE_UNKNOWN = 0;
var FPD_IMAGE_COLOR = 1;
var FPD_IMAGE_GRAY = 2;
var FPD_IMAGE_MONO = 3;
var FPD_QUALITY_LOSSLESS = 0;
var FPD_QUALITY_LOSSY = -9999;
var FPD_QUALITYLV_MIN = -1;
var FPD_QUALITYLV_LOW = -2;
var FPD_QUALITYLV_MEDIUM = -3;
var FPD_QUALITYLV_HIGH = -4;
var FPD_QUALITYLV_MAX = -5;
var FPD_COMPRESSION_CCITT3 = 10001;
var FPD_COMPRESSION_CCITT4 = 10002;
var FPD_COMPRESSION_HIGH = 10003;
var FPD_COMPRESSION_JBIG2 = 10004;
var FPD_COMPRESSION_JPEG = 10005;
var FPD_COMPRESSION_JPEG2000 = 10006;
var FPD_COMPRESSION_RETAIN = 10007;
var FPD_COMPRESSION_RUNLENGTH = 10008;
var FPD_COMPRESSION_ZIP = 10009;
var FPD_ALLOW_CHANGEFORMAT = 0x00000001;
var FPD_ALLOW_SELECTALLALGORITHM = 0x00000002;
var FPD_OPTMIZER_DEFAULT = 0;
var FPD_OPTMIZER_DUPLICATE = 1;
var FPD_OPTMIZER_INVALID = 2;
var FPD_OPTMIZER_ACTION = 4;
var FPDMBF_OK = 0x00000000;
var FPDMBF_OKCANCEL = 0x00000001;
var FPDMBF_ABORTRETRYIGNORE = 0x00000002;
var FPDMBF_YESNOCANCEL = 0x00000003;
var FPDMBF_YESNO = 0x00000004;
var FPDMBF_RETRYCANCEL = 0x00000005;
var FPDMBF_ICONHAND = 0x00000010;
var FPDMBF_ICONQUESTION = 0x00000020;
var FPDMBF_ICONEXCLAMATION = 0x00000030;
var FPDMBF_ICONINFORMATION = 0x00000040;
var OFD_CIPHER_NONE = 0;
var OFD_CIPHER_RC4 = 1;
var OFD_CIPHER_AES128 = 2;
var OFD_CIPHER_AES192 = 3;
var OFD_CIPHER_AES256 = 4;
var OFD_CIPHER_SM4 = 5;
var OFD_COLOR_MODE_NORMAL = 0;
var OFD_COLOR_MODE_GRAY = 1;
var OFD_COLOR_MODE_TWOCOLOR = 2;
var OFD_COLOR_MODE_ANYCOLOR = 3;
var OFD_RENDER_PROGRESSIVE_RENDING = 0x100;
var OFD_RENDER_NOUSE_FXTEXT_CLEARTYPE = 0x200;
var OFD_RENDER_RESOURCE_NOCACHE = 0x20;
var OFD_RENDER_PRINTSUBIMAGE = 0x40;
var OFD_RENDER_DISPLAYTHUMBNAIL = 0x80;
var OFD_RENDER_NODISPLAY_BACKGROUND_TEMPLATEPAGE = 0x10;
var OFD_RENDER_ANNOT_NOTUSEBOUND = 0x400;
var OFD_RENDER_PAGE_NOTUSECROPBOX = 0x800;
var OFD_RENDER_PAGE_NOTUSEPAGEAREA = 0x1000;
var OFD_RENDER_LAYER_NODISPLAY_FD_LAYER = 0x1;
var OFD_RENDER_LAYER_NODISPLAY_FD_TEMPLATE = 0x2;
var OFD_RENDER_LAYER_NODISPLAY_BY_LAYER = 0x4;
var OFD_RENDER_LAYER_NODISPLAY_BY_TEMPLATE = 0x8;
var OFD_RENDER_LAYER_NODISPLAY_BD_LAYER = 0x10;
var OFD_RENDER_LAYER_NODISPLAY_BD_TEMPLATE = 0x20;
var FS3DE_USIZE_MAX = "SIZE_MAX";
var FS3DE_ISIZE_MAX = "INTPTR_MAX";
var FS3DE_ISIZE_MIN = "INTPTR_MIN";
var FS3DE_CANVAS_NATIVE_HANDLE = "FS_HWND";
var FS3DE_PI = "3.14159265358979323846f";
var FS3DE_ALMOST_PI = "(FS3DE_PI * 0.999f)";
var FPD_BCExceptionNO = 0;
var FPD_BCExceptionNotFound = 1;
var FPD_BCExceptionEndLessThanStart = 2;
var FPD_BCExceptionUnknownDecoder = 3;
var FPD_BCExceptionRotateNotSupported = 4;
var FPD_BCExceptionHeightAndWidthMustBeAtLeast1 = 5;
var FPD_BCExceptionRegionMustFitInsideMatrix = 6;
var FPD_BCExceptionCanNotCallGetDimensionOnNonSquareMatrix = 7;
var FPD_BCExceptionFormatException = 8;
var FPD_BCExceptionIllegalArgumentMustMatchVersionSize = 9;
var FPD_BCExceptionChecksumException = 10;
var FPD_BCExceptionIllegalArgumentInvalidFirstDigit = 11;
var FPD_BCExceptionIllegalArgumentInvalidSecondDigit = 12;
var FPD_BCExceptionRuntimeDecodingInvalidISO_IEC = 13;
var FPD_BCExceptionRuntimeDecodingInvalidAlphanumeric = 14;
var FPD_BCExceptionLeftAndTopMustBeNonnegative = 15;
var FPD_BCExceptionIllegalArgument = 16;
var FPD_BCExceptionBadECI = 17;
var FPD_BCExceptionUnSupportedBarcode = 18;
var FPD_BCExceptionUnSupportedString = 19;
var FPD_BCExceptionDigitLengthMustBe8 = 20;
var FPD_BCExceptionDataCheckException = 21;
var FPD_BCExceptionExtractNumberValueFromBitArray = 22;
var FPD_BCExceptionRead = 23;
var FPD_BCExceptionRequestedRowIsOutSizeTheImage = 24;
var FPD_BCExceptionNoContents = 26;
var FPD_BCExceptionUnSupportEclevel = 27;
var FPD_BCExceptionUnSupportMode = 28;
var FPD_BCExceptionReferenceMustBeBetween0And7 = 29;
var FPD_BCExceptionBadErrorLocation = 30;
var FPD_BCExceptionDegreeIsNegative = 31;
var FPD_BCExceptionDivideByZero = 32;
var FPD_BCExceptionCoefficientsSizeIsNull = 33;
var FPD_BCExceptionNoCorrectionBytes = 34;
var FPD_BCExceptionNoDataBytesProvided = 35;
var FPD_BCExceptionR_I_1IsZero = 36;
var FPD_BCExceptionAIsZero = 37;
var FPD_BCExceptionIsZero = 38;
var FPD_BCExceptionDegreeNotMatchRoots = 39;
var FPD_BCExceptionContentsLengthShouldBetween1and80 = 40;
var FPD_BCExceptionOnlyEncodeCODE_128 = 41;
var FPD_BCExceptionOnlyEncodeCODE_39 = 42;
var FPD_BCExceptionOnlyEncodeEAN_13 = 43;
var FPD_BCExceptionOnlyEncodeEAN_8 = 44;
var FPD_BCExceptionOnlyEncodeITF = 45;
var FPD_BCExceptionDigitLengthShould13 = 46;
var FPD_BCExceptionDigitLengthMustBe6or8or10or12or14or16or20or24or44 = 47;
var FPD_BCExceptionOnlyEncodeUPC_A = 48;
var FPD_BCExceptionDigitLengthShouldBe12 = 49;
var FPD_BCExceptionValueMustBeEither0or1 = 50;
var FPD_BCExceptionReedsolomnDecodeException = 51;
var FPD_BCExceptionBadIndexException = 52;
var FPD_BCExceptionBadValueException = 53;
var FPD_BCExceptionBadNumBitsException = 54;
var FPD_BCExceptioncanNotOperatexorOperator = 55;
var FPD_BCExceptionVersionMust1_40 = 56;
var FPD_BCExceptionUnknown = 57;
var FPD_BCExceptionNoSuchVersion = 58;
var FPD_BCExceptionCannotFindBlockInfo = 59;
var FPD_BCExceptionDataTooBig = 60;
var FPD_BCExceptionInvalidQRCode = 61;
var FPD_BCExceptionDataTooMany = 62;
var FPD_BCExceptionBitsNotEqualCacity = 63;
var FPD_BCExceptionUnsupportedMode = 64;
var FPD_BCExceptionInvalidateCharacter = 65;
var FPD_BCExceptionBytesNotMatchOffset = 66;
var FPD_BCExceptionSizeInBytesDiffer = 67;
var FPD_BCExceptionInvalidateMaskPattern = 68;
var FPD_BCExceptionNullPointer = 69;
var FPD_BCExceptionBadMask = 70;
var FPD_BCExceptionBitSizeNot15 = 71;
var FPD_BCExceptionBitSizeNot18 = 72;
var FPD_BCExceptionInvalidateImageData = 73;
var FPD_BCExceptionHeight_8BeZero = 74;
var FPD_BCExceptionCharacterNotThisMode = 75;
var FPD_BCExceptionBitsBytesNotMatch = 76;
var FPD_BCExceptionInvalidateData = 77;
var FPD_BCExceptionLoadFile = 78;
var FPD_BCExceptionPDF417EncodeFail = 79;
var FPD_BCExceptionFailToCreateBitmap = 80;
var FPD_BCExceptionLoadFontFail = 81;
var FPD_BCExceptionOnlyEncodeCODEBAR = 82;
var FPD_BCExceptionCodabarShouldStartWithOneOfABCD = 83;
var FPD_BCExceptionCodabarShouldEndWithOneOfTNE = 84;
var FPD_BCExceptionCodabarEncodeCharsInvalid = 85;
var FPD_BCExceptionOnlyEncodeDATAMATRIX = 86;
var FPD_BCExceptionCharactersOutsideISO88591Encoding = 87;
var FPD_BCExceptionIllegalDataCodewords = 88;
var FPD_BCExceptionCannotHandleThisNumberOfDataRegions = 89;
var FPD_BCExceptionIllegalStateUnexpectedCase = 90;
var FPD_BCExceptionIllegalStateCountMustNotExceed4 = 91;
var FPD_BCExceptionIllegalStateMessageLengthInvalid = 92;
var FPD_BCExceptionIllegalArgumentNotGigits = 93;
var FPD_BCExceptionIllegalStateIllegalMode = 94;
var FPD_BCExceptionOnlyEncodePDF417 = 95;
var FPD_BCExceptionNonEncodableCharacterDetected = 96;
var FPD_BCExceptionErrorCorrectionLevelMustBeBetween0And8 = 97;
var FPD_BCExceptionNoRecommendationPossible = 98;
var FPD_BCExceptionIllegalArgumentnMustBeAbove0 = 99;
var FPD_BCExceptionUnableToFitMessageInColumns = 100;
var FPD_BCExceptionEncodedMessageContainsTooManyCodeWords = 101;
var FPD_BCExceptionBitmapSizeError = 102;
var FPD_BCExceptionFormatInstance = 102;
var FPD_BCExceptionChecksumInstance = 103;
var FPD_BCExceptiontNotFoundInstance = 104;
var FPD_BCExceptionNotFoundInstance = 105;
var FPD_BCExceptionCannotMetadata = 106;
var FPD_LOADERR_SUCCESS = 0;
var FPD_LOADERR_MEMORY = 1;
var FPD_LOADERR_ERROR = 2;
var FPD_LOADERR_PASSWORD = 3;
var FPD_LOADERR_FORMAT = 4;
var FPD_LOADERR_FILE = 5;
var FPD_LOADERR_PARAM = 6;
var FPD_LOADERR_STATUS = 7;
var FPD_LOADERR_TOBECONTINUED = 8;
var FPD_LOADERR_NOTFOUND = 9;
var FPD_PERM_PRINT = 0x0004;
var FPD_PERM_MODIFY = 0x0008;
var FPD_PERM_EXTRACT = 0x0010;
var FPD_PERM_ANNOT_FORM = 0x0020;
var FPD_PERM_FILL_FORM = 0x0100;
var FPD_PERM_EXTRACT_ACCESS = 0x0200;
var FPD_PERM_ASSEMBLE = 0x0400;
var FPD_PERM_PRINT_HIGH = 0x0800;
var FPD_SAVE_DEFAULT = 0;
var FPD_SAVE_INCREMENTAL = 1;
var FPD_SAVE_NO_ORIGINAL = 2;
var FPD_SAVE_PROGRESSIVE = 4;
var FPD_SAVE_OBJECTSTREAM = 8;
var FPD_BOOKMARK_ITALIC = 1;
var FPD_BOOKMARK_BOLD = 2;
var FPD_ZOOM_XYZ = 1;
var FPD_ZOOM_FITPAGE = 2;
var FPD_ZOOM_FITHORZ = 3;
var FPD_ZOOM_FITVERT = 4;
var FPD_ZOOM_FITRECT = 5;
var FPD_ZOOM_FITBBOX = 6;
var FPD_ZOOM_FITBHORZ = 7;
var FPD_ZOOM_FITBVERT = 8;
var FPD_NAMED_NEXTPAGE = 1;
var FPD_NAMED_PREVPAGE = 2;
var FPD_NAMED_FIRSTPAGE = 3;
var FPD_NAMED_LASTPAGE = 4;
var FPD_JS_MAXLENGTH = 64;
var FPD_ANNOTFLAG_INVISIBLE = 1;
var FPD_ANNOTFLAG_HIDDEN = 2;
var FPD_ANNOTFLAG_PRINT = 4;
var FPD_ANNOTFLAG_NOZOOM = 8;
var FPD_ANNOTFLAG_NOROTATE = 0x10;
var FPD_ANNOTFLAG_NOVIEW = 0x20;
var FPD_ANNOTFLAG_READONLY = 0x40;
var FPD_ANNOTFLAG_LOCKED = 0x80;
var FPD_ANNOTFLAG_TOGGLENOVIEW = 0x100;
var FPD_FORM_FIELDTYPE_UNKNOWN = 0;
var FPD_FORM_FIELDTYPE_PUSHBUTTON = 1;
var FPD_FORM_FIELDTYPE_CHECKBOX = 2;
var FPD_FORM_FIELDTYPE_RADIOBUTTON = 3;
var FPD_FORM_FIELDTYPE_COMBOBOX = 4;
var FPD_FORM_FIELDTYPE_LISTBOX = 5;
var FPD_FORM_FIELDTYPE_TEXTFIELD = 6;
var FPD_FORM_FIELDTYPE_SIGNATURE = 7;
var FPD_FIELDFLAG_READONLY = 1;
var FPD_FIELDFLAG_REQUIRED = 2;
var FPD_FIELDFLAG_NOEXPORT = 4;
var FPD_FIELDFLAG_MULTILINE = 1 << 12;
var FPD_FIELDFLAG_PASSWORD = 1 << 13;
var FPD_FIELDFLAG_FILESELECT = 1 << 20;
var FPD_FIELDFLAG_DONOTSPELLCHECK = 1 << 22;
var FPD_FIELDFLAG_DONOTSCROLL = 1 << 23;
var FPD_FIELDFLAG_COMB = 1 << 24;
var FPD_FIELDFLAG_RICHTEXT = 1 << 25;
var FPD_FIELDFLAG_NOTOGGLETOOFF = 1 << 14;
var FPD_FIELDFLAG_RADIO = 1 << 15;
var FPD_FIELDFLAG_PUSHBUTTON = 1 << 16;
var FPD_FIELDFLAG_RADIOSINUNISON = 1 << 25;
var FPD_FIELDFLAG_COMBO = 1 << 17;
var FPD_FIELDFLAG_EDIT = 1 << 18;
var FPD_FIELDFLAG_SORT = 1 << 19;
var FPD_FIELDFLAG_MULTISELECT = 1 << 21;
var FPD_FIELDFLAG_COMMITONSELCHANGE = 1 << 26;
var FPD_FORM_FIELD_READONLY = 0x01;
var FPD_FORM_FIELD_REQUIRED = 0x02;
var FPD_FORM_FIELD_NOEXPORT = 0x04;
var FPD_FORM_RADIO_NOTOGGLEOFF = 0x100;
var FPD_FORM_RADIO_UNISON = 0x200;
var FPD_FORM_TEXT_MULTILINE = 0x100;
var FPD_FORM_TEXT_PASSWORD = 0x200;
var FPD_FORM_TEXT_NOSCROLL = 0x400;
var FPD_FORM_TEXT_COMB = 0x800;
var FPD_FORM_COMBO_EDIT = 0x100;
var FPD_FORM_LIST_MULTISELECT = 0x100;
var FPD_TEXT_POS_CAPTION = 0;
var FPD_TEXT_POS_ICON = 1;
var FPD_TEXT_POS_BELOW = 2;
var FPD_TEXT_POS_ABOVE = 3;
var FPD_TEXT_POS_RIGHT = 4;
var FPD_TEXT_POS_LEFT = 5;
var FPD_TEXT_POS_OVERLAID = 6;
var FPD_CLRTYPE_TRANSPARENT = 0;
var FPD_CLRTYPE_GRAY = 1;
var FPD_CLRTYPE_RGB = 2;
var FPD_CLRTYPE_CMYK = 3;
var FPD_NOTIFY_RESET_SIGNATURE_FIELD = 3;
var FPD_NOTIFY_SUCCESS = 2;
var FPD_NOTIFY_SUCCESS_WITHOUT_NOTIFY = 1;
var FPD_NOTIFY_FAILED_WITHOUT_NOTIFY = 0;
var FPD_NOTIFY_FAILED_DESTROY_FIELD = -1;
var FPD_NOTIFY_FAILED_DESTROY_CONTROL = -2;
var FPD_NOTIFY_FAILED_DESTROY_PAGE = -3;
var FPD_NOTIFY_FAILED_DESTROY_DOCUMENT = -4;
var FPD_NOTIFY_FAILED_DESTROY_OPTIONS = -5;
var FPD_CONNECT_DOCUMENTID = 0x01;
var FPD_CONNECT_VERSIONID = 0x02;
var FPD_CONNECT_REVIEWID = 0x03;
var FPD_CONNECT_PRINTING = 0x0001;
var FPD_CONNECT_FORMFILL = 0x0002;
var FPD_CONNECT_COMMENT = 0x0004;
var FPD_CONNECT_PAGES = 0x0008;
var FPD_CONNECT_BOOKMARKS = 0x0010;
var FPD_CONNECT_COPY = 0x0020;
var FPD_CONNECT_SIGN = 0x0040;
var FPD_CONNECT_EXTRACT = 0x0080;
var FPD_CONNECT_SUBMIT_UPDATE = 0x01;
var FPD_CONNECT_SUBMIT_RECEIVE = 0x02;
var FPD_WRAPPERTYPE_NO = 0;
var FPD_WRAPPERTYPE_FOXIT = 1;
var FPD_WRAPPERTYPE_PDF2 = 2;
var FPD_SIGNATURE_FIELD = -1;
var FPD_SIGNATURE_ORDINARY = 0;
var FPD_SIGNATURE_DOCMDP = 1;
var FPD_SIGNATURE_FIELDMDP = 2;
var FPD_SIGNATURE_TIMESTAMP = 3;
var FPD_SIGNATURE_STATE_SUB_SEAL_CERT_NOT_IN_VALIDITY_PERIOD = 0x00000004;
var FPD_SIGNATURE_STATE_SUB_SEAL_NOT_IN_VALIDITY_PERIOD = 0x00000008;
var FPD_SIGNATURE_STATE_SUB_SEAL_INVALID = 0x00000010;
var FPD_SIGNATURE_STATE_SUB_SEAL_CERT_NOTINLIST = 0x00000020;
var FPD_SIGNATURE_STATE_SUB_SEAL_MUST_CHECKREVOKE = 0x00000040;
var FPD_SIGNATURE_STATE_SUB_TIMESTAMP_BEFORE = 0x00000080;
var FPD_SIGNATURE_STATE_SUB_SIGN_INVALID = 0x00000100;
var FPD_SIGNATURE_STATE_SUB_SIGN_HASH_INVALID = 0x00000200;
var FPDXFA_WIDGETSTATUS_Visible = 0x00000001;
var FPDXFA_WIDGETSTATUS_Invisible = 0x00000002;
var FPDXFA_WIDGETSTATUS_Hidden = 0x00000004;
var FPDXFA_WIDGETSTATUS_Viewable = 0x00000010;
var FPDXFA_WIDGETSTATUS_Printable = 0x00000020;
var FPDXFA_WIDGETSTATUS_Focused = 0x00000100;
var FPDXFA_INVALIDATE_AllPages = 0x00000000;
var FPDXFA_INVALIDATE_CurrentPage = 0x00000001;
var FPDSKFError_EnumDev = 0x0001;
var FPDSKFError_EnumContainer = 0x0002;
var FPDSKFError_ConnectDev = 0x0003;
var FPDSKFError_EnumApplication = 0x0004;
var FPDSKFError_OpenApplication = 0x0005;
var FPDSKFError_VerifyPIN = 0x0006;
var FPDSKFError_OpenContainer = 0x0007;
var FPDSKFError_ExportCertificate = 0x0008;
var FPDSKFError_NoFindCert = 0x000D;
var FPDSKFError_DeriverLoadError = 0x000E;
var FPDSKFError_CannotGetPriKey = 0x000F;
var FPDSKFError_Cancel = 0x0010;
var FPDSKFError_SetDriver = 0x0011;
var FPDINSERT_OPTION_ATTACHMENTS = 0x0001;
var FPDINSERT_OPTION_BOOKMARK = 0x0002;
var FPDINSERT_OPTION_NOANNOT = 0x0004;
var FPDINSERT_OPTION_NOACROFORM = 0x0008;
var FPDDELETE_OPTION_NOACROFORM = 0x0001;
var FPDDELETE_OPTION_NOANNOTACTION = 0x0002;
var FPDEXTRACT_OPTION_ANNOT = 0x0001;
var FPDEXTRACT_OPTION_STRUCTRUETREE = 0x0002;
var FPDEXTRACT_OPTION_JAVASCRIPT = 0x0004;
var FPDEXTRACT_OPTION_OCPROPERTIES = 0x0008;
var FPDEXTRACT_OPTION_OBJECTSTREAM = 0x0010;
var FPDEXTRACT_OPTION_ATTACHFILES = 0x0020;
var FPDEXTRACT_OPTION_OUTLINE = 0x0040;
var FPD_PVTWORD_STYLE_NORMAL = 0x0000;
var FPD_PVTWORD_STYLE_HIGHLIGHT = 0x0001;
var FPD_PVTWORD_STYLE_UNDERLINE = 0x0002;
var FPD_PVTWORD_STYLE_CROSSOUT = 0x0004;
var FPD_PVTWORD_STYLE_SQUIGGLY = 0x0008;
var FPD_PVTWORD_STYLE_DUALCROSSOUT = 0x0010;
var FPD_PVTWORD_STYLE_FORMXOBJECT = 0x0020;
var FPD_PVTWORD_STYLE_ITALIC = 0x40;
var FPD_PVTWORD_STYLE_LINE_END_TYPESET_SPACE = 0x0080;
var FPD_PVTWORD_STYLE_BOLD = 0x40000;
var FPD_PVTWORD_SCRIPT_NORMAL = 0;
var FPD_PVTWORD_SCRIPT_SUPER = 1;
var FPD_PVTWORD_SCRIPT_SUB = 2;
var FPD_FDE_TEXTSEARCH_MatchCase = 0x00000001;
var FPD_FDE_TEXTSEARCH_MatchWholdWord = 0x00000002;
var FPD_FDE_TEXTSEARCH_Consecutive = 0x00000004;
var FPD_FDE_TXTLINEALIGNMENT_Left = 0;
var FPD_FDE_TXTLINEALIGNMENT_Center = 1;
var FPD_FDE_TXTLINEALIGNMENT_Right = 2;
var FPD_FDE_TXTLINEALIGNMENT_Justified = 1 << 2;
var FPD_FDE_TXTLINEALIGNMENT_Distributed = 2 << 2;
var FPD_FDE_TXTLINEALIGNMENT_JustifiedLeft = FPD_FDE_TXTLINEALIGNMENT_Left | FPD_FDE_TXTLINEALIGNMENT_Justified;
var FPD_FDE_TXTLINEALIGNMENT_JustifiedCenter = FPD_FDE_TXTLINEALIGNMENT_Center | FPD_FDE_TXTLINEALIGNMENT_Justified;
var FPD_FDE_TXTLINEALIGNMENT_JustifiedRight = FPD_FDE_TXTLINEALIGNMENT_Right | FPD_FDE_TXTLINEALIGNMENT_Justified;
var FPD_FDE_TXTLINEALIGNMENT_DistributedLeft = FPD_FDE_TXTLINEALIGNMENT_Left | FPD_FDE_TXTLINEALIGNMENT_Distributed;
var FPD_FDE_TXTLINEALIGNMENT_DistributedCenter = FPD_FDE_TXTLINEALIGNMENT_Center | FPD_FDE_TXTLINEALIGNMENT_Distributed;
var FPD_FDE_TXTLINEALIGNMENT_DistributedRight = FPD_FDE_TXTLINEALIGNMENT_Right | FPD_FDE_TXTLINEALIGNMENT_Distributed;
var FPDFM_CHARSET_ANSI = 0;
var FPDFM_CHARSET_Default = 1;
var FPDFM_CHARSET_Symbol = 2;
var FPDFM_CHARSET_MAC_Roman = 77;
var FPDFM_CHARSET_MAC_ShiftJIS = 78;
var FPDFM_CHARSET_MAC_Korean = 79;
var FPDFM_CHARSET_MAC_ChineseSimplified = 80;
var FPDFM_CHARSET_MAC_ChineseTraditional = 81;
var FPDFM_CHARSET_MAC_Johab = 82;
var FPDFM_CHARSET_MAC_Hebrew = 83;
var FPDFM_CHARSET_MAC_Arabic = 84;
var FPDFM_CHARSET_MAC_Greek = 85;
var FPDFM_CHARSET_MAC_Turkish = 86;
var FPDFM_CHARSET_MAC_Thai = 87;
var FPDFM_CHARSET_MAC_EasternEuropean = 88;
var FPDFM_CHARSET_MAC_Cyrillic = 89;
var FPDFM_CHARSET_ShiftJIS = 128;
var FPDFM_CHARSET_Korean = 129;
var FPDFM_CHARSET_Johab = 130;
var FPDFM_CHARSET_ChineseSimplified = 134;
var FPDFM_CHARSET_ChineseTraditional = 136;
var FPDFM_CHARSET_MSWin_Greek = 161;
var FPDFM_CHARSET_MSWin_Turkish = 162;
var FPDFM_CHARSET_MSWin_Vietnamese = 163;
var FPDFM_CHARSET_MSWin_Hebrew = 177;
var FPDFM_CHARSET_MSWin_Arabic = 178;
var FPDFM_CHARSET_ArabicTraditional = 179;
var FPDFM_CHARSET_ArabicUser = 180;
var FPDFM_CHARSET_HebrewUser = 181;
var FPDFM_CHARSET_MSWin_Baltic = 186;
var FPDFM_CHARSET_MSWin_Cyrillic = 204;
var FPDFM_CHARSET_Thai = 222;
var FPDFM_CHARSET_MSWin_EasterEuropean = 238;
var FPDFM_CHARSET_US = 254;
var FPDFM_CHARSET_OEM = 255;
var FPDXM_LANGUAGE_English = 0;
var FPDXM_LANGUAGE_Japanese = 11;
var FPDXM_LANGUAGE_Chinese_Traditional = 19;
var FPDXM_LANGUAGE_Korean = 23;
var FPDXM_LANGUAGE_Chinese_Simplified = 33;
var FPDXM_PLATFORM_WINDOWS = 1;
var FPDXM_PLATFORM_LINUX = 2;
var FPDXM_PLATFORM_APPLE = 3;
var FPDXM_PLATFORM_ANDROID = 4;
var FPDLR_VERSION_2_5 = 20500;
var FPDLR_VERSION_2_6 = 20600;
var FPDLR_VERSION_2_6_1 = 20601;
var FPDLR_VERSION_2_6_2 = 20602;
var FPDLR_VERSION_LATEST = "FPDLR_VERSION_2_6_1";
var FPDLR_VERSION_DEFAULT = "FPDLR_VERSION_2_5";
var FPDLR_ETMask_StructureStandard = 0x00000000;
var FPDLR_ETMask_StructureCustom = 0x40000000;
var FPDLR_ETMask_PageObject = 0x80000000;
var FPDLR_ETMask_Content = 0xC0000000;
var FPDLR_ETMaskSelector = 0xC0000000;
var FPDLR_PROFILE_STANDARD = 0x00000000;
var FPDLR_PROFILE_STRUCTURE_MARKUP = 0x00010000;
var FPDLR_PROFILE_CONTENTFLOW = 0x00020000;
var FPDLR_PROFILE_CONTENTFLOW_NONSTRICT = 0x00028000;
var FPDLR_PROFILE_SLIDEDECK = 0x00030000;
var FPDLR_PROFILE_SPREADSHEET = 0x00040000;
var FPDLR_PROFILE_FORMFILL_NONSTRICT = 0x00058000;
var FPDLR_PROFILE_NN_STANDARD = 0x00060000;
var FPDLR_PROFILE_NN_STANDARD_TEST = 0x00061000;
var FPDLR_PROFILE_TEST_PAGINATION_ONLY = 0x00062000;
var FPDLR_PROFILE_DIVIDING_TEXTLINE_ONLY = 0x00063000;
var FPDLR_PROFILE_TEXT_NODE_ONLY = 0x00064000;
var FPDLR_PROFILE_CONVERT_WML = 0x00065000;
var FPDLR_PROFILE_CONVERT_PML = 0x00066000;
var FPDLR_PROFILE_CONVERT_SML = 0x00067000;
var FPDLR_PROFILE_25_SECTION = 0x00068000;
var FPDLR_PROFILE_DOCUMENTBODY_GENERATE = 0x00069000;
var FPDLR_PROFILE_INTERNAL_TEXTGROUP = 0x00070000;
var FPDLR_PROFILE_ABOX = 0x00071000;
var FPDLR_PROFILE_PAGINATION_OCR = 0x00072000;
var FPDLR_PROFILE_CONVERT_TXT = 0x00073000;
var FPDLR_PROFILE_COLOR_GROUP_WML = 0x00074000;
var FPDLR_PROFILE_TEST_NEW_FEATURE = 0xFFFFFFFF;
var FPDLR_PROFILE_AUTO_TAG = "auto_tag";
var FPDLR_StructureETMask_Document = 0x0000;
var FPDLR_StructureETMask_Grouping = 0x0100;
var FPDLR_StructureETMask_BLSE = 0x0200;
var FPDLR_StructureETMask_ILSE = 0x0300;
var FPDLR_StructureETMask_Illustration = 0x0400;
var FPDLR_StructureETMask_Artifact = 0x1000;
var FPDLR_StructureETMask_User = 0x8000;
var FPDLR_StructureETMaskSelector = 0xFF00;
var FPDLR_StructureTypeETMaskSelector = 0xFFFF;
var FPDPAGE_LR_PLACE = 0x0B;
var FPDPAGE_LR_ANNOT_APPEARANCE = 0x09;
var FPDPAGE_LR_PARTIAL = 0x0A;
var FPDPAGE_LR_CONTAINER = 0x0C;
var FPDPAGE_LR_COMPLEX = 0x0D;
var FPDPAGE_LR_ANNOT = 0x0E;
var FPDPAGE_LR_PAGE = 0x0F;
var FPDLR_ET_TextContentElement = FPDLR_ETMask_Content | FPD_PAGEOBJ_TEXT;
var FPDLR_ET_PathContentElement = FPDLR_ETMask_Content | FPD_PAGEOBJ_PATH;
var FPDLR_ET_ImageContentElement = FPDLR_ETMask_Content | FPD_PAGEOBJ_IMAGE;
var FPDLR_ET_ShadingContentElement = FPDLR_ETMask_Content | FPD_PAGEOBJ_SHADING;
var FPDLR_ET_AnnotContentElement = FPDLR_ETMask_Content | FPDPAGE_LR_ANNOT;
var FPDLR_ET_ComplexContentElement = FPDLR_ETMask_Content | FPDPAGE_LR_COMPLEX;
var FPDLR_ET_TextObject = FPDLR_ETMask_PageObject | FPD_PAGEOBJ_TEXT;
var FPDLR_ET_PathObject = FPDLR_ETMask_PageObject | FPD_PAGEOBJ_PATH;
var FPDLR_ET_ImageObject = FPDLR_ETMask_PageObject | FPD_PAGEOBJ_IMAGE;
var FPDLR_ET_ShadingObject = FPDLR_ETMask_PageObject | FPD_PAGEOBJ_SHADING;
var FPDLR_ET_FormObject = FPDLR_ETMask_PageObject | FPD_PAGEOBJ_FORM;
var FPDLR_ET_AnnotObject = FPDLR_ETMask_PageObject | FPDPAGE_LR_ANNOT;
var FPDLR_ET_ContainerObject = FPDLR_ETMask_PageObject | FPDPAGE_LR_CONTAINER;
var FPDLR_ET_PageObject = FPDLR_ETMask_PageObject | FPDPAGE_LR_PAGE;
var FPDLR_ET_AnnotAppearanceObject = FPDLR_ETMask_PageObject | FPDPAGE_LR_ANNOT_APPEARANCE;
var FPDFILL_ALTERNATE = 1;
var FPDFILL_WINDING = 2;
var FPDFILL_FULLCOVER = 4;
var FPDFILL_RECT_AA = 8;
var FPD_FILL_STROKE = 16;
var FPD_STROKE_ADJUST = 32;
var FPD_STROKE_TEXT_MODE = 64;
var FPD_FILL_TEXT_MODE = 128;
var FPD_ZEROAREA_FILL = 256;
var FPDFILL_NOPATHSMOOTH = 512;
var FPD_TEXTKNOCKOUT = 1024;
var FPD_OBJ_INVALID = 0;
var FPD_OBJ_BOOLEAN = 1;
var FPD_OBJ_NUMBER = 2;
var FPD_OBJ_STRING = 3;
var FPD_OBJ_NAME = 4;
var FPD_OBJ_ARRAY = 5;
var FPD_OBJ_DICTIONARY = 6;
var FPD_OBJ_STREAM = 7;
var FPD_OBJ_NULL = 8;
var FPD_OBJ_REFERENCE = 9;
var FPDPAGEOBJECTS_PAGE = 1;
var FPDPAGEOBJECTS_FORMX = 2;
var FPD_TRANS_GROUP = 0x0100;
var FPD_TRANS_ISOLATED = 0x0200;
var FPD_TRANS_KNOCKOUT = 0x0400;
var FPD_CONTENT_NOT_PARSED = 0;
var FPD_CONTENT_PARSING = 1;
var FPD_CONTENT_PARSED = 2;
var FPD_2TXT_AUTO_ROTATE = 1;
var FPD_2TXT_AUTO_WIDTH = 2;
var FPD_2TXT_KEEP_COLUMN = 4;
var FPD_2TXT_USE_OCR = 8;
var FPD_2TXT_INCLUDE_INVISIBLE = 16;
var FPD_RENDERCOLOR_NORMAL = 0;
var FPD_RENDERCOLOR_GRAY = 1;
var FPD_RENDERCOLOR_TWOCOLOR = 2;
var FPD_RENDERCOLOR_ALPHA = 3;
var FPD_RENDERCOLOR_CUSTOM = 4;
var FPD_PARSE_ERROR_SUCCESS = 0;
var FPD_PARSE_ERROR_FILE = 1;
var FPD_PARSE_ERROR_FORMAT = 2;
var FPD_PARSE_ERROR_PASSWORD = 3;
var FPD_PARSE_ERROR_HANDLER = 4;
var FPD_PARSE_ERROR_CERT = 5;
var FPD_PARSE_ERROR_TOBECONTINUED = 6;
var FPD_PARSE_ERROR_FAILED = 7;
var FPD_PARSE_ERROR_DATA_SCARCITY = 8;
var FPD_PARSE_TYPEONLY = 1;
var FPD_PARSE_NOSTREAM = 2;
var FPD_FXGPT_LINETO = 0x02;
var FPD_FXGPT_MOVETO = 0x04;
var FPD_FXGPT_ENDPATH = 0x08;
var FPD_PSI_TYPE_PATH = 1;
var FPD_PSI_TYPE_DATA = 2;
var FPD_FXGPAINT_ERROR_OK = 0;
var FPD_FXGPAINT_ERROR_FATAL = -1;
var FPD_FXGPAINT_ERROR_PARAMS = 1;
var FPD_FXGPAINT_ERROR_READ = 2;
var FPD_FXGPAINT_ERROR_WRITE = 3;
var FPD_FXGPAINT_ERROR_DATA = 4;
var FPD_FXGPAINT_ERROR_MEM = 5;
var FPD_FXGPAINT_ERROR_TYPE = 6;
var FPD_FXGPAINT_ERROR_FILE_VERSION = 7;
var FPD_FXGDEFAULT_CACHE_LIMIT = "10*1024*1024";
var FPD_FXGNIB_FILE_TYPE_FBR = 1;
var FPD_FXGNIB_FILE_TYPE_ABR = 2;
var FPD_FXGCS_DeviceGray = 1;
var FPD_FXGCS_DeviceRGB = 2;
var FPD_FXGCS_DeviceCMYK = 3;
var FPD_FXGPAINT_UNKNOWN = 0;
var FPD_FXGPAINT_PENCIL = 1;
var FPD_FXGPAINT_PEN = 2;
var FPD_FXGPAINT_ERASER = 3;
var FPD_FXGPAINT_BLUR = 4;
var FPD_FXGPAINT_SHARPEN = 5;
var FPD_FXGPAINT_MAX = 6;
var FPD_FXGPATH_FILTER_SIMULATION = 0;
var FPD_FXGPATH_FILTER_DIB = 1;
var FPD_FXGPATH_FILTER_VECTOR = 2;
var FPD_FXGPATH_FILTER_PSI = 3;
var FPD_FXGFILTERTYPE_PAINT = "temp!!!";
var FPD_FXGFILTER_RENDER_READY = 1;
var FPD_FXGFILTER_RENDER_TOBECONTINUE = 2;
var FPD_FXGFILTER_RENDER_FINISH = 3;
var FPD_FXGFILTER_RENDER_ERROR_MEMORY = 4;
var FPD_FXGNIB_ROUND = 1;
var FPD_FXGNIB_BASIC = 2;
var FPD_FXGNIB_MASK = 3;
var FPD_FXGNIB_SAMPLE = 4;
var FPD_FXGNIB_CUSTOM = 5;
var FPD_FXGBLEND_NORMAL = 0;
var FPD_FXGBLEND_MULTIPLY = 1;
var FPD_FXGBLEND_SCREEN = 2;
var FPD_FXGBLEND_OVERLAY = 3;
var FPD_FXGBLEND_DARKEN = 4;
var FPD_FXGBLEND_LIGHTEN = 5;
var FPD_FXGBLEND_COLORDODGE = 6;
var FPD_FXGBLEND_COLORBURN = 7;
var FPD_FXGBLEND_HARDLIGHT = 8;
var FPD_FXGBLEND_SOFTLIGHT = 9;
var FPD_FXGBLEND_DIFFERENCE = 10;
var FPD_FXGBLEND_EXCLUSION = 11;
var FPD_PLBS_MULTIPLESEL = 0x0001;
var FPD_PLBS_HOVERSEL = 0x0008;
var FPD_PCBS_ALLOWCUSTOMTEXT = 0x0001;
var FPD_PWL_REVIEWSTATE_NONE = 0;
var FPD_PWL_REVIEWSTATE_ACCEPTED = 1;
var FPD_PWL_REVIEWSTATE_REJECTED = 2;
var FPD_PWL_REVIEWSTATE_CANCELLED = 3;
var FPD_PWL_REVIEWSTATE_COMPLETED = 4;
var FPD_PWL_REVIEWSTATE_DEFERRED = 5;
var FPD_PWL_REVIEWSTATE_FUTURE = 6;
var FPD_RENDER_COLOR_NORMAL = 0;
var FPD_RENDER_COLOR_GRAY = 1;
var FPD_RENDER_COLOR_TWOCOLOR = 2;
var FPD_RENDER_COLOR_ALPHA = 3;
var FPD_RENDER_COLOR_CUSTOM = 4;
var FPD_RENDER_CLEARTYPE = 0x01;
var FPD_RENDER_PRINTGRAPHICTEXT = 0x02;
var FPD_RENDER_FORCE_DOWNSAMPLE = 0x04;
var FPD_RENDER_PRINTPREVIEW = 0x08;
var FPD_RENDER_BGR_STRIPE = 0x10;
var FPD_RENDER_NO_NATIVETEXT = 0x00000020;
var FPD_RENDER_FORCE_HALFTONE = 0x40;
var FPD_RENDER_RECT_AA = 0x80;
var FPD_RENDER_FILL_FULLCOVER = 0x00000100;
var FPD_RENDER_PRINTIMAGETEXT = 0x00000200;
var FPD_RENDER_OVERPRINT = 0x00000400;
var FPD_RENDER_THINLINE = 0x00000800;
var FPD_RENDER_ENHANCEZEROLINE = 0x00001000;
var FPD_RENDER_MONO_FORCE_DOWNSAMPLE = 0x00002000;
var FPD_RENDER_NOTEXTSMOOTH = 0x10000000;
var FPD_RENDER_NOPATHSMOOTH = 0x20000000;
var FPD_RENDER_NOIMAGESMOOTH = 0x40000000;
var FPD_RENDER_IMAGEINTERPOL = 0x80000000;
var FPD_RENDER_LIMITEDIMAGECACHE = 0x01000000;
var FPD_RENDER_TEXTKNOCKOUT = 0x00010000;
var FPD_RENDER_COLORREPLACE_TEXT = 0x00000001;
var FPD_RENDER_COLORREPLACE_PATH = 0x00000002;
var FPD_RENDER_COLORREPLACE_TEXT_ONLYBLACK = 0x00000100;
var FPD_RENDER_COLORREPLACE_PATH_ONLYBLACK = 0x00000200;
var FPD_RENDER_ENABLE_JPX_DOWNSAMPLE = 0x00200000;
var FPDPWL_ICONTYPE_CHECKMARK = 0;
var FPDPWL_ICONTYPE_CIRCLE = 1;
var FPDPWL_ICONTYPE_COMMENT = 2;
var FPDPWL_ICONTYPE_CROSS = 3;
var FPDPWL_ICONTYPE_HELP = 4;
var FPDPWL_ICONTYPE_INSERTTEXT = 5;
var FPDPWL_ICONTYPE_KEY = 6;
var FPDPWL_ICONTYPE_NEWPARAGRAPH = 7;
var FPDPWL_ICONTYPE_TEXTNOTE = 8;
var FPDPWL_ICONTYPE_PARAGRAPH = 9;
var FPDPWL_ICONTYPE_RIGHTARROW = 10;
var FPDPWL_ICONTYPE_RIGHTPOINTER = 11;
var FPDPWL_ICONTYPE_STAR = 12;
var FPDPWL_ICONTYPE_UPARROW = 13;
var FPDPWL_ICONTYPE_UPLEFTARROW = 14;
var FPDPWL_ICONTYPE_GRAPH = 15;
var FPDPWL_ICONTYPE_PAPERCLIP = 16;
var FPDPWL_ICONTYPE_ATTACHMENT = 17;
var FPDPWL_ICONTYPE_TAG = 18;
var FPDPWL_ICONTYPE_FOXIT = 19;
var FPDPWL_ICONTYPE_FORBID = 20;
var FPDPWL_ICONTYPE_CHECKMARK2 = 21;
var FPDPWL_ICONTYPE_STICKEX = 22;
var FPDPWL_ICONTYPE_CROSSEX = 23;
var FPDPWL_ICONTYPE_QUESTION = 24;
var FPDPWL_ICONTYPE_EXCLMARK = 25;
var FPDPWL_ICONTYPE_DEFERRED = 26;
var FPDPWL_ICONTYPE_FUTURE = 27;
var FPDPWL_ICONTYPE_UNKNOWN = -1;
var FPDCOLORTYPE_TRANSPARENT = 0;
var FPDCOLORTYPE_GRAY = 1;
var FPDCOLORTYPE_RGB = 2;
var FPDCOLORTYPE_CMYK = 3;
var FPDPWS_CHILD = 0x80000000;
var FPDPWS_BORDER = 0x40000000;
var FPDPWS_BACKGROUND = 0x20000000;
var FPDPWS_HSCROLL = 0x10000000;
var FPDPWS_VSCROLL = 0x08000000;
var FPDPWS_VISIBLE = 0x04000000;
var FPDPWS_DISABLE = 0x02000000;
var FPDPWS_READONLY = 0x01000000;
var FPDPWS_AUTOFONTSIZE = 0x00800000;
var FPDPWS_AUTOTRANSPARENT = 0x00400000;
var FPDPWS_NOREFRESHCLIP = 0x00200000;
var FPDPWS_PICKBUTTON = 0x00100000;
var FPDPES_MULTILINE = 0x0001;
var FPDPES_PASSWORD = 0x0002;
var FPDPES_LEFT = 0x0004;
var FPDPES_RIGHT = 0x0008;
var FPDPES_MIDDLE = 0x0010;
var FPDPES_TOP = 0x0020;
var FPDPES_BOTTOM = 0x0040;
var FPDPES_CENTER = 0x0080;
var FPDPES_CHARARRAY = 0x0100;
var FPDPES_AUTOSCROLL = 0x0200;
var FPDPES_AUTORETURN = 0x0400;
var FPDPES_UNDO = 0x0800;
var FPDPES_RICH = 0x1000;
var FPDPES_SPELLCHECK = 0x2000;
var FPDPES_TEXTOVERFLOW = 0x4000;
var FPDPES_NOREAD = 0x8000;
var FPDPES_MULTILINEAUTOSIZE = 0x10000;
var FPDPES_DIRECTION_RTL = 0x20000;
var FPDPBS_SOLID = 0;
var FPDPBS_DASH = 1;
var FPDPBS_BEVELED = 2;
var FPDPBS_INSET = 3;
var FPDPBS_UNDERLINED = 4;
var FPDPBS_SHADOW = 5;
var FPD_ANSI_CHARSET = 0;
var FPD_DEFAULT_CHARSET = 1;
var FPD_SYMBOL_CHARSET = 2;
var FPD_SHIFTJIS_CHARSET = 128;
var FPD_HANGEUL_CHARSET = 129;
var FPD_HANGUL_CHARSET = 129;
var FPD_GB2312_CHARSET = 134;
var FPD_CHINESEBIG5_CHARSET = 136;
var FPD_OEM_CHARSET = 255;
var FPD_JOHAB_CHARSET = 130;
var FPD_HEBREW_CHARSET = 177;
var FPD_ARABIC_CHARSET = 178;
var FPD_GREEK_CHARSET = 161;
var FPD_TURKISH_CHARSET = 162;
var FPD_VIETNAMESE_CHARSET = 163;
var FPD_THAI_CHARSET = 222;
var FPD_EASTEUROPE_CHARSET = 238;
var FPD_RUSSIAN_CHARSET = 204;
var FPD_BALTIC_CHARSET = 186;
var FPD_FONT_TYPE1 = 1;
var FPD_FONT_TRUETYPE = 2;
var FPD_FONT_TYPE3 = 3;
var FPD_FONT_CIDFONT = 4;
var FPD_FONT_FIXEDPITCH = 1;
var FPD_FONT_SERIF = 2;
var FPD_FONT_SYMBOLIC = 4;
var FPD_FONT_SCRIPT = 8;
var FPD_FONT_NONSYMBOLIC = 32;
var FPD_FONT_ITALIC = 64;
var FPD_FONT_ALLCAP = 0x10000;
var FPD_FONT_SMALLCAP = 0x20000;
var FPD_FONT_FORCEBOLD = 0x40000;
var FPD_FONT_ENCODING_BUILTIN = 0;
var FPD_FONT_ENCODING_WINANSI = 1;
var FPD_FONT_ENCODING_MACROMAN = 2;
var FPD_FONT_ENCODING_MACEXPERT = 3;
var FPD_FONT_ENCODING_STANDARD = 4;
var FPD_FONT_ENCODING_ADOBE_SYMBOL = 5;
var FPD_FONT_ENCODING_ZAPFDINGBATS = 6;
var FPD_FONT_ENCODING_PDFDOC = 7;
var FPD_FONT_ENCODING_MS_SYMBOL = 8;
var FPD_FONT_ENCODING_UNICODE = 9;
var FPD_CS_DEVICEGRAY = 1;
var FPD_CS_DEVICERGB = 2;
var FPD_CS_DEVICECMYK = 3;
var FPD_CS_CALGRAY = 4;
var FPD_CS_CALRGB = 5;
var FPD_CS_LAB = 6;
var FPD_CS_ICCBASED = 7;
var FPD_CS_SEPARATION = 8;
var FPD_CS_DEVICEN = 9;
var FPD_CS_INDEXED = 10;
var FPD_CS_PATTERN = 11;
var FPD_PATTERN_TILING = 1;
var FPD_PATTERN_SHADING = 2;
var FPD_FXENCODING_INTERNAL = 0;
var FPD_FXENCODING_UNICODE = 1;
var FPD_FXFONT_FIXED_PITCH = 0x01;
var FPD_FXFONT_SERIF = 0x02;
var FPD_FXFONT_SYMBOLIC = 0x04;
var FPD_FXFONT_SCRIPT = 0x08;
var FPD_FXFONT_ITALIC = 0x40;
var FPD_FXFONT_BOLD = 0x40000;
var FPDF_IMAGE_NO_COMPRESS = 0x0000;
var FPDF_IMAGE_LOSSY_COMPRESS = 0x0001;
var FPDF_IMAGE_LOSSLESS_COMPRESS = 0x0002;
var FPDF_IMAGE_MASK_LOSSY_COMPRESS = 0x0004;
var FPDF_IMAGE_MASK_LOSSLESS_COMPRESS = 0x0008;
var FPDFCREATE_INCREMENTAL = 1;
var FPDFCREATE_NO_ORIGINAL = 2;
var FPDFCREATE_PROGRESSIVE = 4;
var FPDFCREATE_OBJECTSTREAM = 8;
var FPD_SCH_STATUS_READY = 0;
var FPD_SCH_STATUS_TOBECONTINUED = 1;
var FPD_SCH_STATUS_FOUND = 2;
var FPD_SCH_STATUS_NOTFOUND = 3;
var FPD_SCH_STATUS_FAILED = 4;
var FPD_TEXT_MATCHCASE = 0x00000001;
var FPDTEXT_MATCHWHOLEWORD = 0x00000002;
var FPDTEXT_CONSECUTIVE = 0x00000004;
var FPDTEXT_MATCHKASHIDA = 0x00000008;
var FPDTEXT_NOT_MATCHACCENTS = 0x00000010;
var FPDTEXT_NOT_MATCHFULLWIDTH = 0x00000020;
var FPDTEXT_MATCHALIAS = 0x00000040;
var FPD_CHAR_ERROR = -1;
var FPD_CHAR_NORMAL = 0;
var FPD_CHAR_GENERATED = 1;
var FPD_CHAR_UNUNICODE = 2;
var FPD_TEXT_STREAM_ORDER = 0;
var FPD_TEXT_DISPLAY_ORDER = 1;
var FPD_TEXT_LEFT = -1;
var FPD_TEXT_RIGHT = 1;
var FPD_TEXT_UP = -2;
var FPD_TEXT_DOWN = 2;
var FPD_CHARTYPEBITS = 11;
var FPD_CHARTYPEBITSMASK = 15 << FPD_CHARTYPEBITS;
var FPDVALIDATE_ACC_RULE_01_DOC_PERMISSION = 0x0101;
var FPDVALIDATE_ACC_RULE_02_DOC_PUREIMAGE = 0x0102;
var FPDVALIDATE_ACC_RULE_03_DOC_TAGGED = 0x0103;
var FPDVALIDATE_ACC_RULE_04_DOC_STRUCTTREEORDER = 0x0104;
var FPDVALIDATE_ACC_RULE_05_DOC_LANGSPECIFIED = 0x0105;
var FPDVALIDATE_ACC_RULE_06_DOC_TITLE = 0x0106;
var FPDVALIDATE_ACC_RULE_07_DOC_OUTLINEFORLARGE = 0x0107;
var FPDVALIDATE_ACC_RULE_08_DOC_COLORCONTRAST = 0x0108;
var FPDVALIDATE_ACC_RULE_09_PAGE_CONTENTTAGGED = 0x0109;
var FPDVALIDATE_ACC_RULE_10_PAGE_ANNOTTAGGED = 0x010A;
var FPDVALIDATE_ACC_RULE_11_PAGE_TABORDER = 0x010B;
var FPDVALIDATE_ACC_RULE_12_PAGE_FONTENCODING = 0x010C;
var FPDVALIDATE_ACC_RULE_13_PAGE_MMOBJTAGGED = 0x010D;
var FPDVALIDATE_ACC_RULE_14_PAGE_NOFLICKERING = 0x010E;
var FPDVALIDATE_ACC_RULE_15_PAGE_NOINACCSCRIPT = 0x010F;
var FPDVALIDATE_ACC_RULE_16_PAGE_NOTIMEDRESPONSE = 0x0110;
var FPDVALIDATE_ACC_RULE_17_PAGE_NAVLINKREPEAT = 0x0111;
var FPDVALIDATE_ACC_RULE_18_FTL_FIELDTAGGED = 0x0112;
var FPDVALIDATE_ACC_RULE_19_FTL_FIELDALTTEXT = 0x0113;
var FPDVALIDATE_ACC_RULE_20_FTL_TRPROPERUSED = 0x0114;
var FPDVALIDATE_ACC_RULE_21_FTL_THTDPROPERUSED = 0x0115;
var FPDVALIDATE_ACC_RULE_22_FTL_HASTHEXIST = 0x0116;
var FPDVALIDATE_ACC_RULE_23_FTL_TBLSPANCORRECT = 0x0117;
var FPDVALIDATE_ACC_RULE_24_FTL_TBLSUMMARY = 0x0118;
var FPDVALIDATE_ACC_RULE_25_FTL_LIPROPERUSED = 0x0119;
var FPDVALIDATE_ACC_RULE_26_FTL_LBLLBODYPROPERUSED = 0x011A;
var FPDVALIDATE_ACC_RULE_27_ACH_FIGUREALTTEXT = 0x011B;
var FPDVALIDATE_ACC_RULE_28_ACH_NONESTEDALTTEXT = 0x011C;
var FPDVALIDATE_ACC_RULE_29_ACH_ALTTEXTHASCONTENT = 0x011D;
var FPDVALIDATE_ACC_RULE_30_ACH_ALTTEXTHIDEANNOT = 0x011E;
var FPDVALIDATE_ACC_RULE_31_ACH_ELEMENTALTTEXT = 0x011F;
var FPDVALIDATE_ACC_RULE_32_ACH_HEADINGPROPERNEST = 0x0120;
var FPDVALIDATE_ACC_RULE_MIN = 0x0101;
var FPDVALIDATE_ACC_RULE_MAX = 0x0120;
var FPDPREFLIGHT_PDFUA_01_003 = 0x2003;
var FPDPREFLIGHT_PDFUA_01_004 = 0x2004;
var FPDPREFLIGHT_PDFUA_01_005 = 0x2005;
var FPDPREFLIGHT_PDFUA_01_006 = 0x2006;
var FPDPREFLIGHT_PDFUA_01_007 = 0x2007;
var FPDPREFLIGHT_PDFUA_02_001 = 0x2008;
var FPDPREFLIGHT_PDFUA_02_003 = 0x200A;
var FPDPREFLIGHT_PDFUA_02_004 = 0x200B;
var FPDPREFLIGHT_PDFUA_06_001 = 0x2013;
var FPDPREFLIGHT_PDFUA_06_002 = 0x2014;
var FPDPREFLIGHT_PDFUA_06_003 = 0x2015;
var FPDPREFLIGHT_PDFUA_07_001 = 0x2017;
var FPDPREFLIGHT_PDFUA_07_002 = 0x2018;
var FPDPREFLIGHT_PDFUA_08_001 = 0x2019;
var FPDPREFLIGHT_PDFUA_08_002 = 0x201A;
var FPDPREFLIGHT_PDFUA_09_004 = 0x201E;
var FPDPREFLIGHT_PDFUA_09_005 = 0x201F;
var FPDPREFLIGHT_PDFUA_09_006 = 0x2020;
var FPDPREFLIGHT_PDFUA_09_007 = 0x2021;
var FPDPREFLIGHT_PDFUA_09_008 = 0x2022;
var FPDPREFLIGHT_PDFUA_10_001 = 0x2023;
var FPDPREFLIGHT_PDFUA_11_001 = 0x2024;
var FPDPREFLIGHT_PDFUA_11_002 = 0x2025;
var FPDPREFLIGHT_PDFUA_11_003 = 0x2026;
var FPDPREFLIGHT_PDFUA_11_004 = 0x2027;
var FPDPREFLIGHT_PDFUA_11_005 = 0x2028;
var FPDPREFLIGHT_PDFUA_11_006 = 0x2029;
var FPDPREFLIGHT_PDFUA_13_004 = 0x202F;
var FPDPREFLIGHT_PDFUA_14_002 = 0x2035;
var FPDPREFLIGHT_PDFUA_14_003 = 0x2036;
var FPDPREFLIGHT_PDFUA_14_006 = 0x2039;
var FPDPREFLIGHT_PDFUA_14_007 = 0x203A;
var FPDPREFLIGHT_PDFUA_15_003 = 0x203D;
var FPDPREFLIGHT_PDFUA_17_002 = 0x2044;
var FPDPREFLIGHT_PDFUA_17_003 = "FPDPREFLIGHT_PDFUA_10_001";
var FPDPREFLIGHT_PDFUA_19_003 = 0x204A;
var FPDPREFLIGHT_PDFUA_19_004 = 0x204B;
var FPDPREFLIGHT_PDFUA_20_001 = 0x204C;
var FPDPREFLIGHT_PDFUA_20_002 = 0x204D;
var FPDPREFLIGHT_PDFUA_20_003 = 0x204E;
var FPDPREFLIGHT_PDFUA_21_001 = 0x204F;
var FPDPREFLIGHT_PDFUA_25_001 = 0x2053;
var FPDPREFLIGHT_PDFUA_26_001 = 0x2054;
var FPDPREFLIGHT_PDFUA_26_002 = 0x2055;
var FPDPREFLIGHT_PDFUA_28_002 = 0x2058;
var FPDPREFLIGHT_PDFUA_28_004 = 0x205A;
var FPDPREFLIGHT_PDFUA_28_005 = 0x205B;
var FPDPREFLIGHT_PDFUA_28_006 = 0x205C;
var FPDPREFLIGHT_PDFUA_28_007 = 0x205D;
var FPDPREFLIGHT_PDFUA_28_008 = 0x205E;
var FPDPREFLIGHT_PDFUA_28_009 = 0x205F;
var FPDPREFLIGHT_PDFUA_28_010 = 0x2060;
var FPDPREFLIGHT_PDFUA_28_011 = 0x2061;
var FPDPREFLIGHT_PDFUA_28_012 = 0x2062;
var FPDPREFLIGHT_PDFUA_28_014 = 0x2064;
var FPDPREFLIGHT_PDFUA_28_015 = 0x2065;
var FPDPREFLIGHT_PDFUA_28_016 = 0x2066;
var FPDPREFLIGHT_PDFUA_28_017 = 0x2067;
var FPDPREFLIGHT_PDFUA_28_018 = 0x2068;
var FPDPREFLIGHT_PDFUA_29_001 = 0x2069;
var FPDPREFLIGHT_PDFUA_30_001 = 0x206A;
var FPDPREFLIGHT_PDFUA_30_002 = 0x206B;
var FPDPREFLIGHT_PDFUA_31_001 = 0x206C;
var FPDPREFLIGHT_PDFUA_31_002 = 0x206D;
var FPDPREFLIGHT_PDFUA_31_003 = 0x206E;
var FPDPREFLIGHT_PDFUA_31_004 = 0x206F;
var FPDPREFLIGHT_PDFUA_31_005 = 0x2070;
var FPDPREFLIGHT_PDFUA_31_006 = 0x2071;
var FPDPREFLIGHT_PDFUA_31_007 = 0x2072;
var FPDPREFLIGHT_PDFUA_31_008 = 0x2073;
var FPDPREFLIGHT_PDFUA_31_009 = 0x2074;
var FPDPREFLIGHT_PDFUA_31_011 = 0x2075;
var FPDPREFLIGHT_PDFUA_31_012 = 0x2076;
var FPDPREFLIGHT_PDFUA_31_013 = 0x2077;
var FPDPREFLIGHT_PDFUA_31_014 = 0x2078;
var FPDPREFLIGHT_PDFUA_31_015 = 0x2079;
var FPDPREFLIGHT_PDFUA_31_016 = 0x207A;
var FPDPREFLIGHT_PDFUA_31_017 = 0x207B;
var FPDPREFLIGHT_PDFUA_31_018 = 0x207C;
var FPDPREFLIGHT_PDFUA_31_019 = 0x207D;
var FPDPREFLIGHT_PDFUA_31_020 = 0x207E;
var FPDPREFLIGHT_PDFUA_31_021 = 0x207F;
var FPDPREFLIGHT_PDFUA_31_022 = 0x2080;
var FPDPREFLIGHT_PDFUA_31_023 = 0x2081;
var FPDPREFLIGHT_PDFUA_31_024 = 0x2082;
var FPDPREFLIGHT_PDFUA_31_025 = 0x2083;
var FPDPREFLIGHT_PDFUA_31_026 = 0x2084;
var FPDPREFLIGHT_PDFUA_31_027 = 0x2085;
var FPDPREFLIGHT_PDFUA_31_028 = 0x2086;
var FPDPREFLIGHT_PDFUA_31_029 = 0x2087;
var FPDPREFLIGHT_PDFUA_31_030 = 0x2088;
var SECURITY_MSG_TIP_BAR_NAME = "SecurityMessageTipBar";

var _const = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ACTION_COPY: ACTION_COPY,
  ACTION_CUT: ACTION_CUT,
  ACTION_EDIT: ACTION_EDIT,
  ACTION_FIND: ACTION_FIND,
  ACTION_SELECT: ACTION_SELECT,
  COMPARE_NONE: COMPARE_NONE,
  COMPARE_TABLE: COMPARE_TABLE,
  COMPARE_TEXT: COMPARE_TEXT,
  COMPARE_TEXT_ATTRI_EQUAL: COMPARE_TEXT_ATTRI_EQUAL,
  COMPARE_TEXT_ATTRI_FONTCHANGE: COMPARE_TEXT_ATTRI_FONTCHANGE,
  COMPARE_TEXT_ATTRI_FONTCOLORCHANGE: COMPARE_TEXT_ATTRI_FONTCOLORCHANGE,
  COMPARE_TEXT_ATTRI_FONTSIZECHANGE: COMPARE_TEXT_ATTRI_FONTSIZECHANGE,
  COMPARE_TEXT_ATTRI_LINE: COMPARE_TEXT_ATTRI_LINE,
  FALSE: FALSE,
  FDRM_DESC_TYPE_Certificate: FDRM_DESC_TYPE_Certificate,
  FDRM_DESC_TYPE_Contents: FDRM_DESC_TYPE_Contents,
  FDRM_DESC_TYPE_Encryption: FDRM_DESC_TYPE_Encryption,
  FDRM_DESC_TYPE_Envelope: FDRM_DESC_TYPE_Envelope,
  FDRM_DESC_TYPE_Foac: FDRM_DESC_TYPE_Foac,
  FDRM_DESC_TYPE_Permission: FDRM_DESC_TYPE_Permission,
  FDRM_DESC_TYPE_Resource: FDRM_DESC_TYPE_Resource,
  FDRM_DESC_TYPE_TOC: FDRM_DESC_TYPE_TOC,
  FDRM_FOAC_TYPE_Answer: FDRM_FOAC_TYPE_Answer,
  FDRM_FOAC_TYPE_Request: FDRM_FOAC_TYPE_Request,
  FPDCOLORTYPE_CMYK: FPDCOLORTYPE_CMYK,
  FPDCOLORTYPE_GRAY: FPDCOLORTYPE_GRAY,
  FPDCOLORTYPE_RGB: FPDCOLORTYPE_RGB,
  FPDCOLORTYPE_TRANSPARENT: FPDCOLORTYPE_TRANSPARENT,
  FPDDELETE_OPTION_NOACROFORM: FPDDELETE_OPTION_NOACROFORM,
  FPDDELETE_OPTION_NOANNOTACTION: FPDDELETE_OPTION_NOANNOTACTION,
  FPDEXTRACT_OPTION_ANNOT: FPDEXTRACT_OPTION_ANNOT,
  FPDEXTRACT_OPTION_ATTACHFILES: FPDEXTRACT_OPTION_ATTACHFILES,
  FPDEXTRACT_OPTION_JAVASCRIPT: FPDEXTRACT_OPTION_JAVASCRIPT,
  FPDEXTRACT_OPTION_OBJECTSTREAM: FPDEXTRACT_OPTION_OBJECTSTREAM,
  FPDEXTRACT_OPTION_OCPROPERTIES: FPDEXTRACT_OPTION_OCPROPERTIES,
  FPDEXTRACT_OPTION_OUTLINE: FPDEXTRACT_OPTION_OUTLINE,
  FPDEXTRACT_OPTION_STRUCTRUETREE: FPDEXTRACT_OPTION_STRUCTRUETREE,
  FPDFCREATE_INCREMENTAL: FPDFCREATE_INCREMENTAL,
  FPDFCREATE_NO_ORIGINAL: FPDFCREATE_NO_ORIGINAL,
  FPDFCREATE_OBJECTSTREAM: FPDFCREATE_OBJECTSTREAM,
  FPDFCREATE_PROGRESSIVE: FPDFCREATE_PROGRESSIVE,
  FPDFILL_ALTERNATE: FPDFILL_ALTERNATE,
  FPDFILL_FULLCOVER: FPDFILL_FULLCOVER,
  FPDFILL_NOPATHSMOOTH: FPDFILL_NOPATHSMOOTH,
  FPDFILL_RECT_AA: FPDFILL_RECT_AA,
  FPDFILL_WINDING: FPDFILL_WINDING,
  FPDFM_CHARSET_ANSI: FPDFM_CHARSET_ANSI,
  FPDFM_CHARSET_ArabicTraditional: FPDFM_CHARSET_ArabicTraditional,
  FPDFM_CHARSET_ArabicUser: FPDFM_CHARSET_ArabicUser,
  FPDFM_CHARSET_ChineseSimplified: FPDFM_CHARSET_ChineseSimplified,
  FPDFM_CHARSET_ChineseTraditional: FPDFM_CHARSET_ChineseTraditional,
  FPDFM_CHARSET_Default: FPDFM_CHARSET_Default,
  FPDFM_CHARSET_HebrewUser: FPDFM_CHARSET_HebrewUser,
  FPDFM_CHARSET_Johab: FPDFM_CHARSET_Johab,
  FPDFM_CHARSET_Korean: FPDFM_CHARSET_Korean,
  FPDFM_CHARSET_MAC_Arabic: FPDFM_CHARSET_MAC_Arabic,
  FPDFM_CHARSET_MAC_ChineseSimplified: FPDFM_CHARSET_MAC_ChineseSimplified,
  FPDFM_CHARSET_MAC_ChineseTraditional: FPDFM_CHARSET_MAC_ChineseTraditional,
  FPDFM_CHARSET_MAC_Cyrillic: FPDFM_CHARSET_MAC_Cyrillic,
  FPDFM_CHARSET_MAC_EasternEuropean: FPDFM_CHARSET_MAC_EasternEuropean,
  FPDFM_CHARSET_MAC_Greek: FPDFM_CHARSET_MAC_Greek,
  FPDFM_CHARSET_MAC_Hebrew: FPDFM_CHARSET_MAC_Hebrew,
  FPDFM_CHARSET_MAC_Johab: FPDFM_CHARSET_MAC_Johab,
  FPDFM_CHARSET_MAC_Korean: FPDFM_CHARSET_MAC_Korean,
  FPDFM_CHARSET_MAC_Roman: FPDFM_CHARSET_MAC_Roman,
  FPDFM_CHARSET_MAC_ShiftJIS: FPDFM_CHARSET_MAC_ShiftJIS,
  FPDFM_CHARSET_MAC_Thai: FPDFM_CHARSET_MAC_Thai,
  FPDFM_CHARSET_MAC_Turkish: FPDFM_CHARSET_MAC_Turkish,
  FPDFM_CHARSET_MSWin_Arabic: FPDFM_CHARSET_MSWin_Arabic,
  FPDFM_CHARSET_MSWin_Baltic: FPDFM_CHARSET_MSWin_Baltic,
  FPDFM_CHARSET_MSWin_Cyrillic: FPDFM_CHARSET_MSWin_Cyrillic,
  FPDFM_CHARSET_MSWin_EasterEuropean: FPDFM_CHARSET_MSWin_EasterEuropean,
  FPDFM_CHARSET_MSWin_Greek: FPDFM_CHARSET_MSWin_Greek,
  FPDFM_CHARSET_MSWin_Hebrew: FPDFM_CHARSET_MSWin_Hebrew,
  FPDFM_CHARSET_MSWin_Turkish: FPDFM_CHARSET_MSWin_Turkish,
  FPDFM_CHARSET_MSWin_Vietnamese: FPDFM_CHARSET_MSWin_Vietnamese,
  FPDFM_CHARSET_OEM: FPDFM_CHARSET_OEM,
  FPDFM_CHARSET_ShiftJIS: FPDFM_CHARSET_ShiftJIS,
  FPDFM_CHARSET_Symbol: FPDFM_CHARSET_Symbol,
  FPDFM_CHARSET_Thai: FPDFM_CHARSET_Thai,
  FPDFM_CHARSET_US: FPDFM_CHARSET_US,
  FPDF_IMAGE_LOSSLESS_COMPRESS: FPDF_IMAGE_LOSSLESS_COMPRESS,
  FPDF_IMAGE_LOSSY_COMPRESS: FPDF_IMAGE_LOSSY_COMPRESS,
  FPDF_IMAGE_MASK_LOSSLESS_COMPRESS: FPDF_IMAGE_MASK_LOSSLESS_COMPRESS,
  FPDF_IMAGE_MASK_LOSSY_COMPRESS: FPDF_IMAGE_MASK_LOSSY_COMPRESS,
  FPDF_IMAGE_NO_COMPRESS: FPDF_IMAGE_NO_COMPRESS,
  FPDINSERT_OPTION_ATTACHMENTS: FPDINSERT_OPTION_ATTACHMENTS,
  FPDINSERT_OPTION_BOOKMARK: FPDINSERT_OPTION_BOOKMARK,
  FPDINSERT_OPTION_NOACROFORM: FPDINSERT_OPTION_NOACROFORM,
  FPDINSERT_OPTION_NOANNOT: FPDINSERT_OPTION_NOANNOT,
  FPDLR_ETMaskSelector: FPDLR_ETMaskSelector,
  FPDLR_ETMask_Content: FPDLR_ETMask_Content,
  FPDLR_ETMask_PageObject: FPDLR_ETMask_PageObject,
  FPDLR_ETMask_StructureCustom: FPDLR_ETMask_StructureCustom,
  FPDLR_ETMask_StructureStandard: FPDLR_ETMask_StructureStandard,
  FPDLR_ET_AnnotAppearanceObject: FPDLR_ET_AnnotAppearanceObject,
  FPDLR_ET_AnnotContentElement: FPDLR_ET_AnnotContentElement,
  FPDLR_ET_AnnotObject: FPDLR_ET_AnnotObject,
  FPDLR_ET_ComplexContentElement: FPDLR_ET_ComplexContentElement,
  FPDLR_ET_ContainerObject: FPDLR_ET_ContainerObject,
  FPDLR_ET_FormObject: FPDLR_ET_FormObject,
  FPDLR_ET_ImageContentElement: FPDLR_ET_ImageContentElement,
  FPDLR_ET_ImageObject: FPDLR_ET_ImageObject,
  FPDLR_ET_PageObject: FPDLR_ET_PageObject,
  FPDLR_ET_PathContentElement: FPDLR_ET_PathContentElement,
  FPDLR_ET_PathObject: FPDLR_ET_PathObject,
  FPDLR_ET_ShadingContentElement: FPDLR_ET_ShadingContentElement,
  FPDLR_ET_ShadingObject: FPDLR_ET_ShadingObject,
  FPDLR_ET_TextContentElement: FPDLR_ET_TextContentElement,
  FPDLR_ET_TextObject: FPDLR_ET_TextObject,
  FPDLR_PROFILE_25_SECTION: FPDLR_PROFILE_25_SECTION,
  FPDLR_PROFILE_ABOX: FPDLR_PROFILE_ABOX,
  FPDLR_PROFILE_AUTO_TAG: FPDLR_PROFILE_AUTO_TAG,
  FPDLR_PROFILE_COLOR_GROUP_WML: FPDLR_PROFILE_COLOR_GROUP_WML,
  FPDLR_PROFILE_CONTENTFLOW: FPDLR_PROFILE_CONTENTFLOW,
  FPDLR_PROFILE_CONTENTFLOW_NONSTRICT: FPDLR_PROFILE_CONTENTFLOW_NONSTRICT,
  FPDLR_PROFILE_CONVERT_PML: FPDLR_PROFILE_CONVERT_PML,
  FPDLR_PROFILE_CONVERT_SML: FPDLR_PROFILE_CONVERT_SML,
  FPDLR_PROFILE_CONVERT_TXT: FPDLR_PROFILE_CONVERT_TXT,
  FPDLR_PROFILE_CONVERT_WML: FPDLR_PROFILE_CONVERT_WML,
  FPDLR_PROFILE_DIVIDING_TEXTLINE_ONLY: FPDLR_PROFILE_DIVIDING_TEXTLINE_ONLY,
  FPDLR_PROFILE_DOCUMENTBODY_GENERATE: FPDLR_PROFILE_DOCUMENTBODY_GENERATE,
  FPDLR_PROFILE_FORMFILL_NONSTRICT: FPDLR_PROFILE_FORMFILL_NONSTRICT,
  FPDLR_PROFILE_INTERNAL_TEXTGROUP: FPDLR_PROFILE_INTERNAL_TEXTGROUP,
  FPDLR_PROFILE_NN_STANDARD: FPDLR_PROFILE_NN_STANDARD,
  FPDLR_PROFILE_NN_STANDARD_TEST: FPDLR_PROFILE_NN_STANDARD_TEST,
  FPDLR_PROFILE_PAGINATION_OCR: FPDLR_PROFILE_PAGINATION_OCR,
  FPDLR_PROFILE_SLIDEDECK: FPDLR_PROFILE_SLIDEDECK,
  FPDLR_PROFILE_SPREADSHEET: FPDLR_PROFILE_SPREADSHEET,
  FPDLR_PROFILE_STANDARD: FPDLR_PROFILE_STANDARD,
  FPDLR_PROFILE_STRUCTURE_MARKUP: FPDLR_PROFILE_STRUCTURE_MARKUP,
  FPDLR_PROFILE_TEST_NEW_FEATURE: FPDLR_PROFILE_TEST_NEW_FEATURE,
  FPDLR_PROFILE_TEST_PAGINATION_ONLY: FPDLR_PROFILE_TEST_PAGINATION_ONLY,
  FPDLR_PROFILE_TEXT_NODE_ONLY: FPDLR_PROFILE_TEXT_NODE_ONLY,
  FPDLR_StructureETMaskSelector: FPDLR_StructureETMaskSelector,
  FPDLR_StructureETMask_Artifact: FPDLR_StructureETMask_Artifact,
  FPDLR_StructureETMask_BLSE: FPDLR_StructureETMask_BLSE,
  FPDLR_StructureETMask_Document: FPDLR_StructureETMask_Document,
  FPDLR_StructureETMask_Grouping: FPDLR_StructureETMask_Grouping,
  FPDLR_StructureETMask_ILSE: FPDLR_StructureETMask_ILSE,
  FPDLR_StructureETMask_Illustration: FPDLR_StructureETMask_Illustration,
  FPDLR_StructureETMask_User: FPDLR_StructureETMask_User,
  FPDLR_StructureTypeETMaskSelector: FPDLR_StructureTypeETMaskSelector,
  FPDLR_VERSION_2_5: FPDLR_VERSION_2_5,
  FPDLR_VERSION_2_6: FPDLR_VERSION_2_6,
  FPDLR_VERSION_2_6_1: FPDLR_VERSION_2_6_1,
  FPDLR_VERSION_2_6_2: FPDLR_VERSION_2_6_2,
  FPDLR_VERSION_DEFAULT: FPDLR_VERSION_DEFAULT,
  FPDLR_VERSION_LATEST: FPDLR_VERSION_LATEST,
  FPDMBF_ABORTRETRYIGNORE: FPDMBF_ABORTRETRYIGNORE,
  FPDMBF_ICONEXCLAMATION: FPDMBF_ICONEXCLAMATION,
  FPDMBF_ICONHAND: FPDMBF_ICONHAND,
  FPDMBF_ICONINFORMATION: FPDMBF_ICONINFORMATION,
  FPDMBF_ICONQUESTION: FPDMBF_ICONQUESTION,
  FPDMBF_OK: FPDMBF_OK,
  FPDMBF_OKCANCEL: FPDMBF_OKCANCEL,
  FPDMBF_RETRYCANCEL: FPDMBF_RETRYCANCEL,
  FPDMBF_YESNO: FPDMBF_YESNO,
  FPDMBF_YESNOCANCEL: FPDMBF_YESNOCANCEL,
  FPDPAGEOBJECTS_FORMX: FPDPAGEOBJECTS_FORMX,
  FPDPAGEOBJECTS_PAGE: FPDPAGEOBJECTS_PAGE,
  FPDPAGE_LR_ANNOT: FPDPAGE_LR_ANNOT,
  FPDPAGE_LR_ANNOT_APPEARANCE: FPDPAGE_LR_ANNOT_APPEARANCE,
  FPDPAGE_LR_COMPLEX: FPDPAGE_LR_COMPLEX,
  FPDPAGE_LR_CONTAINER: FPDPAGE_LR_CONTAINER,
  FPDPAGE_LR_PAGE: FPDPAGE_LR_PAGE,
  FPDPAGE_LR_PARTIAL: FPDPAGE_LR_PARTIAL,
  FPDPAGE_LR_PLACE: FPDPAGE_LR_PLACE,
  FPDPBS_BEVELED: FPDPBS_BEVELED,
  FPDPBS_DASH: FPDPBS_DASH,
  FPDPBS_INSET: FPDPBS_INSET,
  FPDPBS_SHADOW: FPDPBS_SHADOW,
  FPDPBS_SOLID: FPDPBS_SOLID,
  FPDPBS_UNDERLINED: FPDPBS_UNDERLINED,
  FPDPES_AUTORETURN: FPDPES_AUTORETURN,
  FPDPES_AUTOSCROLL: FPDPES_AUTOSCROLL,
  FPDPES_BOTTOM: FPDPES_BOTTOM,
  FPDPES_CENTER: FPDPES_CENTER,
  FPDPES_CHARARRAY: FPDPES_CHARARRAY,
  FPDPES_DIRECTION_RTL: FPDPES_DIRECTION_RTL,
  FPDPES_LEFT: FPDPES_LEFT,
  FPDPES_MIDDLE: FPDPES_MIDDLE,
  FPDPES_MULTILINE: FPDPES_MULTILINE,
  FPDPES_MULTILINEAUTOSIZE: FPDPES_MULTILINEAUTOSIZE,
  FPDPES_NOREAD: FPDPES_NOREAD,
  FPDPES_PASSWORD: FPDPES_PASSWORD,
  FPDPES_RICH: FPDPES_RICH,
  FPDPES_RIGHT: FPDPES_RIGHT,
  FPDPES_SPELLCHECK: FPDPES_SPELLCHECK,
  FPDPES_TEXTOVERFLOW: FPDPES_TEXTOVERFLOW,
  FPDPES_TOP: FPDPES_TOP,
  FPDPES_UNDO: FPDPES_UNDO,
  FPDPREFLIGHT_PDFUA_01_003: FPDPREFLIGHT_PDFUA_01_003,
  FPDPREFLIGHT_PDFUA_01_004: FPDPREFLIGHT_PDFUA_01_004,
  FPDPREFLIGHT_PDFUA_01_005: FPDPREFLIGHT_PDFUA_01_005,
  FPDPREFLIGHT_PDFUA_01_006: FPDPREFLIGHT_PDFUA_01_006,
  FPDPREFLIGHT_PDFUA_01_007: FPDPREFLIGHT_PDFUA_01_007,
  FPDPREFLIGHT_PDFUA_02_001: FPDPREFLIGHT_PDFUA_02_001,
  FPDPREFLIGHT_PDFUA_02_003: FPDPREFLIGHT_PDFUA_02_003,
  FPDPREFLIGHT_PDFUA_02_004: FPDPREFLIGHT_PDFUA_02_004,
  FPDPREFLIGHT_PDFUA_06_001: FPDPREFLIGHT_PDFUA_06_001,
  FPDPREFLIGHT_PDFUA_06_002: FPDPREFLIGHT_PDFUA_06_002,
  FPDPREFLIGHT_PDFUA_06_003: FPDPREFLIGHT_PDFUA_06_003,
  FPDPREFLIGHT_PDFUA_07_001: FPDPREFLIGHT_PDFUA_07_001,
  FPDPREFLIGHT_PDFUA_07_002: FPDPREFLIGHT_PDFUA_07_002,
  FPDPREFLIGHT_PDFUA_08_001: FPDPREFLIGHT_PDFUA_08_001,
  FPDPREFLIGHT_PDFUA_08_002: FPDPREFLIGHT_PDFUA_08_002,
  FPDPREFLIGHT_PDFUA_09_004: FPDPREFLIGHT_PDFUA_09_004,
  FPDPREFLIGHT_PDFUA_09_005: FPDPREFLIGHT_PDFUA_09_005,
  FPDPREFLIGHT_PDFUA_09_006: FPDPREFLIGHT_PDFUA_09_006,
  FPDPREFLIGHT_PDFUA_09_007: FPDPREFLIGHT_PDFUA_09_007,
  FPDPREFLIGHT_PDFUA_09_008: FPDPREFLIGHT_PDFUA_09_008,
  FPDPREFLIGHT_PDFUA_10_001: FPDPREFLIGHT_PDFUA_10_001,
  FPDPREFLIGHT_PDFUA_11_001: FPDPREFLIGHT_PDFUA_11_001,
  FPDPREFLIGHT_PDFUA_11_002: FPDPREFLIGHT_PDFUA_11_002,
  FPDPREFLIGHT_PDFUA_11_003: FPDPREFLIGHT_PDFUA_11_003,
  FPDPREFLIGHT_PDFUA_11_004: FPDPREFLIGHT_PDFUA_11_004,
  FPDPREFLIGHT_PDFUA_11_005: FPDPREFLIGHT_PDFUA_11_005,
  FPDPREFLIGHT_PDFUA_11_006: FPDPREFLIGHT_PDFUA_11_006,
  FPDPREFLIGHT_PDFUA_13_004: FPDPREFLIGHT_PDFUA_13_004,
  FPDPREFLIGHT_PDFUA_14_002: FPDPREFLIGHT_PDFUA_14_002,
  FPDPREFLIGHT_PDFUA_14_003: FPDPREFLIGHT_PDFUA_14_003,
  FPDPREFLIGHT_PDFUA_14_006: FPDPREFLIGHT_PDFUA_14_006,
  FPDPREFLIGHT_PDFUA_14_007: FPDPREFLIGHT_PDFUA_14_007,
  FPDPREFLIGHT_PDFUA_15_003: FPDPREFLIGHT_PDFUA_15_003,
  FPDPREFLIGHT_PDFUA_17_002: FPDPREFLIGHT_PDFUA_17_002,
  FPDPREFLIGHT_PDFUA_17_003: FPDPREFLIGHT_PDFUA_17_003,
  FPDPREFLIGHT_PDFUA_19_003: FPDPREFLIGHT_PDFUA_19_003,
  FPDPREFLIGHT_PDFUA_19_004: FPDPREFLIGHT_PDFUA_19_004,
  FPDPREFLIGHT_PDFUA_20_001: FPDPREFLIGHT_PDFUA_20_001,
  FPDPREFLIGHT_PDFUA_20_002: FPDPREFLIGHT_PDFUA_20_002,
  FPDPREFLIGHT_PDFUA_20_003: FPDPREFLIGHT_PDFUA_20_003,
  FPDPREFLIGHT_PDFUA_21_001: FPDPREFLIGHT_PDFUA_21_001,
  FPDPREFLIGHT_PDFUA_25_001: FPDPREFLIGHT_PDFUA_25_001,
  FPDPREFLIGHT_PDFUA_26_001: FPDPREFLIGHT_PDFUA_26_001,
  FPDPREFLIGHT_PDFUA_26_002: FPDPREFLIGHT_PDFUA_26_002,
  FPDPREFLIGHT_PDFUA_28_002: FPDPREFLIGHT_PDFUA_28_002,
  FPDPREFLIGHT_PDFUA_28_004: FPDPREFLIGHT_PDFUA_28_004,
  FPDPREFLIGHT_PDFUA_28_005: FPDPREFLIGHT_PDFUA_28_005,
  FPDPREFLIGHT_PDFUA_28_006: FPDPREFLIGHT_PDFUA_28_006,
  FPDPREFLIGHT_PDFUA_28_007: FPDPREFLIGHT_PDFUA_28_007,
  FPDPREFLIGHT_PDFUA_28_008: FPDPREFLIGHT_PDFUA_28_008,
  FPDPREFLIGHT_PDFUA_28_009: FPDPREFLIGHT_PDFUA_28_009,
  FPDPREFLIGHT_PDFUA_28_010: FPDPREFLIGHT_PDFUA_28_010,
  FPDPREFLIGHT_PDFUA_28_011: FPDPREFLIGHT_PDFUA_28_011,
  FPDPREFLIGHT_PDFUA_28_012: FPDPREFLIGHT_PDFUA_28_012,
  FPDPREFLIGHT_PDFUA_28_014: FPDPREFLIGHT_PDFUA_28_014,
  FPDPREFLIGHT_PDFUA_28_015: FPDPREFLIGHT_PDFUA_28_015,
  FPDPREFLIGHT_PDFUA_28_016: FPDPREFLIGHT_PDFUA_28_016,
  FPDPREFLIGHT_PDFUA_28_017: FPDPREFLIGHT_PDFUA_28_017,
  FPDPREFLIGHT_PDFUA_28_018: FPDPREFLIGHT_PDFUA_28_018,
  FPDPREFLIGHT_PDFUA_29_001: FPDPREFLIGHT_PDFUA_29_001,
  FPDPREFLIGHT_PDFUA_30_001: FPDPREFLIGHT_PDFUA_30_001,
  FPDPREFLIGHT_PDFUA_30_002: FPDPREFLIGHT_PDFUA_30_002,
  FPDPREFLIGHT_PDFUA_31_001: FPDPREFLIGHT_PDFUA_31_001,
  FPDPREFLIGHT_PDFUA_31_002: FPDPREFLIGHT_PDFUA_31_002,
  FPDPREFLIGHT_PDFUA_31_003: FPDPREFLIGHT_PDFUA_31_003,
  FPDPREFLIGHT_PDFUA_31_004: FPDPREFLIGHT_PDFUA_31_004,
  FPDPREFLIGHT_PDFUA_31_005: FPDPREFLIGHT_PDFUA_31_005,
  FPDPREFLIGHT_PDFUA_31_006: FPDPREFLIGHT_PDFUA_31_006,
  FPDPREFLIGHT_PDFUA_31_007: FPDPREFLIGHT_PDFUA_31_007,
  FPDPREFLIGHT_PDFUA_31_008: FPDPREFLIGHT_PDFUA_31_008,
  FPDPREFLIGHT_PDFUA_31_009: FPDPREFLIGHT_PDFUA_31_009,
  FPDPREFLIGHT_PDFUA_31_011: FPDPREFLIGHT_PDFUA_31_011,
  FPDPREFLIGHT_PDFUA_31_012: FPDPREFLIGHT_PDFUA_31_012,
  FPDPREFLIGHT_PDFUA_31_013: FPDPREFLIGHT_PDFUA_31_013,
  FPDPREFLIGHT_PDFUA_31_014: FPDPREFLIGHT_PDFUA_31_014,
  FPDPREFLIGHT_PDFUA_31_015: FPDPREFLIGHT_PDFUA_31_015,
  FPDPREFLIGHT_PDFUA_31_016: FPDPREFLIGHT_PDFUA_31_016,
  FPDPREFLIGHT_PDFUA_31_017: FPDPREFLIGHT_PDFUA_31_017,
  FPDPREFLIGHT_PDFUA_31_018: FPDPREFLIGHT_PDFUA_31_018,
  FPDPREFLIGHT_PDFUA_31_019: FPDPREFLIGHT_PDFUA_31_019,
  FPDPREFLIGHT_PDFUA_31_020: FPDPREFLIGHT_PDFUA_31_020,
  FPDPREFLIGHT_PDFUA_31_021: FPDPREFLIGHT_PDFUA_31_021,
  FPDPREFLIGHT_PDFUA_31_022: FPDPREFLIGHT_PDFUA_31_022,
  FPDPREFLIGHT_PDFUA_31_023: FPDPREFLIGHT_PDFUA_31_023,
  FPDPREFLIGHT_PDFUA_31_024: FPDPREFLIGHT_PDFUA_31_024,
  FPDPREFLIGHT_PDFUA_31_025: FPDPREFLIGHT_PDFUA_31_025,
  FPDPREFLIGHT_PDFUA_31_026: FPDPREFLIGHT_PDFUA_31_026,
  FPDPREFLIGHT_PDFUA_31_027: FPDPREFLIGHT_PDFUA_31_027,
  FPDPREFLIGHT_PDFUA_31_028: FPDPREFLIGHT_PDFUA_31_028,
  FPDPREFLIGHT_PDFUA_31_029: FPDPREFLIGHT_PDFUA_31_029,
  FPDPREFLIGHT_PDFUA_31_030: FPDPREFLIGHT_PDFUA_31_030,
  FPDPT_BEZIERTO: FPDPT_BEZIERTO,
  FPDPT_CLOSEFIGURE: FPDPT_CLOSEFIGURE,
  FPDPT_LINETO: FPDPT_LINETO,
  FPDPT_MOVETO: FPDPT_MOVETO,
  FPDPT_TYPE: FPDPT_TYPE,
  FPDPWL_ICONTYPE_ATTACHMENT: FPDPWL_ICONTYPE_ATTACHMENT,
  FPDPWL_ICONTYPE_CHECKMARK: FPDPWL_ICONTYPE_CHECKMARK,
  FPDPWL_ICONTYPE_CHECKMARK2: FPDPWL_ICONTYPE_CHECKMARK2,
  FPDPWL_ICONTYPE_CIRCLE: FPDPWL_ICONTYPE_CIRCLE,
  FPDPWL_ICONTYPE_COMMENT: FPDPWL_ICONTYPE_COMMENT,
  FPDPWL_ICONTYPE_CROSS: FPDPWL_ICONTYPE_CROSS,
  FPDPWL_ICONTYPE_CROSSEX: FPDPWL_ICONTYPE_CROSSEX,
  FPDPWL_ICONTYPE_DEFERRED: FPDPWL_ICONTYPE_DEFERRED,
  FPDPWL_ICONTYPE_EXCLMARK: FPDPWL_ICONTYPE_EXCLMARK,
  FPDPWL_ICONTYPE_FORBID: FPDPWL_ICONTYPE_FORBID,
  FPDPWL_ICONTYPE_FOXIT: FPDPWL_ICONTYPE_FOXIT,
  FPDPWL_ICONTYPE_FUTURE: FPDPWL_ICONTYPE_FUTURE,
  FPDPWL_ICONTYPE_GRAPH: FPDPWL_ICONTYPE_GRAPH,
  FPDPWL_ICONTYPE_HELP: FPDPWL_ICONTYPE_HELP,
  FPDPWL_ICONTYPE_INSERTTEXT: FPDPWL_ICONTYPE_INSERTTEXT,
  FPDPWL_ICONTYPE_KEY: FPDPWL_ICONTYPE_KEY,
  FPDPWL_ICONTYPE_NEWPARAGRAPH: FPDPWL_ICONTYPE_NEWPARAGRAPH,
  FPDPWL_ICONTYPE_PAPERCLIP: FPDPWL_ICONTYPE_PAPERCLIP,
  FPDPWL_ICONTYPE_PARAGRAPH: FPDPWL_ICONTYPE_PARAGRAPH,
  FPDPWL_ICONTYPE_QUESTION: FPDPWL_ICONTYPE_QUESTION,
  FPDPWL_ICONTYPE_RIGHTARROW: FPDPWL_ICONTYPE_RIGHTARROW,
  FPDPWL_ICONTYPE_RIGHTPOINTER: FPDPWL_ICONTYPE_RIGHTPOINTER,
  FPDPWL_ICONTYPE_STAR: FPDPWL_ICONTYPE_STAR,
  FPDPWL_ICONTYPE_STICKEX: FPDPWL_ICONTYPE_STICKEX,
  FPDPWL_ICONTYPE_TAG: FPDPWL_ICONTYPE_TAG,
  FPDPWL_ICONTYPE_TEXTNOTE: FPDPWL_ICONTYPE_TEXTNOTE,
  FPDPWL_ICONTYPE_UNKNOWN: FPDPWL_ICONTYPE_UNKNOWN,
  FPDPWL_ICONTYPE_UPARROW: FPDPWL_ICONTYPE_UPARROW,
  FPDPWL_ICONTYPE_UPLEFTARROW: FPDPWL_ICONTYPE_UPLEFTARROW,
  FPDPWS_AUTOFONTSIZE: FPDPWS_AUTOFONTSIZE,
  FPDPWS_AUTOTRANSPARENT: FPDPWS_AUTOTRANSPARENT,
  FPDPWS_BACKGROUND: FPDPWS_BACKGROUND,
  FPDPWS_BORDER: FPDPWS_BORDER,
  FPDPWS_CHILD: FPDPWS_CHILD,
  FPDPWS_DISABLE: FPDPWS_DISABLE,
  FPDPWS_HSCROLL: FPDPWS_HSCROLL,
  FPDPWS_NOREFRESHCLIP: FPDPWS_NOREFRESHCLIP,
  FPDPWS_PICKBUTTON: FPDPWS_PICKBUTTON,
  FPDPWS_READONLY: FPDPWS_READONLY,
  FPDPWS_VISIBLE: FPDPWS_VISIBLE,
  FPDPWS_VSCROLL: FPDPWS_VSCROLL,
  FPDSKFError_Cancel: FPDSKFError_Cancel,
  FPDSKFError_CannotGetPriKey: FPDSKFError_CannotGetPriKey,
  FPDSKFError_ConnectDev: FPDSKFError_ConnectDev,
  FPDSKFError_DeriverLoadError: FPDSKFError_DeriverLoadError,
  FPDSKFError_EnumApplication: FPDSKFError_EnumApplication,
  FPDSKFError_EnumContainer: FPDSKFError_EnumContainer,
  FPDSKFError_EnumDev: FPDSKFError_EnumDev,
  FPDSKFError_ExportCertificate: FPDSKFError_ExportCertificate,
  FPDSKFError_NoFindCert: FPDSKFError_NoFindCert,
  FPDSKFError_OpenApplication: FPDSKFError_OpenApplication,
  FPDSKFError_OpenContainer: FPDSKFError_OpenContainer,
  FPDSKFError_SetDriver: FPDSKFError_SetDriver,
  FPDSKFError_VerifyPIN: FPDSKFError_VerifyPIN,
  FPDTEXT_CONSECUTIVE: FPDTEXT_CONSECUTIVE,
  FPDTEXT_MATCHALIAS: FPDTEXT_MATCHALIAS,
  FPDTEXT_MATCHKASHIDA: FPDTEXT_MATCHKASHIDA,
  FPDTEXT_MATCHWHOLEWORD: FPDTEXT_MATCHWHOLEWORD,
  FPDTEXT_NOT_MATCHACCENTS: FPDTEXT_NOT_MATCHACCENTS,
  FPDTEXT_NOT_MATCHFULLWIDTH: FPDTEXT_NOT_MATCHFULLWIDTH,
  FPDVALIDATE_ACC_RULE_01_DOC_PERMISSION: FPDVALIDATE_ACC_RULE_01_DOC_PERMISSION,
  FPDVALIDATE_ACC_RULE_02_DOC_PUREIMAGE: FPDVALIDATE_ACC_RULE_02_DOC_PUREIMAGE,
  FPDVALIDATE_ACC_RULE_03_DOC_TAGGED: FPDVALIDATE_ACC_RULE_03_DOC_TAGGED,
  FPDVALIDATE_ACC_RULE_04_DOC_STRUCTTREEORDER: FPDVALIDATE_ACC_RULE_04_DOC_STRUCTTREEORDER,
  FPDVALIDATE_ACC_RULE_05_DOC_LANGSPECIFIED: FPDVALIDATE_ACC_RULE_05_DOC_LANGSPECIFIED,
  FPDVALIDATE_ACC_RULE_06_DOC_TITLE: FPDVALIDATE_ACC_RULE_06_DOC_TITLE,
  FPDVALIDATE_ACC_RULE_07_DOC_OUTLINEFORLARGE: FPDVALIDATE_ACC_RULE_07_DOC_OUTLINEFORLARGE,
  FPDVALIDATE_ACC_RULE_08_DOC_COLORCONTRAST: FPDVALIDATE_ACC_RULE_08_DOC_COLORCONTRAST,
  FPDVALIDATE_ACC_RULE_09_PAGE_CONTENTTAGGED: FPDVALIDATE_ACC_RULE_09_PAGE_CONTENTTAGGED,
  FPDVALIDATE_ACC_RULE_10_PAGE_ANNOTTAGGED: FPDVALIDATE_ACC_RULE_10_PAGE_ANNOTTAGGED,
  FPDVALIDATE_ACC_RULE_11_PAGE_TABORDER: FPDVALIDATE_ACC_RULE_11_PAGE_TABORDER,
  FPDVALIDATE_ACC_RULE_12_PAGE_FONTENCODING: FPDVALIDATE_ACC_RULE_12_PAGE_FONTENCODING,
  FPDVALIDATE_ACC_RULE_13_PAGE_MMOBJTAGGED: FPDVALIDATE_ACC_RULE_13_PAGE_MMOBJTAGGED,
  FPDVALIDATE_ACC_RULE_14_PAGE_NOFLICKERING: FPDVALIDATE_ACC_RULE_14_PAGE_NOFLICKERING,
  FPDVALIDATE_ACC_RULE_15_PAGE_NOINACCSCRIPT: FPDVALIDATE_ACC_RULE_15_PAGE_NOINACCSCRIPT,
  FPDVALIDATE_ACC_RULE_16_PAGE_NOTIMEDRESPONSE: FPDVALIDATE_ACC_RULE_16_PAGE_NOTIMEDRESPONSE,
  FPDVALIDATE_ACC_RULE_17_PAGE_NAVLINKREPEAT: FPDVALIDATE_ACC_RULE_17_PAGE_NAVLINKREPEAT,
  FPDVALIDATE_ACC_RULE_18_FTL_FIELDTAGGED: FPDVALIDATE_ACC_RULE_18_FTL_FIELDTAGGED,
  FPDVALIDATE_ACC_RULE_19_FTL_FIELDALTTEXT: FPDVALIDATE_ACC_RULE_19_FTL_FIELDALTTEXT,
  FPDVALIDATE_ACC_RULE_20_FTL_TRPROPERUSED: FPDVALIDATE_ACC_RULE_20_FTL_TRPROPERUSED,
  FPDVALIDATE_ACC_RULE_21_FTL_THTDPROPERUSED: FPDVALIDATE_ACC_RULE_21_FTL_THTDPROPERUSED,
  FPDVALIDATE_ACC_RULE_22_FTL_HASTHEXIST: FPDVALIDATE_ACC_RULE_22_FTL_HASTHEXIST,
  FPDVALIDATE_ACC_RULE_23_FTL_TBLSPANCORRECT: FPDVALIDATE_ACC_RULE_23_FTL_TBLSPANCORRECT,
  FPDVALIDATE_ACC_RULE_24_FTL_TBLSUMMARY: FPDVALIDATE_ACC_RULE_24_FTL_TBLSUMMARY,
  FPDVALIDATE_ACC_RULE_25_FTL_LIPROPERUSED: FPDVALIDATE_ACC_RULE_25_FTL_LIPROPERUSED,
  FPDVALIDATE_ACC_RULE_26_FTL_LBLLBODYPROPERUSED: FPDVALIDATE_ACC_RULE_26_FTL_LBLLBODYPROPERUSED,
  FPDVALIDATE_ACC_RULE_27_ACH_FIGUREALTTEXT: FPDVALIDATE_ACC_RULE_27_ACH_FIGUREALTTEXT,
  FPDVALIDATE_ACC_RULE_28_ACH_NONESTEDALTTEXT: FPDVALIDATE_ACC_RULE_28_ACH_NONESTEDALTTEXT,
  FPDVALIDATE_ACC_RULE_29_ACH_ALTTEXTHASCONTENT: FPDVALIDATE_ACC_RULE_29_ACH_ALTTEXTHASCONTENT,
  FPDVALIDATE_ACC_RULE_30_ACH_ALTTEXTHIDEANNOT: FPDVALIDATE_ACC_RULE_30_ACH_ALTTEXTHIDEANNOT,
  FPDVALIDATE_ACC_RULE_31_ACH_ELEMENTALTTEXT: FPDVALIDATE_ACC_RULE_31_ACH_ELEMENTALTTEXT,
  FPDVALIDATE_ACC_RULE_32_ACH_HEADINGPROPERNEST: FPDVALIDATE_ACC_RULE_32_ACH_HEADINGPROPERNEST,
  FPDVALIDATE_ACC_RULE_MAX: FPDVALIDATE_ACC_RULE_MAX,
  FPDVALIDATE_ACC_RULE_MIN: FPDVALIDATE_ACC_RULE_MIN,
  FPDXFA_INVALIDATE_AllPages: FPDXFA_INVALIDATE_AllPages,
  FPDXFA_INVALIDATE_CurrentPage: FPDXFA_INVALIDATE_CurrentPage,
  FPDXFA_WIDGETSTATUS_Focused: FPDXFA_WIDGETSTATUS_Focused,
  FPDXFA_WIDGETSTATUS_Hidden: FPDXFA_WIDGETSTATUS_Hidden,
  FPDXFA_WIDGETSTATUS_Invisible: FPDXFA_WIDGETSTATUS_Invisible,
  FPDXFA_WIDGETSTATUS_Printable: FPDXFA_WIDGETSTATUS_Printable,
  FPDXFA_WIDGETSTATUS_Viewable: FPDXFA_WIDGETSTATUS_Viewable,
  FPDXFA_WIDGETSTATUS_Visible: FPDXFA_WIDGETSTATUS_Visible,
  FPDXM_LANGUAGE_Chinese_Simplified: FPDXM_LANGUAGE_Chinese_Simplified,
  FPDXM_LANGUAGE_Chinese_Traditional: FPDXM_LANGUAGE_Chinese_Traditional,
  FPDXM_LANGUAGE_English: FPDXM_LANGUAGE_English,
  FPDXM_LANGUAGE_Japanese: FPDXM_LANGUAGE_Japanese,
  FPDXM_LANGUAGE_Korean: FPDXM_LANGUAGE_Korean,
  FPDXM_PLATFORM_ANDROID: FPDXM_PLATFORM_ANDROID,
  FPDXM_PLATFORM_APPLE: FPDXM_PLATFORM_APPLE,
  FPDXM_PLATFORM_LINUX: FPDXM_PLATFORM_LINUX,
  FPDXM_PLATFORM_WINDOWS: FPDXM_PLATFORM_WINDOWS,
  FPD_2TXT_AUTO_ROTATE: FPD_2TXT_AUTO_ROTATE,
  FPD_2TXT_AUTO_WIDTH: FPD_2TXT_AUTO_WIDTH,
  FPD_2TXT_INCLUDE_INVISIBLE: FPD_2TXT_INCLUDE_INVISIBLE,
  FPD_2TXT_KEEP_COLUMN: FPD_2TXT_KEEP_COLUMN,
  FPD_2TXT_USE_OCR: FPD_2TXT_USE_OCR,
  FPD_ALLOW_CHANGEFORMAT: FPD_ALLOW_CHANGEFORMAT,
  FPD_ALLOW_SELECTALLALGORITHM: FPD_ALLOW_SELECTALLALGORITHM,
  FPD_ANNOTFLAG_HIDDEN: FPD_ANNOTFLAG_HIDDEN,
  FPD_ANNOTFLAG_INVISIBLE: FPD_ANNOTFLAG_INVISIBLE,
  FPD_ANNOTFLAG_LOCKED: FPD_ANNOTFLAG_LOCKED,
  FPD_ANNOTFLAG_NOROTATE: FPD_ANNOTFLAG_NOROTATE,
  FPD_ANNOTFLAG_NOVIEW: FPD_ANNOTFLAG_NOVIEW,
  FPD_ANNOTFLAG_NOZOOM: FPD_ANNOTFLAG_NOZOOM,
  FPD_ANNOTFLAG_PRINT: FPD_ANNOTFLAG_PRINT,
  FPD_ANNOTFLAG_READONLY: FPD_ANNOTFLAG_READONLY,
  FPD_ANNOTFLAG_TOGGLENOVIEW: FPD_ANNOTFLAG_TOGGLENOVIEW,
  FPD_ANSI_CHARSET: FPD_ANSI_CHARSET,
  FPD_ARABIC_CHARSET: FPD_ARABIC_CHARSET,
  FPD_BALTIC_CHARSET: FPD_BALTIC_CHARSET,
  FPD_BCExceptionAIsZero: FPD_BCExceptionAIsZero,
  FPD_BCExceptionBadECI: FPD_BCExceptionBadECI,
  FPD_BCExceptionBadErrorLocation: FPD_BCExceptionBadErrorLocation,
  FPD_BCExceptionBadIndexException: FPD_BCExceptionBadIndexException,
  FPD_BCExceptionBadMask: FPD_BCExceptionBadMask,
  FPD_BCExceptionBadNumBitsException: FPD_BCExceptionBadNumBitsException,
  FPD_BCExceptionBadValueException: FPD_BCExceptionBadValueException,
  FPD_BCExceptionBitSizeNot15: FPD_BCExceptionBitSizeNot15,
  FPD_BCExceptionBitSizeNot18: FPD_BCExceptionBitSizeNot18,
  FPD_BCExceptionBitmapSizeError: FPD_BCExceptionBitmapSizeError,
  FPD_BCExceptionBitsBytesNotMatch: FPD_BCExceptionBitsBytesNotMatch,
  FPD_BCExceptionBitsNotEqualCacity: FPD_BCExceptionBitsNotEqualCacity,
  FPD_BCExceptionBytesNotMatchOffset: FPD_BCExceptionBytesNotMatchOffset,
  FPD_BCExceptionCanNotCallGetDimensionOnNonSquareMatrix: FPD_BCExceptionCanNotCallGetDimensionOnNonSquareMatrix,
  FPD_BCExceptionCannotFindBlockInfo: FPD_BCExceptionCannotFindBlockInfo,
  FPD_BCExceptionCannotHandleThisNumberOfDataRegions: FPD_BCExceptionCannotHandleThisNumberOfDataRegions,
  FPD_BCExceptionCannotMetadata: FPD_BCExceptionCannotMetadata,
  FPD_BCExceptionCharacterNotThisMode: FPD_BCExceptionCharacterNotThisMode,
  FPD_BCExceptionCharactersOutsideISO88591Encoding: FPD_BCExceptionCharactersOutsideISO88591Encoding,
  FPD_BCExceptionChecksumException: FPD_BCExceptionChecksumException,
  FPD_BCExceptionChecksumInstance: FPD_BCExceptionChecksumInstance,
  FPD_BCExceptionCodabarEncodeCharsInvalid: FPD_BCExceptionCodabarEncodeCharsInvalid,
  FPD_BCExceptionCodabarShouldEndWithOneOfTNE: FPD_BCExceptionCodabarShouldEndWithOneOfTNE,
  FPD_BCExceptionCodabarShouldStartWithOneOfABCD: FPD_BCExceptionCodabarShouldStartWithOneOfABCD,
  FPD_BCExceptionCoefficientsSizeIsNull: FPD_BCExceptionCoefficientsSizeIsNull,
  FPD_BCExceptionContentsLengthShouldBetween1and80: FPD_BCExceptionContentsLengthShouldBetween1and80,
  FPD_BCExceptionDataCheckException: FPD_BCExceptionDataCheckException,
  FPD_BCExceptionDataTooBig: FPD_BCExceptionDataTooBig,
  FPD_BCExceptionDataTooMany: FPD_BCExceptionDataTooMany,
  FPD_BCExceptionDegreeIsNegative: FPD_BCExceptionDegreeIsNegative,
  FPD_BCExceptionDegreeNotMatchRoots: FPD_BCExceptionDegreeNotMatchRoots,
  FPD_BCExceptionDigitLengthMustBe6or8or10or12or14or16or20or24or44: FPD_BCExceptionDigitLengthMustBe6or8or10or12or14or16or20or24or44,
  FPD_BCExceptionDigitLengthMustBe8: FPD_BCExceptionDigitLengthMustBe8,
  FPD_BCExceptionDigitLengthShould13: FPD_BCExceptionDigitLengthShould13,
  FPD_BCExceptionDigitLengthShouldBe12: FPD_BCExceptionDigitLengthShouldBe12,
  FPD_BCExceptionDivideByZero: FPD_BCExceptionDivideByZero,
  FPD_BCExceptionEncodedMessageContainsTooManyCodeWords: FPD_BCExceptionEncodedMessageContainsTooManyCodeWords,
  FPD_BCExceptionEndLessThanStart: FPD_BCExceptionEndLessThanStart,
  FPD_BCExceptionErrorCorrectionLevelMustBeBetween0And8: FPD_BCExceptionErrorCorrectionLevelMustBeBetween0And8,
  FPD_BCExceptionExtractNumberValueFromBitArray: FPD_BCExceptionExtractNumberValueFromBitArray,
  FPD_BCExceptionFailToCreateBitmap: FPD_BCExceptionFailToCreateBitmap,
  FPD_BCExceptionFormatException: FPD_BCExceptionFormatException,
  FPD_BCExceptionFormatInstance: FPD_BCExceptionFormatInstance,
  FPD_BCExceptionHeightAndWidthMustBeAtLeast1: FPD_BCExceptionHeightAndWidthMustBeAtLeast1,
  FPD_BCExceptionHeight_8BeZero: FPD_BCExceptionHeight_8BeZero,
  FPD_BCExceptionIllegalArgument: FPD_BCExceptionIllegalArgument,
  FPD_BCExceptionIllegalArgumentInvalidFirstDigit: FPD_BCExceptionIllegalArgumentInvalidFirstDigit,
  FPD_BCExceptionIllegalArgumentInvalidSecondDigit: FPD_BCExceptionIllegalArgumentInvalidSecondDigit,
  FPD_BCExceptionIllegalArgumentMustMatchVersionSize: FPD_BCExceptionIllegalArgumentMustMatchVersionSize,
  FPD_BCExceptionIllegalArgumentNotGigits: FPD_BCExceptionIllegalArgumentNotGigits,
  FPD_BCExceptionIllegalArgumentnMustBeAbove0: FPD_BCExceptionIllegalArgumentnMustBeAbove0,
  FPD_BCExceptionIllegalDataCodewords: FPD_BCExceptionIllegalDataCodewords,
  FPD_BCExceptionIllegalStateCountMustNotExceed4: FPD_BCExceptionIllegalStateCountMustNotExceed4,
  FPD_BCExceptionIllegalStateIllegalMode: FPD_BCExceptionIllegalStateIllegalMode,
  FPD_BCExceptionIllegalStateMessageLengthInvalid: FPD_BCExceptionIllegalStateMessageLengthInvalid,
  FPD_BCExceptionIllegalStateUnexpectedCase: FPD_BCExceptionIllegalStateUnexpectedCase,
  FPD_BCExceptionInvalidQRCode: FPD_BCExceptionInvalidQRCode,
  FPD_BCExceptionInvalidateCharacter: FPD_BCExceptionInvalidateCharacter,
  FPD_BCExceptionInvalidateData: FPD_BCExceptionInvalidateData,
  FPD_BCExceptionInvalidateImageData: FPD_BCExceptionInvalidateImageData,
  FPD_BCExceptionInvalidateMaskPattern: FPD_BCExceptionInvalidateMaskPattern,
  FPD_BCExceptionIsZero: FPD_BCExceptionIsZero,
  FPD_BCExceptionLeftAndTopMustBeNonnegative: FPD_BCExceptionLeftAndTopMustBeNonnegative,
  FPD_BCExceptionLoadFile: FPD_BCExceptionLoadFile,
  FPD_BCExceptionLoadFontFail: FPD_BCExceptionLoadFontFail,
  FPD_BCExceptionNO: FPD_BCExceptionNO,
  FPD_BCExceptionNoContents: FPD_BCExceptionNoContents,
  FPD_BCExceptionNoCorrectionBytes: FPD_BCExceptionNoCorrectionBytes,
  FPD_BCExceptionNoDataBytesProvided: FPD_BCExceptionNoDataBytesProvided,
  FPD_BCExceptionNoRecommendationPossible: FPD_BCExceptionNoRecommendationPossible,
  FPD_BCExceptionNoSuchVersion: FPD_BCExceptionNoSuchVersion,
  FPD_BCExceptionNonEncodableCharacterDetected: FPD_BCExceptionNonEncodableCharacterDetected,
  FPD_BCExceptionNotFound: FPD_BCExceptionNotFound,
  FPD_BCExceptionNotFoundInstance: FPD_BCExceptionNotFoundInstance,
  FPD_BCExceptionNullPointer: FPD_BCExceptionNullPointer,
  FPD_BCExceptionOnlyEncodeCODEBAR: FPD_BCExceptionOnlyEncodeCODEBAR,
  FPD_BCExceptionOnlyEncodeCODE_128: FPD_BCExceptionOnlyEncodeCODE_128,
  FPD_BCExceptionOnlyEncodeCODE_39: FPD_BCExceptionOnlyEncodeCODE_39,
  FPD_BCExceptionOnlyEncodeDATAMATRIX: FPD_BCExceptionOnlyEncodeDATAMATRIX,
  FPD_BCExceptionOnlyEncodeEAN_13: FPD_BCExceptionOnlyEncodeEAN_13,
  FPD_BCExceptionOnlyEncodeEAN_8: FPD_BCExceptionOnlyEncodeEAN_8,
  FPD_BCExceptionOnlyEncodeITF: FPD_BCExceptionOnlyEncodeITF,
  FPD_BCExceptionOnlyEncodePDF417: FPD_BCExceptionOnlyEncodePDF417,
  FPD_BCExceptionOnlyEncodeUPC_A: FPD_BCExceptionOnlyEncodeUPC_A,
  FPD_BCExceptionPDF417EncodeFail: FPD_BCExceptionPDF417EncodeFail,
  FPD_BCExceptionR_I_1IsZero: FPD_BCExceptionR_I_1IsZero,
  FPD_BCExceptionRead: FPD_BCExceptionRead,
  FPD_BCExceptionReedsolomnDecodeException: FPD_BCExceptionReedsolomnDecodeException,
  FPD_BCExceptionReferenceMustBeBetween0And7: FPD_BCExceptionReferenceMustBeBetween0And7,
  FPD_BCExceptionRegionMustFitInsideMatrix: FPD_BCExceptionRegionMustFitInsideMatrix,
  FPD_BCExceptionRequestedRowIsOutSizeTheImage: FPD_BCExceptionRequestedRowIsOutSizeTheImage,
  FPD_BCExceptionRotateNotSupported: FPD_BCExceptionRotateNotSupported,
  FPD_BCExceptionRuntimeDecodingInvalidAlphanumeric: FPD_BCExceptionRuntimeDecodingInvalidAlphanumeric,
  FPD_BCExceptionRuntimeDecodingInvalidISO_IEC: FPD_BCExceptionRuntimeDecodingInvalidISO_IEC,
  FPD_BCExceptionSizeInBytesDiffer: FPD_BCExceptionSizeInBytesDiffer,
  FPD_BCExceptionUnSupportEclevel: FPD_BCExceptionUnSupportEclevel,
  FPD_BCExceptionUnSupportMode: FPD_BCExceptionUnSupportMode,
  FPD_BCExceptionUnSupportedBarcode: FPD_BCExceptionUnSupportedBarcode,
  FPD_BCExceptionUnSupportedString: FPD_BCExceptionUnSupportedString,
  FPD_BCExceptionUnableToFitMessageInColumns: FPD_BCExceptionUnableToFitMessageInColumns,
  FPD_BCExceptionUnknown: FPD_BCExceptionUnknown,
  FPD_BCExceptionUnknownDecoder: FPD_BCExceptionUnknownDecoder,
  FPD_BCExceptionUnsupportedMode: FPD_BCExceptionUnsupportedMode,
  FPD_BCExceptionValueMustBeEither0or1: FPD_BCExceptionValueMustBeEither0or1,
  FPD_BCExceptionVersionMust1_40: FPD_BCExceptionVersionMust1_40,
  FPD_BCExceptioncanNotOperatexorOperator: FPD_BCExceptioncanNotOperatexorOperator,
  FPD_BCExceptiontNotFoundInstance: FPD_BCExceptiontNotFoundInstance,
  FPD_BOOKMARK_BOLD: FPD_BOOKMARK_BOLD,
  FPD_BOOKMARK_ITALIC: FPD_BOOKMARK_ITALIC,
  FPD_CHANGE_FORMAT: FPD_CHANGE_FORMAT,
  FPD_CHANGE_NONE: FPD_CHANGE_NONE,
  FPD_CHANGE_STRETCH: FPD_CHANGE_STRETCH,
  FPD_CHARTYPEBITS: FPD_CHARTYPEBITS,
  FPD_CHARTYPEBITSMASK: FPD_CHARTYPEBITSMASK,
  FPD_CHAR_ERROR: FPD_CHAR_ERROR,
  FPD_CHAR_GENERATED: FPD_CHAR_GENERATED,
  FPD_CHAR_NORMAL: FPD_CHAR_NORMAL,
  FPD_CHAR_UNUNICODE: FPD_CHAR_UNUNICODE,
  FPD_CHINESEBIG5_CHARSET: FPD_CHINESEBIG5_CHARSET,
  FPD_CLRTYPE_CMYK: FPD_CLRTYPE_CMYK,
  FPD_CLRTYPE_GRAY: FPD_CLRTYPE_GRAY,
  FPD_CLRTYPE_RGB: FPD_CLRTYPE_RGB,
  FPD_CLRTYPE_TRANSPARENT: FPD_CLRTYPE_TRANSPARENT,
  FPD_COMPRESSION_CCITT3: FPD_COMPRESSION_CCITT3,
  FPD_COMPRESSION_CCITT4: FPD_COMPRESSION_CCITT4,
  FPD_COMPRESSION_HIGH: FPD_COMPRESSION_HIGH,
  FPD_COMPRESSION_JBIG2: FPD_COMPRESSION_JBIG2,
  FPD_COMPRESSION_JPEG: FPD_COMPRESSION_JPEG,
  FPD_COMPRESSION_JPEG2000: FPD_COMPRESSION_JPEG2000,
  FPD_COMPRESSION_RETAIN: FPD_COMPRESSION_RETAIN,
  FPD_COMPRESSION_RUNLENGTH: FPD_COMPRESSION_RUNLENGTH,
  FPD_COMPRESSION_ZIP: FPD_COMPRESSION_ZIP,
  FPD_CONNECT_BOOKMARKS: FPD_CONNECT_BOOKMARKS,
  FPD_CONNECT_COMMENT: FPD_CONNECT_COMMENT,
  FPD_CONNECT_COPY: FPD_CONNECT_COPY,
  FPD_CONNECT_DOCUMENTID: FPD_CONNECT_DOCUMENTID,
  FPD_CONNECT_EXTRACT: FPD_CONNECT_EXTRACT,
  FPD_CONNECT_FORMFILL: FPD_CONNECT_FORMFILL,
  FPD_CONNECT_PAGES: FPD_CONNECT_PAGES,
  FPD_CONNECT_PRINTING: FPD_CONNECT_PRINTING,
  FPD_CONNECT_REVIEWID: FPD_CONNECT_REVIEWID,
  FPD_CONNECT_SIGN: FPD_CONNECT_SIGN,
  FPD_CONNECT_SUBMIT_RECEIVE: FPD_CONNECT_SUBMIT_RECEIVE,
  FPD_CONNECT_SUBMIT_UPDATE: FPD_CONNECT_SUBMIT_UPDATE,
  FPD_CONNECT_VERSIONID: FPD_CONNECT_VERSIONID,
  FPD_CONTENT_NOT_PARSED: FPD_CONTENT_NOT_PARSED,
  FPD_CONTENT_PARSED: FPD_CONTENT_PARSED,
  FPD_CONTENT_PARSING: FPD_CONTENT_PARSING,
  FPD_CS_CALGRAY: FPD_CS_CALGRAY,
  FPD_CS_CALRGB: FPD_CS_CALRGB,
  FPD_CS_DEVICECMYK: FPD_CS_DEVICECMYK,
  FPD_CS_DEVICEGRAY: FPD_CS_DEVICEGRAY,
  FPD_CS_DEVICEN: FPD_CS_DEVICEN,
  FPD_CS_DEVICERGB: FPD_CS_DEVICERGB,
  FPD_CS_ICCBASED: FPD_CS_ICCBASED,
  FPD_CS_INDEXED: FPD_CS_INDEXED,
  FPD_CS_LAB: FPD_CS_LAB,
  FPD_CS_PATTERN: FPD_CS_PATTERN,
  FPD_CS_SEPARATION: FPD_CS_SEPARATION,
  FPD_DEFAULT_CHARSET: FPD_DEFAULT_CHARSET,
  FPD_EASTEUROPE_CHARSET: FPD_EASTEUROPE_CHARSET,
  FPD_FDE_TEXTSEARCH_Consecutive: FPD_FDE_TEXTSEARCH_Consecutive,
  FPD_FDE_TEXTSEARCH_MatchCase: FPD_FDE_TEXTSEARCH_MatchCase,
  FPD_FDE_TEXTSEARCH_MatchWholdWord: FPD_FDE_TEXTSEARCH_MatchWholdWord,
  FPD_FDE_TXTLINEALIGNMENT_Center: FPD_FDE_TXTLINEALIGNMENT_Center,
  FPD_FDE_TXTLINEALIGNMENT_Distributed: FPD_FDE_TXTLINEALIGNMENT_Distributed,
  FPD_FDE_TXTLINEALIGNMENT_DistributedCenter: FPD_FDE_TXTLINEALIGNMENT_DistributedCenter,
  FPD_FDE_TXTLINEALIGNMENT_DistributedLeft: FPD_FDE_TXTLINEALIGNMENT_DistributedLeft,
  FPD_FDE_TXTLINEALIGNMENT_DistributedRight: FPD_FDE_TXTLINEALIGNMENT_DistributedRight,
  FPD_FDE_TXTLINEALIGNMENT_Justified: FPD_FDE_TXTLINEALIGNMENT_Justified,
  FPD_FDE_TXTLINEALIGNMENT_JustifiedCenter: FPD_FDE_TXTLINEALIGNMENT_JustifiedCenter,
  FPD_FDE_TXTLINEALIGNMENT_JustifiedLeft: FPD_FDE_TXTLINEALIGNMENT_JustifiedLeft,
  FPD_FDE_TXTLINEALIGNMENT_JustifiedRight: FPD_FDE_TXTLINEALIGNMENT_JustifiedRight,
  FPD_FDE_TXTLINEALIGNMENT_Left: FPD_FDE_TXTLINEALIGNMENT_Left,
  FPD_FDE_TXTLINEALIGNMENT_Right: FPD_FDE_TXTLINEALIGNMENT_Right,
  FPD_FIELDFLAG_COMB: FPD_FIELDFLAG_COMB,
  FPD_FIELDFLAG_COMBO: FPD_FIELDFLAG_COMBO,
  FPD_FIELDFLAG_COMMITONSELCHANGE: FPD_FIELDFLAG_COMMITONSELCHANGE,
  FPD_FIELDFLAG_DONOTSCROLL: FPD_FIELDFLAG_DONOTSCROLL,
  FPD_FIELDFLAG_DONOTSPELLCHECK: FPD_FIELDFLAG_DONOTSPELLCHECK,
  FPD_FIELDFLAG_EDIT: FPD_FIELDFLAG_EDIT,
  FPD_FIELDFLAG_FILESELECT: FPD_FIELDFLAG_FILESELECT,
  FPD_FIELDFLAG_MULTILINE: FPD_FIELDFLAG_MULTILINE,
  FPD_FIELDFLAG_MULTISELECT: FPD_FIELDFLAG_MULTISELECT,
  FPD_FIELDFLAG_NOEXPORT: FPD_FIELDFLAG_NOEXPORT,
  FPD_FIELDFLAG_NOTOGGLETOOFF: FPD_FIELDFLAG_NOTOGGLETOOFF,
  FPD_FIELDFLAG_PASSWORD: FPD_FIELDFLAG_PASSWORD,
  FPD_FIELDFLAG_PUSHBUTTON: FPD_FIELDFLAG_PUSHBUTTON,
  FPD_FIELDFLAG_RADIO: FPD_FIELDFLAG_RADIO,
  FPD_FIELDFLAG_RADIOSINUNISON: FPD_FIELDFLAG_RADIOSINUNISON,
  FPD_FIELDFLAG_READONLY: FPD_FIELDFLAG_READONLY,
  FPD_FIELDFLAG_REQUIRED: FPD_FIELDFLAG_REQUIRED,
  FPD_FIELDFLAG_RICHTEXT: FPD_FIELDFLAG_RICHTEXT,
  FPD_FIELDFLAG_SORT: FPD_FIELDFLAG_SORT,
  FPD_FILL_STROKE: FPD_FILL_STROKE,
  FPD_FILL_TEXT_MODE: FPD_FILL_TEXT_MODE,
  FPD_FONT_ALLCAP: FPD_FONT_ALLCAP,
  FPD_FONT_CIDFONT: FPD_FONT_CIDFONT,
  FPD_FONT_ENCODING_ADOBE_SYMBOL: FPD_FONT_ENCODING_ADOBE_SYMBOL,
  FPD_FONT_ENCODING_BUILTIN: FPD_FONT_ENCODING_BUILTIN,
  FPD_FONT_ENCODING_MACEXPERT: FPD_FONT_ENCODING_MACEXPERT,
  FPD_FONT_ENCODING_MACROMAN: FPD_FONT_ENCODING_MACROMAN,
  FPD_FONT_ENCODING_MS_SYMBOL: FPD_FONT_ENCODING_MS_SYMBOL,
  FPD_FONT_ENCODING_PDFDOC: FPD_FONT_ENCODING_PDFDOC,
  FPD_FONT_ENCODING_STANDARD: FPD_FONT_ENCODING_STANDARD,
  FPD_FONT_ENCODING_UNICODE: FPD_FONT_ENCODING_UNICODE,
  FPD_FONT_ENCODING_WINANSI: FPD_FONT_ENCODING_WINANSI,
  FPD_FONT_ENCODING_ZAPFDINGBATS: FPD_FONT_ENCODING_ZAPFDINGBATS,
  FPD_FONT_FIXEDPITCH: FPD_FONT_FIXEDPITCH,
  FPD_FONT_FORCEBOLD: FPD_FONT_FORCEBOLD,
  FPD_FONT_ITALIC: FPD_FONT_ITALIC,
  FPD_FONT_NONSYMBOLIC: FPD_FONT_NONSYMBOLIC,
  FPD_FONT_SCRIPT: FPD_FONT_SCRIPT,
  FPD_FONT_SERIF: FPD_FONT_SERIF,
  FPD_FONT_SMALLCAP: FPD_FONT_SMALLCAP,
  FPD_FONT_SYMBOLIC: FPD_FONT_SYMBOLIC,
  FPD_FONT_TRUETYPE: FPD_FONT_TRUETYPE,
  FPD_FONT_TYPE1: FPD_FONT_TYPE1,
  FPD_FONT_TYPE3: FPD_FONT_TYPE3,
  FPD_FORM_COMBO_EDIT: FPD_FORM_COMBO_EDIT,
  FPD_FORM_FIELDTYPE_CHECKBOX: FPD_FORM_FIELDTYPE_CHECKBOX,
  FPD_FORM_FIELDTYPE_COMBOBOX: FPD_FORM_FIELDTYPE_COMBOBOX,
  FPD_FORM_FIELDTYPE_LISTBOX: FPD_FORM_FIELDTYPE_LISTBOX,
  FPD_FORM_FIELDTYPE_PUSHBUTTON: FPD_FORM_FIELDTYPE_PUSHBUTTON,
  FPD_FORM_FIELDTYPE_RADIOBUTTON: FPD_FORM_FIELDTYPE_RADIOBUTTON,
  FPD_FORM_FIELDTYPE_SIGNATURE: FPD_FORM_FIELDTYPE_SIGNATURE,
  FPD_FORM_FIELDTYPE_TEXTFIELD: FPD_FORM_FIELDTYPE_TEXTFIELD,
  FPD_FORM_FIELDTYPE_UNKNOWN: FPD_FORM_FIELDTYPE_UNKNOWN,
  FPD_FORM_FIELD_NOEXPORT: FPD_FORM_FIELD_NOEXPORT,
  FPD_FORM_FIELD_READONLY: FPD_FORM_FIELD_READONLY,
  FPD_FORM_FIELD_REQUIRED: FPD_FORM_FIELD_REQUIRED,
  FPD_FORM_LIST_MULTISELECT: FPD_FORM_LIST_MULTISELECT,
  FPD_FORM_RADIO_NOTOGGLEOFF: FPD_FORM_RADIO_NOTOGGLEOFF,
  FPD_FORM_RADIO_UNISON: FPD_FORM_RADIO_UNISON,
  FPD_FORM_TEXT_COMB: FPD_FORM_TEXT_COMB,
  FPD_FORM_TEXT_MULTILINE: FPD_FORM_TEXT_MULTILINE,
  FPD_FORM_TEXT_NOSCROLL: FPD_FORM_TEXT_NOSCROLL,
  FPD_FORM_TEXT_PASSWORD: FPD_FORM_TEXT_PASSWORD,
  FPD_FXENCODING_INTERNAL: FPD_FXENCODING_INTERNAL,
  FPD_FXENCODING_UNICODE: FPD_FXENCODING_UNICODE,
  FPD_FXFONT_BOLD: FPD_FXFONT_BOLD,
  FPD_FXFONT_FIXED_PITCH: FPD_FXFONT_FIXED_PITCH,
  FPD_FXFONT_ITALIC: FPD_FXFONT_ITALIC,
  FPD_FXFONT_SCRIPT: FPD_FXFONT_SCRIPT,
  FPD_FXFONT_SERIF: FPD_FXFONT_SERIF,
  FPD_FXFONT_SYMBOLIC: FPD_FXFONT_SYMBOLIC,
  FPD_FXGBLEND_COLORBURN: FPD_FXGBLEND_COLORBURN,
  FPD_FXGBLEND_COLORDODGE: FPD_FXGBLEND_COLORDODGE,
  FPD_FXGBLEND_DARKEN: FPD_FXGBLEND_DARKEN,
  FPD_FXGBLEND_DIFFERENCE: FPD_FXGBLEND_DIFFERENCE,
  FPD_FXGBLEND_EXCLUSION: FPD_FXGBLEND_EXCLUSION,
  FPD_FXGBLEND_HARDLIGHT: FPD_FXGBLEND_HARDLIGHT,
  FPD_FXGBLEND_LIGHTEN: FPD_FXGBLEND_LIGHTEN,
  FPD_FXGBLEND_MULTIPLY: FPD_FXGBLEND_MULTIPLY,
  FPD_FXGBLEND_NORMAL: FPD_FXGBLEND_NORMAL,
  FPD_FXGBLEND_OVERLAY: FPD_FXGBLEND_OVERLAY,
  FPD_FXGBLEND_SCREEN: FPD_FXGBLEND_SCREEN,
  FPD_FXGBLEND_SOFTLIGHT: FPD_FXGBLEND_SOFTLIGHT,
  FPD_FXGCS_DeviceCMYK: FPD_FXGCS_DeviceCMYK,
  FPD_FXGCS_DeviceGray: FPD_FXGCS_DeviceGray,
  FPD_FXGCS_DeviceRGB: FPD_FXGCS_DeviceRGB,
  FPD_FXGDEFAULT_CACHE_LIMIT: FPD_FXGDEFAULT_CACHE_LIMIT,
  FPD_FXGFILTERTYPE_PAINT: FPD_FXGFILTERTYPE_PAINT,
  FPD_FXGFILTER_RENDER_ERROR_MEMORY: FPD_FXGFILTER_RENDER_ERROR_MEMORY,
  FPD_FXGFILTER_RENDER_FINISH: FPD_FXGFILTER_RENDER_FINISH,
  FPD_FXGFILTER_RENDER_READY: FPD_FXGFILTER_RENDER_READY,
  FPD_FXGFILTER_RENDER_TOBECONTINUE: FPD_FXGFILTER_RENDER_TOBECONTINUE,
  FPD_FXGNIB_BASIC: FPD_FXGNIB_BASIC,
  FPD_FXGNIB_CUSTOM: FPD_FXGNIB_CUSTOM,
  FPD_FXGNIB_FILE_TYPE_ABR: FPD_FXGNIB_FILE_TYPE_ABR,
  FPD_FXGNIB_FILE_TYPE_FBR: FPD_FXGNIB_FILE_TYPE_FBR,
  FPD_FXGNIB_MASK: FPD_FXGNIB_MASK,
  FPD_FXGNIB_ROUND: FPD_FXGNIB_ROUND,
  FPD_FXGNIB_SAMPLE: FPD_FXGNIB_SAMPLE,
  FPD_FXGPAINT_BLUR: FPD_FXGPAINT_BLUR,
  FPD_FXGPAINT_ERASER: FPD_FXGPAINT_ERASER,
  FPD_FXGPAINT_ERROR_DATA: FPD_FXGPAINT_ERROR_DATA,
  FPD_FXGPAINT_ERROR_FATAL: FPD_FXGPAINT_ERROR_FATAL,
  FPD_FXGPAINT_ERROR_FILE_VERSION: FPD_FXGPAINT_ERROR_FILE_VERSION,
  FPD_FXGPAINT_ERROR_MEM: FPD_FXGPAINT_ERROR_MEM,
  FPD_FXGPAINT_ERROR_OK: FPD_FXGPAINT_ERROR_OK,
  FPD_FXGPAINT_ERROR_PARAMS: FPD_FXGPAINT_ERROR_PARAMS,
  FPD_FXGPAINT_ERROR_READ: FPD_FXGPAINT_ERROR_READ,
  FPD_FXGPAINT_ERROR_TYPE: FPD_FXGPAINT_ERROR_TYPE,
  FPD_FXGPAINT_ERROR_WRITE: FPD_FXGPAINT_ERROR_WRITE,
  FPD_FXGPAINT_MAX: FPD_FXGPAINT_MAX,
  FPD_FXGPAINT_PEN: FPD_FXGPAINT_PEN,
  FPD_FXGPAINT_PENCIL: FPD_FXGPAINT_PENCIL,
  FPD_FXGPAINT_SHARPEN: FPD_FXGPAINT_SHARPEN,
  FPD_FXGPAINT_UNKNOWN: FPD_FXGPAINT_UNKNOWN,
  FPD_FXGPATH_FILTER_DIB: FPD_FXGPATH_FILTER_DIB,
  FPD_FXGPATH_FILTER_PSI: FPD_FXGPATH_FILTER_PSI,
  FPD_FXGPATH_FILTER_SIMULATION: FPD_FXGPATH_FILTER_SIMULATION,
  FPD_FXGPATH_FILTER_VECTOR: FPD_FXGPATH_FILTER_VECTOR,
  FPD_FXGPT_ENDPATH: FPD_FXGPT_ENDPATH,
  FPD_FXGPT_LINETO: FPD_FXGPT_LINETO,
  FPD_FXGPT_MOVETO: FPD_FXGPT_MOVETO,
  FPD_GB2312_CHARSET: FPD_GB2312_CHARSET,
  FPD_GREEK_CHARSET: FPD_GREEK_CHARSET,
  FPD_HANGEUL_CHARSET: FPD_HANGEUL_CHARSET,
  FPD_HANGUL_CHARSET: FPD_HANGUL_CHARSET,
  FPD_HEBREW_CHARSET: FPD_HEBREW_CHARSET,
  FPD_IMAGE_COLOR: FPD_IMAGE_COLOR,
  FPD_IMAGE_GRAY: FPD_IMAGE_GRAY,
  FPD_IMAGE_MONO: FPD_IMAGE_MONO,
  FPD_IMAGE_UNKNOWN: FPD_IMAGE_UNKNOWN,
  FPD_JOHAB_CHARSET: FPD_JOHAB_CHARSET,
  FPD_JS_MAXLENGTH: FPD_JS_MAXLENGTH,
  FPD_LOADERR_ERROR: FPD_LOADERR_ERROR,
  FPD_LOADERR_FILE: FPD_LOADERR_FILE,
  FPD_LOADERR_FORMAT: FPD_LOADERR_FORMAT,
  FPD_LOADERR_MEMORY: FPD_LOADERR_MEMORY,
  FPD_LOADERR_NOTFOUND: FPD_LOADERR_NOTFOUND,
  FPD_LOADERR_PARAM: FPD_LOADERR_PARAM,
  FPD_LOADERR_PASSWORD: FPD_LOADERR_PASSWORD,
  FPD_LOADERR_STATUS: FPD_LOADERR_STATUS,
  FPD_LOADERR_SUCCESS: FPD_LOADERR_SUCCESS,
  FPD_LOADERR_TOBECONTINUED: FPD_LOADERR_TOBECONTINUED,
  FPD_NAMED_FIRSTPAGE: FPD_NAMED_FIRSTPAGE,
  FPD_NAMED_LASTPAGE: FPD_NAMED_LASTPAGE,
  FPD_NAMED_NEXTPAGE: FPD_NAMED_NEXTPAGE,
  FPD_NAMED_PREVPAGE: FPD_NAMED_PREVPAGE,
  FPD_NOTIFY_FAILED_DESTROY_CONTROL: FPD_NOTIFY_FAILED_DESTROY_CONTROL,
  FPD_NOTIFY_FAILED_DESTROY_DOCUMENT: FPD_NOTIFY_FAILED_DESTROY_DOCUMENT,
  FPD_NOTIFY_FAILED_DESTROY_FIELD: FPD_NOTIFY_FAILED_DESTROY_FIELD,
  FPD_NOTIFY_FAILED_DESTROY_OPTIONS: FPD_NOTIFY_FAILED_DESTROY_OPTIONS,
  FPD_NOTIFY_FAILED_DESTROY_PAGE: FPD_NOTIFY_FAILED_DESTROY_PAGE,
  FPD_NOTIFY_FAILED_WITHOUT_NOTIFY: FPD_NOTIFY_FAILED_WITHOUT_NOTIFY,
  FPD_NOTIFY_RESET_SIGNATURE_FIELD: FPD_NOTIFY_RESET_SIGNATURE_FIELD,
  FPD_NOTIFY_SUCCESS: FPD_NOTIFY_SUCCESS,
  FPD_NOTIFY_SUCCESS_WITHOUT_NOTIFY: FPD_NOTIFY_SUCCESS_WITHOUT_NOTIFY,
  FPD_OBJ_ARRAY: FPD_OBJ_ARRAY,
  FPD_OBJ_BOOLEAN: FPD_OBJ_BOOLEAN,
  FPD_OBJ_DICTIONARY: FPD_OBJ_DICTIONARY,
  FPD_OBJ_INVALID: FPD_OBJ_INVALID,
  FPD_OBJ_NAME: FPD_OBJ_NAME,
  FPD_OBJ_NULL: FPD_OBJ_NULL,
  FPD_OBJ_NUMBER: FPD_OBJ_NUMBER,
  FPD_OBJ_REFERENCE: FPD_OBJ_REFERENCE,
  FPD_OBJ_STREAM: FPD_OBJ_STREAM,
  FPD_OBJ_STRING: FPD_OBJ_STRING,
  FPD_OEM_CHARSET: FPD_OEM_CHARSET,
  FPD_OPTMIZER_ACTION: FPD_OPTMIZER_ACTION,
  FPD_OPTMIZER_DEFAULT: FPD_OPTMIZER_DEFAULT,
  FPD_OPTMIZER_DUPLICATE: FPD_OPTMIZER_DUPLICATE,
  FPD_OPTMIZER_INVALID: FPD_OPTMIZER_INVALID,
  FPD_PAGEOBJ_FORM: FPD_PAGEOBJ_FORM,
  FPD_PAGEOBJ_IMAGE: FPD_PAGEOBJ_IMAGE,
  FPD_PAGEOBJ_INLINES: FPD_PAGEOBJ_INLINES,
  FPD_PAGEOBJ_PATH: FPD_PAGEOBJ_PATH,
  FPD_PAGEOBJ_SHADING: FPD_PAGEOBJ_SHADING,
  FPD_PAGEOBJ_TEXT: FPD_PAGEOBJ_TEXT,
  FPD_PAGE_EMPTY: FPD_PAGE_EMPTY,
  FPD_PARSE_ERROR_CERT: FPD_PARSE_ERROR_CERT,
  FPD_PARSE_ERROR_DATA_SCARCITY: FPD_PARSE_ERROR_DATA_SCARCITY,
  FPD_PARSE_ERROR_FAILED: FPD_PARSE_ERROR_FAILED,
  FPD_PARSE_ERROR_FILE: FPD_PARSE_ERROR_FILE,
  FPD_PARSE_ERROR_FORMAT: FPD_PARSE_ERROR_FORMAT,
  FPD_PARSE_ERROR_HANDLER: FPD_PARSE_ERROR_HANDLER,
  FPD_PARSE_ERROR_PASSWORD: FPD_PARSE_ERROR_PASSWORD,
  FPD_PARSE_ERROR_SUCCESS: FPD_PARSE_ERROR_SUCCESS,
  FPD_PARSE_ERROR_TOBECONTINUED: FPD_PARSE_ERROR_TOBECONTINUED,
  FPD_PARSE_NOSTREAM: FPD_PARSE_NOSTREAM,
  FPD_PARSE_TYPEONLY: FPD_PARSE_TYPEONLY,
  FPD_PATTERN_SHADING: FPD_PATTERN_SHADING,
  FPD_PATTERN_TILING: FPD_PATTERN_TILING,
  FPD_PCBS_ALLOWCUSTOMTEXT: FPD_PCBS_ALLOWCUSTOMTEXT,
  FPD_PERM_ANNOT_FORM: FPD_PERM_ANNOT_FORM,
  FPD_PERM_ASSEMBLE: FPD_PERM_ASSEMBLE,
  FPD_PERM_EXTRACT: FPD_PERM_EXTRACT,
  FPD_PERM_EXTRACT_ACCESS: FPD_PERM_EXTRACT_ACCESS,
  FPD_PERM_FILL_FORM: FPD_PERM_FILL_FORM,
  FPD_PERM_MODIFY: FPD_PERM_MODIFY,
  FPD_PERM_PRINT: FPD_PERM_PRINT,
  FPD_PERM_PRINT_HIGH: FPD_PERM_PRINT_HIGH,
  FPD_PLBS_HOVERSEL: FPD_PLBS_HOVERSEL,
  FPD_PLBS_MULTIPLESEL: FPD_PLBS_MULTIPLESEL,
  FPD_PSI_TYPE_DATA: FPD_PSI_TYPE_DATA,
  FPD_PSI_TYPE_PATH: FPD_PSI_TYPE_PATH,
  FPD_PVTWORD_SCRIPT_NORMAL: FPD_PVTWORD_SCRIPT_NORMAL,
  FPD_PVTWORD_SCRIPT_SUB: FPD_PVTWORD_SCRIPT_SUB,
  FPD_PVTWORD_SCRIPT_SUPER: FPD_PVTWORD_SCRIPT_SUPER,
  FPD_PVTWORD_STYLE_BOLD: FPD_PVTWORD_STYLE_BOLD,
  FPD_PVTWORD_STYLE_CROSSOUT: FPD_PVTWORD_STYLE_CROSSOUT,
  FPD_PVTWORD_STYLE_DUALCROSSOUT: FPD_PVTWORD_STYLE_DUALCROSSOUT,
  FPD_PVTWORD_STYLE_FORMXOBJECT: FPD_PVTWORD_STYLE_FORMXOBJECT,
  FPD_PVTWORD_STYLE_HIGHLIGHT: FPD_PVTWORD_STYLE_HIGHLIGHT,
  FPD_PVTWORD_STYLE_ITALIC: FPD_PVTWORD_STYLE_ITALIC,
  FPD_PVTWORD_STYLE_LINE_END_TYPESET_SPACE: FPD_PVTWORD_STYLE_LINE_END_TYPESET_SPACE,
  FPD_PVTWORD_STYLE_NORMAL: FPD_PVTWORD_STYLE_NORMAL,
  FPD_PVTWORD_STYLE_SQUIGGLY: FPD_PVTWORD_STYLE_SQUIGGLY,
  FPD_PVTWORD_STYLE_UNDERLINE: FPD_PVTWORD_STYLE_UNDERLINE,
  FPD_PWL_REVIEWSTATE_ACCEPTED: FPD_PWL_REVIEWSTATE_ACCEPTED,
  FPD_PWL_REVIEWSTATE_CANCELLED: FPD_PWL_REVIEWSTATE_CANCELLED,
  FPD_PWL_REVIEWSTATE_COMPLETED: FPD_PWL_REVIEWSTATE_COMPLETED,
  FPD_PWL_REVIEWSTATE_DEFERRED: FPD_PWL_REVIEWSTATE_DEFERRED,
  FPD_PWL_REVIEWSTATE_FUTURE: FPD_PWL_REVIEWSTATE_FUTURE,
  FPD_PWL_REVIEWSTATE_NONE: FPD_PWL_REVIEWSTATE_NONE,
  FPD_PWL_REVIEWSTATE_REJECTED: FPD_PWL_REVIEWSTATE_REJECTED,
  FPD_QUALITYLV_HIGH: FPD_QUALITYLV_HIGH,
  FPD_QUALITYLV_LOW: FPD_QUALITYLV_LOW,
  FPD_QUALITYLV_MAX: FPD_QUALITYLV_MAX,
  FPD_QUALITYLV_MEDIUM: FPD_QUALITYLV_MEDIUM,
  FPD_QUALITYLV_MIN: FPD_QUALITYLV_MIN,
  FPD_QUALITY_LOSSLESS: FPD_QUALITY_LOSSLESS,
  FPD_QUALITY_LOSSY: FPD_QUALITY_LOSSY,
  FPD_RENDERCOLOR_ALPHA: FPD_RENDERCOLOR_ALPHA,
  FPD_RENDERCOLOR_CUSTOM: FPD_RENDERCOLOR_CUSTOM,
  FPD_RENDERCOLOR_GRAY: FPD_RENDERCOLOR_GRAY,
  FPD_RENDERCOLOR_NORMAL: FPD_RENDERCOLOR_NORMAL,
  FPD_RENDERCOLOR_TWOCOLOR: FPD_RENDERCOLOR_TWOCOLOR,
  FPD_RENDER_BGR_STRIPE: FPD_RENDER_BGR_STRIPE,
  FPD_RENDER_CLEARTYPE: FPD_RENDER_CLEARTYPE,
  FPD_RENDER_COLORREPLACE_PATH: FPD_RENDER_COLORREPLACE_PATH,
  FPD_RENDER_COLORREPLACE_PATH_ONLYBLACK: FPD_RENDER_COLORREPLACE_PATH_ONLYBLACK,
  FPD_RENDER_COLORREPLACE_TEXT: FPD_RENDER_COLORREPLACE_TEXT,
  FPD_RENDER_COLORREPLACE_TEXT_ONLYBLACK: FPD_RENDER_COLORREPLACE_TEXT_ONLYBLACK,
  FPD_RENDER_COLOR_ALPHA: FPD_RENDER_COLOR_ALPHA,
  FPD_RENDER_COLOR_CUSTOM: FPD_RENDER_COLOR_CUSTOM,
  FPD_RENDER_COLOR_GRAY: FPD_RENDER_COLOR_GRAY,
  FPD_RENDER_COLOR_NORMAL: FPD_RENDER_COLOR_NORMAL,
  FPD_RENDER_COLOR_TWOCOLOR: FPD_RENDER_COLOR_TWOCOLOR,
  FPD_RENDER_ENABLE_JPX_DOWNSAMPLE: FPD_RENDER_ENABLE_JPX_DOWNSAMPLE,
  FPD_RENDER_ENHANCEZEROLINE: FPD_RENDER_ENHANCEZEROLINE,
  FPD_RENDER_FILL_FULLCOVER: FPD_RENDER_FILL_FULLCOVER,
  FPD_RENDER_FORCE_DOWNSAMPLE: FPD_RENDER_FORCE_DOWNSAMPLE,
  FPD_RENDER_FORCE_HALFTONE: FPD_RENDER_FORCE_HALFTONE,
  FPD_RENDER_IMAGEINTERPOL: FPD_RENDER_IMAGEINTERPOL,
  FPD_RENDER_LIMITEDIMAGECACHE: FPD_RENDER_LIMITEDIMAGECACHE,
  FPD_RENDER_MONO_FORCE_DOWNSAMPLE: FPD_RENDER_MONO_FORCE_DOWNSAMPLE,
  FPD_RENDER_NOIMAGESMOOTH: FPD_RENDER_NOIMAGESMOOTH,
  FPD_RENDER_NOPATHSMOOTH: FPD_RENDER_NOPATHSMOOTH,
  FPD_RENDER_NOTEXTSMOOTH: FPD_RENDER_NOTEXTSMOOTH,
  FPD_RENDER_NO_NATIVETEXT: FPD_RENDER_NO_NATIVETEXT,
  FPD_RENDER_OVERPRINT: FPD_RENDER_OVERPRINT,
  FPD_RENDER_PRINTGRAPHICTEXT: FPD_RENDER_PRINTGRAPHICTEXT,
  FPD_RENDER_PRINTIMAGETEXT: FPD_RENDER_PRINTIMAGETEXT,
  FPD_RENDER_PRINTPREVIEW: FPD_RENDER_PRINTPREVIEW,
  FPD_RENDER_RECT_AA: FPD_RENDER_RECT_AA,
  FPD_RENDER_TEXTKNOCKOUT: FPD_RENDER_TEXTKNOCKOUT,
  FPD_RENDER_THINLINE: FPD_RENDER_THINLINE,
  FPD_RUSSIAN_CHARSET: FPD_RUSSIAN_CHARSET,
  FPD_SAVE_DEFAULT: FPD_SAVE_DEFAULT,
  FPD_SAVE_INCREMENTAL: FPD_SAVE_INCREMENTAL,
  FPD_SAVE_NO_ORIGINAL: FPD_SAVE_NO_ORIGINAL,
  FPD_SAVE_OBJECTSTREAM: FPD_SAVE_OBJECTSTREAM,
  FPD_SAVE_PROGRESSIVE: FPD_SAVE_PROGRESSIVE,
  FPD_SCH_STATUS_FAILED: FPD_SCH_STATUS_FAILED,
  FPD_SCH_STATUS_FOUND: FPD_SCH_STATUS_FOUND,
  FPD_SCH_STATUS_NOTFOUND: FPD_SCH_STATUS_NOTFOUND,
  FPD_SCH_STATUS_READY: FPD_SCH_STATUS_READY,
  FPD_SCH_STATUS_TOBECONTINUED: FPD_SCH_STATUS_TOBECONTINUED,
  FPD_SHIFTJIS_CHARSET: FPD_SHIFTJIS_CHARSET,
  FPD_SIGNATURE_DOCMDP: FPD_SIGNATURE_DOCMDP,
  FPD_SIGNATURE_FIELD: FPD_SIGNATURE_FIELD,
  FPD_SIGNATURE_FIELDMDP: FPD_SIGNATURE_FIELDMDP,
  FPD_SIGNATURE_ORDINARY: FPD_SIGNATURE_ORDINARY,
  FPD_SIGNATURE_STATE_SUB_SEAL_CERT_NOTINLIST: FPD_SIGNATURE_STATE_SUB_SEAL_CERT_NOTINLIST,
  FPD_SIGNATURE_STATE_SUB_SEAL_CERT_NOT_IN_VALIDITY_PERIOD: FPD_SIGNATURE_STATE_SUB_SEAL_CERT_NOT_IN_VALIDITY_PERIOD,
  FPD_SIGNATURE_STATE_SUB_SEAL_INVALID: FPD_SIGNATURE_STATE_SUB_SEAL_INVALID,
  FPD_SIGNATURE_STATE_SUB_SEAL_MUST_CHECKREVOKE: FPD_SIGNATURE_STATE_SUB_SEAL_MUST_CHECKREVOKE,
  FPD_SIGNATURE_STATE_SUB_SEAL_NOT_IN_VALIDITY_PERIOD: FPD_SIGNATURE_STATE_SUB_SEAL_NOT_IN_VALIDITY_PERIOD,
  FPD_SIGNATURE_STATE_SUB_SIGN_HASH_INVALID: FPD_SIGNATURE_STATE_SUB_SIGN_HASH_INVALID,
  FPD_SIGNATURE_STATE_SUB_SIGN_INVALID: FPD_SIGNATURE_STATE_SUB_SIGN_INVALID,
  FPD_SIGNATURE_STATE_SUB_TIMESTAMP_BEFORE: FPD_SIGNATURE_STATE_SUB_TIMESTAMP_BEFORE,
  FPD_SIGNATURE_TIMESTAMP: FPD_SIGNATURE_TIMESTAMP,
  FPD_STRETCH_BICUBIC: FPD_STRETCH_BICUBIC,
  FPD_STRETCH_DEFAULT: FPD_STRETCH_DEFAULT,
  FPD_STRETCH_DOWNSAMPLE: FPD_STRETCH_DOWNSAMPLE,
  FPD_STRETCH_INTERPOL: FPD_STRETCH_INTERPOL,
  FPD_STRETCH_NOSMOOTH: FPD_STRETCH_NOSMOOTH,
  FPD_STRETCH_OFF: FPD_STRETCH_OFF,
  FPD_STROKE_ADJUST: FPD_STROKE_ADJUST,
  FPD_STROKE_TEXT_MODE: FPD_STROKE_TEXT_MODE,
  FPD_SYMBOL_CHARSET: FPD_SYMBOL_CHARSET,
  FPD_TEXTKNOCKOUT: FPD_TEXTKNOCKOUT,
  FPD_TEXT_DISPLAY_ORDER: FPD_TEXT_DISPLAY_ORDER,
  FPD_TEXT_DOWN: FPD_TEXT_DOWN,
  FPD_TEXT_LEFT: FPD_TEXT_LEFT,
  FPD_TEXT_MATCHCASE: FPD_TEXT_MATCHCASE,
  FPD_TEXT_POS_ABOVE: FPD_TEXT_POS_ABOVE,
  FPD_TEXT_POS_BELOW: FPD_TEXT_POS_BELOW,
  FPD_TEXT_POS_CAPTION: FPD_TEXT_POS_CAPTION,
  FPD_TEXT_POS_ICON: FPD_TEXT_POS_ICON,
  FPD_TEXT_POS_LEFT: FPD_TEXT_POS_LEFT,
  FPD_TEXT_POS_OVERLAID: FPD_TEXT_POS_OVERLAID,
  FPD_TEXT_POS_RIGHT: FPD_TEXT_POS_RIGHT,
  FPD_TEXT_RIGHT: FPD_TEXT_RIGHT,
  FPD_TEXT_STREAM_ORDER: FPD_TEXT_STREAM_ORDER,
  FPD_TEXT_UP: FPD_TEXT_UP,
  FPD_THAI_CHARSET: FPD_THAI_CHARSET,
  FPD_TRANS_GROUP: FPD_TRANS_GROUP,
  FPD_TRANS_ISOLATED: FPD_TRANS_ISOLATED,
  FPD_TRANS_KNOCKOUT: FPD_TRANS_KNOCKOUT,
  FPD_TURKISH_CHARSET: FPD_TURKISH_CHARSET,
  FPD_VIETNAMESE_CHARSET: FPD_VIETNAMESE_CHARSET,
  FPD_WRAPPERTYPE_FOXIT: FPD_WRAPPERTYPE_FOXIT,
  FPD_WRAPPERTYPE_NO: FPD_WRAPPERTYPE_NO,
  FPD_WRAPPERTYPE_PDF2: FPD_WRAPPERTYPE_PDF2,
  FPD_ZEROAREA_FILL: FPD_ZEROAREA_FILL,
  FPD_ZOOM_FITBBOX: FPD_ZOOM_FITBBOX,
  FPD_ZOOM_FITBHORZ: FPD_ZOOM_FITBHORZ,
  FPD_ZOOM_FITBVERT: FPD_ZOOM_FITBVERT,
  FPD_ZOOM_FITHORZ: FPD_ZOOM_FITHORZ,
  FPD_ZOOM_FITPAGE: FPD_ZOOM_FITPAGE,
  FPD_ZOOM_FITRECT: FPD_ZOOM_FITRECT,
  FPD_ZOOM_FITVERT: FPD_ZOOM_FITVERT,
  FPD_ZOOM_XYZ: FPD_ZOOM_XYZ,
  FRBAC_CROSS: FRBAC_CROSS,
  FRBAC_HBEAM: FRBAC_HBEAM,
  FRBAC_POINTER: FRBAC_POINTER,
  FRBAC_SELECT: FRBAC_SELECT,
  FRBAC_SELECTCAPTION: FRBAC_SELECTCAPTION,
  FRBAC_SELECTCOPY: FRBAC_SELECTCOPY,
  FRBAC_SELECTDRAG: FRBAC_SELECTDRAG,
  FRBAC_SELECTNODRAG: FRBAC_SELECTNODRAG,
  FRBAC_SIZEALL: FRBAC_SIZEALL,
  FRBAC_SIZENESW: FRBAC_SIZENESW,
  FRBAC_SIZENS: FRBAC_SIZENS,
  FRBAC_SIZENWSE: FRBAC_SIZENWSE,
  FRBAC_SIZEWE: FRBAC_SIZEWE,
  FRBA_MOVETYPE_ELSE: FRBA_MOVETYPE_ELSE,
  FRBA_MOVETYPE_MOVE: FRBA_MOVETYPE_MOVE,
  FRBA_MOVETYPE_NONE: FRBA_MOVETYPE_NONE,
  FRBBS_BEVELED: FRBBS_BEVELED,
  FRBBS_DASH: FRBBS_DASH,
  FRBBS_INSET: FRBBS_INSET,
  FRBBS_SOLID: FRBBS_SOLID,
  FRBBS_UNDERLINE: FRBBS_UNDERLINE,
  FRCIPHER_AES: FRCIPHER_AES,
  FRCIPHER_NONE: FRCIPHER_NONE,
  FRCIPHER_RC4: FRCIPHER_RC4,
  FRD_BRMODE_CONTINUOUS: FRD_BRMODE_CONTINUOUS,
  FRD_BRMODE_CONTINUOUS_FACING: FRD_BRMODE_CONTINUOUS_FACING,
  FRD_BRMODE_SINGLE: FRD_BRMODE_SINGLE,
  FRD_BRMODE_SINGLE_FACING: FRD_BRMODE_SINGLE_FACING,
  FRD_LAYOUT_PREVIEW: FRD_LAYOUT_PREVIEW,
  FRD_LAYOUT_THUMBBAIL: FRD_LAYOUT_THUMBBAIL,
  FRD_ZMODE_ACTUAL_SIZE: FRD_ZMODE_ACTUAL_SIZE,
  FRD_ZMODE_CUSTOM: FRD_ZMODE_CUSTOM,
  FRD_ZMODE_FIT_HEIGHT: FRD_ZMODE_FIT_HEIGHT,
  FRD_ZMODE_FIT_PAGE: FRD_ZMODE_FIT_PAGE,
  FRD_ZMODE_FIT_RECTANGLE: FRD_ZMODE_FIT_RECTANGLE,
  FRD_ZMODE_FIT_VISIBLE: FRD_ZMODE_FIT_VISIBLE,
  FRD_ZMODE_FIT_WIDTH: FRD_ZMODE_FIT_WIDTH,
  FRD_ZMODE_NONE: FRD_ZMODE_NONE,
  FRMS_ACTIVATE_CREDENTIAL: FRMS_ACTIVATE_CREDENTIAL,
  FRMS_ACTIVATE_MACHINE: FRMS_ACTIVATE_MACHINE,
  FRMS_NEEDS_CREDENTIAL_ACTIVATION: FRMS_NEEDS_CREDENTIAL_ACTIVATION,
  FRMS_NEEDS_MACHINE_ACTIVATION: FRMS_NEEDS_MACHINE_ACTIVATION,
  FR_ACTIONWIZARD_NOCREATE: FR_ACTIONWIZARD_NOCREATE,
  FR_ACTIONWIZARD_NOPRESET: FR_ACTIONWIZARD_NOPRESET,
  FR_ACTIONWIZARD_PRESET: FR_ACTIONWIZARD_PRESET,
  FR_ACTIONWIZARD_PROMPTUSER: FR_ACTIONWIZARD_PROMPTUSER,
  FR_CT_ANNOTATION: FR_CT_ANNOTATION,
  FR_CT_TOUCHUP: FR_CT_TOUCHUP,
  FR_CURSOR_TYPE_ARROW: FR_CURSOR_TYPE_ARROW,
  FR_CURSOR_TYPE_CROSS: FR_CURSOR_TYPE_CROSS,
  FR_CURSOR_TYPE_HELP: FR_CURSOR_TYPE_HELP,
  FR_CURSOR_TYPE_SIZEALL: FR_CURSOR_TYPE_SIZEALL,
  FR_CURSOR_TYPE_SIZENESW: FR_CURSOR_TYPE_SIZENESW,
  FR_CURSOR_TYPE_SIZENS: FR_CURSOR_TYPE_SIZENS,
  FR_CURSOR_TYPE_SIZENWSE: FR_CURSOR_TYPE_SIZENWSE,
  FR_CURSOR_TYPE_SIZEWE: FR_CURSOR_TYPE_SIZEWE,
  FR_CURSOR_TYPE_UPARROW: FR_CURSOR_TYPE_UPARROW,
  FR_CURSOR_TYPE_WAIT: FR_CURSOR_TYPE_WAIT,
  FR_DOCTYPE_DYNIMIC_XFA: FR_DOCTYPE_DYNIMIC_XFA,
  FR_DOCTYPE_PDF: FR_DOCTYPE_PDF,
  FR_DOCTYPE_STATIC_XFA: FR_DOCTYPE_STATIC_XFA,
  FR_EMBED_CHARSET: FR_EMBED_CHARSET,
  FR_FILTER_ALL: FR_FILTER_ALL,
  FR_FILTER_ALLFORMAT: FR_FILTER_ALLFORMAT,
  FR_FILTER_CAD: FR_FILTER_CAD,
  FR_FILTER_EXCEL: FR_FILTER_EXCEL,
  FR_FILTER_HTML: FR_FILTER_HTML,
  FR_FILTER_HWP: FR_FILTER_HWP,
  FR_FILTER_IMAGE: FR_FILTER_IMAGE,
  FR_FILTER_OUTLOOK: FR_FILTER_OUTLOOK,
  FR_FILTER_PDF: FR_FILTER_PDF,
  FR_FILTER_POWERPOINT: FR_FILTER_POWERPOINT,
  FR_FILTER_PROJECT: FR_FILTER_PROJECT,
  FR_FILTER_TEXT: FR_FILTER_TEXT,
  FR_FILTER_VISIO: FR_FILTER_VISIO,
  FR_FILTER_WORD: FR_FILTER_WORD,
  FR_FILTER_WPS: FR_FILTER_WPS,
  FR_FILTER_XPS: FR_FILTER_XPS,
  FR_FMT_ALIGN_CENTER: FR_FMT_ALIGN_CENTER,
  FR_FMT_ALIGN_JUSTIFY: FR_FMT_ALIGN_JUSTIFY,
  FR_FMT_ALIGN_LEFT: FR_FMT_ALIGN_LEFT,
  FR_FMT_ALIGN_RIGHT: FR_FMT_ALIGN_RIGHT,
  FR_FMT_BOLD: FR_FMT_BOLD,
  FR_FMT_BORDER_COLOR: FR_FMT_BORDER_COLOR,
  FR_FMT_BULLET_SYMBOL: FR_FMT_BULLET_SYMBOL,
  FR_FMT_CHAR_SPACE: FR_FMT_CHAR_SPACE,
  FR_FMT_CROSS: FR_FMT_CROSS,
  FR_FMT_DEDENT: FR_FMT_DEDENT,
  FR_FMT_FILL_COLOR: FR_FMT_FILL_COLOR,
  FR_FMT_FONT_NAME: FR_FMT_FONT_NAME,
  FR_FMT_FONT_SIZE: FR_FMT_FONT_SIZE,
  FR_FMT_HORZ_SCALE: FR_FMT_HORZ_SCALE,
  FR_FMT_INDENT: FR_FMT_INDENT,
  FR_FMT_ITALIC: FR_FMT_ITALIC,
  FR_FMT_LINECOLOR: FR_FMT_LINECOLOR,
  FR_FMT_LINE_LEADING: FR_FMT_LINE_LEADING,
  FR_FMT_MODE: FR_FMT_MODE,
  FR_FMT_OPACITY: FR_FMT_OPACITY,
  FR_FMT_PARAGRAPH_SPACING: FR_FMT_PARAGRAPH_SPACING,
  FR_FMT_SUBSCRIPT: FR_FMT_SUBSCRIPT,
  FR_FMT_SUPERSCRIPT: FR_FMT_SUPERSCRIPT,
  FR_FMT_TEXT_COLOR: FR_FMT_TEXT_COLOR,
  FR_FMT_UNDERLINE: FR_FMT_UNDERLINE,
  FR_FMT_WORDSPACE: FR_FMT_WORDSPACE,
  FR_FMT_WRITING_DIR: FR_FMT_WRITING_DIR,
  FR_FUNCTION_CALLOUT: FR_FUNCTION_CALLOUT,
  FR_FUNCTION_FIND: FR_FUNCTION_FIND,
  FR_FUNCTION_HIGHLIGHT: FR_FUNCTION_HIGHLIGHT,
  FR_FUNCTION_INSERTTEXT: FR_FUNCTION_INSERTTEXT,
  FR_FUNCTION_NOTE: FR_FUNCTION_NOTE,
  FR_FUNCTION_REPLACETEXT: FR_FUNCTION_REPLACETEXT,
  FR_FUNCTION_SELECTTEXT: FR_FUNCTION_SELECTTEXT,
  FR_FUNCTION_SNAPSHOT: FR_FUNCTION_SNAPSHOT,
  FR_FUNCTION_SQUIGGLYUNDERLINE: FR_FUNCTION_SQUIGGLYUNDERLINE,
  FR_FUNCTION_STRIKEOUT: FR_FUNCTION_STRIKEOUT,
  FR_FUNCTION_TEXTBOX: FR_FUNCTION_TEXTBOX,
  FR_FUNCTION_TYPEWRITER: FR_FUNCTION_TYPEWRITER,
  FR_FUNCTION_UNDERLINE: FR_FUNCTION_UNDERLINE,
  FR_LANGUAGE_NAME_ARABIC: FR_LANGUAGE_NAME_ARABIC,
  FR_LANGUAGE_NAME_BULGARIAN: FR_LANGUAGE_NAME_BULGARIAN,
  FR_LANGUAGE_NAME_CATALAN: FR_LANGUAGE_NAME_CATALAN,
  FR_LANGUAGE_NAME_CHINESE_SIMPLIFIED: FR_LANGUAGE_NAME_CHINESE_SIMPLIFIED,
  FR_LANGUAGE_NAME_CHINESE_TRADITIONAL: FR_LANGUAGE_NAME_CHINESE_TRADITIONAL,
  FR_LANGUAGE_NAME_CZECH: FR_LANGUAGE_NAME_CZECH,
  FR_LANGUAGE_NAME_DANISH: FR_LANGUAGE_NAME_DANISH,
  FR_LANGUAGE_NAME_DEFAULT: FR_LANGUAGE_NAME_DEFAULT,
  FR_LANGUAGE_NAME_DUTCH: FR_LANGUAGE_NAME_DUTCH,
  FR_LANGUAGE_NAME_ENGLISH: FR_LANGUAGE_NAME_ENGLISH,
  FR_LANGUAGE_NAME_ESTONIAN: FR_LANGUAGE_NAME_ESTONIAN,
  FR_LANGUAGE_NAME_FINNISH: FR_LANGUAGE_NAME_FINNISH,
  FR_LANGUAGE_NAME_FRENCH: FR_LANGUAGE_NAME_FRENCH,
  FR_LANGUAGE_NAME_GALICIAN: FR_LANGUAGE_NAME_GALICIAN,
  FR_LANGUAGE_NAME_GERMAN: FR_LANGUAGE_NAME_GERMAN,
  FR_LANGUAGE_NAME_GREEK: FR_LANGUAGE_NAME_GREEK,
  FR_LANGUAGE_NAME_HEBREW: FR_LANGUAGE_NAME_HEBREW,
  FR_LANGUAGE_NAME_HUNGARIAN: FR_LANGUAGE_NAME_HUNGARIAN,
  FR_LANGUAGE_NAME_ITALIAN: FR_LANGUAGE_NAME_ITALIAN,
  FR_LANGUAGE_NAME_JAPANESE: FR_LANGUAGE_NAME_JAPANESE,
  FR_LANGUAGE_NAME_KOREAN: FR_LANGUAGE_NAME_KOREAN,
  FR_LANGUAGE_NAME_LITHUANIAN: FR_LANGUAGE_NAME_LITHUANIAN,
  FR_LANGUAGE_NAME_NORWEGIAN: FR_LANGUAGE_NAME_NORWEGIAN,
  FR_LANGUAGE_NAME_POLISH: FR_LANGUAGE_NAME_POLISH,
  FR_LANGUAGE_NAME_PORTUGUESE: FR_LANGUAGE_NAME_PORTUGUESE,
  FR_LANGUAGE_NAME_PORTUGUESE_BRAZILIAN: FR_LANGUAGE_NAME_PORTUGUESE_BRAZILIAN,
  FR_LANGUAGE_NAME_ROMANIAN: FR_LANGUAGE_NAME_ROMANIAN,
  FR_LANGUAGE_NAME_RUSSIAN: FR_LANGUAGE_NAME_RUSSIAN,
  FR_LANGUAGE_NAME_SLOVENIAN: FR_LANGUAGE_NAME_SLOVENIAN,
  FR_LANGUAGE_NAME_SPANISH: FR_LANGUAGE_NAME_SPANISH,
  FR_LANGUAGE_NAME_SWEDISH: FR_LANGUAGE_NAME_SWEDISH,
  FR_LANGUAGE_NAME_THAI: FR_LANGUAGE_NAME_THAI,
  FR_LANGUAGE_NAME_TURKISH: FR_LANGUAGE_NAME_TURKISH,
  FR_LANGUAGE_NAME_VALENCIAN: FR_LANGUAGE_NAME_VALENCIAN,
  FR_LANGUAGE_NAME_lATVIAN: FR_LANGUAGE_NAME_lATVIAN,
  FR_MENU_ENABLE_EMAIL: FR_MENU_ENABLE_EMAIL,
  FR_MENU_ENABLE_SAVEAS: FR_MENU_ENABLE_SAVEAS,
  FR_MENU_ENABLE_SNAPSHOT: FR_MENU_ENABLE_SNAPSHOT,
  FR_MENU_ENABLE_STAMP: FR_MENU_ENABLE_STAMP,
  FR_MENU_NAME_EDIT: FR_MENU_NAME_EDIT,
  FR_MENU_NAME_FILE: FR_MENU_NAME_FILE,
  FR_MENU_NAME_HELP: FR_MENU_NAME_HELP,
  FR_MENU_NAME_TOOLS: FR_MENU_NAME_TOOLS,
  FR_MENU_NAME_VIEW: FR_MENU_NAME_VIEW,
  FR_NAME_ADDTEXT: FR_NAME_ADDTEXT,
  FR_NAME_ADVANCEDSEARCHPAGE: FR_NAME_ADVANCEDSEARCHPAGE,
  FR_NAME_ANNOT: FR_NAME_ANNOT,
  FR_NAME_AREA: FR_NAME_AREA,
  FR_NAME_ARROW: FR_NAME_ARROW,
  FR_NAME_CALLOUT: FR_NAME_CALLOUT,
  FR_NAME_CARET: FR_NAME_CARET,
  FR_NAME_CHECKBOX: FR_NAME_CHECKBOX,
  FR_NAME_CIRCLE: FR_NAME_CIRCLE,
  FR_NAME_CLOUDY: FR_NAME_CLOUDY,
  FR_NAME_COMBOBOX: FR_NAME_COMBOBOX,
  FR_NAME_DFA_TOOLNAME: FR_NAME_DFA_TOOLNAME,
  FR_NAME_DIMENSION: FR_NAME_DIMENSION,
  FR_NAME_DISTANCE: FR_NAME_DISTANCE,
  FR_NAME_EDITSELECT: FR_NAME_EDITSELECT,
  FR_NAME_ELLIPSE: FR_NAME_ELLIPSE,
  FR_NAME_FAA_TOOLNAME: FR_NAME_FAA_TOOLNAME,
  FR_NAME_FINDTEXT: FR_NAME_FINDTEXT,
  FR_NAME_HAND: FR_NAME_HAND,
  FR_NAME_HIGHLIGHT: FR_NAME_HIGHLIGHT,
  FR_NAME_LINE: FR_NAME_LINE,
  FR_NAME_LISTBOX: FR_NAME_LISTBOX,
  FR_NAME_LOUPETOOL: FR_NAME_LOUPETOOL,
  FR_NAME_MANGIFIER: FR_NAME_MANGIFIER,
  FR_NAME_MOVIE: FR_NAME_MOVIE,
  FR_NAME_NOTE: FR_NAME_NOTE,
  FR_NAME_PENCIL: FR_NAME_PENCIL,
  FR_NAME_PERIMETER: FR_NAME_PERIMETER,
  FR_NAME_POLYGON: FR_NAME_POLYGON,
  FR_NAME_POLYLINE: FR_NAME_POLYLINE,
  FR_NAME_PUSHBUTTON: FR_NAME_PUSHBUTTON,
  FR_NAME_QUADRILATERALLINK: FR_NAME_QUADRILATERALLINK,
  FR_NAME_RADIOBUTTON: FR_NAME_RADIOBUTTON,
  FR_NAME_RECTANGLE: FR_NAME_RECTANGLE,
  FR_NAME_RECTANGLELINK: FR_NAME_RECTANGLELINK,
  FR_NAME_REPLACE: FR_NAME_REPLACE,
  FR_NAME_RUBBER: FR_NAME_RUBBER,
  FR_NAME_SCREEN: FR_NAME_SCREEN,
  FR_NAME_SELECTTEXT: FR_NAME_SELECTTEXT,
  FR_NAME_SNAPSHOT: FR_NAME_SNAPSHOT,
  FR_NAME_SOUND: FR_NAME_SOUND,
  FR_NAME_SQUARE: FR_NAME_SQUARE,
  FR_NAME_SQUIGGLY: FR_NAME_SQUIGGLY,
  FR_NAME_STAMP: FR_NAME_STAMP,
  FR_NAME_STRIKEOUT: FR_NAME_STRIKEOUT,
  FR_NAME_TEXTBOX: FR_NAME_TEXTBOX,
  FR_NAME_TEXTFIELD: FR_NAME_TEXTFIELD,
  FR_NAME_TYPECHECK: FR_NAME_TYPECHECK,
  FR_NAME_TYPEDOT: FR_NAME_TYPEDOT,
  FR_NAME_TYPELINE: FR_NAME_TYPELINE,
  FR_NAME_TYPERECT: FR_NAME_TYPERECT,
  FR_NAME_TYPEWRITER: FR_NAME_TYPEWRITER,
  FR_NAME_TYPEX: FR_NAME_TYPEX,
  FR_NAME_UNDERLINE: FR_NAME_UNDERLINE,
  FR_OEM_ASUS: FR_OEM_ASUS,
  FR_OEM_GENERAL: FR_OEM_GENERAL,
  FR_OEM_HPCM: FR_OEM_HPCM,
  FR_OEM_HPCS: FR_OEM_HPCS,
  FR_OEM_LENOVO: FR_OEM_LENOVO,
  FR_PANEL_LOCATION_LEFT: FR_PANEL_LOCATION_LEFT,
  FR_PANEL_LOCATION_TOP: FR_PANEL_LOCATION_TOP,
  FR_PDFZOOM_FITBBOX: FR_PDFZOOM_FITBBOX,
  FR_PDFZOOM_FITBHORZ: FR_PDFZOOM_FITBHORZ,
  FR_PDFZOOM_FITBVERT: FR_PDFZOOM_FITBVERT,
  FR_PDFZOOM_FITHORZ: FR_PDFZOOM_FITHORZ,
  FR_PDFZOOM_FITPAGE: FR_PDFZOOM_FITPAGE,
  FR_PDFZOOM_FITRECT: FR_PDFZOOM_FITRECT,
  FR_PDFZOOM_FITVERT: FR_PDFZOOM_FITVERT,
  FR_PDFZOOM_XYZ: FR_PDFZOOM_XYZ,
  FR_PERM_ANNOTATE: FR_PERM_ANNOTATE,
  FR_PERM_ASSEMBLE: FR_PERM_ASSEMBLE,
  FR_PERM_EXTRACT_ACCESS: FR_PERM_EXTRACT_ACCESS,
  FR_PERM_EXTRACT_COPY: FR_PERM_EXTRACT_COPY,
  FR_PERM_FILL_FORM: FR_PERM_FILL_FORM,
  FR_PERM_MODIFY_CONTENT: FR_PERM_MODIFY_CONTENT,
  FR_PERM_PRINT: FR_PERM_PRINT,
  FR_PERM_PRINT_HIGN: FR_PERM_PRINT_HIGN,
  FR_PRINT_BOOKLET_BINDING_LEFT: FR_PRINT_BOOKLET_BINDING_LEFT,
  FR_PRINT_BOOKLET_BINDING_RIGHT: FR_PRINT_BOOKLET_BINDING_RIGHT,
  FR_PRINT_BOOKLET_SUBSET_BACK: FR_PRINT_BOOKLET_SUBSET_BACK,
  FR_PRINT_BOOKLET_SUBSET_BOTH: FR_PRINT_BOOKLET_SUBSET_BOTH,
  FR_PRINT_BOOKLET_SUBSET_FRONT: FR_PRINT_BOOKLET_SUBSET_FRONT,
  FR_PRINT_DISP_MODE_FACING: FR_PRINT_DISP_MODE_FACING,
  FR_PRINT_DISP_MODE_SINGLE_PAGE: FR_PRINT_DISP_MODE_SINGLE_PAGE,
  FR_PRINT_FACING_16: FR_PRINT_FACING_16,
  FR_PRINT_FACING_2: FR_PRINT_FACING_2,
  FR_PRINT_FACING_4: FR_PRINT_FACING_4,
  FR_PRINT_FACING_6: FR_PRINT_FACING_6,
  FR_PRINT_FACING_9: FR_PRINT_FACING_9,
  FR_PRINT_FACING_CUSTOM: FR_PRINT_FACING_CUSTOM,
  FR_PRINT_HANDLING_BOOKLET: FR_PRINT_HANDLING_BOOKLET,
  FR_PRINT_HANDLING_MULTIPEPAGESPERSHEET: FR_PRINT_HANDLING_MULTIPEPAGESPERSHEET,
  FR_PRINT_HANDLING_NONE: FR_PRINT_HANDLING_NONE,
  FR_PRINT_HANDLING_TILELARGEPAGES: FR_PRINT_HANDLING_TILELARGEPAGES,
  FR_PRINT_ORDER_HORZ: FR_PRINT_ORDER_HORZ,
  FR_PRINT_ORDER_HORZ_REVERSED: FR_PRINT_ORDER_HORZ_REVERSED,
  FR_PRINT_ORDER_VERT: FR_PRINT_ORDER_VERT,
  FR_PRINT_ORDER_VERT_REVERSED: FR_PRINT_ORDER_VERT_REVERSED,
  FR_PRINT_RANGE_ALL: FR_PRINT_RANGE_ALL,
  FR_PRINT_RANGE_CURRENT_PAGE: FR_PRINT_RANGE_CURRENT_PAGE,
  FR_PRINT_RANGE_CURRENT_VIEW: FR_PRINT_RANGE_CURRENT_VIEW,
  FR_PRINT_RANGE_PAGES: FR_PRINT_RANGE_PAGES,
  FR_PRINT_RANGE_PORTFOLIO_ALL: FR_PRINT_RANGE_PORTFOLIO_ALL,
  FR_PRINT_RANGE_PORTFOLIO_SELECTED: FR_PRINT_RANGE_PORTFOLIO_SELECTED,
  FR_PRINT_ROTATE_MODE_CLOCKWISE: FR_PRINT_ROTATE_MODE_CLOCKWISE,
  FR_PRINT_ROTATE_MODE_COUNTERCLOCKWISE: FR_PRINT_ROTATE_MODE_COUNTERCLOCKWISE,
  FR_PRINT_ROTATE_MODE_NOMAL: FR_PRINT_ROTATE_MODE_NOMAL,
  FR_PRINT_SUBSET_ALL: FR_PRINT_SUBSET_ALL,
  FR_PRINT_SUBSET_EVEN: FR_PRINT_SUBSET_EVEN,
  FR_PRINT_SUBSET_OLD: FR_PRINT_SUBSET_OLD,
  FR_PRINT_WHAT_DOCUMENT: FR_PRINT_WHAT_DOCUMENT,
  FR_PRINT_WHAT_DOCUMENT_MAKEUPS: FR_PRINT_WHAT_DOCUMENT_MAKEUPS,
  FR_PRINT_WHAT_DOCUMENT_STAMPS: FR_PRINT_WHAT_DOCUMENT_STAMPS,
  FR_PRINT_WHAT_FORM_FIELDS_ONLY: FR_PRINT_WHAT_FORM_FIELDS_ONLY,
  FR_PRINT_ZOOM_MODE_BOOKLET: FR_PRINT_ZOOM_MODE_BOOKLET,
  FR_PRINT_ZOOM_MODE_CUSTOM_SCALES: FR_PRINT_ZOOM_MODE_CUSTOM_SCALES,
  FR_PRINT_ZOOM_MODE_FIT_PAPER: FR_PRINT_ZOOM_MODE_FIT_PAPER,
  FR_PRINT_ZOOM_MODE_MULTIPLE_PAGES: FR_PRINT_ZOOM_MODE_MULTIPLE_PAGES,
  FR_PRINT_ZOOM_MODE_NONE: FR_PRINT_ZOOM_MODE_NONE,
  FR_PRINT_ZOOM_MODE_REDUCE_PAPER: FR_PRINT_ZOOM_MODE_REDUCE_PAPER,
  FR_PRINT_ZOOM_MODE_TILE_LARGE_PAGES: FR_PRINT_ZOOM_MODE_TILE_LARGE_PAGES,
  FR_ROTATE_POS_BOTTOM: FR_ROTATE_POS_BOTTOM,
  FR_ROTATE_POS_LEFT: FR_ROTATE_POS_LEFT,
  FR_ROTATE_POS_RIGHT: FR_ROTATE_POS_RIGHT,
  FR_ROTATE_POS_TOP: FR_ROTATE_POS_TOP,
  FR_SIG_SHOW_ALL: FR_SIG_SHOW_ALL,
  FR_SIG_SHOW_DATE: FR_SIG_SHOW_DATE,
  FR_SIG_SHOW_DN: FR_SIG_SHOW_DN,
  FR_SIG_SHOW_FOXITFLOGO: FR_SIG_SHOW_FOXITFLOGO,
  FR_SIG_SHOW_LABEL: FR_SIG_SHOW_LABEL,
  FR_SIG_SHOW_LOCATION: FR_SIG_SHOW_LOCATION,
  FR_SIG_SHOW_NAME: FR_SIG_SHOW_NAME,
  FR_SIG_SHOW_REASON: FR_SIG_SHOW_REASON,
  FR_SIG_STATE_CERT_CANNOT_GET_VRI: FR_SIG_STATE_CERT_CANNOT_GET_VRI,
  FR_SIG_STATE_SIGNED: FR_SIG_STATE_SIGNED,
  FR_SIG_STATE_SUB_ALG_NOSUPPORTWAY: FR_SIG_STATE_SUB_ALG_NOSUPPORTWAY,
  FR_SIG_STATE_SUB_NONE: FR_SIG_STATE_SUB_NONE,
  FR_SIG_STATE_SUB_POLICYRESTRICTIONSNOPDFSIG: FR_SIG_STATE_SUB_POLICYRESTRICTIONSNOPDFSIG,
  FR_SIG_STATE_UNKNOWN: FR_SIG_STATE_UNKNOWN,
  FR_SIG_STATE_UNSIGNED: FR_SIG_STATE_UNSIGNED,
  FR_SIG_TIMESTAMP_DOC: FR_SIG_TIMESTAMP_DOC,
  FR_SIG_TIMESTAMP_EXPIRE: FR_SIG_TIMESTAMP_EXPIRE,
  FR_SIG_TIMESTAMP_INVALID: FR_SIG_TIMESTAMP_INVALID,
  FR_SIG_TIMESTAMP_ISSUER_ISUNKNOWN: FR_SIG_TIMESTAMP_ISSUER_ISUNKNOWN,
  FR_SIG_TIMESTAMP_ISSUER_ISVALID: FR_SIG_TIMESTAMP_ISSUER_ISVALID,
  FR_SIG_TIMESTAMP_NONE: FR_SIG_TIMESTAMP_NONE,
  FR_SIG_TIMESTAMP_TIMEBEFORE: FR_SIG_TIMESTAMP_TIMEBEFORE,
  FR_SIG_TIMESTAMP_VALID: FR_SIG_TIMESTAMP_VALID,
  FR_SIG_VERIFY_CHANGE: FR_SIG_VERIFY_CHANGE,
  FR_SIG_VERIFY_CHANGE_ILLEGAL: FR_SIG_VERIFY_CHANGE_ILLEGAL,
  FR_SIG_VERIFY_CHANGE_LEGAL: FR_SIG_VERIFY_CHANGE_LEGAL,
  FR_SIG_VERIFY_ERRORBYTERANGE: FR_SIG_VERIFY_ERRORBYTERANGE,
  FR_SIG_VERIFY_ERRORDATA: FR_SIG_VERIFY_ERRORDATA,
  FR_SIG_VERIFY_INCREDIBLE: FR_SIG_VERIFY_INCREDIBLE,
  FR_SIG_VERIFY_INVALID: FR_SIG_VERIFY_INVALID,
  FR_SIG_VERIFY_ISSUER_CURRENT: FR_SIG_VERIFY_ISSUER_CURRENT,
  FR_SIG_VERIFY_ISSUER_EXPIRE: FR_SIG_VERIFY_ISSUER_EXPIRE,
  FR_SIG_VERIFY_ISSUER_INVALID: FR_SIG_VERIFY_ISSUER_INVALID,
  FR_SIG_VERIFY_ISSUER_NOVERIFY: FR_SIG_VERIFY_ISSUER_NOVERIFY,
  FR_SIG_VERIFY_ISSUER_ONESIGNER: FR_SIG_VERIFY_ISSUER_ONESIGNER,
  FR_SIG_VERIFY_ISSUER_REVOKE: FR_SIG_VERIFY_ISSUER_REVOKE,
  FR_SIG_VERIFY_ISSUER_UNCHECK: FR_SIG_VERIFY_ISSUER_UNCHECK,
  FR_SIG_VERIFY_ISSUER_UNKNOW: FR_SIG_VERIFY_ISSUER_UNKNOW,
  FR_SIG_VERIFY_ISSUER_VALID: FR_SIG_VERIFY_ISSUER_VALID,
  FR_SIG_VERIFY_NONECHANGE: FR_SIG_VERIFY_NONECHANGE,
  FR_SIG_VERIFY_NOSUPPORTWAY: FR_SIG_VERIFY_NOSUPPORTWAY,
  FR_SIG_VERIFY_SMIDINVALID: FR_SIG_VERIFY_SMIDINVALID,
  FR_SIG_VERIFY_VALID: FR_SIG_VERIFY_VALID,
  FR_SOURCE_TYPE_ANNOTS: FR_SOURCE_TYPE_ANNOTS,
  FR_SOURCE_TYPE_BOOKMARK: FR_SOURCE_TYPE_BOOKMARK,
  FR_SOURCE_TYPE_MULTIBOOKMARK: FR_SOURCE_TYPE_MULTIBOOKMARK,
  FR_SOURCE_TYPE_PAGE: FR_SOURCE_TYPE_PAGE,
  FR_SOURCE_TYPE_PAGEOBJECTS: FR_SOURCE_TYPE_PAGEOBJECTS,
  FR_SOURCE_TYPE_TAG: FR_SOURCE_TYPE_TAG,
  FR_SOURCE_TYPE_UNKNOWN: FR_SOURCE_TYPE_UNKNOWN,
  FR_SOURCE_TYPE_USER: FR_SOURCE_TYPE_USER,
  FR_ST_ANNOTATION: FR_ST_ANNOTATION,
  FR_ST_BITMAP: FR_ST_BITMAP,
  FR_ST_BOOKMARK: FR_ST_BOOKMARK,
  FR_ST_TEXT: FR_ST_TEXT,
  FR_ST_THUMBNAIL: FR_ST_THUMBNAIL,
  FR_TASKPANE_ADVSEARCH: FR_TASKPANE_ADVSEARCH,
  FR_TEXT_OP_CREATE: FR_TEXT_OP_CREATE,
  FR_TEXT_OP_DELETE: FR_TEXT_OP_DELETE,
  FR_TEXT_OP_EDIT: FR_TEXT_OP_EDIT,
  FR_TEXT_OP_MERGE: FR_TEXT_OP_MERGE,
  FR_TEXT_OP_NONE: FR_TEXT_OP_NONE,
  FR_TEXT_OP_ON_REDO: FR_TEXT_OP_ON_REDO,
  FR_TEXT_OP_ON_RELEASE: FR_TEXT_OP_ON_RELEASE,
  FR_TEXT_OP_ON_UNDO: FR_TEXT_OP_ON_UNDO,
  FR_TEXT_OP_POSTION_CHANGE: FR_TEXT_OP_POSTION_CHANGE,
  FR_TEXT_OP_RESIZE: FR_TEXT_OP_RESIZE,
  FR_TEXT_OP_ROTATE: FR_TEXT_OP_ROTATE,
  FR_TEXT_OP_SHEAR: FR_TEXT_OP_SHEAR,
  FR_TEXT_OP_SPLIT: FR_TEXT_OP_SPLIT,
  FR_TOOLBAR_NAME_ADVANCED_TOOLS: FR_TOOLBAR_NAME_ADVANCED_TOOLS,
  FR_TOOLBAR_NAME_BASIC_TOOLS: FR_TOOLBAR_NAME_BASIC_TOOLS,
  FR_TOOLBAR_NAME_DIGITAL_TOOLS: FR_TOOLBAR_NAME_DIGITAL_TOOLS,
  FR_TOOLBAR_NAME_DRAWING2_TOOLS: FR_TOOLBAR_NAME_DRAWING2_TOOLS,
  FR_TOOLBAR_NAME_DRAWING_TOOLS: FR_TOOLBAR_NAME_DRAWING_TOOLS,
  FR_TOOLBAR_NAME_FATACH_TOOLS: FR_TOOLBAR_NAME_FATACH_TOOLS,
  FR_TOOLBAR_NAME_FAVORITE_TOOLS: FR_TOOLBAR_NAME_FAVORITE_TOOLS,
  FR_TOOLBAR_NAME_FILE_TOOLS: FR_TOOLBAR_NAME_FILE_TOOLS,
  FR_TOOLBAR_NAME_FIND_TOOLS: FR_TOOLBAR_NAME_FIND_TOOLS,
  FR_TOOLBAR_NAME_FLYOUTZOOM_TOOLS: FR_TOOLBAR_NAME_FLYOUTZOOM_TOOLS,
  FR_TOOLBAR_NAME_FORMAT_TOOLS: FR_TOOLBAR_NAME_FORMAT_TOOLS,
  FR_TOOLBAR_NAME_FORM_TOOLS: FR_TOOLBAR_NAME_FORM_TOOLS,
  FR_TOOLBAR_NAME_FREETEXT_TOOLS: FR_TOOLBAR_NAME_FREETEXT_TOOLS,
  FR_TOOLBAR_NAME_FULLSCREEN_TOOLS: FR_TOOLBAR_NAME_FULLSCREEN_TOOLS,
  FR_TOOLBAR_NAME_LINK_TOOLS: FR_TOOLBAR_NAME_LINK_TOOLS,
  FR_TOOLBAR_NAME_MARKUPS_TOOS: FR_TOOLBAR_NAME_MARKUPS_TOOS,
  FR_TOOLBAR_NAME_MARKUP_TOOLS: FR_TOOLBAR_NAME_MARKUP_TOOLS,
  FR_TOOLBAR_NAME_MEAS_TOOLS: FR_TOOLBAR_NAME_MEAS_TOOLS,
  FR_TOOLBAR_NAME_MMEDIA_TOOLS: FR_TOOLBAR_NAME_MMEDIA_TOOLS,
  FR_TOOLBAR_NAME_NAVIGATION_TOOLS: FR_TOOLBAR_NAME_NAVIGATION_TOOLS,
  FR_TOOLBAR_NAME_PROPERTY_TOOLS: FR_TOOLBAR_NAME_PROPERTY_TOOLS,
  FR_TOOLBAR_NAME_ROTATEVIEW_TOOLS: FR_TOOLBAR_NAME_ROTATEVIEW_TOOLS,
  FR_TOOLBAR_NAME_SECURITY_TOOLS: FR_TOOLBAR_NAME_SECURITY_TOOLS,
  FR_TOOLBAR_NAME_STAMP_TOOLS: FR_TOOLBAR_NAME_STAMP_TOOLS,
  FR_TOOLBAR_NAME_TEXTVIEWER_TOOLS: FR_TOOLBAR_NAME_TEXTVIEWER_TOOLS,
  FR_TOOLBAR_NAME_TEXT_TOOLS: FR_TOOLBAR_NAME_TEXT_TOOLS,
  FR_TOOLBAR_NAME_ZOOM_TOOLS: FR_TOOLBAR_NAME_ZOOM_TOOLS,
  FR_UNIT_CM: FR_UNIT_CM,
  FR_UNIT_INCH: FR_UNIT_INCH,
  FR_UNIT_MM: FR_UNIT_MM,
  FR_UNIT_PICA: FR_UNIT_PICA,
  FR_UNIT_POINT: FR_UNIT_POINT,
  FR_VT_SECTION_FLG: FR_VT_SECTION_FLG,
  FR_VT_SOFTRETURN: FR_VT_SOFTRETURN,
  FR_VT_TEXT_HIDCHAR: FR_VT_TEXT_HIDCHAR,
  FR_VT_TEXT_UNICODEINVALID: FR_VT_TEXT_UNICODEINVALID,
  FR_VT_WORD_STYLE_BOLD: FR_VT_WORD_STYLE_BOLD,
  FR_VT_WORD_STYLE_CROSSOUT: FR_VT_WORD_STYLE_CROSSOUT,
  FR_VT_WORD_STYLE_DUALCROSSOUT: FR_VT_WORD_STYLE_DUALCROSSOUT,
  FR_VT_WORD_STYLE_FORMXOBJECT: FR_VT_WORD_STYLE_FORMXOBJECT,
  FR_VT_WORD_STYLE_HIGHLIGHT: FR_VT_WORD_STYLE_HIGHLIGHT,
  FR_VT_WORD_STYLE_ITALIC: FR_VT_WORD_STYLE_ITALIC,
  FR_VT_WORD_STYLE_LINE_END_TYPESET_SPACE: FR_VT_WORD_STYLE_LINE_END_TYPESET_SPACE,
  FR_VT_WORD_STYLE_NORMAL: FR_VT_WORD_STYLE_NORMAL,
  FR_VT_WORD_STYLE_SQUIGGLY: FR_VT_WORD_STYLE_SQUIGGLY,
  FR_VT_WORD_STYLE_UNDERLINE: FR_VT_WORD_STYLE_UNDERLINE,
  FS3DE_ALMOST_PI: FS3DE_ALMOST_PI,
  FS3DE_CANVAS_NATIVE_HANDLE: FS3DE_CANVAS_NATIVE_HANDLE,
  FS3DE_ISIZE_MAX: FS3DE_ISIZE_MAX,
  FS3DE_ISIZE_MIN: FS3DE_ISIZE_MIN,
  FS3DE_PI: FS3DE_PI,
  FS3DE_USIZE_MAX: FS3DE_USIZE_MAX,
  FSFILL_ALTERNATE: FSFILL_ALTERNATE,
  FSFILL_FULLCOVER: FSFILL_FULLCOVER,
  FSFILL_RECT_AA: FSFILL_RECT_AA,
  FSFILL_WINDING: FSFILL_WINDING,
  FSIcc_FLAGS_BLACKPOINTCOMPENSATION: FSIcc_FLAGS_BLACKPOINTCOMPENSATION,
  FSIcc_FLAGS_DEFAULT: FSIcc_FLAGS_DEFAULT,
  FSIcc_FLAGS_GAMUTCHECK: FSIcc_FLAGS_GAMUTCHECK,
  FSIcc_FLAGS_HIGHRESPRECALC: FSIcc_FLAGS_HIGHRESPRECALC,
  FSIcc_FLAGS_LOWRESPRECALC: FSIcc_FLAGS_LOWRESPRECALC,
  FSIcc_FLAGS_NOWHITEONWHITEFIXUP: FSIcc_FLAGS_NOWHITEONWHITEFIXUP,
  FSIcc_FLAGS_SOFTPROOFING: FSIcc_FLAGS_SOFTPROOFING,
  FSIcc_INTENT_ABSOLUTE_COLORIMETRIC: FSIcc_INTENT_ABSOLUTE_COLORIMETRIC,
  FSIcc_INTENT_PERCEPTUAL: FSIcc_INTENT_PERCEPTUAL,
  FSIcc_INTENT_RELATIVE_COLORIMETRIC: FSIcc_INTENT_RELATIVE_COLORIMETRIC,
  FSIcc_INTENT_SATURATION: FSIcc_INTENT_SATURATION,
  FSSYS_qsort: FSSYS_qsort,
  FS_ASSERT: FS_ASSERT,
  FS_DIB_BLEND_COLOR: FS_DIB_BLEND_COLOR,
  FS_DIB_BLEND_COLORBURN: FS_DIB_BLEND_COLORBURN,
  FS_DIB_BLEND_COLORDODGE: FS_DIB_BLEND_COLORDODGE,
  FS_DIB_BLEND_DARKEN: FS_DIB_BLEND_DARKEN,
  FS_DIB_BLEND_DIFFERENCE: FS_DIB_BLEND_DIFFERENCE,
  FS_DIB_BLEND_EXCLUSION: FS_DIB_BLEND_EXCLUSION,
  FS_DIB_BLEND_HARDLIGHT: FS_DIB_BLEND_HARDLIGHT,
  FS_DIB_BLEND_HUE: FS_DIB_BLEND_HUE,
  FS_DIB_BLEND_LIGHTEN: FS_DIB_BLEND_LIGHTEN,
  FS_DIB_BLEND_LUMINOSITY: FS_DIB_BLEND_LUMINOSITY,
  FS_DIB_BLEND_MULTIPLY: FS_DIB_BLEND_MULTIPLY,
  FS_DIB_BLEND_NONSEPARABLE: FS_DIB_BLEND_NONSEPARABLE,
  FS_DIB_BLEND_NORMAL: FS_DIB_BLEND_NORMAL,
  FS_DIB_BLEND_OVERLAY: FS_DIB_BLEND_OVERLAY,
  FS_DIB_BLEND_SATURATION: FS_DIB_BLEND_SATURATION,
  FS_DIB_BLEND_SCREEN: FS_DIB_BLEND_SCREEN,
  FS_DIB_BLEND_SOFTLIGHT: FS_DIB_BLEND_SOFTLIGHT,
  FS_DIB_BLEND_UNSUPPORTED: FS_DIB_BLEND_UNSUPPORTED,
  FS_DIB_DEFAULT: FS_DIB_DEFAULT,
  FS_DIB_DOWNSAMPLE: FS_DIB_DOWNSAMPLE,
  FS_DIB_EXIFTAG_FLOAT_DPIX: FS_DIB_EXIFTAG_FLOAT_DPIX,
  FS_DIB_EXIFTAG_FLOAT_DPIY: FS_DIB_EXIFTAG_FLOAT_DPIY,
  FS_DIB_EXIFTAG_STRING_COPYRIGHT: FS_DIB_EXIFTAG_STRING_COPYRIGHT,
  FS_DIB_EXIFTAG_STRING_DATETIME: FS_DIB_EXIFTAG_STRING_DATETIME,
  FS_DIB_EXIFTAG_STRING_IAMGEDESCRIPTION: FS_DIB_EXIFTAG_STRING_IAMGEDESCRIPTION,
  FS_DIB_EXIFTAG_STRING_MANUFACTURER: FS_DIB_EXIFTAG_STRING_MANUFACTURER,
  FS_DIB_EXIFTAG_STRING_MODULE: FS_DIB_EXIFTAG_STRING_MODULE,
  FS_DIB_EXIFTAG_STRING_SOFTWARE: FS_DIB_EXIFTAG_STRING_SOFTWARE,
  FS_DIB_EXIFTAG_USHORT_ORIENTATION: FS_DIB_EXIFTAG_USHORT_ORIENTATION,
  FS_DIB_EXIFTAG_USHORT_RESUNIT: FS_DIB_EXIFTAG_USHORT_RESUNIT,
  FS_DIB_INTERPOL: FS_DIB_INTERPOL,
  FS_DIB_PALETTE_LOC: FS_DIB_PALETTE_LOC,
  FS_DIB_PALETTE_MAC: FS_DIB_PALETTE_MAC,
  FS_DIB_PALETTE_WIN: FS_DIB_PALETTE_WIN,
  FS_FILEMODE_ReadOnly: FS_FILEMODE_ReadOnly,
  FS_FILEMODE_Truncate: FS_FILEMODE_Truncate,
  FS_FILEMODE_Write: FS_FILEMODE_Write,
  FS_FORMAT_CAPITAL: FS_FORMAT_CAPITAL,
  FS_FORMAT_HEX: FS_FORMAT_HEX,
  FS_FORMAT_SIGNED: FS_FORMAT_SIGNED,
  FS_JPX_COMPRESSION_LEVEL_HIGH: FS_JPX_COMPRESSION_LEVEL_HIGH,
  FS_JPX_COMPRESSION_LEVEL_LOSSLESS: FS_JPX_COMPRESSION_LEVEL_LOSSLESS,
  FS_JPX_COMPRESSION_LEVEL_LOW: FS_JPX_COMPRESSION_LEVEL_LOW,
  FS_JPX_COMPRESSION_LEVEL_MAXIMUM: FS_JPX_COMPRESSION_LEVEL_MAXIMUM,
  FS_JPX_COMPRESSION_LEVEL_MEDIUM: FS_JPX_COMPRESSION_LEVEL_MEDIUM,
  FS_JPX_COMPRESSION_LEVEL_MINIMUM: FS_JPX_COMPRESSION_LEVEL_MINIMUM,
  FS_JPX_COMPRESSION_LEVEL_USERDEFINED: FS_JPX_COMPRESSION_LEVEL_USERDEFINED,
  FS_UUIDTYPE_INVALID: FS_UUIDTYPE_INVALID,
  FS_UUIDTYPE_WINDOWS_OTHER: FS_UUIDTYPE_WINDOWS_OTHER,
  FS_UUIDTYPE_WINDOWS_RANDOM: FS_UUIDTYPE_WINDOWS_RANDOM,
  FS_UUIDTYPE_WINDOWS_RANDOM_HIGHQUALITY: FS_UUIDTYPE_WINDOWS_RANDOM_HIGHQUALITY,
  FS_UUIDTYPE_WINDOWS_TIME_MAC: FS_UUIDTYPE_WINDOWS_TIME_MAC,
  FS_UUIDTYPE_WINDOWS_TIME_RANDOM: FS_UUIDTYPE_WINDOWS_TIME_RANDOM,
  FS_UnCompress_BUF_ERROR: FS_UnCompress_BUF_ERROR,
  FS_UnCompress_DATA_ERROR: FS_UnCompress_DATA_ERROR,
  FS_UnCompress_ERRNO: FS_UnCompress_ERRNO,
  FS_UnCompress_MEM_ERROR: FS_UnCompress_MEM_ERROR,
  FS_UnCompress_NEED_DICT: FS_UnCompress_NEED_DICT,
  FS_UnCompress_OK: FS_UnCompress_OK,
  FS_UnCompress_STREAM_END: FS_UnCompress_STREAM_END,
  FS_UnCompress_STREAM_ERROR: FS_UnCompress_STREAM_ERROR,
  FS_UnCompress_VERSION_ERROR: FS_UnCompress_VERSION_ERROR,
  NULL: NULL,
  OFD_CIPHER_AES128: OFD_CIPHER_AES128,
  OFD_CIPHER_AES192: OFD_CIPHER_AES192,
  OFD_CIPHER_AES256: OFD_CIPHER_AES256,
  OFD_CIPHER_NONE: OFD_CIPHER_NONE,
  OFD_CIPHER_RC4: OFD_CIPHER_RC4,
  OFD_CIPHER_SM4: OFD_CIPHER_SM4,
  OFD_COLOR_MODE_ANYCOLOR: OFD_COLOR_MODE_ANYCOLOR,
  OFD_COLOR_MODE_GRAY: OFD_COLOR_MODE_GRAY,
  OFD_COLOR_MODE_NORMAL: OFD_COLOR_MODE_NORMAL,
  OFD_COLOR_MODE_TWOCOLOR: OFD_COLOR_MODE_TWOCOLOR,
  OFD_RENDER_ANNOT_NOTUSEBOUND: OFD_RENDER_ANNOT_NOTUSEBOUND,
  OFD_RENDER_DISPLAYTHUMBNAIL: OFD_RENDER_DISPLAYTHUMBNAIL,
  OFD_RENDER_LAYER_NODISPLAY_BD_LAYER: OFD_RENDER_LAYER_NODISPLAY_BD_LAYER,
  OFD_RENDER_LAYER_NODISPLAY_BD_TEMPLATE: OFD_RENDER_LAYER_NODISPLAY_BD_TEMPLATE,
  OFD_RENDER_LAYER_NODISPLAY_BY_LAYER: OFD_RENDER_LAYER_NODISPLAY_BY_LAYER,
  OFD_RENDER_LAYER_NODISPLAY_BY_TEMPLATE: OFD_RENDER_LAYER_NODISPLAY_BY_TEMPLATE,
  OFD_RENDER_LAYER_NODISPLAY_FD_LAYER: OFD_RENDER_LAYER_NODISPLAY_FD_LAYER,
  OFD_RENDER_LAYER_NODISPLAY_FD_TEMPLATE: OFD_RENDER_LAYER_NODISPLAY_FD_TEMPLATE,
  OFD_RENDER_NODISPLAY_BACKGROUND_TEMPLATEPAGE: OFD_RENDER_NODISPLAY_BACKGROUND_TEMPLATEPAGE,
  OFD_RENDER_NOUSE_FXTEXT_CLEARTYPE: OFD_RENDER_NOUSE_FXTEXT_CLEARTYPE,
  OFD_RENDER_PAGE_NOTUSECROPBOX: OFD_RENDER_PAGE_NOTUSECROPBOX,
  OFD_RENDER_PAGE_NOTUSEPAGEAREA: OFD_RENDER_PAGE_NOTUSEPAGEAREA,
  OFD_RENDER_PRINTSUBIMAGE: OFD_RENDER_PRINTSUBIMAGE,
  OFD_RENDER_PROGRESSIVE_RENDING: OFD_RENDER_PROGRESSIVE_RENDING,
  OFD_RENDER_RESOURCE_NOCACHE: OFD_RENDER_RESOURCE_NOCACHE,
  SECURITY_MSG_TIP_BAR_NAME: SECURITY_MSG_TIP_BAR_NAME,
  TRUE: TRUE,
  _FS_ADS_: _FS_ADS_,
  _FS_ANDROID_: _FS_ANDROID_,
  _FS_ARM64_: _FS_ARM64_,
  _FS_ARM_: _FS_ARM_,
  _FS_BIG_ENDIAN_: _FS_BIG_ENDIAN_,
  _FS_BREW_: _FS_BREW_,
  _FS_COMPILER_: _FS_COMPILER_,
  _FS_CPU_: _FS_CPU_,
  _FS_DEFAULT_TARGET_: _FS_DEFAULT_TARGET_,
  _FS_EMBEDDED_: _FS_EMBEDDED_,
  _FS_ENDIAN_: _FS_ENDIAN_,
  _FS_GCC_: _FS_GCC_,
  _FS_IA64_: _FS_IA64_,
  _FS_IARCC_: _FS_IARCC_,
  _FS_LINUX_DESKTOP_: _FS_LINUX_DESKTOP_,
  _FS_LINUX_EMBEDDED_: _FS_LINUX_EMBEDDED_,
  _FS_LITTLE_ENDIAN_: _FS_LITTLE_ENDIAN_,
  _FS_LOONGARCH64_: _FS_LOONGARCH64_,
  _FS_MACOSX_: _FS_MACOSX_,
  _FS_METROWERKS_: _FS_METROWERKS_,
  _FS_MIPS64_: _FS_MIPS64_,
  _FS_MIPS_: _FS_MIPS_,
  _FS_MIPS_SDE_: _FS_MIPS_SDE_,
  _FS_MTK_: _FS_MTK_,
  _FS_NETBSD_: _FS_NETBSD_,
  _FS_NOKIA_X86_: _FS_NOKIA_X86_,
  _FS_OS_: _FS_OS_,
  _FS_PACC_: _FS_PACC_,
  _FS_PALMOS_: _FS_PALMOS_,
  _FS_POWERPC_: _FS_POWERPC_,
  _FS_RVCT_: _FS_RVCT_,
  _FS_SOLARIS_: _FS_SOLARIS_,
  _FS_SPARC_: _FS_SPARC_,
  _FS_SYMBIAN_: _FS_SYMBIAN_,
  _FS_TMS470_: _FS_TMS470_,
  _FS_VC6_: _FS_VC6_,
  _FS_VC7_: _FS_VC7_,
  _FS_VC8_: _FS_VC8_,
  _FS_VXWORKS_: _FS_VXWORKS_,
  _FS_WIN32_DESKTOP_: _FS_WIN32_DESKTOP_,
  _FS_WIN32_MOBILE_: _FS_WIN32_MOBILE_,
  _FS_WIN64_: _FS_WIN64_,
  _FS_X64_: _FS_X64_,
  _FS_X86_: _FS_X86_
});

function _callSuper$1t(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1t() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1t() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1t = function _isNativeReflectConstruct() { return !!t; })(); }
var App$1 = /*#__PURE__*/function (_PluginApp) {
  function App(options) {
    var _this;
    _classCallCheck(this, App);
    _this = _callSuper$1t(this, App);
    if (_$1.isEmpty(options) || _$1.isEmpty(options.pluginInfo) || _$1.isEmpty(options.pluginInfo.id)) {
      var _console;
      var errorInfo = "\n                ERROR: Must set pluginId.\n                eg.\n                {\n                    pluginInfo: {\n                        id: string;\n                        name: string;\n                        version: string;\n                        description: string;\n                        author: string;\n                        license: string;\n                    }\n                }\n            ";
      (_console = console).log.apply(_console, _toConsumableArray(j([{
        content: errorInfo,
        padding: '4px',
        fontSize: '14px',
        fontWeight: 600,
        color: '#fff',
        cursor: 'pointer',
        backgroundImage: n$1.red
      }])));
      throw new Error(errorInfo);
    }
    window.pluginInfo = options.pluginInfo;
    return _this;
  }
  /**
   * 获取当前应用的名字
   * @returns {Promise<string>} 返回当前应用的名字
   */
  _inherits(App, _PluginApp);
  return _createClass(App, [{
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var string;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              string = new FSByteString();
              _context.next = 3;
              return this.GetName(string);
            case 3:
              return _context.abrupt("return", string === null || string === void 0 ? void 0 : string.value);
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 获取当前应用的版本
     * @returns {Promise<string>} 返回当前应用的版本
     */
    )
  }, {
    key: "getVersion",
    value: (function () {
      var _getVersion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var string;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              string = new FSWideString();
              _context2.next = 3;
              return this.GetVersion(string);
            case 3:
              return _context2.abrupt("return", string === null || string === void 0 ? void 0 : string.value);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getVersion() {
        return _getVersion.apply(this, arguments);
      }
      return getVersion;
    }()
    /**
     * 获取当前应用的title
     * @returns {Promise<string>} 返回当前应用的title
     */
    )
  }, {
    key: "getAppTitle",
    value: (function () {
      var _getAppTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var string;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              string = new FSWideString();
              _context3.next = 3;
              return this.GetAppTitle(string);
            case 3:
              return _context3.abrupt("return", string === null || string === void 0 ? void 0 : string.value);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getAppTitle() {
        return _getAppTitle.apply(this, arguments);
      }
      return getAppTitle;
    }()
    /**
     * 获取当前应用路径
     * @returns {Promise<string>} 返回当前应用路径
     */
    )
  }, {
    key: "getAppDataPath",
    value: (function () {
      var _getAppDataPath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var string;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              string = new FSWideString();
              _context4.next = 3;
              return this.GetAppDataPath(string);
            case 3:
              return _context4.abrupt("return", string === null || string === void 0 ? void 0 : string.value);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getAppDataPath() {
        return _getAppDataPath.apply(this, arguments);
      }
      return getAppDataPath;
    }()
    /**
     * 注册应用事件回调
     * @param appEventCallbacks 事件回调
     * @returns {Promise<boolean>} 返回注册结果
     */
    )
  }, {
    key: "registerAppEventHandler",
    value: (function () {
      var _registerAppEventHandler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(appEventCallbacks) {
        var fRAppEventCallbacks;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              fRAppEventCallbacks = new FRAppEventCallbacks(appEventCallbacks);
              _context5.next = 3;
              return this.RegisterAppEventHandler(fRAppEventCallbacks);
            case 3:
              return _context5.abrupt("return", _context5.sent);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function registerAppEventHandler(_x) {
        return _registerAppEventHandler.apply(this, arguments);
      }
      return registerAppEventHandler;
    }()
    /**
     * 当前打开的文档数量
     * @returns {Promise<number>} 返回当前打开的文档数量
     */
    )
  }, {
    key: "countDocsOfPDDoc",
    value: (function () {
      var _countDocsOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.CountDocsOfPDDoc();
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function countDocsOfPDDoc() {
        return _countDocsOfPDDoc.apply(this, arguments);
      }
      return countDocsOfPDDoc;
    }()
    /**
     * 根据索引获取当文档
     * @param {number} index 索引
     * @returns {Promise<FRDoc>} 返回文档
     */
    )
  }, {
    key: "getDocOfPDDoc",
    value: (function () {
      var _getDocOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        var result, frDoc;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.GetDocOfPDDoc(index);
            case 2:
              result = _context7.sent;
              frDoc = new FRDoc();
              frDoc.set(result);
              return _context7.abrupt("return", frDoc);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getDocOfPDDoc(_x2) {
        return _getDocOfPDDoc.apply(this, arguments);
      }
      return getDocOfPDDoc;
    }()
    /**
     * 获取当前active的文档
     * @returns {Promise<FRDoc>} 返回获取当前active的文档
     */
    )
  }, {
    key: "getActiveDocOfPDDoc",
    value: (function () {
      var _getActiveDocOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var result, frDoc;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.GetActiveDocOfPDDoc();
            case 2:
              result = _context8.sent;
              frDoc = new FRDoc();
              frDoc.set(result);
              return _context8.abrupt("return", frDoc);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getActiveDocOfPDDoc() {
        return _getActiveDocOfPDDoc.apply(this, arguments);
      }
      return getActiveDocOfPDDoc;
    }()
    /**
     * 设置激活的文档
     * @param {FRDoc} doc
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setActiveDocOfPDDoc",
    value: (function () {
      var _setActiveDocOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(doc) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.SetActiveDocOfPDDoc(doc);
            case 2:
              return _context9.abrupt("return", _context9.sent);
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function setActiveDocOfPDDoc(_x3) {
        return _setActiveDocOfPDDoc.apply(this, arguments);
      }
      return setActiveDocOfPDDoc;
    }()
    /**
     * 注册文档事件回调
     * @param docEventCallbacks 事件回调
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "registerDocHandlerOfPDDoc",
    value: (function () {
      var _registerDocHandlerOfPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(docEventCallbacks) {
        var fRDocEventCallbacks;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              fRDocEventCallbacks = new FRDocEventCallbacks(docEventCallbacks);
              _context10.next = 3;
              return this.RegisterDocHandlerOfPDDoc(fRDocEventCallbacks);
            case 3:
              return _context10.abrupt("return", _context10.sent);
            case 4:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function registerDocHandlerOfPDDoc(_x4) {
        return _registerDocHandlerOfPDDoc.apply(this, arguments);
      }
      return registerDocHandlerOfPDDoc;
    }()
    /**
     * 是否全屏
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isFullScreen",
    value: (function () {
      var _isFullScreen = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.IsFullScreen();
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function isFullScreen() {
        return _isFullScreen.apply(this, arguments);
      }
      return isFullScreen;
    }()
    /**
     * 显示全屏
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "showFullScreen",
    value: (function () {
      var _showFullScreen = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.ShowFullScreen();
            case 2:
              return _context12.abrupt("return", _context12.sent);
            case 3:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function showFullScreen() {
        return _showFullScreen.apply(this, arguments);
      }
      return showFullScreen;
    }()
    /**
     * 隐藏全屏
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "endFullScreen",
    value: (function () {
      var _endFullScreen = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.EndFullScreen();
            case 2:
              return _context13.abrupt("return", _context13.sent);
            case 3:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function endFullScreen() {
        return _endFullScreen.apply(this, arguments);
      }
      return endFullScreen;
    }()
    /**
     * 注册右键菜单
     * @param name 菜单名称
     * @param contextMenuPopUpProcCallbacks 右键菜单回调
     * @param clientData 客户端数据
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "registerForContextMenuAddition",
    value: (function () {
      var _registerForContextMenuAddition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(name, contextMenuPopUpProcCallbacks, clientData) {
        var frContextMenuPopUpProcCallbacks;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              frContextMenuPopUpProcCallbacks = new FRContextMenuPopUpProcCallbacks(contextMenuPopUpProcCallbacks);
              _context14.next = 3;
              return this.RegisterForContextMenuAddition(name, frContextMenuPopUpProcCallbacks, clientData);
            case 3:
              return _context14.abrupt("return", _context14.sent);
            case 4:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function registerForContextMenuAddition(_x5, _x6, _x7) {
        return _registerForContextMenuAddition.apply(this, arguments);
      }
      return registerForContextMenuAddition;
    }())
  }, {
    key: "registerForContextMenuAdditionJs",
    value: function () {
      var _registerForContextMenuAdditionJs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(name, menus) {
        var menuItems, newMenus, newMenuItems, contextMenuPopUpProcJsCallbacks, i, menuItem, newMenuItem, funName, frContextMenuPopUpProcJsCallbacks, callbackIds, _i, _newMenuItem;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(_$1.isEmpty(menus) || _$1.isEmpty(menus.menuItems) || !_$1.isArray(menus.menuItems) || menus.menuItems.length <= 0)) {
                _context15.next = 2;
                break;
              }
              return _context15.abrupt("return", false);
            case 2:
              menuItems = menus.menuItems;
              newMenus = _$1.cloneDeep(menus);
              newMenuItems = newMenus.menuItems;
              contextMenuPopUpProcJsCallbacks = {};
              i = 0;
            case 7:
              if (!(i < menuItems.length)) {
                _context15.next = 18;
                break;
              }
              menuItem = menuItems[i];
              newMenuItem = newMenuItems[i];
              if (!(_$1.isEmpty(menuItem) || !_$1.isFunction(menuItem.executeProc))) {
                _context15.next = 12;
                break;
              }
              return _context15.abrupt("continue", 15);
            case 12:
              funName = getUuid(); // 给匿名函数起名
              contextMenuPopUpProcJsCallbacks[funName] = menuItem.executeProc;
              // @ts-ignore 强制将函数名 赋给 executeProc
              newMenuItem.executeProc = funName;
            case 15:
              i++;
              _context15.next = 7;
              break;
            case 18:
              // 注册回调
              frContextMenuPopUpProcJsCallbacks = new FRContextMenuPopUpProcJsCallbacks(contextMenuPopUpProcJsCallbacks);
              callbackIds = frContextMenuPopUpProcJsCallbacks.callbackIds;
              frContextMenuPopUpProcJsCallbacks.register();
              _i = 0;
            case 22:
              if (!(_i < newMenuItems.length)) {
                _context15.next = 30;
                break;
              }
              _newMenuItem = newMenuItems[_i];
              if (!(_$1.isEmpty(_newMenuItem) || _$1.isEmpty(_newMenuItem.executeProc))) {
                _context15.next = 26;
                break;
              }
              return _context15.abrupt("continue", 27);
            case 26:
              // @ts-ignore 强制将函数名 赋给 executeProc, 将callback创建的函数名替换回去
              _newMenuItem.executeProc = callbackIds[_newMenuItem.executeProc];
            case 27:
              _i++;
              _context15.next = 22;
              break;
            case 30:
              _context15.next = 32;
              return this.RegisterForContextMenuAdditionJs(name, newMenus);
            case 32:
              return _context15.abrupt("return", _context15.sent);
            case 33:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function registerForContextMenuAdditionJs(_x8, _x9) {
        return _registerForContextMenuAdditionJs.apply(this, arguments);
      }
      return registerForContextMenuAdditionJs;
    }()
    /**
     * 显示任务视图
     * @param nameOfPaneView 任务视图名称
     * @param bShow 是否显示
     * @returns {Promise<void>}
     */
  }, {
    key: "showTaskPane",
    value: (function () {
      var _showTaskPane = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(nameOfPaneView, show) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.ShowTaskPane(nameOfPaneView, show);
            case 2:
              return _context16.abrupt("return", _context16.sent);
            case 3:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function showTaskPane(_x10, _x11) {
        return _showTaskPane.apply(this, arguments);
      }
      return showTaskPane;
    }()
    /**
     * 获取任务视图是否显示
     * @param name 任务视图名称
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isTaskPaneShow",
    value: (function () {
      var _isTaskPaneShow = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(name) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.IsTaskPaneShow(name);
            case 2:
              return _context17.abrupt("return", _context17.sent);
            case 3:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function isTaskPaneShow(_x12) {
        return _isTaskPaneShow.apply(this, arguments);
      }
      return isTaskPaneShow;
    }()
    /**
     * 获取ribbon栏
     * @param parentWnd 父窗口
     * @returns {Promise<FRRibbonBar>}
     */
    )
  }, {
    key: "getRibbonBar",
    value: (function () {
      var _getRibbonBar = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(parentWnd) {
        var result, ribbonBar;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.GetRibbonBar(parentWnd);
            case 2:
              result = _context18.sent;
              ribbonBar = new FRRibbonBar();
              ribbonBar.set(result);
              return _context18.abrupt("return", ribbonBar);
            case 6:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function getRibbonBar(_x13) {
        return _getRibbonBar.apply(this, arguments);
      }
      return getRibbonBar;
    }()
    /**
     * License有效或正在试用
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isLicenseValidOrInTrial",
    value: (function () {
      var _isLicenseValidOrInTrial = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.IsLicenseValidOrInTrial();
            case 2:
              return _context19.abrupt("return", _context19.sent);
            case 3:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function isLicenseValidOrInTrial() {
        return _isLicenseValidOrInTrial.apply(this, arguments);
      }
      return isLicenseValidOrInTrial;
    }()
    /**
     * 添加文件附件
     * @param doc doc对象
     * @param info 文件信息
     * @returns {boolean}
     */
    )
  }, {
    key: "addFileAttachment2",
    value: (function () {
      var _addFileAttachment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(doc, info) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.AddFileAttachment2(doc, info);
            case 2:
              return _context20.abrupt("return", _context20.sent);
            case 3:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function addFileAttachment2(_x14, _x15) {
        return _addFileAttachment.apply(this, arguments);
      }
      return addFileAttachment2;
    }())
  }]);
}(JSFR_App_V1);

function _callSuper$1s(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1s() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1s() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1s = function _isNativeReflectConstruct() { return !!t; })(); }
var FRDoc = /*#__PURE__*/function (_JSFR_Doc_V) {
  function FRDoc() {
    _classCallCheck(this, FRDoc);
    return _callSuper$1s(this, FRDoc, arguments);
  }
  _inherits(FRDoc, _JSFR_Doc_V);
  return _createClass(FRDoc, [{
    key: "openFromFile",
    value: (
    /**
     * 打开文件
     * @param fileSrc 文件路径
     * @param password 密码 如果不需要输入密码，则为 ''
     * @param makeVisible 是否显示 默认值 true
     * @param addToMRU 是否加入最近打开列表 默认值 false
     * @returns {Promise<FRDoc>} 返回当前打开的文档对象
     */
    function () {
      var _openFromFile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var fileSrc, _ref$password, password, _ref$makeVisible, makeVisible, _ref$addToMRU, addToMRU, result, frDoc;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              fileSrc = _ref.fileSrc, _ref$password = _ref.password, password = _ref$password === void 0 ? '' : _ref$password, _ref$makeVisible = _ref.makeVisible, makeVisible = _ref$makeVisible === void 0 ? true : _ref$makeVisible, _ref$addToMRU = _ref.addToMRU, addToMRU = _ref$addToMRU === void 0 ? false : _ref$addToMRU;
              _context.next = 3;
              return this.OpenFromFile(fileSrc, password, makeVisible, addToMRU);
            case 3:
              result = _context.sent;
              frDoc = new FRDoc();
              frDoc.set(result);
              return _context.abrupt("return", frDoc);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function openFromFile(_x) {
        return _openFromFile.apply(this, arguments);
      }
      return openFromFile;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 从fpdDoc打开文档
     * @param fpdDoc 待打开的fpdDoc对象
     * @param title 窗口标题
     * @private
     * @ignore
     * @returns {Promise<FRDoc>}
     */
    // async openFromPDDoc(fpdDoc: FPDDoc, title: string): Promise<FRDoc> {
    //     const result = await this.OpenFromPDDoc(fpdDoc, title);
    //     const frDoc = new FRDoc();
    //     frDoc.set(result);
    //     return frDoc;
    // }
    /**
     * 从fpdDoc获取FRDoc对象
     * @param {FPDDoc} fpdDoc fpdDoc
     * @returns {Promise<FRDoc>}
     */
    )
  }, {
    key: "fromPDDoc",
    value: (function () {
      var _fromPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fpdDoc) {
        var result, frDoc;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.FromPDDoc(fpdDoc);
            case 2:
              result = _context2.sent;
              frDoc = new FRDoc();
              frDoc.set(result);
              return _context2.abrupt("return", frDoc);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function fromPDDoc(_x2) {
        return _fromPDDoc.apply(this, arguments);
      }
      return fromPDDoc;
    }()
    /**
     * 关闭doc对象
     * @param promptToSave 是否提示保存
     * @param showCancel 是否显示取消按钮
     * @returns {Promise<boolean>} 关闭结果
     */
    )
  }, {
    key: "close",
    value: (function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref2) {
        var _ref2$promptToSave, promptToSave, _ref2$showCancel, showCancel, delay;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _ref2$promptToSave = _ref2.promptToSave, promptToSave = _ref2$promptToSave === void 0 ? true : _ref2$promptToSave, _ref2$showCancel = _ref2.showCancel, showCancel = _ref2$showCancel === void 0 ? true : _ref2$showCancel;
              // * @param delay 是否延迟关闭 不对外暴露，内部默认设为false
              delay = false;
              _context3.next = 4;
              return this.Close(this, promptToSave, delay, showCancel);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function close(_x3) {
        return _close.apply(this, arguments);
      }
      return close;
    }()
    /**
     * 获取fpdDoc对象
     * @returns {Promise<FPDDoc>}
     */
    )
  }, {
    key: "getPDDoc",
    value: (function () {
      var _getPDDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var result, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetPDDoc(this);
            case 2:
              result = _context4.sent;
              fpdDoc = new FPDDoc();
              fpdDoc.set(result);
              return _context4.abrupt("return", fpdDoc);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPDDoc() {
        return _getPDDoc.apply(this, arguments);
      }
      return getPDDoc;
    }()
    /**
     * 保存文档
     * @param {Object}
     *  docSaveProcCallbacks 保存回调
     *  procData 保存回调参数
     *  showProgressBar 是否显示进度条
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "doSave",
    value: (function () {
      var _doSave = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref3) {
        var _ref3$docSaveProcCall, docSaveProcCallbacks, _ref3$procData, procData, _ref3$showProgressBar, showProgressBar, frDocSaveProcCallbacks;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _ref3$docSaveProcCall = _ref3.docSaveProcCallbacks, docSaveProcCallbacks = _ref3$docSaveProcCall === void 0 ? {} : _ref3$docSaveProcCall, _ref3$procData = _ref3.procData, procData = _ref3$procData === void 0 ? new JSLPVOID() : _ref3$procData, _ref3$showProgressBar = _ref3.showProgressBar, showProgressBar = _ref3$showProgressBar === void 0 ? false : _ref3$showProgressBar;
              frDocSaveProcCallbacks = new FRDocSaveProcCallbacks(docSaveProcCallbacks);
              _context5.next = 4;
              return this.DoSave(this, frDocSaveProcCallbacks, procData, showProgressBar);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function doSave(_x4) {
        return _doSave.apply(this, arguments);
      }
      return doSave;
    }()
    /**
     * 另存为
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "doSaveAs",
    value: (function () {
      var _doSaveAs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.DoSaveAs(this);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function doSaveAs() {
        return _doSaveAs.apply(this, arguments);
      }
      return doSaveAs;
    }()
    /**
     * 设置文档修改标记
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setChangeMark",
    value: (function () {
      var _setChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.SetChangeMark(this);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setChangeMark() {
        return _setChangeMark.apply(this, arguments);
      }
      return setChangeMark;
    }()
    /**
     * 获取文档修改标记
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "getChangeMark",
    value: (function () {
      var _getChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.GetChangeMark(this);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getChangeMark() {
        return _getChangeMark.apply(this, arguments);
      }
      return getChangeMark;
    }()
    /**
     * 清除文档修改标记
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "clearChangeMark",
    value: (function () {
      var _clearChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.ClearChangeMark(this);
            case 2:
              return _context9.abrupt("return", _context9.sent);
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function clearChangeMark() {
        return _clearChangeMark.apply(this, arguments);
      }
      return clearChangeMark;
    }()
    /**
     * 打印文档
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "doPrint",
    value: (function () {
      var _doPrint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.DoPrint(this);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function doPrint() {
        return _doPrint.apply(this, arguments);
      }
      return doPrint;
    }()
    /**
     * 按pages起始页数打印文档
     * @param firstPage 起始页下标 0 开始
     * @param lastPage 结束页下标 0 开始
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "printPages",
    value: (function () {
      var _printPages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(firstPage, lastPage) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.PrintPages(this, firstPage, lastPage);
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function printPages(_x5, _x6) {
        return _printPages.apply(this, arguments);
      }
      return printPages;
    }()
    /**
     * 设置打印，将显示系统打印对话框
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "printSetup",
    value: (function () {
      var _printSetup = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.PrintSetup(this);
            case 2:
              return _context12.abrupt("return", _context12.sent);
            case 3:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function printSetup() {
        return _printSetup.apply(this, arguments);
      }
      return printSetup;
    }()
    /**
     * 获取文档分割视图数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "countDocViews",
    value: (function () {
      var _countDocViews = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!(this.value === '')) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return", 0);
            case 2:
              _context13.next = 4;
              return this.CountDocViews(this);
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function countDocViews() {
        return _countDocViews.apply(this, arguments);
      }
      return countDocViews;
    }()
    /**
     * 获取文档视图
     * @param viewIndex 索引
     * @returns {Promise<FRDocView>}
     */
    )
  }, {
    key: "getDocView",
    value: (function () {
      var _getDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(viewIndex) {
        var result, frDocView;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.GetDocView(this, viewIndex);
            case 2:
              result = _context14.sent;
              frDocView = new FRDocView();
              frDocView.set(result);
              return _context14.abrupt("return", frDocView);
            case 6:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getDocView(_x7) {
        return _getDocView.apply(this, arguments);
      }
      return getDocView;
    }()
    /**
     * 获取当前文档视图
     * @returns {Promise<FRDocView>}
     */
    )
  }, {
    key: "getCurrentDocView",
    value: (function () {
      var _getCurrentDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
        var result, frDocView;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.GetCurrentDocView(this);
            case 2:
              result = _context15.sent;
              frDocView = new FRDocView();
              frDocView.set(result);
              return _context15.abrupt("return", frDocView);
            case 6:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getCurrentDocView() {
        return _getCurrentDocView.apply(this, arguments);
      }
      return getCurrentDocView;
    }()
    /**
     * 获取文档权限
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPermissions",
    value: (function () {
      var _getPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.GetPermissions(this);
            case 2:
              return _context16.abrupt("return", _context16.sent);
            case 3:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getPermissions() {
        return _getPermissions.apply(this, arguments);
      }
      return getPermissions;
    }()
    /**
     * 设置文档权限
     * @param permission 权限值 (FR_PERM_PRINT, FR_PERM_MODIFY_CONTENT, FR_PERM_EXTRACT_COPY, FR_PERM_EXTRACT_ACCESS, FR_PERM_ANNOTATE, FR_PERM_FILL_FORM, FR_PERM_ASSEMBLE, FR_PERM_PRINT_HIGN)
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPermissions",
    value: (function () {
      var _setPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(permission) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.SetPermissions(this, permission);
            case 2:
              return _context17.abrupt("return", _context17.sent);
            case 3:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function setPermissions(_x8) {
        return _setPermissions.apply(this, arguments);
      }
      return setPermissions;
    }()
    /**
     * 静默打印文档
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "doPrintSilently",
    value: (function () {
      var _doPrintSilently = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.DoPrintSilently(this);
            case 2:
              return _context18.abrupt("return", _context18.sent);
            case 3:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function doPrintSilently() {
        return _doPrintSilently.apply(this, arguments);
      }
      return doPrintSilently;
    }()
    /**
     * 获取文本选择工具
     * @returns {Promise<FRTextSelectTool>}
     */
    )
  }, {
    key: "getTextSelectTool",
    value: (function () {
      var _getTextSelectTool = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        var result, textSelectTool;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.GetTextSelectTool(this);
            case 2:
              result = _context19.sent;
              textSelectTool = new FRTextSelectTool();
              textSelectTool.set(result);
              return _context19.abrupt("return", textSelectTool);
            case 6:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function getTextSelectTool() {
        return _getTextSelectTool.apply(this, arguments);
      }
      return getTextSelectTool;
    }()
    /**
     * 移除文档中的焦点Annot
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "killFocusAnnot",
    value: (function () {
      var _killFocusAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.KillFocusAnnot(this);
            case 2:
              return _context20.abrupt("return", _context20.sent);
            case 3:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function killFocusAnnot() {
        return _killFocusAnnot.apply(this, arguments);
      }
      return killFocusAnnot;
    }()
    /**
     * 重新加载指定页面，用于刷新页面视图
     * @param pageIndex 指定的页面索引
     * @param disableGoto 是否阻止进入指定页面视图。底层默认设置为 false
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "reloadPage",
    value: (function () {
      var _reloadPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(pageIndex) {
        var disableGoto,
          _args21 = arguments;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              disableGoto = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : false;
              _context21.next = 3;
              return this.ReloadPage(this, pageIndex, disableGoto);
            case 3:
              return _context21.abrupt("return", _context21.sent);
            case 4:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function reloadPage(_x9) {
        return _reloadPage.apply(this, arguments);
      }
      return reloadPage;
    }()
    /**
     * 添加水印 不会更新文档视图
     * @param watermarkInfo 水印设置信息
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "addWatermark",
    value: (function () {
      var _addWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(watermarkInfo) {
        var WatermarkInfo, result;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              WatermarkInfo = new FRWatermarkElementInfo(watermarkInfo);
              _context22.next = 3;
              return this.AddWatermark(this, WatermarkInfo);
            case 3:
              result = _context22.sent;
              return _context22.abrupt("return", result === 1);
            case 5:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function addWatermark(_x10) {
        return _addWatermark.apply(this, arguments);
      }
      return addWatermark;
    }()
    /**
     * 添加并更新水印 不会更新文档视图
     * @param watermarkInfo 水印设置信息
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "addAndUpdateWatermark",
    value: (function () {
      var _addAndUpdateWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(watermarkInfo) {
        var WatermarkInfo, result;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              WatermarkInfo = new FRWatermarkElementInfo(watermarkInfo);
              _context23.next = 3;
              return this.AddAndUpdateWatermark(this, WatermarkInfo);
            case 3:
              result = _context23.sent;
              return _context23.abrupt("return", result === 1);
            case 5:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function addAndUpdateWatermark(_x11) {
        return _addAndUpdateWatermark.apply(this, arguments);
      }
      return addAndUpdateWatermark;
    }()
    /**
     * 移除水印 不会更新文档视图
     * @param specifyDicValue 指定水印的 DictValue
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "removeWatermark",
    value: (function () {
      var _removeWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(specifyDicValue) {
        var result;
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this.RemoveWatermark(this, specifyDicValue);
            case 2:
              result = _context24.sent;
              return _context24.abrupt("return", result === 1);
            case 4:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
      function removeWatermark(_x12) {
        return _removeWatermark.apply(this, arguments);
      }
      return removeWatermark;
    }()
    /**
     * 移除并更新水印并更新文档视图
     * @param specifyDicValue 指定水印的 DictValue
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "removeAndUpdateWatermark",
    value: (function () {
      var _removeAndUpdateWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(specifyDicValue) {
        var result;
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.RemoveAndUpdateWatermark(this, specifyDicValue);
            case 2:
              result = _context25.sent;
              return _context25.abrupt("return", result === 1);
            case 4:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
      function removeAndUpdateWatermark(_x13) {
        return _removeAndUpdateWatermark.apply(this, arguments);
      }
      return removeAndUpdateWatermark;
    }()
    /**
     * 添加页眉页脚 不会更新文档视图
     * @param headerFooterInfo 页眉页脚设置信息
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "addHeaderFooter",
    value: (function () {
      var _addHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(headerFooterInfo) {
        var HeaderFooterInfo, result;
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              HeaderFooterInfo = new FRHeaderFooterElementInfo(headerFooterInfo);
              _context26.next = 3;
              return this.AddHeaderFooter(this, HeaderFooterInfo);
            case 3:
              result = _context26.sent;
              return _context26.abrupt("return", result === 1);
            case 5:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
      function addHeaderFooter(_x14) {
        return _addHeaderFooter.apply(this, arguments);
      }
      return addHeaderFooter;
    }()
    /**
     * 添加并更新页眉页脚并更新文档视图
     * @param frDoc frDoc对象
     * @param headerFooterInfo 页眉页脚设置信息
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "addAndUpdateHeaderFooter",
    value: (function () {
      var _addAndUpdateHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(headerFooterInfo) {
        var HeaderFooterInfo, result;
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              HeaderFooterInfo = new FRHeaderFooterElementInfo(headerFooterInfo);
              _context27.next = 3;
              return this.AddAndUpdateHeaderFooter(this, HeaderFooterInfo);
            case 3:
              result = _context27.sent;
              return _context27.abrupt("return", result === 1);
            case 5:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
      function addAndUpdateHeaderFooter(_x15) {
        return _addAndUpdateHeaderFooter.apply(this, arguments);
      }
      return addAndUpdateHeaderFooter;
    }()
    /**
     * 移除页眉页脚 不会更新文档视图
     * @param {string} specifyDicValue 指定水印的 DictValue
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "removeHeaderFooter",
    value: (function () {
      var _removeHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(specifyDicValue) {
        var result;
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return this.RemoveHeaderFooter(this, specifyDicValue);
            case 2:
              result = _context28.sent;
              return _context28.abrupt("return", result === 1);
            case 4:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
      function removeHeaderFooter(_x16) {
        return _removeHeaderFooter.apply(this, arguments);
      }
      return removeHeaderFooter;
    }()
    /**
     * 移除页眉页脚并更新文档视图
     * @param specifyDicValue 指定水印的 DictValue
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "removeAndUpdateHeaderFooter",
    value: (function () {
      var _removeAndUpdateHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(specifyDicValue) {
        var result;
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              _context29.next = 2;
              return this.RemoveAndUpdateHeaderFooter(this, specifyDicValue);
            case 2:
              result = _context29.sent;
              return _context29.abrupt("return", result === 1);
            case 4:
            case "end":
              return _context29.stop();
          }
        }, _callee29, this);
      }));
      function removeAndUpdateHeaderFooter(_x17) {
        return _removeAndUpdateHeaderFooter.apply(this, arguments);
      }
      return removeAndUpdateHeaderFooter;
    }()
    /**
     * 清除所有选中的Annot
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "clearAllSelection",
    value: (function () {
      var _clearAllSelection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              _context30.next = 2;
              return this.ClearAllSelection(this);
            case 2:
              return _context30.abrupt("return", _context30.sent);
            case 3:
            case "end":
              return _context30.stop();
          }
        }, _callee30, this);
      }));
      function clearAllSelection() {
        return _clearAllSelection.apply(this, arguments);
      }
      return clearAllSelection;
    }()
    /**
     * 获取焦点的Annot
     * @returns {Promise<FRAnnot>}
     */
    )
  }, {
    key: "getFocusAnnot",
    value: (function () {
      var _getFocusAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {
        var result, frAnnot;
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return this.GetFocusAnnot(this);
            case 2:
              result = _context31.sent;
              frAnnot = new FRAnnot();
              frAnnot.set(result);
              return _context31.abrupt("return", frAnnot);
            case 6:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this);
      }));
      function getFocusAnnot() {
        return _getFocusAnnot.apply(this, arguments);
      }
      return getFocusAnnot;
    }()
    /**
     * 获取指定页面指定字典的Annot
     * @param {number} pageIndex 页面索引
     * @param {FPDObject} dict 字典对象
     * @returns {Promise<FRAnnot>}
     */
    )
  }, {
    key: "getAnnotByDict",
    value: (function () {
      var _getAnnotByDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(pageIndex, dict) {
        var result, frAnnot;
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return this.GetAnnotByDict(this, pageIndex, dict);
            case 2:
              result = _context32.sent;
              frAnnot = new FRAnnot();
              frAnnot.set(result);
              return _context32.abrupt("return", frAnnot);
            case 6:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
      function getAnnotByDict(_x18, _x19) {
        return _getAnnotByDict.apply(this, arguments);
      }
      return getAnnotByDict;
    }()
    /**
     * 添加Annot
     * @param {number} pageIndex 页面索引
     * @param {string} subType Annot子类型
     * @param {Object} rect 矩形区域
     * @returns {Promise<FRAnnot>}
     */
    )
  }, {
    key: "addAnnot",
    value: (function () {
      var _addAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(pageIndex, subType, rect) {
        var fsFloatRect, result, frAnnot;
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              fsFloatRect = new FSFloatRect();
              fsFloatRect.set({
                uuid: fsFloatRect.uuid,
                value: rect
              });
              _context33.next = 4;
              return this.AddAnnot(this, pageIndex, subType, fsFloatRect);
            case 4:
              result = _context33.sent;
              frAnnot = new FRAnnot();
              frAnnot.set(result);
              return _context33.abrupt("return", frAnnot);
            case 8:
            case "end":
              return _context33.stop();
          }
        }, _callee33, this);
      }));
      function addAnnot(_x20, _x21, _x22) {
        return _addAnnot.apply(this, arguments);
      }
      return addAnnot;
    }()
    /**
     * 获取PDDoc的FRDoc
     * @param {FPDDoc} pdfDoc PDDoc对象
     * @returns {Promise<FRDoc>}
     */
    )
  }, {
    key: "getReaderDocument",
    value: (function () {
      var _getReaderDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(pdfDoc) {
        var result, frDoc;
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return this.GetReaderDocument(pdfDoc);
            case 2:
              result = _context34.sent;
              frDoc = new FRDoc();
              frDoc.set(result);
              return _context34.abrupt("return", frDoc);
            case 6:
            case "end":
              return _context34.stop();
          }
        }, _callee34, this);
      }));
      function getReaderDocument(_x23) {
        return _getReaderDocument.apply(this, arguments);
      }
      return getReaderDocument;
    }()
    /**
     * 获取文件名
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getFileName",
    value: (function () {
      var _getFileName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {
        var Name;
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              Name = new FSWideString();
              _context35.next = 3;
              return this.GetFileName(this, Name);
            case 3:
              return _context35.abrupt("return", Name.value);
            case 4:
            case "end":
              return _context35.stop();
          }
        }, _callee35, this);
      }));
      function getFileName() {
        return _getFileName.apply(this, arguments);
      }
      return getFileName;
    }()
    /**
     * 调整页面大小
     * @param {number} pageIndex - 需要调整大小的页面索引
     * @param {Object} mediaBox - 新的媒体框尺寸信息
     * @param {Object} cropBox - 新的裁剪框尺寸信息
     * @returns {Promise<boolean>} 表示调整页面大小的操作是否成功
     */
    )
  }, {
    key: "resizePage",
    value: (function () {
      var _resizePage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(_ref4) {
        var pageIndex, mediaBox, cropBox, _mediaBox, _cropBox;
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              pageIndex = _ref4.pageIndex, mediaBox = _ref4.mediaBox, cropBox = _ref4.cropBox;
              _mediaBox = new FSFloatRect();
              _mediaBox.set({
                uuid: _mediaBox.uuid,
                value: mediaBox
              });
              _cropBox = new FSFloatRect();
              _cropBox.set({
                uuid: _cropBox.uuid,
                value: cropBox
              });
              _context36.next = 7;
              return this.ResizePage(this, pageIndex, _mediaBox, _cropBox);
            case 7:
              return _context36.abrupt("return", _context36.sent);
            case 8:
            case "end":
              return _context36.stop();
          }
        }, _callee36, this);
      }));
      function resizePage(_x24) {
        return _resizePage.apply(this, arguments);
      }
      return resizePage;
    }())
  }]);
}(JSFR_Doc_V1);

function _callSuper$1r(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1r() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1r() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1r = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDDoc = /*#__PURE__*/function (_JSFPD_Doc_V) {
  function FPDDoc() {
    _classCallCheck(this, FPDDoc);
    return _callSuper$1r(this, FPDDoc, arguments);
  }
  _inherits(FPDDoc, _JSFPD_Doc_V);
  return _createClass(FPDDoc, [{
    key: "new",
    value: (
    /**
     * 新建一个文档对象(底层调用 FPDDocNew)
     * @returns {Promise<FPDDoc>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              fpdDoc = new FPDDoc();
              fpdDoc.set(result);
              return _context.abrupt("return", fpdDoc);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁 销毁由New创建的FPDDoc对象文档
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 打开文件
     * @param filePath 待打开的文件路径
     * @param password 密码, 默认为空
     * @returns {Promise<FPDDoc>}
     */
    )
  }, {
    key: "open",
    value: (function () {
      var _open = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filePath) {
        var password,
          result,
          fpdDoc,
          _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              password = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : '';
              _context3.next = 3;
              return this.Open(filePath, password);
            case 3:
              result = _context3.sent;
              fpdDoc = new FPDDoc();
              fpdDoc.set(result);
              return _context3.abrupt("return", fpdDoc);
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function open(_x) {
        return _open.apply(this, arguments);
      }
      return open;
    }()
    /**
     * 关闭文件, 关闭的是当前打开的文件
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "close",
    value: (function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.Close(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
    /**
     * 获取根对象，是当前打开的文档的根对象
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getRoot",
    value: (function () {
      var _getRoot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetRoot(this);
            case 2:
              result = _context5.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context5.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getRoot() {
        return _getRoot.apply(this, arguments);
      }
      return getRoot;
    }()
    /**
     * 获取当前文档的页数
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageCount",
    value: (function () {
      var _getPageCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.GetPageCount(this);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getPageCount() {
        return _getPageCount.apply(this, arguments);
      }
      return getPageCount;
    }()
    /**
     * 获取指定页的FPDPage对象
     * @param pageIndex 页码 文从0开始的索引
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getPage",
    value: (function () {
      var _getPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(pageIndex) {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.GetPage(this, pageIndex);
            case 2:
              result = _context7.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context7.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getPage(_x2) {
        return _getPage.apply(this, arguments);
      }
      return getPage;
    }()
    /**
     * 获取指定对象的页面索引。
     * @param {number} objNum - 文档中输入的间接对象编号
     * @returns {Promise<number>} 文档中页面的从0开始的索引
     */
    )
  }, {
    key: "getPageIndex",
    value: (function () {
      var _getPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(objNum) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.GetPageIndex(this, objNum);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getPageIndex(_x3) {
        return _getPageIndex.apply(this, arguments);
      }
      return getPageIndex;
    }()
    /**
     * 获取文档的权限。
     * @returns {Promise<number>} 权限值
     */
    )
  }, {
    key: "getUserPermissions",
    value: (function () {
      var _getUserPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.GetUserPermissions(this);
            case 2:
              return _context9.abrupt("return", _context9.sent);
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getUserPermissions() {
        return _getUserPermissions.apply(this, arguments);
      }
      return getUserPermissions;
    }()
    /**
     * 判断当前文档是否为文档所有者。
     * @returns {Promise<boolean>} 是否为文档的所有者
     */
    )
  }, {
    key: "isOwner",
    value: (function () {
      var _isOwner = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.IsOwner(this);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function isOwner() {
        return _isOwner.apply(this, arguments);
      }
      return isOwner;
    }()
    /**
     * 添加标准字体到文档。
     * @param {string} font - 字体名称。
     * @param {FPDFontEncoding} encoding - 字体编码。
     * @returns {Promise<FPDFont>} 返回一个新的 FPDFont 实例。
     */
    )
  }, {
    key: "addStandardFont",
    value: (function () {
      var _addStandardFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(font, encoding) {
        var result, fpdFont;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.AddStandardFont(this, font, encoding);
            case 2:
              result = _context11.sent;
              fpdFont = new FPDFont();
              fpdFont.set(result);
              return _context11.abrupt("return", fpdFont);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function addStandardFont(_x4, _x5) {
        return _addStandardFont.apply(this, arguments);
      }
      return addStandardFont;
    }()
    /**
     * 创建一个新的页面。
     * @param pageIndex - 新页面的索引位置。
     * @returns 返回一个新的 FPDObject 实例，表示新创建的页面。
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "createNewPage",
    value: (function () {
      var _createNewPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(pageIndex) {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.CreateNewPage(this, pageIndex);
            case 2:
              result = _context12.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context12.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function createNewPage(_x6) {
        return _createNewPage.apply(this, arguments);
      }
      return createNewPage;
    }()
    /**
     * 删除一个页面。
     * @param pageIndex - 要删除的页面的索引位置。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "deletePage",
    value: (function () {
      var _deletePage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(pageIndex) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.DeletePage(this, pageIndex);
            case 2:
              return _context13.abrupt("return", _context13.sent);
            case 3:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function deletePage(_x7) {
        return _deletePage.apply(this, arguments);
      }
      return deletePage;
    }()
    /**
     * 重新加载页面。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "reloadPages",
    value: (function () {
      var _reloadPages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.ReloadPages(this);
            case 2:
              return _context14.abrupt("return", _context14.sent);
            case 3:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function reloadPages() {
        return _reloadPages.apply(this, arguments);
      }
      return reloadPages;
    }()
    /**
     * 获取指定编号的间接对象。
     *
     * @param objNum - 对象编号。
     * @returns {Promise<FPDObject>} 返回一个新的 FPDObject 实例，表示获取的间接对象。
     */
    )
  }, {
    key: "getIndirectObject",
    value: (function () {
      var _getIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(objNum) {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.GetIndirectObject(this, objNum);
            case 2:
              result = _context15.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context15.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getIndirectObject(_x8) {
        return _getIndirectObject.apply(this, arguments);
      }
      return getIndirectObject;
    }()
    /**
     * 添加一个间接对象。
     * @param obj - FPDObject
     * @returns {Promise<number>} 返回添加的对象的编号。
     */
    )
  }, {
    key: "addIndirectObject",
    value: (function () {
      var _addIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(obj) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.AddIndirectObject(this, obj);
            case 2:
              return _context16.abrupt("return", _context16.sent);
            case 3:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function addIndirectObject(_x9) {
        return _addIndirectObject.apply(this, arguments);
      }
      return addIndirectObject;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 释放一个间接对象。
     * @param objNum - 对象编号
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    // async releaseIndirectObject(objNum: number): Promise<void> {
    //     return await this.ReleaseIndirectObject(this, objNum);
    // }
    /**
     * 删除一个间接对象。
     * @param objNum - 对象编号
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "deleteIndirectObject",
    value: (function () {
      var _deleteIndirectObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(objNum) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.DeleteIndirectObject(this, objNum);
            case 2:
              return _context17.abrupt("return", _context17.sent);
            case 3:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function deleteIndirectObject(_x10) {
        return _deleteIndirectObject.apply(this, arguments);
      }
      return deleteIndirectObject;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 插入一个间接对象。
     * @param objNum - 对象编号
     * @param obj - FPDObject
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    // async insertIndirectObject(objNum: number, obj: FPDObject): Promise<void> {
    //     return await this.InsertIndirectObject(this, objNum, obj);
    // }
    /**
     * 获取开始位置
     * @returns {Promise<POSITION>}
     */
    )
  }, {
    key: "getStartPosition",
    value: (function () {
      var _getStartPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        var result, position;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.GetStartPosition(this);
            case 2:
              result = _context18.sent;
              position = new POSITION$1();
              position.set(result);
              return _context18.abrupt("return", position);
            case 6:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function getStartPosition() {
        return _getStartPosition.apply(this, arguments);
      }
      return getStartPosition;
    }()
    /**
     * 获取下一个关联对象。
     * @param {POSITION} outPos - 用于输出的位置信息，将被更新为下一个关联对象的位置。
     * @param {IntPointer} outObjNum - 用于输出的整数变量，将被设置为下一个关联对象的编号。
     * @param outObject - 用于输出的对象实例，将被设置为下一个关联对象的具体信息。
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    // async getNextAssoc(outPos: POSITION, outObjNum: IntPointer, outObject: FPDObject): Promise<void> {
    //     return await this.GetNextAssoc(this, outPos, outObjNum, outObject);
    // }
    /**
     * 保存文档
     * @param fileName 输出文件名 宽字符串类型(eg. D:\\123.pdf)
     * @param flags 保存标志 默认 FPD_SAVE_DEFAULT 0
     * @param enable 是否进行数据压缩 默认 false
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "save2",
    value: (function () {
      var _save = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(fileName) {
        var flags,
          enable,
          _args19 = arguments;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              flags = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : FPD_SAVE_DEFAULT;
              enable = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : false;
              _context19.next = 4;
              return this.Save2(this, fileName, flags, enable);
            case 4:
              return _context19.abrupt("return", _context19.sent);
            case 5:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function save2(_x11) {
        return _save.apply(this, arguments);
      }
      return save2;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 从文档元数据中获取字符串值。
     * @param itemStr - 元数据项的名称。
     * @param str - 用于输出的字符串缓冲区。
     * @param useInfoOrXML - 指针，用于指示是否使用 XML 格式或基本信息。
     * @private
     * @ignore
     * @returns {Promise<number>}
     */
    // async metadataGetString(itemStr: string, str: string, useInfoOrXML: IntPointer): Promise<number> {
    //     return await this.MetadataGetString(this, itemStr, str, useInfoOrXML);
    // }
    /**
     * 2024-10-17 显示已注释不再导出
     * 设置文档元数据中的字符串值。
     * @param itemStr - 元数据项的名称。
     * @param str - 要设置的字符串值。
     * @param isUTF8 - 布尔值，指示字符串是否使用 UTF-8 编码。 默认为 true。
     * @private
     * @ignore
     * @returns {Promise<boolean>}
     */
    // async metadataSetString(itemStr: string, str: string, isUTF8: boolean = true): Promise<boolean> {
    //     return await this.MetadataSetString(this, itemStr, str, isUTF8);
    // }
    /**
     * 设置文档元数据中的日期和时间值。
     * @param itemStr 键 包含 'CreationDate' 和 'ModDate'
     * @param dt 日期和时间
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "metadataSetDateTime",
    value: (function () {
      var _metadataSetDateTime = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(itemStr, fpdCRT_DATETIMEZONE) {
        var dt;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              dt = new FPDCRT_DATETIMEZONE();
              dt.set({
                uuid: dt.uuid,
                value: fpdCRT_DATETIMEZONE
              });
              _context20.next = 4;
              return this.MetadataSetDateTime(this, itemStr, dt);
            case 4:
              return _context20.abrupt("return", _context20.sent);
            case 5:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function metadataSetDateTime(_x12, _x13) {
        return _metadataSetDateTime.apply(this, arguments);
      }
      return metadataSetDateTime;
    }()
    /**
     * 设置文档文件版本，将影响创建者的文件版本。在以后的 PDF 规范中引入任何新功能时调用它
     * @param fileVersion 版本号
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setFileVersion",
    value: (function () {
      var _setFileVersion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(fileVersion) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.SetFileVersion(this, fileVersion);
            case 2:
              return _context21.abrupt("return", _context21.sent);
            case 3:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function setFileVersion(_x14) {
        return _setFileVersion.apply(this, arguments);
      }
      return setFileVersion;
    }()
    /**
     *  获取文档文件版本
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFileVersion",
    value: (function () {
      var _getFileVersion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.GetFileVersion(this);
            case 2:
              return _context22.abrupt("return", _context22.sent);
            case 3:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function getFileVersion() {
        return _getFileVersion.apply(this, arguments);
      }
      return getFileVersion;
    }()
    /**
     * 获取根书签
     * @returns {Promise<FPDBookmark>}
     */
    )
  }, {
    key: "getRootBookmark",
    value: (function () {
      var _getRootBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {
        var result, bookmark;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.GetRootBookmark(this);
            case 2:
              result = _context23.sent;
              bookmark = new FPDBookmark();
              bookmark.set(result);
              return _context23.abrupt("return", bookmark);
            case 6:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function getRootBookmark() {
        return _getRootBookmark.apply(this, arguments);
      }
      return getRootBookmark;
    }())
  }]);
}(JSFPD_Doc_V1);

function _callSuper$1q(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1q() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1q() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1q = function _isNativeReflectConstruct() { return !!t; })(); }
var FRPageView = /*#__PURE__*/function (_JSFR_PageView_V) {
  function FRPageView() {
    _classCallCheck(this, FRPageView);
    return _callSuper$1q(this, FRPageView, arguments);
  }
  _inherits(FRPageView, _JSFR_PageView_V);
  return _createClass(FRPageView, [{
    key: "getDocument",
    value: (
    /**
     * 获取文档
     * @returns {Promise<FRDoc>}
     */
    function () {
      var _getDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, frDoc;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.GetDocument(this);
            case 2:
              result = _context.sent;
              frDoc = new FRDoc();
              frDoc.set(result);
              return _context.abrupt("return", frDoc);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getDocument() {
        return _getDocument.apply(this, arguments);
      }
      return getDocument;
    }()
    /**
     * 获取文档视图
     * @returns {Promise<FRDocView>}
     */
    )
  }, {
    key: "getDocView",
    value: (function () {
      var _getDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var result, frDocView;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.GetDocView(this);
            case 2:
              result = _context2.sent;
              frDocView = new FRDocView();
              frDocView.set(result);
              return _context2.abrupt("return", frDocView);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getDocView() {
        return _getDocView.apply(this, arguments);
      }
      return getDocView;
    }()
    /**
     * 获取PDF页面
     * @returns {Promise<FPDPage>}
     */
    )
  }, {
    key: "getPDPage",
    value: (function () {
      var _getPDPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var result, fpdPage;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetPDPage(this);
            case 2:
              result = _context3.sent;
              fpdPage = new FPDPage();
              fpdPage.set(result);
              return _context3.abrupt("return", fpdPage);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getPDPage() {
        return _getPDPage.apply(this, arguments);
      }
      return getPDPage;
    }()
    /**
     * 获取页码
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageIndex",
    value: (function () {
      var _getPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetPageIndex(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPageIndex() {
        return _getPageIndex.apply(this, arguments);
      }
      return getPageIndex;
    }()
    /**
     * 获取Annot数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "countAnnot",
    value: (function () {
      var _countAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.CountAnnot(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function countAnnot() {
        return _countAnnot.apply(this, arguments);
      }
      return countAnnot;
    }()
    /**
     * 获取当前矩阵
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getCurrentMatrix",
    value: (function () {
      var _getCurrentMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var result;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.GetCurrentMatrix(this);
            case 2:
              result = _context6.sent;
              return _context6.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getCurrentMatrix() {
        return _getCurrentMatrix.apply(this, arguments);
      }
      return getCurrentMatrix;
    }()
    /**
     * 将设备坐标转换为页面坐标
     * @param {number} x 设备坐标的x轴值
     * @param {number} y 设备坐标的y轴值
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "devicePointToPage",
    value: (function () {
      var _devicePointToPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(x, y) {
        var point;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              point = new FSFloatPoint();
              _context7.next = 3;
              return this.DevicePointToPage(this, x, y, point);
            case 3:
              return _context7.abrupt("return", point === null || point === void 0 ? void 0 : point.value);
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function devicePointToPage(_x, _x2) {
        return _devicePointToPage.apply(this, arguments);
      }
      return devicePointToPage;
    }()
    /**
     * 将设备矩形转换为页面矩形
     * @param rect 设备矩形
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "deviceRectToPage",
    value: (function () {
      var _deviceRectToPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(rect) {
        var _rect, point;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _rect = new FSRect();
              _rect.set({
                uuid: _rect.uuid,
                value: rect
              });
              point = new FSFloatPoint();
              _context8.next = 5;
              return this.DeviceRectToPage(this, _rect, point);
            case 5:
              return _context8.abrupt("return", point === null || point === void 0 ? void 0 : point.value);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function deviceRectToPage(_x3) {
        return _deviceRectToPage.apply(this, arguments);
      }
      return deviceRectToPage;
    }()
    /**
     * 将页面坐标转换为设备坐标
     * @param point 待转换的点
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "pointToDevice",
    value: (function () {
      var _pointToDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(point) {
        var _point, x, y;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _point = new FSFloatPoint();
              _point.set({
                uuid: _point.uuid,
                value: point
              });
              x = new IntPointer$1();
              y = new IntPointer$1();
              _context9.next = 6;
              return this.PointToDevice(this, _point, x, y);
            case 6:
              return _context9.abrupt("return", {
                x: x.value,
                y: y.value
              });
            case 7:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function pointToDevice(_x4) {
        return _pointToDevice.apply(this, arguments);
      }
      return pointToDevice;
    }()
    /**
     * 将页面矩形转换为设备矩形
     * @param floatPoint 待转换的矩形
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "rectToDevice",
    value: (function () {
      var _rectToDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(floatPoint) {
        var point, rect;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              point = new FSFloatPoint();
              point.set({
                uuid: point.uuid,
                value: floatPoint
              });
              rect = new FSRect();
              _context10.next = 5;
              return this.RectToDevice(this, point, rect);
            case 5:
              return _context10.abrupt("return", rect === null || rect === void 0 ? void 0 : rect.value);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function rectToDevice(_x5) {
        return _rectToDevice.apply(this, arguments);
      }
      return rectToDevice;
    }()
    /**
     * 获取当前页面的矩形
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getPageRect",
    value: (function () {
      var _getPageRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var rect;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.GetPageRect(this);
            case 2:
              rect = _context11.sent;
              return _context11.abrupt("return", rect === null || rect === void 0 ? void 0 : rect.value);
            case 4:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getPageRect() {
        return _getPageRect.apply(this, arguments);
      }
      return getPageRect;
    }()
    /**
     * 获取当前页面的可见区域
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getPageVisibleRect",
    value: (function () {
      var _getPageVisibleRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var rect;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.GetPageVisibleRect(this);
            case 2:
              rect = _context12.sent;
              return _context12.abrupt("return", rect === null || rect === void 0 ? void 0 : rect.value);
            case 4:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getPageVisibleRect() {
        return _getPageVisibleRect.apply(this, arguments);
      }
      return getPageVisibleRect;
    }()
    /**
     * 通过索引获取Annot
     * @param index annot索引
     * @returns {Promise<FRAnnot>}
     */
    )
  }, {
    key: "getAnnotByIndex",
    value: (function () {
      var _getAnnotByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(index) {
        var result, frAnnot;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.GetAnnotByIndex(this, index);
            case 2:
              result = _context13.sent;
              frAnnot = new FRAnnot();
              frAnnot.set(result);
              return _context13.abrupt("return", frAnnot);
            case 6:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getAnnotByIndex(_x6) {
        return _getAnnotByIndex.apply(this, arguments);
      }
      return getAnnotByIndex;
    }()
    /**
     * 删除Annot
     * @param frAnnot annot对象
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "deleteAnnot",
    value: (function () {
      var _deleteAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(frAnnot) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.DeleteAnnot(this, frAnnot);
            case 2:
              return _context14.abrupt("return", _context14.sent);
            case 3:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function deleteAnnot(_x7) {
        return _deleteAnnot.apply(this, arguments);
      }
      return deleteAnnot;
    }()
    /**
     * 获取焦点的Annot
     * @returns {Promise<FRAnnot>}
     */
    )
  }, {
    key: "getFocusAnnot",
    value: (function () {
      var _getFocusAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
        var result, frAnnot;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.GetFocusAnnot(this);
            case 2:
              result = _context15.sent;
              frAnnot = new FRAnnot();
              frAnnot.set(result);
              return _context15.abrupt("return", frAnnot);
            case 6:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getFocusAnnot() {
        return _getFocusAnnot.apply(this, arguments);
      }
      return getFocusAnnot;
    }()
    /**
     * 获取当前页面的缩放比例
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageScale",
    value: (function () {
      var _getPageScale = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.GetPageScale(this);
            case 2:
              return _context16.abrupt("return", _context16.sent);
            case 3:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getPageScale() {
        return _getPageScale.apply(this, arguments);
      }
      return getPageScale;
    }()
    /**
     * 获取指定坐标的Annot
     * @param point 坐标
     * @param subType 子类型
     * @returns {Promise<FRAnnot>}
     */
    )
  }, {
    key: "getAnnotAtPoint",
    value: (function () {
      var _getAnnotAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(point, subType) {
        var _point, result, frAnnot;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _point = new FSDevicePoint();
              _point.set({
                uuid: _point.uuid,
                value: point
              });
              _context17.next = 4;
              return this.GetAnnotAtPoint(this, _point, subType);
            case 4:
              result = _context17.sent;
              frAnnot = new FRAnnot();
              frAnnot.set(result);
              return _context17.abrupt("return", frAnnot);
            case 8:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getAnnotAtPoint(_x8, _x9) {
        return _getAnnotAtPoint.apply(this, arguments);
      }
      return getAnnotAtPoint;
    }()
    /**
     * 添加Annot
     * @param annotDict annot对象
     * @param index annot的索引位置
     * @returns {Promise<FRAnnot>}
     */
    )
  }, {
    key: "addAnnot",
    value: (function () {
      var _addAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(annotDict, index) {
        var result, frAnnot;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.AddAnnot(this, annotDict, index);
            case 2:
              result = _context18.sent;
              frAnnot = new FRAnnot();
              frAnnot.set(result);
              return _context18.abrupt("return", frAnnot);
            case 6:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function addAnnot(_x10, _x11) {
        return _addAnnot.apply(this, arguments);
      }
      return addAnnot;
    }()
    /**
     * 生成内容
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "generateContent",
    value: (function () {
      var _generateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.GenerateContent(this);
            case 2:
              return _context19.abrupt("return", _context19.sent);
            case 3:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function generateContent() {
        return _generateContent.apply(this, arguments);
      }
      return generateContent;
    }())
  }]);
}(JSFR_PageView_V1);

function _callSuper$1p(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1p() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1p() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1p = function _isNativeReflectConstruct() { return !!t; })(); }
var FRMenu = /*#__PURE__*/function (_JSFR_Menu_V) {
  function FRMenu() {
    _classCallCheck(this, FRMenu);
    return _callSuper$1p(this, FRMenu, arguments);
  }
  _inherits(FRMenu, _JSFR_Menu_V);
  return _createClass(FRMenu, [{
    key: "new",
    value: (
    /**
     * 创建一个新的FRMenu实例
     * @returns {Promise<FRMenu>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, menu;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              menu = new FRMenu();
              menu.set(result);
              return _context.abrupt("return", menu);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 释放FRMenu实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Release(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }()
    /**
     * 获取菜单项数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getMenuItemCount",
    value: (function () {
      var _getMenuItemCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetMenuItemCount(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getMenuItemCount() {
        return _getMenuItemCount.apply(this, arguments);
      }
      return getMenuItemCount;
    }()
    /**
     * 添加菜单项
     * @param {FRMenuItem} menuItem 菜单项
     * @param {number} index 索引
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "addMenuItem",
    value: (function () {
      var _addMenuItem = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(menuItem, index) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.AddMenuItem(this, menuItem, index);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function addMenuItem(_x, _x2) {
        return _addMenuItem.apply(this, arguments);
      }
      return addMenuItem;
    }())
  }]);
}(JSFR_Menu_V1);

function _callSuper$1o(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1o() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1o() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1o = function _isNativeReflectConstruct() { return !!t; })(); }
var FRMenuItem = /*#__PURE__*/function (_JSFR_MenuItem_V) {
  function FRMenuItem() {
    _classCallCheck(this, FRMenuItem);
    return _callSuper$1o(this, FRMenuItem, arguments);
  }
  _inherits(FRMenuItem, _JSFR_MenuItem_V);
  return _createClass(FRMenuItem, [{
    key: "new",
    value: (
    /**
     * 创建一个新的菜单项实例
     * @param {Object} options 菜单项的配置参数,属性如下
     *  @param {string} name 菜单项的唯一名称，用于内部标识
     *  @param {string} title 菜单项在界面上显示的文本
     *  @param {FSDIBitmap} bmp 用于表示菜单项图标的 FSDIBitmap 对象
     *  @param {boolean} separator 指示此菜单项是否为分隔符的布尔值如果是分隔符，通常用于界面分割而不是可选项
     *  @param {FRMenu} subMenu 此菜单项的子菜单，如果此菜单项有子菜单的话
     * @returns {Promise<FRMenuItem>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var name, title, bmp, separator, subMenu, result, menuItem;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              name = _ref.name, title = _ref.title, bmp = _ref.bmp, separator = _ref.separator, subMenu = _ref.subMenu;
              _context.next = 3;
              return this.New(name, title, bmp, separator, subMenu);
            case 3:
              result = _context.sent;
              menuItem = new FRMenuItem();
              menuItem.set(result);
              return _context.abrupt("return", menuItem);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 释放此菜单项实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Release(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }()
    /**
     * 获取此菜单项的标题
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getTitle",
    value: (function () {
      var _getTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var title;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              title = new FSWideString();
              _context3.next = 3;
              return this.GetTitle(this, title);
            case 3:
              return _context3.abrupt("return", title === null || title === void 0 ? void 0 : title.value);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getTitle() {
        return _getTitle.apply(this, arguments);
      }
      return getTitle;
    }()
    /**
     * 获取此菜单项的唯一name值
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var name;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              name = new FSWideString();
              _context4.next = 3;
              return this.GetName(this, name);
            case 3:
              return _context4.abrupt("return", name === null || name === void 0 ? void 0 : name.value);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 设置执行过程
     * @param {FRExecuteProcType} proc - 描述执行过程的回调函数，用于创建 FRExecuteProc 实例
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setExecuteProc",
    value: (function () {
      var _setExecuteProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(proc) {
        var frExecuteProc;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              frExecuteProc = new FRExecuteProc(proc);
              _context5.next = 3;
              return this.SetExecuteProc(this, frExecuteProc);
            case 3:
              return _context5.abrupt("return", _context5.sent);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setExecuteProc(_x2) {
        return _setExecuteProc.apply(this, arguments);
      }
      return setExecuteProc;
    }()
    /**
     * 设置计算功能是否启用的回调函数
     * @param {FRComputeEnabledProcType} proc - 计算功能启用的回调函数，当计算功能启用或禁用时会被调用
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setComputeEnabledProc",
    value: (function () {
      var _setComputeEnabledProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(proc) {
        var frComputeEnabledProc;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              frComputeEnabledProc = new FRComputeEnabledProc(proc);
              _context6.next = 3;
              return this.SetComputeEnabledProc(this, frComputeEnabledProc);
            case 3:
              return _context6.abrupt("return", _context6.sent);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setComputeEnabledProc(_x3) {
        return _setComputeEnabledProc.apply(this, arguments);
      }
      return setComputeEnabledProc;
    }())
  }]);
}(JSFR_MenuItem_V1);

function _callSuper$1n(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1n() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1n() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1n = function _isNativeReflectConstruct() { return !!t; })(); }
var FRRibbonBar = /*#__PURE__*/function (_JSFR_RibbonBar_V) {
  function FRRibbonBar() {
    _classCallCheck(this, FRRibbonBar);
    return _callSuper$1n(this, FRRibbonBar, arguments);
  }
  _inherits(FRRibbonBar, _JSFR_RibbonBar_V);
  return _createClass(FRRibbonBar, [{
    key: "addCategory",
    value: (
    /**
     * 添加一个新的类别到功能区
     * @param {string} name 类别的名称，用于内部标识
     * @param {string} title 类别显示的标题，用户界面中显示
     * @returns {Promise<FRRibbonCategory>} 添加成功的FRRibbonCategory对象
     */
    function () {
      var _addCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, title) {
        var result, category;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.AddCategory(this, name, title);
            case 2:
              result = _context.sent;
              category = new FRRibbonCategory();
              category.set(result);
              return _context.abrupt("return", category);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function addCategory(_x, _x2) {
        return _addCategory.apply(this, arguments);
      }
      return addCategory;
    }()
    /**
     * 获取分类数量
     * @returns {Promise<number>} 返回一个 Promise，解析为分类的数量
     */
    )
  }, {
    key: "getCategoryCount",
    value: (function () {
      var _getCategoryCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.GetCategoryCount(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getCategoryCount() {
        return _getCategoryCount.apply(this, arguments);
      }
      return getCategoryCount;
    }()
    /**
     * 根据索引异步获取类别
     * @param {number} index 类别的索引值，用于标识特定的类别
     * @returns {FRRibbonCategory} 该对象解析为包含类别信息的 FRRibbonCategory 实例
     */
    )
  }, {
    key: "getCategoryByIndex",
    value: (function () {
      var _getCategoryByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
        var result, category;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetCategoryByIndex(this, index);
            case 2:
              result = _context3.sent;
              category = new FRRibbonCategory();
              category.set(result);
              return _context3.abrupt("return", category);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getCategoryByIndex(_x3) {
        return _getCategoryByIndex.apply(this, arguments);
      }
      return getCategoryByIndex;
    }()
    /**
     * 根据类别名称异步获取 ribbon 类别对象
     * @param {string} categoryName - 要获取的 ribbon 类别的名称这是一个字符串参数，指定了要获取的类别名称
     * @returns {Promise<FRRibbonCategory>} - 该对象解析为 FRRibbonCategory 类型
     */
    )
  }, {
    key: "getCategoryByName",
    value: (function () {
      var _getCategoryByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(categoryName) {
        var result, category;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetCategoryByName(this, categoryName);
            case 2:
              result = _context4.sent;
              category = new FRRibbonCategory();
              category.set(result);
              return _context4.abrupt("return", category);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getCategoryByName(_x4) {
        return _getCategoryByName.apply(this, arguments);
      }
      return getCategoryByName;
    }()
    /**
     * 查找名称对应的 Ribbon 元素
     * @param {string} categoryName - Ribbon 类别名，用于指定所需的 Ribbon 类别
     * @param {string} panelName - Ribbon 面板名，用于指定所需的面板
     * @param {string} btnName - 按钮名，用于指定所需的按钮
     * @returns {Promise<FRRibbonElement>} - 该对象解析为包含 Ribbon 元素的 FRRibbonElement 对象
     */
    )
  }, {
    key: "findElementByName",
    value: (function () {
      var _findElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(categoryName, panelName, btnName) {
        var result, ribbonElement;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.FindElementByName(this, categoryName, panelName, btnName);
            case 2:
              result = _context5.sent;
              ribbonElement = new FRRibbonElement();
              ribbonElement.set(result);
              return _context5.abrupt("return", ribbonElement);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function findElementByName(_x5, _x6, _x7) {
        return _findElementByName.apply(this, arguments);
      }
      return findElementByName;
    }()
    /**
     * 重新计算布局
     * @param {boolean} recalcPanels 是否重新计算面板布局 默认为 true
     * @returns 无返回值
     */
    )
  }, {
    key: "reCalcLayout",
    value: (function () {
      var _reCalcLayout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var recalcPanels,
          _args6 = arguments;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              recalcPanels = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : true;
              _context6.next = 3;
              return this.RecalcLayout(this, recalcPanels);
            case 3:
              return _context6.abrupt("return", _context6.sent);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function reCalcLayout() {
        return _reCalcLayout.apply(this, arguments);
      }
      return reCalcLayout;
    }()
    /**
     * 设置激活分类
     * @param {string} categoryName - 要设置为活跃状态的分类名称
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setActiveCategory",
    value: (function () {
      var _setActiveCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(categoryName) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.SetActiveCategory(this, categoryName);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setActiveCategory(_x8) {
        return _setActiveCategory.apply(this, arguments);
      }
      return setActiveCategory;
    }()
    /**
     * 获取当前活跃的分类
     * @returns {Promise<FRRibbonCategory>}
     */
    )
  }, {
    key: "getActiveCategory",
    value: (function () {
      var _getActiveCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var result, category;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.GetActiveCategory(this);
            case 2:
              result = _context8.sent;
              category = new FRRibbonCategory();
              category.set(result);
              return _context8.abrupt("return", category);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getActiveCategory() {
        return _getActiveCategory.apply(this, arguments);
      }
      return getActiveCategory;
    }())
  }]);
}(JSFR_RibbonBar_V5);

function _callSuper$1m(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1m() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1m() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1m = function _isNativeReflectConstruct() { return !!t; })(); }
var FRRibbonPanel = /*#__PURE__*/function (_JSFR_RibbonPanel_V) {
  function FRRibbonPanel() {
    _classCallCheck(this, FRRibbonPanel);
    return _callSuper$1m(this, FRRibbonPanel, arguments);
  }
  _inherits(FRRibbonPanel, _JSFR_RibbonPanel_V);
  return _createClass(FRRibbonPanel, [{
    key: "addElement",
    value: (
    /**
     * 添加元素到功能区
     * @param {object} options - 添加元素的选项对象, 包括以下参数:
     *  @param {FR_Ribbon_Element_Type} elementType - 要添加的元素类型，如按钮、菜单等
     *  @param {string} name - 元素的唯一名称，用于标识该元素
     *  @param {string} title - 元素的标题，即显示在界面上的文本
     *  @param {number} pos - 元素在功能区中的位置，用于指定其显示顺序
     * @returns {Promise<JSLPVOID>}
     */
    function () {
      var _addElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var elementType, name, title, pos, result, lpVoid;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              elementType = _ref.elementType, name = _ref.name, title = _ref.title, pos = _ref.pos;
              _context.next = 3;
              return this.AddElement(this, elementType, name, title, pos);
            case 3:
              result = _context.sent;
              lpVoid = new JSLPVOID();
              lpVoid.set(result);
              return _context.abrupt("return", lpVoid);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function addElement(_x) {
        return _addElement.apply(this, arguments);
      }
      return addElement;
    }()
    /**
     * 获取指定名称的FRRibbonElement元素
     * @param {string} elementName - 要获取的元素的名称，作为查找的依据
     * @returns {Promise<FRRibbonElement>}
     */
    )
  }, {
    key: "getElementByName",
    value: (function () {
      var _getElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(elementName) {
        var result, element;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.GetElementByName(this, elementName);
            case 2:
              result = _context2.sent;
              element = new FRRibbonElement();
              element.set(result);
              return _context2.abrupt("return", element);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getElementByName(_x2) {
        return _getElementByName.apply(this, arguments);
      }
      return getElementByName;
    }()
    /**
     * 获取当前面板中元素的数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getElementCount",
    value: (function () {
      var _getElementCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetElementCount(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getElementCount() {
        return _getElementCount.apply(this, arguments);
      }
      return getElementCount;
    }()
    /**
     * 获取指定索引位置的FRRibbonElement元素
     * @param {number} index - 元素索引位置
     * @returns {Promise<FRRibbonElement>}
     */
    )
  }, {
    key: "getElementByIndex",
    value: (function () {
      var _getElementByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {
        var result, element;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetElementByIndex(this, index);
            case 2:
              result = _context4.sent;
              element = new FRRibbonElement();
              element.set(result);
              return _context4.abrupt("return", element);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getElementByIndex(_x3) {
        return _getElementByIndex.apply(this, arguments);
      }
      return getElementByIndex;
    }()
    /**
     * 设置面板的图标
     * @param {FSDIBitmap} smallBitmap - 小图标
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPanelImage",
    value: (function () {
      var _setPanelImage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(smallBitmap) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.SetPanelImage(this, smallBitmap);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setPanelImage(_x4) {
        return _setPanelImage.apply(this, arguments);
      }
      return setPanelImage;
    }()
    /**
     * 获取面板名称
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var name;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              name = new FSByteString();
              _context6.next = 3;
              return this.GetName(this, name);
            case 3:
              return _context6.abrupt("return", name === null || name === void 0 ? void 0 : name.value);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }())
  }]);
}(JSFR_RibbonPanel_V5);

function _callSuper$1l(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1l() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1l() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1l = function _isNativeReflectConstruct() { return !!t; })(); }
var FRRibbonCategory = /*#__PURE__*/function (_JSFR_RibbonCategory_) {
  function FRRibbonCategory() {
    _classCallCheck(this, FRRibbonCategory);
    return _callSuper$1l(this, FRRibbonCategory, arguments);
  }
  _inherits(FRRibbonCategory, _JSFR_RibbonCategory_);
  return _createClass(FRRibbonCategory, [{
    key: "addPanel",
    value: (
    /**
     * 添加一个面板到功能区
     * @param {string} name 面板的名称，用于唯一标识该面板
     * @param {title} title 面板的标题，即显示在面板上的文字
     * @param {FSDIBitmap} btnBitmap 指定面板按钮的图标位图，用于显示自定义图标
     * @returns {Promise<FRRibbonPanel>}
     */
    function () {
      var _addPanel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, title, btnBitmap) {
        var result, panel;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.AddPanel(this, name, title, btnBitmap);
            case 2:
              result = _context.sent;
              panel = new FRRibbonPanel();
              panel.set(result);
              return _context.abrupt("return", panel);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function addPanel(_x, _x2, _x3) {
        return _addPanel.apply(this, arguments);
      }
      return addPanel;
    }()
    /**
     * 获取面板数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPanelCount",
    value: (function () {
      var _getPanelCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.GetPanelCount(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getPanelCount() {
        return _getPanelCount.apply(this, arguments);
      }
      return getPanelCount;
    }()
    /**
     * 根据索引异步获取面板
     * @param {number} index 面板的索引号，用于定位特定的面板
     * @returns {Promise<FRRibbonPanel>}
     */
    )
  }, {
    key: "getPanelByIndex",
    value: (function () {
      var _getPanelByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
        var result, panel;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetPanelByIndex(this, index);
            case 2:
              result = _context3.sent;
              panel = new FRRibbonPanel();
              panel.set(result);
              return _context3.abrupt("return", panel);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getPanelByIndex(_x4) {
        return _getPanelByIndex.apply(this, arguments);
      }
      return getPanelByIndex;
    }()
    /**
     * 获取指定名称的面板对象
     * @param {string} panelName 面板名称，用于指定需要获取的面板
     * @returns {Promise<FRRibbonPanel>}
     */
    )
  }, {
    key: "getPanelByName",
    value: (function () {
      var _getPanelByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(panelName) {
        var result, panel;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetPanelByName(this, panelName);
            case 2:
              result = _context4.sent;
              panel = new FRRibbonPanel();
              panel.set(result);
              return _context4.abrupt("return", panel);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPanelByName(_x5) {
        return _getPanelByName.apply(this, arguments);
      }
      return getPanelByName;
    }()
    /**
     * 获取名称
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var name;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              name = new FSByteString();
              _context5.next = 3;
              return this.GetName(this, name);
            case 3:
              return _context5.abrupt("return", name === null || name === void 0 ? void 0 : name.value);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 重新计算布局
     * @param {boolean} recalcPanels 是否重新计算面板布局 默认为true
     * @returns Promise<void>
     */
    )
  }, {
    key: "reCalcLayout",
    value: (function () {
      var _reCalcLayout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var recalcPanels,
          _args6 = arguments;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              recalcPanels = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : true;
              _context6.next = 3;
              return this.RecalcLayout(this, recalcPanels);
            case 3:
              return _context6.abrupt("return", _context6.sent);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function reCalcLayout() {
        return _reCalcLayout.apply(this, arguments);
      }
      return reCalcLayout;
    }())
  }]);
}(JSFR_RibbonCategory_V5);

function _callSuper$1k(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1k() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1k() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1k = function _isNativeReflectConstruct() { return !!t; })(); }
var FRRibbonElement = /*#__PURE__*/function (_JSFR_RibbonElement_V) {
  function FRRibbonElement() {
    _classCallCheck(this, FRRibbonElement);
    return _callSuper$1k(this, FRRibbonElement, arguments);
  }
  _inherits(FRRibbonElement, _JSFR_RibbonElement_V);
  return _createClass(FRRibbonElement, [{
    key: "addSubItem",
    value: (
    /**
     * 添加子项到特定的元素类型中
     * @param {Object} options 添加子项的选项, 包含以下属性
     *  @param {FR_Ribbon_Element_Type} elementType 子项的类型，决定了子项在界面上的显示方式
     *  @param {string} name 子项的唯一名称，用于内部识别
     *  @param {string} title 子项的标题，是用户在界面上看到的显示文本
     *  @param {number} pos 子项的位置，决定了它在父元素中的排列顺序
     *  @param {boolean} isOnTop 是否在顶部显示，true 表示子项将会在父元素的顶部显示
     *  @param {boolean} isChangeFun 是否改变功能，true 表示此子项的选择将改变父元素的功能
     *  @param {boolean} isChangeImage 是否改变图像，true 表示此子项的选择将改变父元素的图像
     * @returns {Promise<JSLPVOID>}
     */
    function () {
      var _addSubItem = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var elementType, name, title, pos, isOnTop, isChangeFun, isChangeImage, result, lpVoid;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              elementType = _ref.elementType, name = _ref.name, title = _ref.title, pos = _ref.pos, isOnTop = _ref.isOnTop, isChangeFun = _ref.isChangeFun, isChangeImage = _ref.isChangeImage;
              _context.next = 3;
              return this.AddSubItem(this, elementType, name, title, pos, isOnTop, isChangeFun, isChangeImage);
            case 3:
              result = _context.sent;
              lpVoid = new JSLPVOID();
              lpVoid.set(result);
              return _context.abrupt("return", lpVoid);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function addSubItem(_x) {
        return _addSubItem.apply(this, arguments);
      }
      return addSubItem;
    }()
    /**
     * 设置执行过程
     * @param {FRExecuteProcType} proc - 描述执行过程的回调函数，用于创建 FRExecuteProc 实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setExecuteProc",
    value: (function () {
      var _setExecuteProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proc) {
        var frExecuteProc;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              frExecuteProc = new FRExecuteProc(proc);
              _context2.next = 3;
              return this.SetExecuteProc(this, frExecuteProc);
            case 3:
              return _context2.abrupt("return");
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function setExecuteProc(_x2) {
        return _setExecuteProc.apply(this, arguments);
      }
      return setExecuteProc;
    }()
    /**
     * 设置计算功能是否启用的回调函数
     * @param {FRComputeEnabledProcType} proc - 计算功能启用的回调函数，当计算功能启用或禁用时会被调用
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setComputeEnabledProc",
    value: (function () {
      var _setComputeEnabledProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(proc) {
        var frComputeEnabledProc;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              frComputeEnabledProc = new FRComputeEnabledProc(proc);
              _context3.next = 3;
              return this.SetComputeEnabledProc(this, frComputeEnabledProc);
            case 3:
              return _context3.abrupt("return", _context3.sent);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function setComputeEnabledProc(_x3) {
        return _setComputeEnabledProc.apply(this, arguments);
      }
      return setComputeEnabledProc;
    }()
    /**
     * 设置提示信息
     * @param {string} tooltip 提示信息
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setTooltip",
    value: (function () {
      var _setTooltip = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tooltip) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.SetTooltip(this, tooltip);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setTooltip(_x4) {
        return _setTooltip.apply(this, arguments);
      }
      return setTooltip;
    }()
    /**
     * 根据名称获取子元素
     * @param {string} name 子元素的名称，用于定位特定的子元素
     * @returns {Promise<FRRibbonElement>}
     */
    )
  }, {
    key: "getSubElementByName",
    value: (function () {
      var _getSubElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {
        var result, element;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetSubElementByName(this, name);
            case 2:
              result = _context5.sent;
              element = new FRRibbonElement();
              element.set(result);
              return _context5.abrupt("return", element);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getSubElementByName(_x5) {
        return _getSubElementByName.apply(this, arguments);
      }
      return getSubElementByName;
    }()
    /**
     * 设置图像初始化处理函数
     * @param {FRRibbonElementImageInitProcType} proc 图像初始化处理函数，用于在图像初始化时执行特定逻辑
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setImageInitProc",
    value: (function () {
      var _setImageInitProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(proc) {
        var frRibbonElementImageInitProc;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              frRibbonElementImageInitProc = new FRRibbonElementImageInitProc(proc);
              _context6.next = 3;
              return this.SetImageInitProc(this, frRibbonElementImageInitProc);
            case 3:
              return _context6.abrupt("return", _context6.sent);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setImageInitProc(_x6) {
        return _setImageInitProc.apply(this, arguments);
      }
      return setImageInitProc;
    }())
  }]);
}(JSFR_RibbonElement_V5);

function _callSuper$1j(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1j() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1j() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1j = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDObject = /*#__PURE__*/function (_JSFPD_Object_V) {
  function FPDObject() {
    _classCallCheck(this, FPDObject);
    return _callSuper$1j(this, FPDObject, arguments);
  }
  _inherits(FPDObject, _JSFPD_Object_V);
  return _createClass(FPDObject, [{
    key: "getType",
    value: (
    /**
     * 获取对象类型
     * @returns {Promise<number>}
     */
    function () {
      var _getType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.GetType(this);
            case 2:
              return _context.abrupt("return", _context.sent);
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getType() {
        return _getType.apply(this, arguments);
      }
      return getType;
    }()
    /**
     * 获取对象编号
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getObjNum",
    value: (function () {
      var _getObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.GetobjNum(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getObjNum() {
        return _getObjNum.apply(this, arguments);
      }
      return getObjNum;
    }()
    /**
     * 判断当前对象是否与另一个对象相同。
     * @param otherObj - 另一个 `FPDObject` 对象。
     * @returns {Promise<boolean>} - 返回一个 Promise 对象，解析为布尔值，表示两个对象是否相同。
     */
    )
  }, {
    key: "isIdentical",
    value: (function () {
      var _isIdentical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(otherObj) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.IsIdentical(this, otherObj);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function isIdentical(_x) {
        return _isIdentical.apply(this, arguments);
      }
      return isIdentical;
    }()
    /**
     * 克隆一个 `FPDObject` 对象。
     * @param direct - 是否直接克隆（布尔值）。
     * @returns {Promise<FPDObject>} - 返回一个 Promise 对象，解析为克隆后的 `FPDObject` 实例。
     */
    )
  }, {
    key: "clone",
    value: (function () {
      var _clone = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(direct) {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.Clone(this, direct);
            case 2:
              result = _context4.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context4.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function clone(_x2) {
        return _clone.apply(this, arguments);
      }
      return clone;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 将当前对象克隆到另一个文档中。
     * @param others - 目标文档对象。
     * @private
     * @ignore
     * @returns {Promise<FPDObject>} - 返回一个 Promise 对象，解析为克隆后的 `FPDObject` 实例。
     */
    // async cloneRefToDoc(others: FPDDoc): Promise<FPDObject> {
    //     const result = await this.CloneRefToDoc(this, others);
    //     const fpdObj = new FPDObject();
    //     fpdObj.set(result);
    //     return fpdObj;
    // }
    /**
     * 获取对象的直接引用。
     * @returns {Promise<FPDObject>} - 返回一个 Promise 对象，解析为 `FPDObject` 实例。
     */
    )
  }, {
    key: "getDirect",
    value: (function () {
      var _getDirect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetDirect(this);
            case 2:
              result = _context5.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context5.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getDirect() {
        return _getDirect.apply(this, arguments);
      }
      return getDirect;
    }()
    /**
     * 销毁对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.Destroy(this);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 设置对象字符串
     * @param str - 要设置的字符串。、
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    // async setString(str: string): Promise<void> {
    //     return await this.SetString(this, str);
    // }
    /**
     * 获取对象字符串
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var string;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              string = new FSByteString();
              _context7.next = 3;
              return this.GetString(this, string);
            case 3:
              return _context7.abrupt("return", string.value);
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 设置对象Unicode文本
     * @param str - 要设置的字符串
     * @param len - 字符串长度 “len”是字符数，而不是字节数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setUnicodeText",
    value: (function () {
      var _setUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(str, len) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.SetUnicodeText(this, str, len);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function setUnicodeText(_x3, _x4) {
        return _setUnicodeText.apply(this, arguments);
      }
      return setUnicodeText;
    }()
    /**
     *  获取对象Unicode文本
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getUnicodeText",
    value: (function () {
      var _getUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var string;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              string = new FSWideString();
              _context9.next = 3;
              return this.GetUnicodeText(this, string);
            case 3:
              return _context9.abrupt("return", string.value);
            case 4:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getUnicodeText() {
        return _getUnicodeText.apply(this, arguments);
      }
      return getUnicodeText;
    }()
    /**
     * 获取对象数字
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.GetNumber(this);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getNumber() {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 获取对象整数
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.GetInteger(this);
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getInteger() {
        return _getInteger.apply(this, arguments);
      }
      return getInteger;
    }()
    /**
     * 获取对象字典
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getDict",
    value: (function () {
      var _getDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.GetDict(this);
            case 2:
              result = _context12.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context12.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getDict() {
        return _getDict.apply(this, arguments);
      }
      return getDict;
    }()
    /**
     * 获取对象数组
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getArray",
    value: (function () {
      var _getArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.GetArray(this);
            case 2:
              result = _context13.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context13.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getArray() {
        return _getArray.apply(this, arguments);
      }
      return getArray;
    }()
    /**
     * 获取对象直接类型
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getDirectType",
    value: (function () {
      var _getDirectType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.GetDirectType(this);
            case 2:
              return _context14.abrupt("return", _context14.sent);
            case 3:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getDirectType() {
        return _getDirectType.apply(this, arguments);
      }
      return getDirectType;
    }()
    /**
     * 判断对象是否被修改
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isModified",
    value: (function () {
      var _isModified = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.IsModified(this);
            case 2:
              return _context15.abrupt("return", _context15.sent);
            case 3:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function isModified() {
        return _isModified.apply(this, arguments);
      }
      return isModified;
    }()
    /**
     * 设置对象是否被修改
     * @param modified - 是否被修改
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setModified",
    value: (function () {
      var _setModified = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        var modified,
          _args16 = arguments;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              modified = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : false;
              _context16.next = 3;
              return this.SetModified(this, modified);
            case 3:
              return _context16.abrupt("return", _context16.sent);
            case 4:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function setModified() {
        return _setModified.apply(this, arguments);
      }
      return setModified;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 解析字符串
     * @param str - 要解析的字符串
     * @private
     * @ignore
     * @returns {Promise<FPDObject>}
     */
    // async parseString(str: string): Promise<FPDObject> {
    //     const result = await this.ParseString(str);
    //     const fpdObj = new FPDObject();
    //     fpdObj.set(result);
    //     return fpdObj;
    // }
    /**
     * 获取常量字符串
     * @param {FPDObject} obj - 要获取的字符串对象
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getConstString",
    value: (function () {
      var _getConstString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(obj) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.GetConstString(obj);
            case 2:
              return _context17.abrupt("return", _context17.sent);
            case 3:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getConstString(_x5) {
        return _getConstString.apply(this, arguments);
      }
      return getConstString;
    }())
  }]);
}(JSFPD_Object_V1);

function _callSuper$1i(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1i() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1i() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1i = function _isNativeReflectConstruct() { return !!t; })(); }
var FRDocView = /*#__PURE__*/function (_JSFR_DocView_V) {
  function FRDocView() {
    _classCallCheck(this, FRDocView);
    return _callSuper$1i(this, FRDocView, arguments);
  }
  _inherits(FRDocView, _JSFR_DocView_V);
  return _createClass(FRDocView, [{
    key: "getDocument",
    value: (
    /**
     * 获取文档对象
     * @returns {Promise<FRDoc>} 返回一个Promise对象，解析为FRDoc实例
     */
    function () {
      var _getDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, frDoc;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.GetDocument(this);
            case 2:
              result = _context.sent;
              frDoc = new FRDoc();
              frDoc.set(result);
              return _context.abrupt("return", frDoc);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getDocument() {
        return _getDocument.apply(this, arguments);
      }
      return getDocument;
    }()
    /**
     * 获取pageView个数
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "countPageViews",
    value: (function () {
      var _countPageViews = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.CountPageViews(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function countPageViews() {
        return _countPageViews.apply(this, arguments);
      }
      return countPageViews;
    }()
    /**
     * 获取pageView
     * @param {number} index 索引
     * @returns {Promise<FRPageView>}
     */
    )
  }, {
    key: "getPageView",
    value: (function () {
      var _getPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
        var result, pageView;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetPageView(this, index);
            case 2:
              result = _context3.sent;
              pageView = new FRPageView();
              pageView.set(result);
              return _context3.abrupt("return", pageView);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getPageView(_x) {
        return _getPageView.apply(this, arguments);
      }
      return getPageView;
    }()
    /**
     * 根据坐标获取pageView
     * @param point 坐标
     * @returns {Promise<FRPageView>}
     */
    )
  }, {
    key: "getPageViewAtPoint",
    value: (function () {
      var _getPageViewAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(point) {
        var pt, result, pageView;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              pt = new FSDevicePoint();
              pt.set({
                uuid: pt.uuid,
                value: point
              });
              _context4.next = 4;
              return this.GetPageViewAtPoint(this, pt);
            case 4:
              result = _context4.sent;
              pageView = new FRPageView();
              pageView.set(result);
              return _context4.abrupt("return", pageView);
            case 8:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPageViewAtPoint(_x2) {
        return _getPageViewAtPoint.apply(this, arguments);
      }
      return getPageViewAtPoint;
    }()
    /**
     * 获取可见的pageView个数
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "countVisiblePageViews",
    value: (function () {
      var _countVisiblePageViews = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.CountVisiblePageViews(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function countVisiblePageViews() {
        return _countVisiblePageViews.apply(this, arguments);
      }
      return countVisiblePageViews;
    }()
    /**
     * 根据索引获取可见的pageView
     * @param {number} index 索引
     * @returns {Promise<FRPageView>}
     */
    )
  }, {
    key: "getVisiblePageView",
    value: (function () {
      var _getVisiblePageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(index) {
        var result, pageView;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.GetVisiblePageView(this, index);
            case 2:
              result = _context6.sent;
              pageView = new FRPageView();
              pageView.set(result);
              return _context6.abrupt("return", pageView);
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getVisiblePageView(_x3) {
        return _getVisiblePageView.apply(this, arguments);
      }
      return getVisiblePageView;
    }()
    /**
     * 跳转至指定页
     * @param {number} index 页码
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "gotoPageView",
    value: (function () {
      var _gotoPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.GotoPageView(this, index);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function gotoPageView(_x4) {
        return _gotoPageView.apply(this, arguments);
      }
      return gotoPageView;
    }()
    /**
     * 跳转至指定页
     * @param {Object}
     *  @param {number} index 页码
     *  @param {number} left 距离左边的距离
     *  @param {number} top 距离上边的距离
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "gotoPageViewByPoint",
    value: (function () {
      var _gotoPageViewByPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref) {
        var index, left, top;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              index = _ref.index, left = _ref.left, top = _ref.top;
              _context8.next = 3;
              return this.GotoPageViewByPoint(this, index, left, top);
            case 3:
              return _context8.abrupt("return", _context8.sent);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function gotoPageViewByPoint(_x5) {
        return _gotoPageViewByPoint.apply(this, arguments);
      }
      return gotoPageViewByPoint;
    }()
    /**
     * 获取当前页
     * @returns {Promise<FRPageView>}
     */
    )
  }, {
    key: "getCurrentPageView",
    value: (function () {
      var _getCurrentPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var result, pageView;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.GetCurrentPageView(this);
            case 2:
              result = _context9.sent;
              pageView = new FRPageView();
              pageView.set(result);
              return _context9.abrupt("return", pageView);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getCurrentPageView() {
        return _getCurrentPageView.apply(this, arguments);
      }
      return getCurrentPageView;
    }()
    /**
     * 获取旋转角度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getRotation",
    value: (function () {
      var _getRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.GetRotation(this);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getRotation() {
        return _getRotation.apply(this, arguments);
      }
      return getRotation;
    }()
    /**
     * 设置旋转角度
     * @param {number} rotation 旋转角度
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setRotation",
    value: (function () {
      var _setRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(rotation) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.SetRotation(this, rotation);
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setRotation(_x6) {
        return _setRotation.apply(this, arguments);
      }
      return setRotation;
    }()
    /**
     * 获取Layout模式
     * @returns {Promise<Enum.FRDOCVIEW_LAYOUTMODE>} 返回值包含如下：
     *  FR_LAYOUTMODE_SINGLE = 0,
     *  FR_LAYOUTMODE_CONTINUOUS = 1,
     *  FR_LAYOUTMODE_FACING = 2,
     *  FR_LAYOUTMODE_CONTINUOUS_FACING = 3,
     *  FR_LAYOUTMODE_AUTOMATIC = 4,
     */
    )
  }, {
    key: "getLayoutMode",
    value: (function () {
      var _getLayoutMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.GetLayoutMode(this);
            case 2:
              return _context12.abrupt("return", _context12.sent);
            case 3:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getLayoutMode() {
        return _getLayoutMode.apply(this, arguments);
      }
      return getLayoutMode;
    }()
    /**
     * 设置Layout模式
     * @param {Enum.FRDOCVIEW_LAYOUTMODE} mode 模式
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setLayoutMode",
    value: (function () {
      var _setLayoutMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(mode) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.SetLayoutMode(this, mode);
            case 2:
              return _context13.abrupt("return", _context13.sent);
            case 3:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function setLayoutMode(_x7) {
        return _setLayoutMode.apply(this, arguments);
      }
      return setLayoutMode;
    }()
    /**
     * 获取缩放比例
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getZoom",
    value: (function () {
      var _getZoom = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.GetZoom(this);
            case 2:
              return _context14.abrupt("return", _context14.sent);
            case 3:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getZoom() {
        return _getZoom.apply(this, arguments);
      }
      return getZoom;
    }()
    /**
     * 获取缩放类型
     * @returns {Promise<Enum.FRDOCVIEW_ZOOMTYPE>} 返回值包含如下：
     * FR_ZOOM_MODE_NONE = 0,
     *  FR_ZOOM_MODE_ACTUAL_SCALE = 1,
     *  FR_ZOOM_MODE_ACTUAL_SIZE = 2,
     *  FR_ZOOM_MODE_FIT_PAGE = 3,
     *  FR_ZOOM_MODE_FIT_WIDTH = 4,
     *  FR_ZOOM_MODE_FIT_HEIGHT = 5,
     *  FR_ZOOM_MODE_FIT_RECTANGLE = 6,
     *  FR_ZOOM_MODE_FIT_VISIBLE = 7,
     *  FR_ZOOM_MODE_AUTOMATIC = 8,
     */
    )
  }, {
    key: "getZoomType",
    value: (function () {
      var _getZoomType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.GetZoomType(this);
            case 2:
              return _context15.abrupt("return", _context15.sent);
            case 3:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getZoomType() {
        return _getZoomType.apply(this, arguments);
      }
      return getZoomType;
    }()
    /**
     * 缩放至
     * @param {number} scale 比例
     * @param {Enum.FRDOCVIEW_ZOOMTYPE} mode 缩放类型 可选，默认为当前模式
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "zoomTo",
    value: (function () {
      var _zoomTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(scale, mode) {
        var _mode;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _mode = mode;
              if (!(_mode === undefined)) {
                _context16.next = 5;
                break;
              }
              _context16.next = 4;
              return this.getZoomType();
            case 4:
              _mode = _context16.sent;
            case 5:
              _context16.next = 7;
              return this.ZoomTo(this, _mode, scale);
            case 7:
              return _context16.abrupt("return", _context16.sent);
            case 8:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function zoomTo(_x8, _x9) {
        return _zoomTo.apply(this, arguments);
      }
      return zoomTo;
    }()
    /**
     * 跳转至上一位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "goBack",
    value: (function () {
      var _goBack = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.GoBack(this);
            case 2:
              return _context17.abrupt("return", _context17.sent);
            case 3:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function goBack() {
        return _goBack.apply(this, arguments);
      }
      return goBack;
    }()
    /**
     * 跳转至下一位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "goForward",
    value: (function () {
      var _goForward = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.GoForward(this);
            case 2:
              return _context18.abrupt("return", _context18.sent);
            case 3:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function goForward() {
        return _goForward.apply(this, arguments);
      }
      return goForward;
    }()
    /**
     * 滚动至指定坐标
     * @param {number} x 水平方向的目标坐标
     * @param {number} y 垂直方向的目标坐标
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "scrollTo",
    value: (function () {
      var _scrollTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(x, y) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.ScrollTo(this, x, y);
            case 2:
              return _context19.abrupt("return", _context19.sent);
            case 3:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function scrollTo(_x10, _x11) {
        return _scrollTo.apply(this, arguments);
      }
      return scrollTo;
    }()
    /**
     * 跳转至指定Annot
     * @param annot Annot对象
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "gotoPageViewByAnnot",
    value: (function () {
      var _gotoPageViewByAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(annot) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.GotoPageViewByAnnot(this, annot);
            case 2:
              return _context20.abrupt("return", _context20.sent);
            case 3:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function gotoPageViewByAnnot(_x12) {
        return _gotoPageViewByAnnot.apply(this, arguments);
      }
      return gotoPageViewByAnnot;
    }()
    /**
     * 跳转至指定页的指定矩形区域
     * @param {number} index 页码
     * @param {Object} rect 矩形区域
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "gotoPageViewByRect",
    value: (function () {
      var _gotoPageViewByRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(index, rect) {
        var _rect;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              _rect = new FSFloatRect();
              _rect.set({
                uuid: _rect.uuid,
                value: rect
              });
              _context21.next = 4;
              return this.GotoPageViewByRect(this, index, _rect);
            case 4:
              return _context21.abrupt("return", _context21.sent);
            case 5:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function gotoPageViewByRect(_x13, _x14) {
        return _gotoPageViewByRect.apply(this, arguments);
      }
      return gotoPageViewByRect;
    }()
    /**
     * 跳转到指定页面视图的指定矩形区域
     * @param {number} index 页面索引，用于定位到具体的页面
     * @param {Object} rect 矩形区域，定义了需要跳转到的视图的具体位置和大小
     * @param {boolean} isTopUp 是否顶部对齐，用于控制跳转时的对齐方式
     * @param {number} maxScale 最大缩放比例，用于控制跳转时的缩放程度
     * @returns {Promise<boolean>} 操作的结果，结果为布尔值，表示是否成功跳转
     */
    )
  }, {
    key: "gotoPageViewByRect2",
    value: (function () {
      var _gotoPageViewByRect2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(_ref2) {
        var index, rect, isTopUp, maxScale, _rect;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              index = _ref2.index, rect = _ref2.rect, isTopUp = _ref2.isTopUp, maxScale = _ref2.maxScale;
              _rect = new FSFloatRect();
              _rect.set({
                uuid: _rect.uuid,
                value: rect
              });
              _context22.next = 5;
              return this.GotoPageViewByRect2(this, index, _rect, isTopUp, maxScale);
            case 5:
              return _context22.abrupt("return", _context22.sent);
            case 6:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function gotoPageViewByRect2(_x15) {
        return _gotoPageViewByRect2.apply(this, arguments);
      }
      return gotoPageViewByRect2;
    }()
    /**
     *  弹出菜单
    * @param {FRMenu} menu 要显示的菜单对象，必须是FRMenu类型
    * @param {number} xHit 鼠标点击位置的X坐标，用于确定弹出菜单的位置
    * @param {number} yHit 鼠标点击位置的Y坐标，用于确定弹出菜单的位置
    * @returns {Promise<FRMenuItem>} 用户选择的菜单项（FRMenuItem类型）
    */
    )
  }, {
    key: "doPopUpMenu",
    value: (function () {
      var _doPopUpMenu = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(menu, xHit, yHit) {
        var result, menuItem;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.DoPopUpMenu(this, menu, xHit, yHit);
            case 2:
              result = _context23.sent;
              menuItem = new FRMenuItem();
              menuItem.set(result);
              return _context23.abrupt("return", menuItem);
            case 6:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function doPopUpMenu(_x16, _x17, _x18) {
        return _doPopUpMenu.apply(this, arguments);
      }
      return doPopUpMenu;
    }())
  }]);
}(JSFR_DocView_V1);

function _callSuper$1h(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1h() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1h() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1h = function _isNativeReflectConstruct() { return !!t; })(); }
var FRAnnot = /*#__PURE__*/function (_JSFR_Annot_V) {
  function FRAnnot() {
    _classCallCheck(this, FRAnnot);
    return _callSuper$1h(this, FRAnnot, arguments);
  }
  _inherits(FRAnnot, _JSFR_Annot_V);
  return _createClass(FRAnnot, [{
    key: "getPDFAnnot",
    value: (
    /**
     * 获取FPDAnnot
     * @returns {Promise<FPDAnnot>}
     */
    function () {
      var _getPDFAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fpdAnnot;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.GetPDFAnnot(this);
            case 2:
              result = _context.sent;
              fpdAnnot = new FPDAnnot();
              fpdAnnot.set(result);
              return _context.abrupt("return", fpdAnnot);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getPDFAnnot() {
        return _getPDFAnnot.apply(this, arguments);
      }
      return getPDFAnnot;
    }()
    /**
     * 获取类型
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getType",
    value: (function () {
      var _getType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var outType;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              outType = new FSByteString();
              _context2.next = 3;
              return this.GetType(this, outType);
            case 3:
              return _context2.abrupt("return", outType === null || outType === void 0 ? void 0 : outType.value);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getType() {
        return _getType.apply(this, arguments);
      }
      return getType;
    }()
    /**
     * 获取子类型
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getSubType",
    value: (function () {
      var _getSubType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var outType;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              outType = new FSByteString();
              _context3.next = 3;
              return this.GetSubType(this, outType);
            case 3:
              return _context3.abrupt("return", outType === null || outType === void 0 ? void 0 : outType.value);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getSubType() {
        return _getSubType.apply(this, arguments);
      }
      return getSubType;
    }()
    /**
     * 设置可见性
     * @param {boolean} show
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setVisible",
    value: (function () {
      var _setVisible = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(show) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.SetVisible(this, show);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setVisible(_x) {
        return _setVisible.apply(this, arguments);
      }
      return setVisible;
    }()
    /**
     * 获取是否选中
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isSelected",
    value: (function () {
      var _isSelected = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.IsSelected(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function isSelected() {
        return _isSelected.apply(this, arguments);
      }
      return isSelected;
    }())
  }]);
}(JSFR_Annot_V5);

function _callSuper$1g(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1g() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1g() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1g = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDFont = /*#__PURE__*/function (_JSFPD_Font_V) {
  function FPDFont() {
    _classCallCheck(this, FPDFont);
    return _callSuper$1g(this, FPDFont, arguments);
  }
  _inherits(FPDFont, _JSFPD_Font_V);
  return _createClass(FPDFont, [{
    key: "getStockFont",
    value: (
    /**
     * 获取文档中的标准字体
     * @param {FPDDoc} fpdDoc
     * @param {string} fontName
     * @returns {Promise<FPDFont>}
     */
    function () {
      var _getStockFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(fpdDoc, fontName) {
        var result, font;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.GetStockFont(fpdDoc, fontName);
            case 2:
              result = _context.sent;
              font = new FPDFont();
              font.set(result);
              return _context.abrupt("return", font);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getStockFont(_x, _x2) {
        return _getStockFont.apply(this, arguments);
      }
      return getStockFont;
    }()
    /**
     * 获取字体类型
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontType",
    value: (function () {
      var _getFontType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.GetFontType(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getFontType() {
        return _getFontType.apply(this, arguments);
      }
      return getFontType;
    }()
    /**
     * 获取字体类型名称
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getFontTypeName",
    value: (function () {
      var _getFontTypeName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var outName;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              outName = new FSByteString();
              _context3.next = 3;
              return this.GetFontTypeName(this, outName);
            case 3:
              return _context3.abrupt("return", outName === null || outName === void 0 ? void 0 : outName.value);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getFontTypeName() {
        return _getFontTypeName.apply(this, arguments);
      }
      return getFontTypeName;
    }()
    /**
     * 获取字体字典
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getFontDict",
    value: (function () {
      var _getFontDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetFontDict(this);
            case 2:
              result = _context4.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context4.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getFontDict() {
        return _getFontDict.apply(this, arguments);
      }
      return getFontDict;
    }()
    /**
     * 是否是标准字体
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isStandardFont",
    value: (function () {
      var _isStandardFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.IsStandardFont(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function isStandardFont() {
        return _isStandardFont.apply(this, arguments);
      }
      return isStandardFont;
    }()
    /**
     * 获取给定Unicode字符的字符代码
     * @param {string} unicode Unicode字符串，表示一个或多个字符
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "charCodeFromUnicode",
    value: (function () {
      var _charCodeFromUnicode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(unicode) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.CharCodeFromUnicode(this, unicode);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function charCodeFromUnicode(_x3) {
        return _charCodeFromUnicode.apply(this, arguments);
      }
      return charCodeFromUnicode;
    }()
    /**
     * 获取字体对应的文档
     * @returns {Promise<FPDDoc>}
     */
    )
  }, {
    key: "getPDFDoc",
    value: (function () {
      var _getPDFDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var result, pdfDoc;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.GetPDFDoc(this);
            case 2:
              result = _context7.sent;
              pdfDoc = new FPDDoc();
              pdfDoc.set(result);
              return _context7.abrupt("return", pdfDoc);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getPDFDoc() {
        return _getPDFDoc.apply(this, arguments);
      }
      return getPDFDoc;
    }())
  }]);
}(JSFPD_Font_V1);

function _callSuper$1f(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1f() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1f() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1f = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDParser = /*#__PURE__*/function (_JSFPD_Parser_V) {
  function FPDParser() {
    _classCallCheck(this, FPDParser);
    return _callSuper$1f(this, FPDParser, arguments);
  }
  _inherits(FPDParser, _JSFPD_Parser_V);
  return _createClass(FPDParser, [{
    key: "new",
    value: (
    /**
     * 新建一个解析器实例
     * @returns {Promise<FPDParser>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, parser;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              parser = new FPDParser();
              parser.set(result);
              return _context.abrupt("return", parser);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁一个解析器实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 开始解析文件
     * @param {string} fileName 文件名, 一般来说是 路径 eg. d://xxx.pdf
     * @param {boolean} reParse 是否重新解析 默认为false
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "startParse",
    value: (function () {
      var _startParse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(fileName) {
        var reParse,
          _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              reParse = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;
              _context3.next = 3;
              return this.StartParse(this, fileName, reParse);
            case 3:
              return _context3.abrupt("return", _context3.sent);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function startParse(_x) {
        return _startParse.apply(this, arguments);
      }
      return startParse;
    }()
    /**
     * 开始解析文件
     * @param {string} fileName 文件名, 一般来说是 路径 eg. d://xxx.pdf
     * @param {boolean} reParse 是否重新解析 默认为false
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "startParseW",
    value: (function () {
      var _startParseW = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fileName) {
        var reParse,
          _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              reParse = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;
              _context4.next = 3;
              return this.StartParseW(this, fileName, reParse);
            case 3:
              return _context4.abrupt("return", _context4.sent);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function startParseW(_x2) {
        return _startParseW.apply(this, arguments);
      }
      return startParseW;
    }()
    /**
     * 设置密码
     * @param {string} password 密码
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPassword",
    value: (function () {
      var _setPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(password) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.SetPassword(this, password);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setPassword(_x3) {
        return _setPassword.apply(this, arguments);
      }
      return setPassword;
    }()
    /**
     * 获取密码
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getPassword",
    value: (function () {
      var _getPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var outPassword;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              outPassword = new FSByteString();
              _context6.next = 3;
              return this.GetPassword(this, outPassword);
            case 3:
              return _context6.abrupt("return", outPassword === null || outPassword === void 0 ? void 0 : outPassword.value);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getPassword() {
        return _getPassword.apply(this, arguments);
      }
      return getPassword;
    }()
    /**
     * 关闭解析器
     * @param {boolean} reParse 是否重新解析 默认为false
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "closeParser",
    value: (function () {
      var _closeParser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var reParse,
          _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              reParse = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : false;
              _context7.next = 3;
              return this.CloseParser(this, reParse);
            case 3:
              return _context7.abrupt("return", _context7.sent);
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function closeParser() {
        return _closeParser.apply(this, arguments);
      }
      return closeParser;
    }()
    /**
     * 是否拥有权限
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isOwner",
    value: (function () {
      var _isOwner = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.IsOwner(this);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function isOwner() {
        return _isOwner.apply(this, arguments);
      }
      return isOwner;
    }()
    /**
     * 获取文件尾部信息
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getTrailer",
    value: (function () {
      var _getTrailer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.GetTrailer(this);
            case 2:
              result = _context9.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context9.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getTrailer() {
        return _getTrailer.apply(this, arguments);
      }
      return getTrailer;
    }()
    /**
     * 获取文档对象
     * @returns {Promise<FPDDoc>}
     */
    )
  }, {
    key: "getDocument",
    value: (function () {
      var _getDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var result, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.GetDocument(this);
            case 2:
              result = _context10.sent;
              fpdDoc = new FPDDoc();
              fpdDoc.set(result);
              return _context10.abrupt("return", fpdDoc);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getDocument() {
        return _getDocument.apply(this, arguments);
      }
      return getDocument;
    }()
    /**
     * 获取根对象编号
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getRootObjNum",
    value: (function () {
      var _getRootObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.GetRootObjNum(this);
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getRootObjNum() {
        return _getRootObjNum.apply(this, arguments);
      }
      return getRootObjNum;
    }()
    /**
     * 获取加密字典对象
     * @returns {Promise<FPDDictionary>}
     */
    )
  }, {
    key: "getEncryptDict",
    value: (function () {
      var _getEncryptDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var result, fpdDict;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.GetEncryptDict(this);
            case 2:
              result = _context12.sent;
              fpdDict = new FPDDictionary();
              fpdDict.set(result);
              return _context12.abrupt("return", fpdDict);
            case 6:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getEncryptDict() {
        return _getEncryptDict.apply(this, arguments);
      }
      return getEncryptDict;
    }()
    /**
     * 获取最后一个对象编号
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getLastObjNum",
    value: (function () {
      var _getLastObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.GetLastObjNum(this);
            case 2:
              return _context13.abrupt("return", _context13.sent);
            case 3:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getLastObjNum() {
        return _getLastObjNum.apply(this, arguments);
      }
      return getLastObjNum;
    }())
  }]);
}(JSFPD_Parser_V1);

function _callSuper$1e(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1e() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1e() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1e = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDBookmark = /*#__PURE__*/function (_JSFPD_Bookmark_V) {
  function FPDBookmark() {
    _classCallCheck(this, FPDBookmark);
    return _callSuper$1e(this, FPDBookmark, arguments);
  }
  _inherits(FPDBookmark, _JSFPD_Bookmark_V);
  return _createClass(FPDBookmark, [{
    key: "new",
    value: (
    /**
     * Create a bookmark object. (底层)
     * @param outlineDict  outline dict object
     * @returns {Promise<FPDBookmark>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(outlineDict) {
        var result, bookmark;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(outlineDict);
            case 2:
              result = _context.sent;
              bookmark = new FPDBookmark();
              bookmark.set(result);
              return _context.abrupt("return", bookmark);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁当前调用的书签。
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 判断当前书签是否有效。
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isValid",
    value: (function () {
      var _isValid = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.IsVaild(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function isValid() {
        return _isValid.apply(this, arguments);
      }
      return isValid;
    }()
    /**
     * 获取书签颜色。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getColorRef",
    value: (function () {
      var _getColorRef = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetColorRef(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getColorRef() {
        return _getColorRef.apply(this, arguments);
      }
      return getColorRef;
    }()
    /**
     * 获取书签的字体样式。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontStyle",
    value: (function () {
      var _getFontStyle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetFontStyle(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getFontStyle() {
        return _getFontStyle.apply(this, arguments);
      }
      return getFontStyle;
    }()
    /**
     * 获取书签的标题。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getTitle",
    value: (function () {
      var _getTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var outTitle;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              outTitle = new FSWideString();
              _context6.next = 3;
              return this.GetTitle(this, outTitle);
            case 3:
              return _context6.abrupt("return", outTitle === null || outTitle === void 0 ? void 0 : outTitle.value);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getTitle() {
        return _getTitle.apply(this, arguments);
      }
      return getTitle;
    }()
    /**
     * 获取书签的目标。
     * @param {FPDDoc} doc - 当前文档对象
     * @returns {Promise<FPDDest>}
     */
    )
  }, {
    key: "getDest",
    value: (function () {
      var _getDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(doc) {
        var outDest;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              outDest = new FPDDest();
              _context7.next = 3;
              return this.GetDest(this, doc, outDest);
            case 3:
              return _context7.abrupt("return", outDest);
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getDest(_x2) {
        return _getDest.apply(this, arguments);
      }
      return getDest;
    }()
    /**
     * 获取书签的Action。
     * @returns {Promise<FPDAction>}
     */
    )
  }, {
    key: "getAction",
    value: (function () {
      var _getAction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var outAction;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              outAction = new FPDAction();
              _context8.next = 3;
              return this.GetAction(this, outAction);
            case 3:
              return _context8.abrupt("return", outAction);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getAction() {
        return _getAction.apply(this, arguments);
      }
      return getAction;
    }()
    /**
     * 获取书签的字典对象。
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getDictionary",
    value: (function () {
      var _getDictionary = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var result, dict;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.GetDictionary(this);
            case 2:
              result = _context9.sent;
              dict = new FPDObject();
              dict.set(result);
              return _context9.abrupt("return", dict);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getDictionary() {
        return _getDictionary.apply(this, arguments);
      }
      return getDictionary;
    }()
    /**
     * 获取书签的第一个子级书签。
     * @param {FPDDoc} doc - 当前文档对象
     * @param {FPDBookmark} firstChild  输出参数，用于接收第一个子书签的对象
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "getFirstChild",
    value: (function () {
      var _getFirstChild = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(doc, firstChild) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.GetFirstChild(doc, this, firstChild);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getFirstChild(_x3, _x4) {
        return _getFirstChild.apply(this, arguments);
      }
      return getFirstChild;
    }()
    /**
     * 获取指定书签的下一个同级书签。
     * @param {FPDDoc} doc - 文档对象
     * @param {FPDBookmark} nextSibling - 输出参数，用于接收下一个同级书签的对象
     * @returns {Promise<boolean>} - 返回一个 Promise 对象，解析为布尔值，表示是否获取成功是否成功。
     */
    )
  }, {
    key: "getNextSibling",
    value: (function () {
      var _getNextSibling = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(doc, nextSibling) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.GetNextSibling(doc, this, nextSibling);
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getNextSibling(_x5, _x6) {
        return _getNextSibling.apply(this, arguments);
      }
      return getNextSibling;
    }()
    /**
     * 插入书签
     * @param {FPDDoc} doc - 文档对象，表示要插入书签的文档
     * @param {string} title - 书签的标题
     * @param {FPDBookmarkDestinationInfoType} dest - 书签的目的地信息，定义了书签点击时跳转到的位置
     * @param {Enum.FPD_BookmarkPosition} position - 书签的位置，相对于其他书签的枚举值
     * @returns {Promise<FPDBookmark>} 返回一个承诺，解析为新插入的FPDBookmark对象
     */
    )
  }, {
    key: "insertBookmark",
    value: (function () {
      var _insertBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref) {
        var doc, title, dest, position, _dest, result, bookmark;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              doc = _ref.doc, title = _ref.title, dest = _ref.dest, position = _ref.position;
              _dest = new FPDBookmarkDestinationInfo(dest);
              _context12.next = 4;
              return this.InsertBookmark(doc, this, title, _dest, position);
            case 4:
              result = _context12.sent;
              bookmark = new FPDBookmark();
              bookmark.set(result);
              return _context12.abrupt("return", bookmark);
            case 8:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function insertBookmark(_x7) {
        return _insertBookmark.apply(this, arguments);
      }
      return insertBookmark;
    }()
    /**
     * 获取文档的书签子元素数组, 注意这个数组是偏底层的数组，不是js的数组
     * @param {FPDDoc} doc FPDDoc类型的文档对象，代表要操作的文档
     * @returns {Promise<FSPtrArray>} FSPtrArray类型的数组，包含当前元素的子元素指针
     */
    )
  }, {
    key: "getChildren",
    value: (function () {
      var _getChildren = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(doc) {
        var _children, children;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _children = new FSPtrArray();
              _context13.next = 3;
              return _children.new();
            case 3:
              children = _context13.sent;
              _context13.next = 6;
              return this.GetChildren(doc, this, children);
            case 6:
              return _context13.abrupt("return", children);
            case 7:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getChildren(_x8) {
        return _getChildren.apply(this, arguments);
      }
      return getChildren;
    }()
    /**
     * 设置书签属性
     * @param {FPDDoc} doc 代表当前操作的PDF文档
     * @param {FPDBookmarkPropertyType} property FPDBookmarkPropertyType类型的对象，包含要设置的书签属性
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setProperty",
    value: (function () {
      var _setProperty = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(doc, property) {
        var _property;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _property = new FPDBookmarkProperty(property);
              _context14.next = 3;
              return this.SetProperty(doc, this, _property);
            case 3:
              return _context14.abrupt("return", _context14.sent);
            case 4:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function setProperty(_x9, _x10) {
        return _setProperty.apply(this, arguments);
      }
      return setProperty;
    }()
    /**
     * 删除当前书签
     * @param {FPDDoc} doc FPDDoc类型的文档对象，代表要操作的文档
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "deleteBookmark",
    value: (function () {
      var _deleteBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(doc) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.DeleteBookmark(doc, this);
            case 2:
              return _context15.abrupt("return", _context15.sent);
            case 3:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function deleteBookmark(_x11) {
        return _deleteBookmark.apply(this, arguments);
      }
      return deleteBookmark;
    }())
  }]);
}(JSFPD_Bookmark_V1);

function _callSuper$1d(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1d() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1d() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1d = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDDest = /*#__PURE__*/function (_JSFPD_Dest_V) {
  function FPDDest() {
    _classCallCheck(this, FPDDest);
    return _callSuper$1d(this, FPDDest, arguments);
  }
  _inherits(FPDDest, _JSFPD_Dest_V);
  return _createClass(FPDDest, [{
    key: "new",
    value: (
    /**
     * 创建一个新的目标位置。
     * @param {FPDObject} fpdObj - 输入的 FPDObject 对象。
     * @returns {Promise<FPDDest>} - 解析为新的目标位置（FPDDest）。
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(fpdObj) {
        var result, dest;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(fpdObj);
            case 2:
              result = _context.sent;
              dest = new FPDDest();
              dest.set(result);
              return _context.abrupt("return", dest);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁目标位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取目标位置的页索引
     * @param fpdDoc - 目标位置所在的文档对象
     * @returns {Promise<number>} - 目标位置的页索引
     */
    )
  }, {
    key: "getPageIndex",
    value: (function () {
      var _getPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(fpdDoc) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetPageIndex(fpdDoc, this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getPageIndex(_x2) {
        return _getPageIndex.apply(this, arguments);
      }
      return getPageIndex;
    }()
    /**
     * 获取目标位置的页对象编号
     * @param {FPDDoc} fpdDoc
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getPageObjNum",
    value: (function () {
      var _getPageObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fpdDoc) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetPageObjNum(this, fpdDoc);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPageObjNum(_x3) {
        return _getPageObjNum.apply(this, arguments);
      }
      return getPageObjNum;
    }()
    /**
     * 获取目标位置的缩放模式
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getZoomMode",
    value: (function () {
      var _getZoomMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetZoomMode(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getZoomMode() {
        return _getZoomMode.apply(this, arguments);
      }
      return getZoomMode;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 获取目标位置的 PDF 对象
     * @param {FPDObject} fpdObj - 输入的 `FPDObject` 对象
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    // async getPDFObject(fpdObj: FPDObject): Promise<void> {
    //     return await this.GetPDFObject(this, fpdObj);
    // }
    /**
     * 检查目标位置的 PDF 对象是否为空
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "checkObjectIsNull",
    value: (function () {
      var _checkObjectIsNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.CheckObjectIsNull(this);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function checkObjectIsNull() {
        return _checkObjectIsNull.apply(this, arguments);
      }
      return checkObjectIsNull;
    }()
    /**
     * 获取目标位置的 PDF 对象
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getPDFObject2",
    value: (function () {
      var _getPDFObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.GetPDFObject2(this);
            case 2:
              result = _context7.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context7.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getPDFObject2() {
        return _getPDFObject.apply(this, arguments);
      }
      return getPDFObject2;
    }())
  }]);
}(JSFPD_Dest_V1);

function _callSuper$1c(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1c() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1c() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1c = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDAction = /*#__PURE__*/function (_JSFPD_Action_V) {
  function FPDAction() {
    _classCallCheck(this, FPDAction);
    return _callSuper$1c(this, FPDAction, arguments);
  }
  _inherits(FPDAction, _JSFPD_Action_V);
  return _createClass(FPDAction, [{
    key: "new",
    value: (
    /**
     * 创建一个 FPDAction 对象。
     * @param {FPDObject} dict - 输入的 `FPDObject` 对象。
     * @returns {Promise<FPDAction>} - 返回一个 Promise 对象，解析为新的 `FPDAction` 实例。
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dict) {
        var result, fpdAction;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(dict);
            case 2:
              result = _context.sent;
              fpdAction = new FPDAction();
              fpdAction.set(result);
              return _context.abrupt("return", fpdAction);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 创建一个 FPDAction 对象。
     * @param {FPDDoc} fpdDoc - 输入的 `FPDDoc` 对象
     * @param {Enum.FPD_ActionType} actionType - 指定的操作类型
     * @returns {Promise<FPDAction>} FPDAction 对象
     */
    )
  }, {
    key: "new2",
    value: (function () {
      var _new3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fpdDoc, actionType) {
        var result, fpdAction;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.New2(fpdDoc, actionType);
            case 2:
              result = _context2.sent;
              fpdAction = new FPDAction();
              fpdAction.set(result);
              return _context2.abrupt("return", fpdAction);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function new2(_x2, _x3) {
        return _new3.apply(this, arguments);
      }
      return new2;
    }()
    /**
     * 销毁 FPDAction 对象。
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.Destroy(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取 FPDAction 对象的类型名称。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getTypeName",
    value: (function () {
      var _getTypeName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var outTypeName;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              outTypeName = new FSByteString();
              _context4.next = 3;
              return this.GetTypeName(this, outTypeName);
            case 3:
              return _context4.abrupt("return", outTypeName.value);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getTypeName() {
        return _getTypeName.apply(this, arguments);
      }
      return getTypeName;
    }()
    /**
     * 获取 FPDAction 对象的类型。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getType",
    value: (function () {
      var _getType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetType(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getType() {
        return _getType.apply(this, arguments);
      }
      return getType;
    }()
    /**
     * 设置 FPDAction 对象的目标。
     * @param {FPDDest} dest - 目标对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setDest",
    value: (function () {
      var _setDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dest) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.SetDest(this, dest);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setDest(_x4) {
        return _setDest.apply(this, arguments);
      }
      return setDest;
    }()
    /**
     * 获取文件路径
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getFilePath",
    value: (function () {
      var _getFilePath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var filePath;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              filePath = new FSWideString();
              _context7.next = 3;
              return this.GetFilePath(this, filePath);
            case 3:
              return _context7.abrupt("return", filePath.value);
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getFilePath() {
        return _getFilePath.apply(this, arguments);
      }
      return getFilePath;
    }()
    /**
     * 设置文件路径。
     * @param {string} filePath - 文件路径字符串。
     * @param {boolean} isURL - 表示路径是否为 URL 的布尔值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFilePath",
    value: (function () {
      var _setFilePath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(filePath, isURL) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.SetFilePath(this, filePath, isURL);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function setFilePath(_x5, _x6) {
        return _setFilePath.apply(this, arguments);
      }
      return setFilePath;
    }())
  }]);
}(JSFPD_Action_V1);

function _callSuper$1b(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1b() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1b() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1b = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDLink = /*#__PURE__*/function (_JSFPD_Link_V) {
  function FPDLink() {
    _classCallCheck(this, FPDLink);
    return _callSuper$1b(this, FPDLink, arguments);
  }
  _inherits(FPDLink, _JSFPD_Link_V);
  return _createClass(FPDLink, [{
    key: "new",
    value: (
    /**
     * 创建一个新的 FPDLink 对象。
     * @param {FPDObject} dict - 输入的 `FPDObject` 对象。
     * @returns {Promise<FPDLink>} - 返回一个 Promise 对象，解析为新的 `FPDLink` 实例。
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dict) {
        var result, link;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(dict);
            case 2:
              result = _context.sent;
              link = new FPDLink();
              link.set(result);
              return _context.abrupt("return", link);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁当前对象。
     * @returns {Promise<void>} - 返回一个 Promise 对象，表示销毁操作完成。
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取指定点上的链接。
     * @param {Object}
     *  fpdDoc - 当前文档对象。
     *  fpdPage - 当前页面对象。
     *  x - 指定点的 X 坐标。
     *  y - 指定点的 Y 坐标。
     * @returns {Promise<FPDLink>}
     */
    )
  }, {
    key: "getLinkAtPoint",
    value: (function () {
      var _getLinkAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref) {
        var fpdDoc, fpdPage, x, y, outLink;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              fpdDoc = _ref.fpdDoc, fpdPage = _ref.fpdPage, x = _ref.x, y = _ref.y;
              outLink = new FPDLink();
              _context3.next = 4;
              return this.GetLinkAtPoint(fpdDoc, fpdPage, x, y, outLink);
            case 4:
              return _context3.abrupt("return", outLink);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getLinkAtPoint(_x2) {
        return _getLinkAtPoint.apply(this, arguments);
      }
      return getLinkAtPoint;
    }()
    /**
     * 获取当前链接的数量。
     * @param {FPDDoc} fpdDoc - 当前文档对象。
     * @param {FPDPage} fpdPage - 当前页面对象。
     * @returns {Promise<number>} - 返回链接的数量。
     */
    )
  }, {
    key: "countLinks",
    value: (function () {
      var _countLinks = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fpdDoc, fpdPage) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.CountLinks(fpdDoc, fpdPage);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function countLinks(_x3, _x4) {
        return _countLinks.apply(this, arguments);
      }
      return countLinks;
    }()
    /**
     * 获取指定索引的链接。
     * @param {Object}
     *  fpdDoc - 当前文档对象。
     *  fpdPage - 当前页面对象。
     *  index - 链接的索引。
     * @returns {Promise<FPDLink>}
     */
    )
  }, {
    key: "getLink",
    value: (function () {
      var _getLink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {
        var fpdDoc, fpdPage, index, outLink;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              fpdDoc = _ref2.fpdDoc, fpdPage = _ref2.fpdPage, index = _ref2.index;
              outLink = new FPDLink();
              _context5.next = 4;
              return this.GetLink(fpdDoc, fpdPage, index, outLink);
            case 4:
              return _context5.abrupt("return", outLink);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getLink(_x5) {
        return _getLink.apply(this, arguments);
      }
      return getLink;
    }()
    /**
     * 获取当前链接的矩形区域。
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var result;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.GetRect(this);
            case 2:
              result = _context6.sent;
              return _context6.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getRect() {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 获取当前链接的目标。
     * @param fpdDoc - 当前文档对象。
     * @returns {Promise<FPDDest>}
     */
    )
  }, {
    key: "getDest",
    value: (function () {
      var _getDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(fpdDoc) {
        var fpdObj, _outDest, outDest;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              fpdObj = new FPDObject();
              _outDest = new FPDDest();
              _context7.next = 4;
              return _outDest.new(fpdObj);
            case 4:
              outDest = _context7.sent;
              _context7.next = 7;
              return this.GetDest(this, fpdDoc, outDest);
            case 7:
              return _context7.abrupt("return", outDest);
            case 8:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getDest(_x6) {
        return _getDest.apply(this, arguments);
      }
      return getDest;
    }()
    /**
     * 获取当前链接的操作。
     * @returns {Promise<FPDAction>}
     */
    )
  }, {
    key: "getAction",
    value: (function () {
      var _getAction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var fpdObj, _outAction, outAction;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              fpdObj = new FPDObject();
              _outAction = new FPDAction();
              _context8.next = 4;
              return _outAction.new(fpdObj);
            case 4:
              outAction = _context8.sent;
              _context8.next = 7;
              return this.GetAction(this, outAction);
            case 7:
              return _context8.abrupt("return", outAction);
            case 8:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getAction() {
        return _getAction.apply(this, arguments);
      }
      return getAction;
    }())
  }]);
}(JSFPD_Link_V1);

function _callSuper$1a(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1a() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1a() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1a = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDPage = /*#__PURE__*/function (_JSFPD_Page_V) {
  function FPDPage() {
    _classCallCheck(this, FPDPage);
    return _callSuper$1a(this, FPDPage, arguments);
  }
  _inherits(FPDPage, _JSFPD_Page_V);
  return _createClass(FPDPage, [{
    key: "new",
    value: (
    /**
     * 新建一个页面
     * @returns {FPDPage}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, page;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              page = new FPDPage();
              page.set(result);
              return _context.abrupt("return", page);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁一个页面
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取页面解析状态
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getParseState",
    value: (function () {
      var _getParseState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetParseState(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getParseState() {
        return _getParseState.apply(this, arguments);
      }
      return getParseState;
    }()
    /**
     * 判断页面是否解析完成
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isParsed",
    value: (function () {
      var _isParsed = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.IsParsed(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function isParsed() {
        return _isParsed.apply(this, arguments);
      }
      return isParsed;
    }()
    /**
     * 获取第一个对象位置
     * @returns {Promise<POSITION>}
     */
    )
  }, {
    key: "getFirstObjectPosition",
    value: (function () {
      var _getFirstObjectPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var result, position;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetFirstObjectPosition(this);
            case 2:
              result = _context5.sent;
              position = new POSITION$1();
              position.set(result);
              return _context5.abrupt("return", position);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getFirstObjectPosition() {
        return _getFirstObjectPosition.apply(this, arguments);
      }
      return getFirstObjectPosition;
    }()
    /**
     * 获取第最后一个对象位置
     * @returns {Promise<POSITION>}
     */
    )
  }, {
    key: "getLastObjectPosition",
    value: (function () {
      var _getLastObjectPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var result, position;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.GetLastObjectPosition(this);
            case 2:
              result = _context6.sent;
              position = new POSITION$1();
              position.set(result);
              return _context6.abrupt("return", position);
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getLastObjectPosition() {
        return _getLastObjectPosition.apply(this, arguments);
      }
      return getLastObjectPosition;
    }()
    /**
     * 加载指定的页面。
     * @param {Object} options - 包含以下属性的对象：
     * @param {FPDDoc} doc - 文档对象
     * @param {FPDObject} pageDict - 页面字典
     * @param {boolean} pageCache - 是否缓存页面，默认为 true。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "load",
    value: (function () {
      var _load = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref) {
        var doc, pageDict, _ref$pageCache, pageCache;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              doc = _ref.doc, pageDict = _ref.pageDict, _ref$pageCache = _ref.pageCache, pageCache = _ref$pageCache === void 0 ? true : _ref$pageCache;
              _context7.next = 3;
              return this.Load(this, doc, pageDict, pageCache);
            case 3:
              return _context7.abrupt("return", _context7.sent);
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function load(_x) {
        return _load.apply(this, arguments);
      }
      return load;
    }()
    /**
     * 获取下一个对象
     * @param {POSITION} position - 位置对象
     * @returns {Promise<FPDPageObject>}
     */
    )
  }, {
    key: "getNextObject",
    value: (function () {
      var _getNextObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(position) {
        var result, pageObject;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.GetNextObject(this, position);
            case 2:
              result = _context8.sent;
              pageObject = new FPDPageObject();
              pageObject.set(result);
              return _context8.abrupt("return", pageObject);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getNextObject(_x2) {
        return _getNextObject.apply(this, arguments);
      }
      return getNextObject;
    }()
    /**
     * 解析指定的内容选项。
     * @param {FPDParseOptions} options - 解析选项
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "parseContent",
    value: (function () {
      var _parseContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(options) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.ParseContent(this, options);
            case 2:
              return _context9.abrupt("return", _context9.sent);
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function parseContent(_x3) {
        return _parseContent.apply(this, arguments);
      }
      return parseContent;
    }()
    /**
     * 获取上一个对象
     * @param {POSITION} position - 位置对象
     * @returns {Promise<FPDPageObject>}
     */
    )
  }, {
    key: "getPrevObject",
    value: (function () {
      var _getPrevObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(position) {
        var result, pageObject;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.GetPrevObject(this, position);
            case 2:
              result = _context10.sent;
              pageObject = new FPDPageObject();
              pageObject.set(result);
              return _context10.abrupt("return", pageObject);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getPrevObject(_x4) {
        return _getPrevObject.apply(this, arguments);
      }
      return getPrevObject;
    }()
    /**
     * 获取指定位置的页面对象。
     * @param {POSITION} position - 位置信息，类型为 POSITION。
     * @returns {Promise<FPDPageObject>}
     */
    )
  }, {
    key: "getObjectAt",
    value: (function () {
      var _getObjectAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(position) {
        var result, pageObject;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.GetObjectAt(this, position);
            case 2:
              result = _context11.sent;
              pageObject = new FPDPageObject();
              pageObject.set(result);
              return _context11.abrupt("return", pageObject);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getObjectAt(_x5) {
        return _getObjectAt.apply(this, arguments);
      }
      return getObjectAt;
    }()
    /**
     * 获取页面对象数量。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "countObjects",
    value: (function () {
      var _countObjects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.CountObjects(this);
            case 2:
              return _context12.abrupt("return", _context12.sent);
            case 3:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function countObjects() {
        return _countObjects.apply(this, arguments);
      }
      return countObjects;
    }()
    /**
     * 获取对象在页面对象列表中的索引。
     * @param {FPDPageObject} obj - 对象对象
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getObjectIndex",
    value: (function () {
      var _getObjectIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(obj) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.GetObjectIndex(this, obj);
            case 2:
              return _context13.abrupt("return", _context13.sent);
            case 3:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getObjectIndex(_x6) {
        return _getObjectIndex.apply(this, arguments);
      }
      return getObjectIndex;
    }()
    /**
     * 获取指定索引的页面对象。
     * @param index - 索引
     * @returns {Promise<FPDPageObject>}
     */
    )
  }, {
    key: "getObjectByIndex",
    value: (function () {
      var _getObjectByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(index) {
        var result, pageObject;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.GetObjectByIndex(this, index);
            case 2:
              result = _context14.sent;
              pageObject = new FPDPageObject();
              pageObject.set(result);
              return _context14.abrupt("return", pageObject);
            case 6:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getObjectByIndex(_x7) {
        return _getObjectByIndex.apply(this, arguments);
      }
      return getObjectByIndex;
    }()
    /**
     * 替换指定位置的页面对象。
     * @param {POSITION} position - 位置信息
     * @param {FPDPageObject} newObj - 新的对象对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "replaceObject",
    value: (function () {
      var _replaceObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(position, newObj) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.ReplaceObject(this, position, newObj);
            case 2:
              return _context15.abrupt("return", _context15.sent);
            case 3:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function replaceObject(_x8, _x9) {
        return _replaceObject.apply(this, arguments);
      }
      return replaceObject;
    }()
    /**
     * 插入对象
     * @param {POSITION} posInsertAfter - 位置
     * @param {FPDPageObject} newObj - 对象
     * @returns {Promise<POSITION>}
     */
    )
  }, {
    key: "insertObject",
    value: (function () {
      var _insertObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(posInsertAfter, newObj) {
        var result, position;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.InsertObject(this, posInsertAfter, newObj);
            case 2:
              result = _context16.sent;
              position = new POSITION$1();
              position.set(result);
              return _context16.abrupt("return", position);
            case 6:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function insertObject(_x10, _x11) {
        return _insertObject.apply(this, arguments);
      }
      return insertObject;
    }()
    /**
     * 删除对象
     * @param {POSITION} position - 位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeObject",
    value: (function () {
      var _removeObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(position) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.RemoveObject(this, position);
            case 2:
              return _context17.abrupt("return", _context17.sent);
            case 3:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function removeObject(_x12) {
        return _removeObject.apply(this, arguments);
      }
      return removeObject;
    }()
    /**
     * 移动对象
     * @param position - 位置
     * @param newPosAfter - 新位置后
     * @returns {Promise<POSITION>}
     */
    )
  }, {
    key: "moveObject",
    value: (function () {
      var _moveObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(position, newPosAfter) {
        var result, pos;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.MoveObject(this, position, newPosAfter);
            case 2:
              result = _context18.sent;
              pos = new POSITION$1();
              pos.set(result);
              return _context18.abrupt("return", pos);
            case 6:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function moveObject(_x13, _x14) {
        return _moveObject.apply(this, arguments);
      }
      return moveObject;
    }()
    /**
     * 获取字典
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getDict",
    value: (function () {
      var _getDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        var result, obj;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.GetDict(this);
            case 2:
              result = _context19.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context19.abrupt("return", obj);
            case 6:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function getDict() {
        return _getDict.apply(this, arguments);
      }
      return getDict;
    }()
    /**
     * 获取文档
     * @returns {Promise<FPDDoc>}
     */
    )
  }, {
    key: "getDocument",
    value: (function () {
      var _getDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {
        var result, doc;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.GetDocument(this);
            case 2:
              result = _context20.sent;
              doc = new FPDDoc();
              doc.set(result);
              return _context20.abrupt("return", doc);
            case 6:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function getDocument() {
        return _getDocument.apply(this, arguments);
      }
      return getDocument;
    }()
    /**
     * 获取页面宽度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageWidth",
    value: (function () {
      var _getPageWidth = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.GetPageWidth(this);
            case 2:
              return _context21.abrupt("return", _context21.sent);
            case 3:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function getPageWidth() {
        return _getPageWidth.apply(this, arguments);
      }
      return getPageWidth;
    }()
    /**
     * 获取页面高度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageHeight",
    value: (function () {
      var _getPageHeight = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.GetPageHeight(this);
            case 2:
              return _context22.abrupt("return", _context22.sent);
            case 3:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function getPageHeight() {
        return _getPageHeight.apply(this, arguments);
      }
      return getPageHeight;
    }()
    /**
     * 生成页面内容。
     *
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "generateContent",
    value: (function () {
      var _generateContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.GenerateContent(this);
            case 2:
              return _context23.abrupt("return", _context23.sent);
            case 3:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function generateContent() {
        return _generateContent.apply(this, arguments);
      }
      return generateContent;
    }()
    /**
     * 获取页面的旋转角度。
     *
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageRotation",
    value: (function () {
      var _getPageRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this.GetPageRotation(this);
            case 2:
              return _context24.abrupt("return", _context24.sent);
            case 3:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
      function getPageRotation() {
        return _getPageRotation.apply(this, arguments);
      }
      return getPageRotation;
    }()
    /**
     * 获取页面资源
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getPageResources",
    value: (function () {
      var _getPageResources = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {
        var result, obj;
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.GetPageResources(this);
            case 2:
              result = _context25.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context25.abrupt("return", obj);
            case 6:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
      function getPageResources() {
        return _getPageResources.apply(this, arguments);
      }
      return getPageResources;
    }()
    /**
     * 获取当前页面的边界框
     * @returns {Promise<Object>} 解析为包含页面边界框的FSFloatRect实例
     */
    )
  }, {
    key: "getPageBBox",
    value: (function () {
      var _getPageBBox = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {
        var result;
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this.GetPageBBox(this);
            case 2:
              result = _context26.sent;
              return _context26.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 4:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
      function getPageBBox() {
        return _getPageBBox.apply(this, arguments);
      }
      return getPageBBox;
    }()
    /**
     * 获取页面文本信息
     * @param {Object} options - 配置选项对象，包含以下属性：
     *  @param {FPDDoc} doc PDF文档对象，包含了PDF文件的内容和元数据
     *  @param {FPDObject} pageDic 页面字典对象，包含了PDF页面的相关信息和内容
     *  @param {number} minWidth 最小宽度限制，用于过滤掉宽度小于该值的文本内容
     *  @param {number} flag 控制标志，用于控制提取文本时的不同行为或选项
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "getPageText",
    value: (function () {
      var _getPageText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(_ref2) {
        var doc, pageDic, minWidth, flag, outLines;
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              doc = _ref2.doc, pageDic = _ref2.pageDic, minWidth = _ref2.minWidth, flag = _ref2.flag;
              outLines = new FSByteStringArray();
              _context27.next = 4;
              return this.GetPageText(outLines, doc, pageDic, minWidth, flag);
            case 4:
              return _context27.abrupt("return", outLines === null || outLines === void 0 ? void 0 : outLines.value);
            case 5:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
      function getPageText(_x15) {
        return _getPageText.apply(this, arguments);
      }
      return getPageText;
    }()
    /**
     * 异步获取页面文本的Unicode表示形式
     * @param {Object} options - 配置选项对象，包含以下属性：
     *  @param {FPDDoc} doc PDF文档对象，包含了PDF文件的内容和元数据
     *  @param {FPDObject} pageDic 页面字典对象，包含了PDF页面的相关信息和内容
     *  @param {number} minWidth 最小宽度限制，用于过滤掉宽度小于该值的文本内容
     *  @param {number} flag 控制标志，用于控制提取文本时的不同行为或选项
     * @returns 返回一个Promise，表示异步操作的结果，无返回值
     */
    )
  }, {
    key: "getPageTextUnicode",
    value: (function () {
      var _getPageTextUnicode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(_ref3) {
        var doc, pageDic, minWidth, flag, outLines;
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              doc = _ref3.doc, pageDic = _ref3.pageDic, minWidth = _ref3.minWidth, flag = _ref3.flag;
              outLines = new FSWideStringArray();
              _context28.next = 4;
              return this.GetPageText_Unicode(outLines, doc, pageDic, minWidth, flag);
            case 4:
              return _context28.abrupt("return", outLines === null || outLines === void 0 ? void 0 : outLines.value);
            case 5:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
      function getPageTextUnicode(_x16) {
        return _getPageTextUnicode.apply(this, arguments);
      }
      return getPageTextUnicode;
    }())
  }]);
}(JSFPD_Page_V1);

function _callSuper$19(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$19() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$19() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$19 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDTextPage = /*#__PURE__*/function (_JSFPD_TextPage_V) {
  function FPDTextPage() {
    _classCallCheck(this, FPDTextPage);
    return _callSuper$19(this, FPDTextPage, arguments);
  }
  _inherits(FPDTextPage, _JSFPD_TextPage_V);
  return _createClass(FPDTextPage, [{
    key: "new",
    value: (
    /**
     * 新建一个 TextPage 对象
     * @param {FPDPage} page
     * @param {number} flags
     * const FPD_TEXT_STREAM_ORDER = 0; 文本顺序
     * const FPD_TEXT_DISPLAY_ORDER = 1; 显示顺序
     * @returns {FPDTextPage}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(page, flags) {
        var result, textPage;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(page, flags);
            case 2:
              result = _context.sent;
              textPage = new FPDTextPage();
              textPage.set(result);
              return _context.abrupt("return", textPage);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x, _x2) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁当前 TextPage 对象
     * @returns {FPDTextPage}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 解析文本页
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "parseTextPage",
    value: (function () {
      var _parseTextPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.ParseTextPage(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function parseTextPage() {
        return _parseTextPage.apply(this, arguments);
      }
      return parseTextPage;
    }()
    /**
     * 获取当前文本页是否已解析
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isParsered",
    value: (function () {
      var _isParsered = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.IsParsered(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function isParsered() {
        return _isParsered.apply(this, arguments);
      }
      return isParsered;
    }()
    /**
     * 获取文本页字符数
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "countChars",
    value: (function () {
      var _countChars = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.CountChars(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function countChars() {
        return _countChars.apply(this, arguments);
      }
      return countChars;
    }()
    /**
     * 获取文本页文本Array
     * @param {number} start 起始位置
     * @param {number} count 获取字符数
     * @returns {Promise<FSFloatRectArray>}
     */
    )
  }, {
    key: "getRectArray",
    value: (function () {
      var _getRectArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(start, count) {
        var outRectArray, rectArray;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              outRectArray = new FSFloatRectArray();
              _context6.next = 3;
              return outRectArray.new();
            case 3:
              rectArray = _context6.sent;
              _context6.next = 6;
              return this.GetRectArray(this, start, count, rectArray);
            case 6:
              return _context6.abrupt("return", rectArray);
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getRectArray(_x3, _x4) {
        return _getRectArray.apply(this, arguments);
      }
      return getRectArray;
    }()
    /**
     * 根据区域获取文字
     * @param {Object} rect 区域
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getTextByRect",
    value: (function () {
      var _getTextByRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(rect) {
        var floatRect, outText;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              floatRect = new FSFloatRect();
              floatRect.set({
                uuid: floatRect.uuid,
                value: rect
              });
              outText = new FSWideString();
              _context7.next = 5;
              return this.GetTextByRect(this, floatRect, outText);
            case 5:
              return _context7.abrupt("return", outText === null || outText === void 0 ? void 0 : outText.value);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getTextByRect(_x5) {
        return _getTextByRect.apply(this, arguments);
      }
      return getTextByRect;
    }()
    /**
     * 获取rect的数量
     * @param {number} start 起始字符的索引
     * @param {number} count 字符数
     * @returns {Promise<number>} 文本矩形的数量
     */
    )
  }, {
    key: "countRects",
    value: (function () {
      var _countRects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(start, count) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.CountRects(this, start, count);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function countRects(_x6, _x7) {
        return _countRects.apply(this, arguments);
      }
      return countRects;
    }()
    /**
     * 根据获取文本矩形
     * @param {number} rectIndex 矩形索引
     * @returns {Promise<Object>} 文本矩形
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(rectIndex) {
        var result;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.GetRect(this, rectIndex);
            case 2:
              result = _context9.sent;
              return _context9.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 4:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getRect(_x8) {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 获取给定位置的单词断行点
     * @param {number} index  - 需要计算断行点的位置索引
     * @param {number} direction - 断行方向，可能指示向前或向后搜索断行点 0：向前搜索断行点 1：向后搜索断行点
     * @returns {Promise<number>} - 返回断行点的索引位置
     */
    )
  }, {
    key: "getWordBreak",
    value: (function () {
      var _getWordBreak = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index, direction) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.GetWordBreak(this, index, direction);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getWordBreak(_x9, _x10) {
        return _getWordBreak.apply(this, arguments);
      }
      return getWordBreak;
    }()
    /**
     * 获取页面文本
     * @param {number} start 起始字符的索引
     * @param {number} count 字符数
     * @returns {Promise<string>} 返回所需页面文本的字符串
     */
    )
  }, {
    key: "getPageText",
    value: (function () {
      var _getPageText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(start, count) {
        var outText;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              outText = new FSWideString();
              _context11.next = 3;
              return this.GetPageText(this, start, count, outText);
            case 3:
              return _context11.abrupt("return", outText === null || outText === void 0 ? void 0 : outText.value);
            case 4:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getPageText(_x11, _x12) {
        return _getPageText.apply(this, arguments);
      }
      return getPageText;
    }())
  }]);
}(JSFPD_TextPage_V1);

function _callSuper$18(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$18() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$18() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$18 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDTextPageFind = /*#__PURE__*/function (_JSFPD_TextPageFind_V) {
  function FPDTextPageFind() {
    _classCallCheck(this, FPDTextPageFind);
    return _callSuper$18(this, FPDTextPageFind, arguments);
  }
  _inherits(FPDTextPageFind, _JSFPD_TextPageFind_V);
  return _createClass(FPDTextPageFind, [{
    key: "new",
    value: (
    /**
     * 新建一个 textPage 对象
     * @param {FPDTextPage} textPage
     * @returns {FPDTextPageFind}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(textPage) {
        var fpdTextPageFind, textPageFind;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(textPage);
            case 2:
              fpdTextPageFind = _context.sent;
              textPageFind = new FPDTextPageFind();
              textPageFind.set({
                uuid: textPageFind.uuid,
                value: fpdTextPageFind.value
              });
              return _context.abrupt("return", textPageFind);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 释放对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 查找给定文本中的第一个匹配项
     * @param {string} text 要查找的文本
     * @param {flags} flags 查找标志，可能包括大小写敏感、全局查找等
     * @param {startPos} startPos 开始查找的位置
     * @returns {Promise<boolean>} 表示是否成功找到了匹配项
     */
    )
  }, {
    key: "findFirst",
    value: (function () {
      var _findFirst = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(text, flags, startPos) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.FindFirst(this, text, flags, startPos);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function findFirst(_x2, _x3, _x4) {
        return _findFirst.apply(this, arguments);
      }
      return findFirst;
    }()
    /**
     * 继续查找下一项
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "findNext",
    value: (function () {
      var _findNext = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.FindNext(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function findNext() {
        return _findNext.apply(this, arguments);
      }
      return findNext;
    }()
    /**
     * 继续查找上一项
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "findPrev",
    value: (function () {
      var _findPrev = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.FindPrev(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function findPrev() {
        return _findPrev.apply(this, arguments);
      }
      return findPrev;
    }()
    /**
     * 获取矩形数组
     * @returns {Promise<FSFloatRectArray>} 返回一FSFloatRectArray实例，其中包含了所需的矩形数据
     */
    )
  }, {
    key: "getRectArray",
    value: (function () {
      var _getRectArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var outRectArray, rectArray;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              outRectArray = new FSFloatRectArray();
              _context6.next = 3;
              return outRectArray.new();
            case 3:
              rectArray = _context6.sent;
              _context6.next = 6;
              return this.GetRectArray(this, rectArray);
            case 6:
              return _context6.abrupt("return", rectArray);
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getRectArray() {
        return _getRectArray.apply(this, arguments);
      }
      return getRectArray;
    }())
  }]);
}(JSFPD_TextPageFind_V1);

function _callSuper$17(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$17() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$17() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$17 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDAnnot = /*#__PURE__*/function (_JSFPD_Annot_V) {
  function FPDAnnot() {
    _classCallCheck(this, FPDAnnot);
    return _callSuper$17(this, FPDAnnot, arguments);
  }
  _inherits(FPDAnnot, _JSFPD_Annot_V);
  return _createClass(FPDAnnot, [{
    key: "new",
    value: (
    /**
     * 创建一个新的 FPDAnnot 对象。
     * @param {FPDObject} dict - 输入的 `FPDObject` 对象。
     * @returns {Promise<FPDAnnot>} - 返回一个 Promise 对象，解析为新的 `FPDAnnot` 实例。
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dict) {
        var result, fpdAnnot;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(dict);
            case 2:
              result = _context.sent;
              fpdAnnot = new FPDAnnot();
              fpdAnnot.set(result);
              return _context.abrupt("return", fpdAnnot);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取当前对象的字典。
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getAnnotDict",
    value: (function () {
      var _getAnnotDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetAnnotDict(this);
            case 2:
              result = _context3.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context3.abrupt("return", fpdObj);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getAnnotDict() {
        return _getAnnotDict.apply(this, arguments);
      }
      return getAnnotDict;
    }()
    /**
     * 获取当前对象的子类型。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getSubType",
    value: (function () {
      var _getSubType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var outSubType;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              outSubType = new FSByteString();
              _context4.next = 3;
              return this.GetSubType(this, outSubType);
            case 3:
              return _context4.abrupt("return", outSubType === null || outSubType === void 0 ? void 0 : outSubType.value);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getSubType() {
        return _getSubType.apply(this, arguments);
      }
      return getSubType;
    }()
    /**
     * 获取当前对象的矩形区域。
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var result;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetRect(this);
            case 2:
              result = _context5.sent;
              return _context5.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getRect() {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 获取当前对象的注释列表。
     * @returns {Promise<FPDAnnotList>}
     */
    )
  }, {
    key: "getAnnotList",
    value: (function () {
      var _getAnnotList = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var result, fpdAnnotList;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.GetAnnotList(this);
            case 2:
              result = _context6.sent;
              fpdAnnotList = new FPDAnnotList();
              fpdAnnotList.set(result);
              return _context6.abrupt("return", fpdAnnotList);
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getAnnotList() {
        return _getAnnotList.apply(this, arguments);
      }
      return getAnnotList;
    }()
    /**
     * 获取当前对象的标志。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFlags",
    value: (function () {
      var _getFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.GetFlags(this);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getFlags() {
        return _getFlags.apply(this, arguments);
      }
      return getFlags;
    }())
  }]);
}(JSFPD_Annot_V1);

function _callSuper$16(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$16() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$16() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$16 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDAnnotList = /*#__PURE__*/function (_JSFPD_AnnotList_V) {
  function FPDAnnotList() {
    _classCallCheck(this, FPDAnnotList);
    return _callSuper$16(this, FPDAnnotList, arguments);
  }
  _inherits(FPDAnnotList, _JSFPD_AnnotList_V);
  return _createClass(FPDAnnotList, [{
    key: "new",
    value: (
    /**
     * 新建一个 FPDAnnotList 对象
     * @param {FPDPage} page 页面对象，用于创建新的注释列表
     * @returns {Promise<FPDAnnotList>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {
        var result, fpdAnnotList;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(page);
            case 2:
              result = _context.sent;
              fpdAnnotList = new FPDAnnotList();
              fpdAnnotList.set(result);
              return _context.abrupt("return", fpdAnnotList);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取指定索引的annot对象
     * @param {number} index 索引
     * @returns {Promise<FPDAnnot>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
        var result, fpdAnnot;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetAt(this, index);
            case 2:
              result = _context3.sent;
              fpdAnnot = new FPDAnnot();
              fpdAnnot.set(result);
              return _context3.abrupt("return", fpdAnnot);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getAt(_x2) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 获取annotList的长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "count",
    value: (function () {
      var _count = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.Count(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function count() {
        return _count.apply(this, arguments);
      }
      return count;
    }()
    /**
     * 获取annot在annotList中的索引
     * @param annot 注释对象
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getIndex",
    value: (function () {
      var _getIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(annot) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetIndex(this, annot);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getIndex(_x3) {
        return _getIndex.apply(this, arguments);
      }
      return getIndex;
    }()
    /**
     * 在指定位置插入annot
     * @param {FPDAnnot} annot annot对象
     * @param {number} index 索引 默认为 annotList的长度
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "insert",
    value: (function () {
      var _insert = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(annot, index) {
        var _index;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!((_index = index) !== null && _index !== void 0)) {
                _context6.next = 4;
                break;
              }
              _context6.next = 7;
              break;
            case 4:
              _context6.next = 6;
              return this.Count(this);
            case 6:
              index = _context6.sent;
            case 7:
              _context6.next = 9;
              return this.Insert(this, index, annot);
            case 9:
              return _context6.abrupt("return", _context6.sent);
            case 10:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function insert(_x4, _x5) {
        return _insert.apply(this, arguments);
      }
      return insert;
    }()
    /**
     * 删除所有annot
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.RemoveAll(this);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }()
    /**
     * 替换指定索引的annot
     * @param {number} index 索引
     * @param {FPDAnnot} annot annot对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "replace",
    value: (function () {
      var _replace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index, annot) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.Replace(this, index, annot);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function replace(_x6, _x7) {
        return _replace.apply(this, arguments);
      }
      return replace;
    }()
    /**
     * 删除指定索引的annot
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "remove",
    value: (function () {
      var _remove = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.Remove(this, index);
            case 2:
              return _context9.abrupt("return", _context9.sent);
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function remove(_x8) {
        return _remove.apply(this, arguments);
      }
      return remove;
    }()
    /**
     * 将指定索引的annot移动到最前面
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "moveToFirst",
    value: (function () {
      var _moveToFirst = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(index <= 0)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return");
            case 2:
              _context10.next = 4;
              return this.MoveToFirst(this, index);
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function moveToFirst(_x9) {
        return _moveToFirst.apply(this, arguments);
      }
      return moveToFirst;
    }()
    /**
     * 将指定索引的annot移动到最后面
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "moveToLast",
    value: (function () {
      var _moveToLast = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(index) {
        var count;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.Count(this);
            case 2:
              count = _context11.sent;
              if (!(index >= count)) {
                _context11.next = 5;
                break;
              }
              return _context11.abrupt("return");
            case 5:
              _context11.next = 7;
              return this.MoveToLast(this, index);
            case 7:
              return _context11.abrupt("return", _context11.sent);
            case 8:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function moveToLast(_x10) {
        return _moveToLast.apply(this, arguments);
      }
      return moveToLast;
    }()
    /**
     * 将指定索引的annot移动到指定位置
     * @param {number} index 注释对象
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "moveTo",
    value: (function () {
      var _moveTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index, newIndex) {
        var count, annot;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.Count(this);
            case 2:
              count = _context12.sent;
              if (!(index > count || index < 0 || newIndex > count || newIndex < 0 || index === newIndex)) {
                _context12.next = 5;
                break;
              }
              return _context12.abrupt("return");
            case 5:
              _context12.next = 7;
              return this.getAt(index);
            case 7:
              annot = _context12.sent;
              _context12.next = 10;
              return this.MoveTo(this, annot, newIndex);
            case 10:
              return _context12.abrupt("return", _context12.sent);
            case 11:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function moveTo(_x11, _x12) {
        return _moveTo.apply(this, arguments);
      }
      return moveTo;
    }()
    /**
     * 获取注释列表对应的文档对象
     * @returns {Promise<FPDDoc>}
     */
    )
  }, {
    key: "getDocument",
    value: (function () {
      var _getDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        var result, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.GetDocument(this);
            case 2:
              result = _context13.sent;
              fpdDoc = new FPDDoc();
              fpdDoc.set(result);
              return _context13.abrupt("return", fpdDoc);
            case 6:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getDocument() {
        return _getDocument.apply(this, arguments);
      }
      return getDocument;
    }()
    /**
     * 获取annotList对应的页面对象
     * @returns {Promise<FPDPage>}
     */
    )
  }, {
    key: "getPage",
    value: (function () {
      var _getPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        var result, fpdPage;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.GetPage(this);
            case 2:
              result = _context14.sent;
              fpdPage = new FPDPage();
              fpdPage.set(result);
              return _context14.abrupt("return", fpdPage);
            case 6:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getPage() {
        return _getPage.apply(this, arguments);
      }
      return getPage;
    }()
    /**
     * 通过字典对象获取对应的注释对象
     * @param {FPDObject} annotDict annot字典对象
     * @returns {Promise<FPDAnnot>}
     */
    )
  }, {
    key: "getAnnotByDict",
    value: (function () {
      var _getAnnotByDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(annotDict) {
        var result, fpdAnnot;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.GetAnnotByDict(this, annotDict);
            case 2:
              result = _context15.sent;
              fpdAnnot = new FPDAnnot();
              fpdAnnot.set(result);
              return _context15.abrupt("return", fpdAnnot);
            case 6:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getAnnotByDict(_x13) {
        return _getAnnotByDict.apply(this, arguments);
      }
      return getAnnotByDict;
    }())
  }]);
}(JSFPD_AnnotList_V1);

function _callSuper$15(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$15() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$15() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$15 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDBoolean = /*#__PURE__*/function (_JSFPD_Boolean_V) {
  function FPDBoolean() {
    _classCallCheck(this, FPDBoolean);
    return _callSuper$15(this, FPDBoolean, arguments);
  }
  _inherits(FPDBoolean, _JSFPD_Boolean_V);
  return _createClass(FPDBoolean, [{
    key: "new",
    value: (
    /**
     * 创建一个布尔值
     * @param {boolean} bool 布尔值
     * @returns {Promise<FPDBoolean>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(bool) {
        var result, fpdBool;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(bool);
            case 2:
              result = _context.sent;
              fpdBool = new FPDBoolean();
              fpdBool.set(result);
              return _context.abrupt("return", fpdBool);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 检查另一个 FPDBoolean和当前实例是否相同。
     * @param {FPDObject} FPDBoolean 第二个 FPDObject 实例
     * @returns {Promise<boolean>} 如果两个对象相同则返回 true，否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(otherBool) {
        var objBool, objOtherBool;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this._translateToFPDObject();
            case 2:
              objBool = _context2.sent;
              _context2.next = 5;
              return this._translateToFPDObject(otherBool);
            case 5:
              objOtherBool = _context2.sent;
              _context2.next = 8;
              return this.Identical(objBool, objOtherBool);
            case 8:
              return _context2.abrupt("return", _context2.sent);
            case 9:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function identical(_x2) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 将当前 FPDBoolean 对象转换为 FPDObject 对象。
     * @param {FPDBoolean} fpdBool - 要转换的 FPDBoolean 对象 (可选，默认为当前对象)
     * @private
     * @ignore
     * @returns {Promise<FPDObject>} - 转换后的 FPDObject 对象
     */
    )
  }, {
    key: "_translateToFPDObject",
    value: (function () {
      var _translateToFPDObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(fpdBool) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              fpdObj = new FPDObject();
              fpdObj.set(fpdBool || this);
              return _context3.abrupt("return", fpdObj);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function _translateToFPDObject(_x3) {
        return _translateToFPDObject2.apply(this, arguments);
      }
      return _translateToFPDObject;
    }())
  }]);
}(JSFPD_Boolean_V1);

function _callSuper$14(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$14() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$14() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$14 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDNumber = /*#__PURE__*/function (_JSFPD_Number_V) {
  function FPDNumber() {
    _classCallCheck(this, FPDNumber);
    return _callSuper$14(this, FPDNumber, arguments);
  }
  _inherits(FPDNumber, _JSFPD_Number_V);
  return _createClass(FPDNumber, [{
    key: "newByInt",
    value: (
    /**
     * 根据给定的整数值创建一个新的 FPDNumber 实例
     * @param {number} value 用于创建 FPDNumber 的整数值
     * @returns {Promise<FPDNumber>}
     */
    function () {
      var _newByInt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
        var result, fpdNum;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.NewByInt(value);
            case 2:
              result = _context.sent;
              fpdNum = new FPDNumber();
              fpdNum.set(result);
              return _context.abrupt("return", fpdNum);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function newByInt(_x) {
        return _newByInt.apply(this, arguments);
      }
      return newByInt;
    }()
    /**
     * 根据给定的浮点数值创建一个新的 FPDNumber 实例
     * @param {number} value 用于创建 FPDNumber 的浮点数值
     * @returns {Promise<FPDNumber>}
     */
    )
  }, {
    key: "newByFloat",
    value: (function () {
      var _newByFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {
        var result, fpdNum;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.NewByFloat(value);
            case 2:
              result = _context2.sent;
              fpdNum = new FPDNumber();
              fpdNum.set(result);
              return _context2.abrupt("return", fpdNum);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function newByFloat(_x2) {
        return _newByFloat.apply(this, arguments);
      }
      return newByFloat;
    }()
    /**
     * 根据给定的字符串创建一个新的 FPDNumber 实例
     * @param {string} str 用于创建 FPDNumber 的字符串
     * @returns {Promise<FPDNumber>}
     */
    )
  }, {
    key: "newByStr",
    value: (function () {
      var _newByStr = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(str) {
        var result, fpdNum;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.NewByStr(str);
            case 2:
              result = _context3.sent;
              fpdNum = new FPDNumber();
              fpdNum.set(result);
              return _context3.abrupt("return", fpdNum);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function newByStr(_x3) {
        return _newByStr.apply(this, arguments);
      }
      return newByStr;
    }()
    /**
     * 检查 FPDNumber new的两个 FPDNumber 实例是否相等。
     * @param {FPDNumber} otherNumber 第二个 FPDNumber 实例
     * @returns {Promise<boolean>} 如果两个对象相等，则返回 true；否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(otherNumber) {
        var _objNumber, _otherNumber;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this._translateToFPDObject();
            case 2:
              _objNumber = _context4.sent;
              _context4.next = 5;
              return this._translateToFPDObject(otherNumber);
            case 5:
              _otherNumber = _context4.sent;
              _context4.next = 8;
              return this.Identical(_objNumber, _otherNumber);
            case 8:
              return _context4.abrupt("return", _context4.sent);
            case 9:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function identical(_x4) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 获取 FPDNumber 对象的字符串表示形式
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var outResult, _objNumber;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              outResult = new FSByteString();
              _context5.next = 3;
              return this._translateToFPDObject();
            case 3:
              _objNumber = _context5.sent;
              _context5.next = 6;
              return this.GetString(_objNumber, outResult);
            case 6:
              return _context5.abrupt("return", outResult === null || outResult === void 0 ? void 0 : outResult.value);
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 设置 FPDNumber 对象的字符串表示形式
     * @param {string} str 字符串
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setString",
    value: (function () {
      var _setString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(str) {
        var _objNumber;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this._translateToFPDObject();
            case 2:
              _objNumber = _context6.sent;
              _context6.next = 5;
              return this.SetString(_objNumber, str);
            case 5:
              return _context6.abrupt("return", _context6.sent);
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setString(_x5) {
        return _setString.apply(this, arguments);
      }
      return setString;
    }()
    /**
     *  判断 FPDNumber 对象是否为整数
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isInteger",
    value: (function () {
      var _isInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var _objNumber;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this._translateToFPDObject();
            case 2:
              _objNumber = _context7.sent;
              _context7.next = 5;
              return this.IsInteger(_objNumber);
            case 5:
              return _context7.abrupt("return", _context7.sent);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function isInteger() {
        return _isInteger.apply(this, arguments);
      }
      return isInteger;
    }()
    /**
     * 获取 FPDNumber 对象的整数值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var _objNumber;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this._translateToFPDObject();
            case 2:
              _objNumber = _context8.sent;
              _context8.next = 5;
              return this.GetInteger(_objNumber);
            case 5:
              return _context8.abrupt("return", _context8.sent);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getInteger() {
        return _getInteger.apply(this, arguments);
      }
      return getInteger;
    }()
    /**
     * 获取 FPDNumber 对象的数值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var _objNumber;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this._translateToFPDObject();
            case 2:
              _objNumber = _context9.sent;
              _context9.next = 5;
              return this.GetNumber(_objNumber);
            case 5:
              return _context9.abrupt("return", _context9.sent);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getNumber() {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 设置 FPDNumber 对象的数值
     * @param value 值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setNumber",
    value: (function () {
      var _setNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(value) {
        var _objNumber;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this._translateToFPDObject();
            case 2:
              _objNumber = _context10.sent;
              _context10.next = 5;
              return this.SetNumber(_objNumber, value);
            case 5:
              return _context10.abrupt("return", _context10.sent);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function setNumber(_x6) {
        return _setNumber.apply(this, arguments);
      }
      return setNumber;
    }()
    /**
     * 获取 FPDNumber 对象的浮点数值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFloat",
    value: (function () {
      var _getFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var _objNumber;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this._translateToFPDObject();
            case 2:
              _objNumber = _context11.sent;
              _context11.next = 5;
              return this.GetFloat(_objNumber);
            case 5:
              return _context11.abrupt("return", _context11.sent);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getFloat() {
        return _getFloat.apply(this, arguments);
      }
      return getFloat;
    }()
    /**
     * 将当前 FPDNumber 对象转换为 FPDObject 对象。
     * @param {FPDNumber} fpdNum - 要转换的 FPDNumber 对象 (可选，默认为当前对象)
     * @private
     * @ignore
     * @returns {Promise<FPDObject>} - 转换后的 FPDObject 对象
     */
    )
  }, {
    key: "_translateToFPDObject",
    value: (function () {
      var _translateToFPDObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(fpdNum) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              fpdObj = new FPDObject();
              fpdObj.set(fpdNum || this);
              return _context12.abrupt("return", fpdObj);
            case 3:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function _translateToFPDObject(_x7) {
        return _translateToFPDObject2.apply(this, arguments);
      }
      return _translateToFPDObject;
    }())
  }]);
}(JSFPD_Number_V1);

function _callSuper$13(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$13() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$13() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$13 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDString = /*#__PURE__*/function (_JSFPD_String_V) {
  function FPDString() {
    _classCallCheck(this, FPDString);
    return _callSuper$13(this, FPDString, arguments);
  }
  _inherits(FPDString, _JSFPD_String_V);
  return _createClass(FPDString, [{
    key: "new",
    value: (
    /**
     * 根据给定的字符串和是否为十六进制的标志创建一个新的 FPDString 实例。
     * @param {string} str 用于创建 FPDString 的字符串
     * @param {boolean} isHex 表示字符串是否为十六进制形式的布尔值 (可选，默认为 false)
     * @returns {Promise<FPDString>} 返回一个基于给定字符串创建的新 FPDString 实例的 Promise
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {
        var isHex,
          result,
          fpdStr,
          _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              isHex = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;
              _context.next = 3;
              return this.New(str, isHex);
            case 3:
              result = _context.sent;
              fpdStr = new FPDString();
              fpdStr.set(result);
              return _context.abrupt("return", fpdStr);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 创建一个新的 FPDString 实例，其中包含给定的字符串。
     * @param {string} str 用于创建 FPDString 的字符串
     * @returns {FPDString} - 一个包含给定字符串的新 FPDString 实例
     */
    )
  }, {
    key: "newW",
    value: (function () {
      var _newW = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(str) {
        var result, fpdStr;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.NewW(str);
            case 2:
              result = _context2.sent;
              fpdStr = new FPDString();
              fpdStr.set(result);
              return _context2.abrupt("return", fpdStr);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function newW(_x2) {
        return _newW.apply(this, arguments);
      }
      return newW;
    }()
    /**
     * 获取字符串
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var outString, obj;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              outString = new FSByteString();
              _context3.next = 3;
              return this._translateToFPDObject();
            case 3:
              obj = _context3.sent;
              _context3.next = 6;
              return this.GetString(obj, outString);
            case 6:
              return _context3.abrupt("return", outString === null || outString === void 0 ? void 0 : outString.value);
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 判断两个字符串对象是否相等。
     * @param {FPDString} otherFpdStr - 另一个对象
     * @returns {Promise<boolean>} - 如果两个对象相等，则返回 true，否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(otherFpdStr) {
        var obj, otherObj;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this._translateToFPDObject();
            case 2:
              obj = _context4.sent;
              _context4.next = 5;
              return this._translateToFPDObject(otherFpdStr);
            case 5:
              otherObj = _context4.sent;
              _context4.next = 8;
              return this.Identical(obj, otherObj);
            case 8:
              return _context4.abrupt("return", _context4.sent);
            case 9:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function identical(_x3) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 设置对象的十六进制表示形式。
     * @param isHex - 是否将字符串表示形式设置为十六进制 (可选，默认为 true)
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setHex",
    value: (function () {
      var _setHex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var isHex,
          obj,
          _args5 = arguments;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              isHex = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : true;
              _context5.next = 3;
              return this._translateToFPDObject();
            case 3:
              obj = _context5.sent;
              _context5.next = 6;
              return this.SetHex(obj, isHex);
            case 6:
              return _context5.abrupt("return", _context5.sent);
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setHex() {
        return _setHex.apply(this, arguments);
      }
      return setHex;
    }()
    /**
     * 判断对象是否为十六进制。
     * @returns {Promise<boolean>} - 如果对象为十六进制，则返回 true，否则返回 false
     */
    )
  }, {
    key: "isHex",
    value: (function () {
      var _isHex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var obj;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this._translateToFPDObject();
            case 2:
              obj = _context6.sent;
              _context6.next = 5;
              return this.IsHex(obj);
            case 5:
              return _context6.abrupt("return", _context6.sent);
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function isHex() {
        return _isHex.apply(this, arguments);
      }
      return isHex;
    }()
    /**
     * 将当前 FPDString 对象转换为 FPDObject 对象。
     * @param {FPDString} fpdStr - 要转换的 FPDString 对象 (可选，默认为当前对象)
     * @private
     * @ignore
     * @returns {Promise<FPDObject>} - 转换后的 FPDObject 对象
     */
    )
  }, {
    key: "_translateToFPDObject",
    value: (function () {
      var _translateToFPDObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(fpdStr) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              fpdObj = new FPDObject();
              fpdObj.set(fpdStr || this);
              return _context7.abrupt("return", fpdObj);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function _translateToFPDObject(_x4) {
        return _translateToFPDObject2.apply(this, arguments);
      }
      return _translateToFPDObject;
    }())
  }]);
}(JSFPD_String_V1);

function _callSuper$12(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$12() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$12() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$12 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDName = /*#__PURE__*/function (_JSFPD_Name_V) {
  function FPDName() {
    _classCallCheck(this, FPDName);
    return _callSuper$12(this, FPDName, arguments);
  }
  _inherits(FPDName, _JSFPD_Name_V);
  return _createClass(FPDName, [{
    key: "new",
    value: (
    /**
     * 根据给定的字符串创建一个新的 FPDName 实例。
     * @param {string} str 用于创建 FPDName 的字符串
     * @returns {Promise<FPDName>} 返回一个基于给定字符串创建的新 FPDObject 实例的 Promise
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {
        var result, fpdName;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New(str);
            case 2:
              result = _context.sent;
              fpdName = new FPDName();
              fpdName.set(result);
              return _context.abrupt("return", fpdName);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new(_x) {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 获取当前对象的字符串表示形式。
     * @returns {Promise<string>} 返回一个字符串，表示当前 FPDObject 的值
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var outString, objName;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              outString = new FSByteString();
              _context2.next = 3;
              return this._translateToFPDObject();
            case 3:
              objName = _context2.sent;
              _context2.next = 6;
              return this.GetString(objName, outString);
            case 6:
              return _context2.abrupt("return", outString === null || outString === void 0 ? void 0 : outString.value);
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 检查另一个FPDName和当前实例是否相等。
     * @param {FPDName} otherFPDName 第二个 FPDName 实例
     * @returns {Promise<boolean>} 如果两个相等，则返回 true；否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(otherFPDName) {
        var objName, otherObjFPDName;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this._translateToFPDObject();
            case 2:
              objName = _context3.sent;
              _context3.next = 5;
              return this._translateToFPDObject(otherFPDName);
            case 5:
              otherObjFPDName = _context3.sent;
              _context3.next = 8;
              return this.Identical(objName, otherObjFPDName);
            case 8:
              return _context3.abrupt("return", _context3.sent);
            case 9:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function identical(_x2) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 将当前 FPDName 对象转换为 FPDObject 对象。
     * @param {FPDName} fpdName - 要转换的 FPDName 对象 (可选，默认为当前对象)
     * @private
     * @ignore
     * @returns {Promise<FPDObject>} - 转换后的 FPDObject 对象
     */
    )
  }, {
    key: "_translateToFPDObject",
    value: (function () {
      var _translateToFPDObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fpdName) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              fpdObj = new FPDObject();
              fpdObj.set(fpdName || this);
              return _context4.abrupt("return", fpdObj);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function _translateToFPDObject(_x3) {
        return _translateToFPDObject2.apply(this, arguments);
      }
      return _translateToFPDObject;
    }())
  }]);
}(JSFPD_Name_V1);

function _callSuper$11(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$11() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$11() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$11 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDArray = /*#__PURE__*/function (_JSFPD_Array_V) {
  function FPDArray() {
    _classCallCheck(this, FPDArray);
    return _callSuper$11(this, FPDArray, arguments);
  }
  _inherits(FPDArray, _JSFPD_Array_V);
  return _createClass(FPDArray, [{
    key: "new",
    value: (
    /**
     * 创建一个新的 FPDArray
     * @returns {Promise<FPDArray>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fpdArr;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              fpdArr = new FPDArray();
              fpdArr.set(result);
              return _context.abrupt("return", fpdArr);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 根获取FPDArray长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getCount",
    value: (function () {
      var _getCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context2.sent;
              _context2.next = 5;
              return this.GetCount(fpdObj);
            case 5:
              return _context2.abrupt("return", _context2.sent);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getCount() {
        return _getCount.apply(this, arguments);
      }
      return getCount;
    }()
    /**
     * 向 FPDArray 实例中添加一个数字。
     * @param {number} num 要添加的数字
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addNumber",
    value: (function () {
      var _addNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(num) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context3.sent;
              _context3.next = 5;
              return this.AddNumber(fpdObj, num);
            case 5:
              return _context3.abrupt("return", _context3.sent);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function addNumber(_x) {
        return _addNumber.apply(this, arguments);
      }
      return addNumber;
    }()
    /**
     * 获取 FPDArray 实例中指定索引位置的元素。
     * @param {number} index 要获取的元素的索引位置
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getElement",
    value: (function () {
      var _getElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {
        var fpdObj, result, obj;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context4.sent;
              _context4.next = 5;
              return this.GetElement(fpdObj, index);
            case 5:
              result = _context4.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context4.abrupt("return", obj);
            case 9:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getElement(_x2) {
        return _getElement.apply(this, arguments);
      }
      return getElement;
    }()
    /**
     * 获取 FPDArray 实例中指定索引位置的元素值。
     * @param {number} index 要获取的元素的索引位置
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getElementValue",
    value: (function () {
      var _getElementValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index) {
        var fpdObj, result, obj;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context5.sent;
              _context5.next = 5;
              return this.GetElementValue(fpdObj, index);
            case 5:
              result = _context5.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context5.abrupt("return", obj);
            case 9:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getElementValue(_x3) {
        return _getElementValue.apply(this, arguments);
      }
      return getElementValue;
    }()
    /**
     * 获取实例对应的 matrix。
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getMatrix",
    value: (function () {
      var _getMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var fpdObj, result;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context6.sent;
              _context6.next = 5;
              return this.GetMatrix(fpdObj);
            case 5:
              result = _context6.sent;
              return _context6.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getMatrix() {
        return _getMatrix.apply(this, arguments);
      }
      return getMatrix;
    }()
    /**
     * 获取实例对应的Rect。
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var fpdObj, result;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context7.sent;
              _context7.next = 5;
              return this.GetRect(fpdObj);
            case 5:
              result = _context7.sent;
              return _context7.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 7:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getRect() {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 获取 FPDObject 实例对应的字符串。
     * @param {number} index 要获取的字符串的索引位置
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index) {
        var fpdObj, outString;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context8.sent;
              outString = new FSByteString();
              _context8.next = 6;
              return this.GetString(fpdObj, index, outString);
            case 6:
              return _context8.abrupt("return", outString.value);
            case 7:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getString(_x4) {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 获取实例对应的整数。
     * @param {number} index 要获取的整数的索引位置
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context9.sent;
              _context9.next = 5;
              return this.GetInteger(fpdObj, index);
            case 5:
              return _context9.abrupt("return", _context9.sent);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getInteger(_x5) {
        return _getInteger.apply(this, arguments);
      }
      return getInteger;
    }()
    /**
     * 实例对应的数字。
     * @param {number} index 要获取的整数的索引位置
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context10.sent;
              _context10.next = 5;
              return this.GetNumber(fpdObj, index);
            case 5:
              return _context10.abrupt("return", _context10.sent);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getNumber(_x6) {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 获取实例对应的字典。
     * @param {number} index 要获取的字典的索引位置
     * @returns {Promise<FPDDictionary>}
     */
    )
  }, {
    key: "getDict",
    value: (function () {
      var _getDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(index) {
        var fpdObj, result, dict;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context11.sent;
              _context11.next = 5;
              return this.GetDict(fpdObj, index);
            case 5:
              result = _context11.sent;
              dict = new FPDDictionary();
              dict.set(result);
              return _context11.abrupt("return", dict);
            case 9:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getDict(_x7) {
        return _getDict.apply(this, arguments);
      }
      return getDict;
    }()
    /**
     * 获取实例对应的流。
     * @param {number} index 要获取的字典的索引位置
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getStream",
    value: (function () {
      var _getStream = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index) {
        var fpdObj, result, obj;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context12.sent;
              _context12.next = 5;
              return this.GetStream(fpdObj, index);
            case 5:
              result = _context12.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context12.abrupt("return", obj);
            case 9:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getStream(_x8) {
        return _getStream.apply(this, arguments);
      }
      return getStream;
    }()
    /**
     * 获取 FPDArray 实例对应的数组。
     * @param {number} index 要获取的数组的索引位置
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getArray",
    value: (function () {
      var _getArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(index) {
        var fpdObj, result, obj;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context13.sent;
              _context13.next = 5;
              return this.GetArray(fpdObj, index);
            case 5:
              result = _context13.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context13.abrupt("return", obj);
            case 9:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getArray(_x9) {
        return _getArray.apply(this, arguments);
      }
      return getArray;
    }()
    /**
     * 获取实例对应的浮点数。
     * @param {number} index 要获取的字典的索引位置
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFloat",
    value: (function () {
      var _getFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(index) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context14.sent;
              _context14.next = 5;
              return this.GetFloat(fpdObj, index);
            case 5:
              return _context14.abrupt("return", _context14.sent);
            case 6:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getFloat(_x10) {
        return _getFloat.apply(this, arguments);
      }
      return getFloat;
    }()
    /**
     * 设置 FPDArray 实例中指定索引位置的元素。
     * @param {Object}
     *  index 要设置的元素的索引位置
     *  otherFpdObj 要设置的元素
     *  objs 间接对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAt",
    value: (function () {
      var _setAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(_ref) {
        var index, otherObj, objs, fpdObj, _objs;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              index = _ref.index, otherObj = _ref.otherObj, objs = _ref.objs;
              _context15.next = 3;
              return this._translateToFPDObject();
            case 3:
              fpdObj = _context15.sent;
              _objs = objs;
              if (_$1.isEmpty(_objs)) {
                _objs = new JSLPVOID();
              }
              _context15.next = 8;
              return this.SetAt(fpdObj, index, otherObj, _objs);
            case 8:
              return _context15.abrupt("return", _context15.sent);
            case 9:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function setAt(_x11) {
        return _setAt.apply(this, arguments);
      }
      return setAt;
    }()
    /**
     * 在 FPDArray 实例中指定索引位置插入元素。
     * @param {Object}
     *  index 要插入元素的索引位置
     *  otherObj 要插入的元素
     *  doc FPDDoc 实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "insertAt",
    value: (function () {
      var _insertAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(_ref2) {
        var index, otherObj, doc, fpdObj;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              index = _ref2.index, otherObj = _ref2.otherObj, doc = _ref2.doc;
              _context16.next = 3;
              return this._translateToFPDObject();
            case 3:
              fpdObj = _context16.sent;
              _context16.next = 6;
              return this.InsertAt(fpdObj, index, otherObj, doc);
            case 6:
              return _context16.abrupt("return", _context16.sent);
            case 7:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function insertAt(_x12) {
        return _insertAt.apply(this, arguments);
      }
      return insertAt;
    }()
    /**
     * 从 FPDArray 实例中删除指定索引位置的元素。
     * @param {number} index 要删除元素的索引位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(index) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context17.sent;
              _context17.next = 5;
              return this.RemoveAt(fpdObj, index);
            case 5:
              return _context17.abrupt("return", _context17.sent);
            case 6:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function removeAt(_x13) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 在 FPDArray 实例中添加元素。
     * @param otherObj 要添加的元素
     * @param doc FPDDoc实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(otherObj, doc) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context18.sent;
              _context18.next = 5;
              return this.Add(fpdObj, otherObj, doc);
            case 5:
              return _context18.abrupt("return", _context18.sent);
            case 6:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function add(_x14, _x15) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 向指定的对象添加一个整数值。
     * @param {number} value - 要添加的整数值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addInteger",
    value: (function () {
      var _addInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(value) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context19.sent;
              _context19.next = 5;
              return this.AddInteger(fpdObj, value);
            case 5:
              return _context19.abrupt("return", _context19.sent);
            case 6:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function addInteger(_x16) {
        return _addInteger.apply(this, arguments);
      }
      return addInteger;
    }()
    /**
     * 向指定的对象添加一个字符串。
     * @param {string} str 要添加的字符串 默认为空
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addString",
    value: (function () {
      var _addString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {
        var str,
          encoder,
          len,
          fpdObj,
          _args20 = arguments;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              str = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : '';
              encoder = new TextEncoder(); // 计算字节长度
              len = encoder.encode(str).length;
              _context20.next = 5;
              return this._translateToFPDObject();
            case 5:
              fpdObj = _context20.sent;
              _context20.next = 8;
              return this.AddString(fpdObj, str, len);
            case 8:
              return _context20.abrupt("return", _context20.sent);
            case 9:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function addString() {
        return _addString.apply(this, arguments);
      }
      return addString;
    }()
    /**
     * 向指定的对象添加一个名称。
     * @param name - 要添加的名称，默认为空字符串 ''。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addName",
    value: (function () {
      var _addName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {
        var name,
          fpdObj,
          _args21 = arguments;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              name = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : '';
              _context21.next = 3;
              return this._translateToFPDObject();
            case 3:
              fpdObj = _context21.sent;
              _context21.next = 6;
              return this.AddName(fpdObj, name);
            case 6:
              return _context21.abrupt("return", _context21.sent);
            case 7:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function addName() {
        return _addName.apply(this, arguments);
      }
      return addName;
    }()
    /**
     * 将一个对象引用添加到文档中。
     * @param {FPDDoc} doc - 文档对象，类型为 FPDDoc。
     * @param {number} objNum - 对象编号。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addReferenceToDoc",
    value: (function () {
      var _addReferenceToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(doc, objNum) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context22.sent;
              _context22.next = 5;
              return this.AddReferenceToDoc(fpdObj, doc, objNum);
            case 5:
              return _context22.abrupt("return", _context22.sent);
            case 6:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function addReferenceToDoc(_x17, _x18) {
        return _addReferenceToDoc.apply(this, arguments);
      }
      return addReferenceToDoc;
    }()
    /**
     * 将一个对象引用添加到文档中。
     * @param {FPDDoc} doc - 文档对象，类型为 FPDDoc。
     * @param {FPDObject} obj2 - 另一个需要引用的对象，类型为 FPDObject。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addReference2ToDoc",
    value: (function () {
      var _addReference2ToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(doc, obj2) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context23.sent;
              _context23.next = 5;
              return this.AddReference2ToDoc(fpdObj, doc, obj2);
            case 5:
              return _context23.abrupt("return", _context23.sent);
            case 6:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function addReference2ToDoc(_x19, _x20) {
        return _addReference2ToDoc.apply(this, arguments);
      }
      return addReference2ToDoc;
    }()
    /**
     * 判断两个对象是否相同。
     * @param {FPDObject} obj FPDObject实例
     * @param {FPDObject} otherObj FPDObject实例
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isIdentical",
    value: (function () {
      var _isIdentical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(obj, otherObj) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this.IsIdentical(obj, otherObj);
            case 2:
              return _context24.abrupt("return", _context24.sent);
            case 3:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
      function isIdentical(_x21, _x22) {
        return _isIdentical.apply(this, arguments);
      }
      return isIdentical;
    }()
    /**
     * 添加一个新对象。
     * @param {FPDObject} fpdObj FPDObject实例
     * @param {number} objectType 对象类型
     *  FPD_PAGEOBJ_TEXT = 1;
     *  FPD_PAGEOBJ_PATH = 2;
     *  FPD_PAGEOBJ_IMAGE = 3;
     *  FPD_PAGEOBJ_SHADING = 4;
     *  FPD_PAGEOBJ_FORM = 5;
     *  FPD_PAGEOBJ_INLINES = 6;
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "addNew",
    value: (function () {
      var _addNew = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(fpdObj, objectType) {
        var result, obj;
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.AddNew(fpdObj, objectType);
            case 2:
              result = _context25.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context25.abrupt("return", obj);
            case 6:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
      function addNew(_x23, _x24) {
        return _addNew.apply(this, arguments);
      }
      return addNew;
    }()
    /**
     * 释放 FPDArray。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this._translateToFPDObject();
            case 2:
              fpdObj = _context26.sent;
              _context26.next = 5;
              return this.Release(fpdObj);
            case 5:
              return _context26.abrupt("return", _context26.sent);
            case 6:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }()
    /**
     * 将当前 FPDArray 对象转换为 FPDObject 对象。
     * @param {FPDArray} fpdArr - 要转换的 FPDArray 对象 (可选，默认为当前对象)
     * @private
     * @ignore
     * @returns {Promise<FPDObject>} - 转换后的 FPDObject 对象
     */
    )
  }, {
    key: "_translateToFPDObject",
    value: (function () {
      var _translateToFPDObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(fpdArr) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              fpdObj = new FPDObject();
              fpdObj.set(fpdArr || this);
              return _context27.abrupt("return", fpdObj);
            case 3:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
      function _translateToFPDObject(_x25) {
        return _translateToFPDObject2.apply(this, arguments);
      }
      return _translateToFPDObject;
    }())
  }]);
}(JSFPD_Array_V1);

function _callSuper$10(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$10() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$10() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$10 = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDDictionary = /*#__PURE__*/function (_JSFPD_Dictionary_V) {
  function FPDDictionary() {
    _classCallCheck(this, FPDDictionary);
    return _callSuper$10(this, FPDDictionary, arguments);
  }
  _inherits(FPDDictionary, _JSFPD_Dictionary_V);
  return _createClass(FPDDictionary, [{
    key: "new",
    value: (
    /**
     * 创建一个新的 FPDDictionary 实例。
     * @returns {Promise<FPDDictionary>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fpdDict;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              fpdDict = new FPDDictionary();
              fpdDict.set(result);
              return _context.abrupt("return", fpdDict);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 从当前对象字典中获取元素。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getElement",
    value: (function () {
      var _getElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {
        var dict, result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context2.sent;
              _context2.next = 5;
              return this.GetElement(dict, key);
            case 5:
              result = _context2.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context2.abrupt("return", fpdObj);
            case 9:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getElement(_x) {
        return _getElement.apply(this, arguments);
      }
      return getElement;
    }()
    /**
     * 2024-10-17 显示已注释不再导出
     * 获取指定对象字典中的下一个元素。
     * @param {FPDObject} dict - 对象字典，类型为 FPDObject。
     * @param {POSITION} position - 当前位置，类型为 POSITION。
     * @param {FSByteString} outKey - 输出键名，类型为 FSByteString。
     * @private
     * @ignore
     * @returns {Promise<FPDObject>}
     */
    // async getNextElement(dict: FPDObject, position: POSITION, outKey: FSByteString): Promise<FPDObject> {
    //     const result = await this.GetNextElement(dict, position, outKey);
    //     const fpdObj = new FPDObject();
    //     fpdObj.set(result);
    //     return fpdObj;
    // }
    /**
     * 从当前对象字典中获取元素的值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getElementValue",
    value: (function () {
      var _getElementValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {
        var dict, result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context3.sent;
              _context3.next = 5;
              return this.GetElementValue(dict, key);
            case 5:
              result = _context3.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context3.abrupt("return", fpdObj);
            case 9:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getElementValue(_x2) {
        return _getElementValue.apply(this, arguments);
      }
      return getElementValue;
    }()
    /**
     * 设置对象字典中的元素。
     * @param {string} key - 要设置的元素键名。
     * @param {FPDObject} obj - 要设置的元素值，类型为 FPDObject。
     * @param {FPDDoc} doc - 文档对象，类型为 FPDDoc。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAt",
    value: (function () {
      var _setAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, obj, doc) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context4.sent;
              _context4.next = 5;
              return this.SetAt(dict, key, obj, doc);
            case 5:
              return _context4.abrupt("return", _context4.sent);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setAt(_x3, _x4, _x5) {
        return _setAt.apply(this, arguments);
      }
      return setAt;
    }()
    /**
     * 设置当前对象字典中的元素名称。
     * @param {string} key - 元素键名
     * @param {string} name - 元素名称
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtName",
    value: (function () {
      var _setAtName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, name) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context5.sent;
              _context5.next = 5;
              return this.SetAtName(dict, key, name);
            case 5:
              return _context5.abrupt("return", _context5.sent);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setAtName(_x6, _x7) {
        return _setAtName.apply(this, arguments);
      }
      return setAtName;
    }()
    /**
     * 从当前对象字典中获取名称值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key) {
        var dict, result, fpdObj;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context6.sent;
              _context6.next = 5;
              return this.GetName(dict, key);
            case 5:
              result = _context6.sent;
              fpdObj = new FPDObject();
              fpdObj.set(result);
              return _context6.abrupt("return", fpdObj);
            case 9:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getName(_x8) {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 设置对象字典中的元素为字符串。
     * @param {string} key - 要设置的元素键名
     * @param {string} str - 要设置的字符串值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtString",
    value: (function () {
      var _setAtString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, str) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context7.sent;
              _context7.next = 5;
              return this.SetAtString(dict, key, str);
            case 5:
              return _context7.abrupt("return", _context7.sent);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setAtString(_x9, _x10) {
        return _setAtString.apply(this, arguments);
      }
      return setAtString;
    }()
    /**
     * 从当前对象字典中获取字符串值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(key) {
        var dict, outString;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context8.sent;
              outString = new FSByteString();
              _context8.next = 6;
              return this.GetString(dict, key, outString);
            case 6:
              return _context8.abrupt("return", outString === null || outString === void 0 ? void 0 : outString.value);
            case 7:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getString(_x11) {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 从当前对象字典中获取 Unicode 文本值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getUnicodeText",
    value: (function () {
      var _getUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(key) {
        var dict, outUnicodeText;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context9.sent;
              outUnicodeText = new FSWideString();
              _context9.next = 6;
              return this.GetUnicodeText(dict, key, outUnicodeText);
            case 6:
              return _context9.abrupt("return", outUnicodeText === null || outUnicodeText === void 0 ? void 0 : outUnicodeText.value);
            case 7:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getUnicodeText(_x12) {
        return _getUnicodeText.apply(this, arguments);
      }
      return getUnicodeText;
    }()
    /**
     * 在当前对象字典中设置一个整数值。
     * @param {string} key - 要获取的元素键名。
     * @param {number} num - 要设置的整数值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtInteger",
    value: (function () {
      var _setAtInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(key, num) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context10.sent;
              _context10.next = 5;
              return this.SetAtInteger(dict, key, num);
            case 5:
              return _context10.abrupt("return", _context10.sent);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function setAtInteger(_x13, _x14) {
        return _setAtInteger.apply(this, arguments);
      }
      return setAtInteger;
    }()
    /**
     * 从当前对象字典中获取整数值。
     * @param key - 要获取的元素键名。
     * @param defaultInt - 默认整数值。没有获取到则会返回默认值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger2",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(key, defaultInt) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context11.sent;
              _context11.next = 5;
              return this.GetInteger2(dict, key, defaultInt);
            case 5:
              return _context11.abrupt("return", _context11.sent);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getInteger2(_x15, _x16) {
        return _getInteger.apply(this, arguments);
      }
      return getInteger2;
    }()
    /**
     * 在当前对象字典中设置一个数字值。
     * @param {string} key - 要获取的元素键名。
     * @param {number} num - 要设置的数字值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtNumber",
    value: (function () {
      var _setAtNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(key, num) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context12.sent;
              _context12.next = 5;
              return this.SetAtNumber(dict, key, num);
            case 5:
              return _context12.abrupt("return", _context12.sent);
            case 6:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function setAtNumber(_x17, _x18) {
        return _setAtNumber.apply(this, arguments);
      }
      return setAtNumber;
    }()
    /**
     * 从当前对象字典中获取数字值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(key) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context13.sent;
              _context13.next = 5;
              return this.GetNumber(dict, key);
            case 5:
              return _context13.abrupt("return", _context13.sent);
            case 6:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getNumber(_x19) {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 从当前对象字典中获取一个子对象。
     * @param {string} key - 要获取的子对象的键名。
     * @returns {Promise<FPDDictionary>}
     */
    )
  }, {
    key: "getDict",
    value: (function () {
      var _getDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(key) {
        var dict, result, fpdDict;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context14.sent;
              _context14.next = 5;
              return this.GetDict(dict, key);
            case 5:
              result = _context14.sent;
              fpdDict = new FPDDictionary();
              fpdDict.set(result);
              return _context14.abrupt("return", fpdDict);
            case 9:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getDict(_x20) {
        return _getDict.apply(this, arguments);
      }
      return getDict;
    }()
    /**
     * 从当前对象字典中获取一个数组。
     * @param {string} key - 要获取的数组的键名。
     * @returns {Promise<FPDArray>}
     */
    )
  }, {
    key: "getArray",
    value: (function () {
      var _getArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(key) {
        var dict, result, fpdArr;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context15.sent;
              _context15.next = 5;
              return this.GetArray(dict, key);
            case 5:
              result = _context15.sent;
              fpdArr = new FPDArray();
              fpdArr.set(result);
              return _context15.abrupt("return", fpdArr);
            case 9:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getArray(_x21) {
        return _getArray.apply(this, arguments);
      }
      return getArray;
    }()
    /**
     * 在当前对象字典中设置一个矩形值。
     * @param {string} key - 要设置的矩形的键名。
     * @param {Object} rect - 矩形对象，包含 top、right、bottom 和 left 属性。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtRect",
    value: (function () {
      var _setAtRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(key, rect) {
        var dict, _rect;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context16.sent;
              _rect = new FSFloatRect();
              _rect.set({
                uuid: _rect.uuid,
                value: rect
              });
              _context16.next = 7;
              return this.SetAtRect(dict, key, _rect);
            case 7:
              return _context16.abrupt("return", _context16.sent);
            case 8:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function setAtRect(_x22, _x23) {
        return _setAtRect.apply(this, arguments);
      }
      return setAtRect;
    }()
    /**
     * 从当前对象字典中获取一个矩形值。
     * @param {string} key - 要获取的数组的键名。
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(key) {
        var dict, result;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context17.sent;
              _context17.next = 5;
              return this.GetRect(dict, key);
            case 5:
              result = _context17.sent;
              return _context17.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 7:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getRect(_x24) {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 在当前对象字典中设置一个矩阵值。
     * @param {string} key - 要设置的矩阵的键名。
     * @param {Object} matrix - 矩阵对象，包含 a、b、c、d、e 和 f 属性。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtMatrix",
    value: (function () {
      var _setAtMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(key, matrix) {
        var dict, _matrix;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context18.sent;
              _matrix = new FSAffineMatrix();
              _matrix.set({
                uuid: _matrix.uuid,
                value: matrix
              });
              _context18.next = 7;
              return this.SetAtMatrix(dict, key, _matrix);
            case 7:
              return _context18.abrupt("return", _context18.sent);
            case 8:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function setAtMatrix(_x25, _x26) {
        return _setAtMatrix.apply(this, arguments);
      }
      return setAtMatrix;
    }()
    /**
     * 从当前对象字典中获取一个矩阵值。
     * @param {string} key          - 要获取的矩阵的键名。
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getMatrix",
    value: (function () {
      var _getMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(key) {
        var dict, result;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context19.sent;
              _context19.next = 5;
              return this.GetMatrix(dict, key);
            case 5:
              result = _context19.sent;
              return _context19.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 7:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function getMatrix(_x27) {
        return _getMatrix.apply(this, arguments);
      }
      return getMatrix;
    }()
    /**
     * 从当前对象字典中获取一个浮点数值。
     * @param {string} key          - 要获取的数值的键名。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFloat",
    value: (function () {
      var _getFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(key) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context20.sent;
              _context20.next = 5;
              return this.GetFloat(dict, key);
            case 5:
              return _context20.abrupt("return", _context20.sent);
            case 6:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function getFloat(_x28) {
        return _getFloat.apply(this, arguments);
      }
      return getFloat;
    }()
    /**
     * 检查当前对象字典中是否存在某个键。
     * @param {string} key - 要检查的键名。
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "keyExist",
    value: (function () {
      var _keyExist = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(key) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context21.sent;
              _context21.next = 5;
              return this.KeyExist(dict, key);
            case 5:
              return _context21.abrupt("return", _context21.sent);
            case 6:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function keyExist(_x29) {
        return _keyExist.apply(this, arguments);
      }
      return keyExist;
    }()
    /**
     * 获取字典的开始位置。
     * @returns {Promise<POSITION>}
     */
    )
  }, {
    key: "getStartPosition",
    value: (function () {
      var _getStartPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {
        var dict, result, position;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context22.sent;
              _context22.next = 5;
              return this.GetStartPosition(dict);
            case 5:
              result = _context22.sent;
              position = new POSITION$1();
              position.set(result);
              return _context22.abrupt("return", position);
            case 9:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function getStartPosition() {
        return _getStartPosition.apply(this, arguments);
      }
      return getStartPosition;
    }()
    /**
     * 在当前对象字典中设置一个指向文档的引用。
     * @param {string} key - 要设置引用的键名。
     * @param {FPDDoc} doc - 文档对象，类型为 FPDDoc。
     * @param {number} objNum - 对象编号。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtReferenceToDoc",
    value: (function () {
      var _setAtReferenceToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(key, doc, objNum) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context23.sent;
              _context23.next = 5;
              return this.SetAtReferenceToDoc(dict, key, doc, objNum);
            case 5:
              return _context23.abrupt("return", _context23.sent);
            case 6:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function setAtReferenceToDoc(_x30, _x31, _x32) {
        return _setAtReferenceToDoc.apply(this, arguments);
      }
      return setAtReferenceToDoc;
    }()
    /**
     * 在当前对象字典中设置一个指向文档的引用。
     *  @param {string} key - 要设置引用的键名。
     *  @param {FPDDoc} doc - 文档对象，类型为 FPDDoc。
     *  @param {FPDObject} obj - 要引用的对象，类型为 FPDObject。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtReference2ToDoc",
    value: (function () {
      var _setAtReference2ToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(key, doc, obj) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context24.sent;
              _context24.next = 5;
              return this.SetAtReference2ToDoc(dict, key, doc, obj);
            case 5:
              return _context24.abrupt("return", _context24.sent);
            case 6:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
      function setAtReference2ToDoc(_x33, _x34, _x35) {
        return _setAtReference2ToDoc.apply(this, arguments);
      }
      return setAtReference2ToDoc;
    }()
    /**
     * 设置一个布尔值。
     * @param {string} key - 键名
     * @param {boolean} bool - 布尔值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtBoolean",
    value: (function () {
      var _setAtBoolean = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(key, bool) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context25.sent;
              _context25.next = 5;
              return this.SetAtBoolean(dict, key, bool);
            case 5:
              return _context25.abrupt("return", _context25.sent);
            case 6:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
      function setAtBoolean(_x36, _x37) {
        return _setAtBoolean.apply(this, arguments);
      }
      return setAtBoolean;
    }()
    /**
     * 获取布尔值
     * @param {string} key - 键名
     * @param {boolean} defaultBool - 默认布尔值，如果没有获取到，则返回的是这个默认值
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "getBoolean2",
    value: (function () {
      var _getBoolean = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(key, defaultBool) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context26.sent;
              _context26.next = 5;
              return this.GetBoolean2(dict, key, defaultBool);
            case 5:
              return _context26.abrupt("return", _context26.sent);
            case 6:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
      function getBoolean2(_x38, _x39) {
        return _getBoolean.apply(this, arguments);
      }
      return getBoolean2;
    }()
    /**
     * 移除字典中的某个键。
     * @param key - 键名
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(key) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context27.sent;
              _context27.next = 5;
              return this.RemoveAt(dict, key);
            case 5:
              return _context27.abrupt("return", _context27.sent);
            case 6:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
      function removeAt(_x40) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 替换字典中的键。
     * @param {string} oldKey - 旧的键名
     * @param {string} newKey - 新的键名
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "replaceKey",
    value: (function () {
      var _replaceKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(oldKey, newKey) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context28.sent;
              _context28.next = 5;
              return this.ReplaceKey(dict, oldKey, newKey);
            case 5:
              return _context28.abrupt("return", _context28.sent);
            case 6:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
      function replaceKey(_x41, _x42) {
        return _replaceKey.apply(this, arguments);
      }
      return replaceKey;
    }()
    /**
     * 判断另一个字典对象和当前字典是否相同。
     * @param {FPDDictionary} otherDict - 另一个对象字典
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(otherDict) {
        var dictObj, otherDictObj;
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              _context29.next = 2;
              return this._translateToFPDObject();
            case 2:
              dictObj = _context29.sent;
              _context29.next = 5;
              return this._translateToFPDObject(otherDict);
            case 5:
              otherDictObj = _context29.sent;
              _context29.next = 8;
              return this.Identical(dictObj, otherDictObj);
            case 8:
              return _context29.abrupt("return", _context29.sent);
            case 9:
            case "end":
              return _context29.stop();
          }
        }, _callee29, this);
      }));
      function identical(_x43) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 获取字典的长度。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getCount",
    value: (function () {
      var _getCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {
        var dict;
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              _context30.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context30.sent;
              _context30.next = 5;
              return this.GetCount(dict);
            case 5:
              return _context30.abrupt("return", _context30.sent);
            case 6:
            case "end":
              return _context30.stop();
          }
        }, _callee30, this);
      }));
      function getCount() {
        return _getCount.apply(this, arguments);
      }
      return getCount;
    }()
    /**
     * 添加一个键值对到字典中。
     * @param {string} key - 键名
     * @param {FPDObject} obj - 要添加的对象，类型为 FPDObject
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addValue",
    value: (function () {
      var _addValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(key, obj) {
        var dict, _obj;
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context31.sent;
              _context31.next = 5;
              return this._translateToFPDObject(obj);
            case 5:
              _obj = _context31.sent;
              _context31.next = 8;
              return this.AddValue(dict, key, _obj);
            case 8:
              return _context31.abrupt("return", _context31.sent);
            case 9:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this);
      }));
      function addValue(_x44, _x45) {
        return _addValue.apply(this, arguments);
      }
      return addValue;
    }()
    /**
     * 设置一个新键，并返回一个对象。
     * @param key - 键名
     * @param objectType - 对象类型
     *  FPD_OBJ_INVALID = 0;
     *  FPD_OBJ_BOOLEAN = 1;
     *  FPD_OBJ_NUMBER = 2;
     *  FPD_OBJ_STRING = 3;
     *  FPD_OBJ_NAME = 4;
     *  FPD_OBJ_ARRAY = 5;
     *  FPD_OBJ_DICTIONARY = 6;
     *  FPD_OBJ_STREAM = 7;
     *  FPD_OBJ_NULL = 8;
     *  FPD_OBJ_REFERENCE = 9;
     * @returns {Promise<FPDObject>}
     */
    )
  }, {
    key: "setNewAt",
    value: (function () {
      var _setNewAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(key, objectType) {
        var dict, result, obj;
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context32.sent;
              _context32.next = 5;
              return this.SetNewAt(dict, key, objectType);
            case 5:
              result = _context32.sent;
              obj = new FPDObject();
              obj.set(result);
              return _context32.abrupt("return", obj);
            case 9:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
      function setNewAt(_x46, _x47) {
        return _setNewAt.apply(this, arguments);
      }
      return setNewAt;
    }()
    /**
     * 向当前对象字典中添加一个指向文档的引用。
     * @param {string} key - 要添加引用的键名。
     * @param {FPDDoc} doc - 文档对象，类型为 FPDDoc。
     * @param {number} objNum - 对象编号。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addReference",
    value: (function () {
      var _addReference = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(key, doc, objNum) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              _context33.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context33.sent;
              _context33.next = 5;
              return this.AddReference(dict, key, doc, objNum);
            case 5:
              return _context33.abrupt("return", _context33.sent);
            case 6:
            case "end":
              return _context33.stop();
          }
        }, _callee33, this);
      }));
      function addReference(_x48, _x49, _x50) {
        return _addReference.apply(this, arguments);
      }
      return addReference;
    }()
    /**
     * 释放对象。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {
        var dict;
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context34.sent;
              _context34.next = 5;
              return this.Release(dict);
            case 5:
              return _context34.abrupt("return", _context34.sent);
            case 6:
            case "end":
              return _context34.stop();
          }
        }, _callee34, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }()
    /**
     * 从当前对象字典中获取一个 64 位整数值。
     * @param {string} key - 要获取的键名。
     * @returns {Promise<number>} 一个 Promise 对象，操作完成时解析为 64 位整数值。
     */
    )
  }, {
    key: "getInteger64",
    value: (function () {
      var _getInteger2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(key) {
        var dict;
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              _context35.next = 2;
              return this._translateToFPDObject();
            case 2:
              dict = _context35.sent;
              _context35.next = 5;
              return this.GetInteger64(dict, key);
            case 5:
              return _context35.abrupt("return", _context35.sent);
            case 6:
            case "end":
              return _context35.stop();
          }
        }, _callee35, this);
      }));
      function getInteger64(_x51) {
        return _getInteger2.apply(this, arguments);
      }
      return getInteger64;
    }()
    /**
     * 将对象转换为 FPDObject 对象。
     * @param {FPDDictionary} obj - 要转换的对象 (可选，默认为当前对象)
     * @private
     * @ignore
     * @returns {Promise<FPDObject>} - 转换后的 FPDObject 对象
     */
    )
  }, {
    key: "_translateToFPDObject",
    value: (function () {
      var _translateToFPDObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(obj) {
        var fpdObj;
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              fpdObj = new FPDObject();
              fpdObj.set(obj || this);
              return _context36.abrupt("return", fpdObj);
            case 3:
            case "end":
              return _context36.stop();
          }
        }, _callee36, this);
      }));
      function _translateToFPDObject(_x52) {
        return _translateToFPDObject2.apply(this, arguments);
      }
      return _translateToFPDObject;
    }())
  }]);
}(JSFPD_Dictionary_V1);

function _callSuper$$(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$$() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$$() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$$ = function _isNativeReflectConstruct() { return !!t; })(); }
var FSByteStringArray = /*#__PURE__*/function (_JSFS_ByteStringArray) {
  function FSByteStringArray() {
    _classCallCheck(this, FSByteStringArray);
    return _callSuper$$(this, FSByteStringArray, arguments);
  }
  _inherits(FSByteStringArray, _JSFS_ByteStringArray);
  return _createClass(FSByteStringArray, [{
    key: "new",
    value: (
    /**
     * 新建一个空数组
     * @returns {Promise<FSByteStringArray>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, byteStringArray;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              byteStringArray = new FSByteStringArray();
              byteStringArray.set(result);
              return _context.abrupt("return", byteStringArray);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取指定索引的值
     * @param {number} index 索引
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
        var outByteString;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              outByteString = new FSByteString();
              _context3.next = 3;
              return this.GetAt(this, index, outByteString);
            case 3:
              return _context3.abrupt("return", outByteString === null || outByteString === void 0 ? void 0 : outByteString.value);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getAt(_x) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 添加元素
     * @param {string} item 待添加的元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(item) {
        var encoder, len;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              encoder = new TextEncoder(); // 计算字节长度
              len = encoder.encode(item).length;
              _context4.next = 4;
              return this.Add(this, item, len);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function add(_x2) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 获取数组长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetSize(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 清空数组
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.RemoveAll(this);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }()
    /**
     * 删除指定索引的元素
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.RemoveAt(this, index);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAt(_x3) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }())
  }]);
}(JSFS_ByteStringArray_V1);

function _callSuper$_(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$_() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$_() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$_ = function _isNativeReflectConstruct() { return !!t; })(); }
var FSWideStringArray = /*#__PURE__*/function (_JSFS_WideStringArray) {
  function FSWideStringArray() {
    _classCallCheck(this, FSWideStringArray);
    return _callSuper$_(this, FSWideStringArray, arguments);
  }
  _inherits(FSWideStringArray, _JSFS_WideStringArray);
  return _createClass(FSWideStringArray, [{
    key: "new",
    value: (
    /**
     * 创建一个FSWideStringArray实例
     * @returns {Promise<FSWideStringArray>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fsWideStringArray;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              fsWideStringArray = new FSWideStringArray();
              fsWideStringArray.set(result);
              return _context.abrupt("return", fsWideStringArray);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 添加元素
     * @param {string} newItem 添加的元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newItem) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.Add(this, newItem);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function add(_x) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 复制元素
     * @param {FSWideStringArray} srcArr 源数组
     * @param {number} start 开始位置
     * @param {number} count 数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "copy",
    value: (function () {
      var _copy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(srcArr, start, count) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.Copy(this, srcArr, start, count);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function copy(_x2, _x3, _x4) {
        return _copy.apply(this, arguments);
      }
      return copy;
    }()
    /**
     * 获取元素
     * @param {number} index 索引
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index) {
        var outWideString;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              outWideString = new FSWideString();
              _context5.next = 3;
              return this.GetAt(this, index, outWideString);
            case 3:
              return _context5.abrupt("return", outWideString === null || outWideString === void 0 ? void 0 : outWideString.value);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getAt(_x5) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 获取元素数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.GetSize(this);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 删除元素
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.RemoveAt(this, index);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAt(_x6) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 删除所有元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.RemoveAll(this);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }())
  }]);
}(JSFS_WideStringArray_V1);

function _callSuper$Z(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$Z() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$Z() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$Z = function _isNativeReflectConstruct() { return !!t; })(); }
var FRTextSelectTool = /*#__PURE__*/function (_JSFR_TextSelectTool_) {
  function FRTextSelectTool() {
    _classCallCheck(this, FRTextSelectTool);
    return _callSuper$Z(this, FRTextSelectTool, arguments);
  }
  _inherits(FRTextSelectTool, _JSFR_TextSelectTool_);
  return _createClass(FRTextSelectTool, [{
    key: "create",
    value: (
    /**
     * 创建一个文本选择工具
     * @param {FRDoc} doc 类型的文档对象，用于指定在哪个文档中创建文本选择工具
     * @returns {Promise<FRTextSelectTool>} 返回文本选择工具对象
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(doc) {
        var result, textSelectTool;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.Create(doc);
            case 2:
              result = _context.sent;
              textSelectTool = new FRTextSelectTool();
              textSelectTool.set(result);
              return _context.abrupt("return", textSelectTool);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }()
    /**
     * 获取选中的文本
     * @returns {Promise<string>} 返回选中的文本
     */
    )
  }, {
    key: "getSelectedText",
    value: (function () {
      var _getSelectedText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var outText;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              outText = new FSWideString();
              _context2.next = 3;
              return this.GetSelectedText(this, outText);
            case 3:
              return _context2.abrupt("return", outText === null || outText === void 0 ? void 0 : outText.value);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getSelectedText() {
        return _getSelectedText.apply(this, arguments);
      }
      return getSelectedText;
    }()
    /**
     * 清除选中
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "clearSelection",
    value: (function () {
      var _clearSelection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.ClearSelection(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function clearSelection() {
        return _clearSelection.apply(this, arguments);
      }
      return clearSelection;
    }()
    /**
     * 获取选中的文本，并设置换行符
     * @param {boolean} lineBreakBetweenPages 是否在页码之间插入换行符
     * @returns {Promise<string>} 返回选中的文本
     */
    )
  }, {
    key: "getSelectedText2",
    value: (function () {
      var _getSelectedText2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(lineBreakBetweenPages) {
        var outText;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              outText = new FSWideString();
              _context4.next = 3;
              return this.GetSelectedText2(this, lineBreakBetweenPages, outText);
            case 3:
              return _context4.abrupt("return", outText === null || outText === void 0 ? void 0 : outText.value);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getSelectedText2(_x2) {
        return _getSelectedText2.apply(this, arguments);
      }
      return getSelectedText2;
    }()
    /**
     * 添加选择区域
     * @param {FRPageView} pageView 页面视图对象，描述了页面的布局和元素它包含了页面上所有元素的几何信息，
     *                 是在进行页面元素选择和操作时的基础
     * @param {FSFloatRectArray} formRects 一组表单矩形的数组，每个矩形代表了一个表单元素的位置和大小这些矩形用于
     *                   指定哪些部分的页面应当被识别为可选择的区域
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addSelect2",
    value: (function () {
      var _addSelect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(pageView, formRects) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.AddSelect2(this, pageView, formRects);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function addSelect2(_x3, _x4) {
        return _addSelect.apply(this, arguments);
      }
      return addSelect2;
    }()
    /**
     * 添加选择区域
     * @param {FRPageView} pageView 页面视图对象，描述了页面的布局和元素它包含了页面上所有元素的几何信息，
     * @param {FSFloatRectArray} textRects 一组文本矩形的数组，每个矩形代表了一个文本元素的位置和大小
     * @param {boolean} contains 是否包含文本
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addSelectTextRects",
    value: (function () {
      var _addSelectTextRects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(pageView, textRects, contains) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.AddSelectTextRects(this, pageView, textRects, contains);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function addSelectTextRects(_x5, _x6, _x7) {
        return _addSelectTextRects.apply(this, arguments);
      }
      return addSelectTextRects;
    }()
    /**
     * 取消所有选择区域
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "deSelectAll",
    value: (function () {
      var _deSelectAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.DeselectAll(this);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function deSelectAll() {
        return _deSelectAll.apply(this, arguments);
      }
      return deSelectAll;
    }())
  }]);
}(JSFR_TextSelectTool_V1);

function _callSuper$Y(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$Y() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$Y() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$Y = function _isNativeReflectConstruct() { return !!t; })(); }
var FSFloatRectArray = /*#__PURE__*/function (_JSFS_FloatRectArray_) {
  function FSFloatRectArray() {
    _classCallCheck(this, FSFloatRectArray);
    return _callSuper$Y(this, FSFloatRectArray, arguments);
  }
  _inherits(FSFloatRectArray, _JSFS_FloatRectArray_);
  return _createClass(FSFloatRectArray, [{
    key: "new",
    value: (
    /**
     * 新建一个 FSFloatRectArray
     * @returns {Promise<FSFloatRectArray>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, floatRectArray;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              floatRectArray = new FSFloatRectArray();
              floatRectArray.set({
                uuid: floatRectArray.uuid,
                value: result.value
              });
              return _context.abrupt("return", floatRectArray);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 添加一个 FSFloatRect
     * @param {Object} newItem 要添加的 FSFloatRect 对象
     * @returns {Promise<number>} The added element’s index.
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newItem) {
        var floatRect;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              floatRect = new FSFloatRect();
              floatRect.set({
                uuid: floatRect.uuid,
                value: newItem
              });
              _context2.next = 4;
              return this.Add(this, floatRect);
            case 4:
              return _context2.abrupt("return", _context2.sent);
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function add(_x) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 获取数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetSize(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 销毁
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.Destroy(this);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 用于获取 Array 的指定维度的上限
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getUpperBound",
    value: (function () {
      var _getUpperBound = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetUpperBound(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getUpperBound() {
        return _getUpperBound.apply(this, arguments);
      }
      return getUpperBound;
    }()
    /**
     * 设置集合的大小，并根据指定的增量增长
     * @param {number} size 集合的新大小
     * @param {number} growBy 集合增长的增量值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setSize",
    value: (function () {
      var _setSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(size, growBy) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.SetSize(this, size, growBy);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setSize(_x2, _x3) {
        return _setSize.apply(this, arguments);
      }
      return setSize;
    }()
    /**
     * 移除所有元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.RemoveAll(this);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }()
    /**
     * 获取指定索引的元素
     * @param {number} index 索引
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index) {
        var result;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.GetAt(this, index);
            case 2:
              result = _context8.sent;
              return _context8.abrupt("return", result === null || result === void 0 ? void 0 : result.value);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getAt(_x4) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 设置指定索引的元素
     * @param {number} index 索引
     * @param {Object} newItem 要设置的元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAt",
    value: (function () {
      var _setAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index, newItem) {
        var floatRect;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              floatRect = new FSFloatRect();
              floatRect.set({
                uuid: floatRect.uuid,
                value: newItem
              });
              _context9.next = 4;
              return this.SetAt(this, index, floatRect);
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function setAt(_x5, _x6) {
        return _setAt.apply(this, arguments);
      }
      return setAt;
    }()
    /**
     * 追加一个数组
     * @param {FSFloatRectArray} arr 要追加的数组
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "append",
    value: (function () {
      var _append = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(arr) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.Append(this, arr);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function append(_x7) {
        return _append.apply(this, arguments);
      }
      return append;
    }()
    /**
     * 复制一个数组
     * @param {FSFloatRectArray} arr 要复制的数组
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "copy",
    value: (function () {
      var _copy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(arr) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.Copy(this, arr);
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function copy(_x8) {
        return _copy.apply(this, arguments);
      }
      return copy;
    }()
    /**
     * 插入元素
     * @param {number} index 索引
     * @param {Object} newItem 要插入的元素
     * @param {number} count 指定要插入的元素的计数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "insertAt",
    value: (function () {
      var _insertAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index, newItem, count) {
        var floatRect;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              floatRect = new FSFloatRect();
              floatRect.set({
                uuid: floatRect.uuid,
                value: newItem
              });
              _context12.next = 4;
              return this.InsertAt(this, index, floatRect, count);
            case 4:
              return _context12.abrupt("return", _context12.sent);
            case 5:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function insertAt(_x9, _x10, _x11) {
        return _insertAt.apply(this, arguments);
      }
      return insertAt;
    }()
    /**
     * 移除元素
     * @param {number} index 索引
     * @param {number} count 指定要移除的元素的计数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(index, count) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.RemoveAt(this, index, count);
            case 2:
              return _context13.abrupt("return", _context13.sent);
            case 3:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function removeAt(_x12, _x13) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 查找元素的索引
     * @param {Object} floatRect 要查找的元素
     * @param {number} startIndex 查找的起始索引
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "find",
    value: (function () {
      var _find = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(rect) {
        var startIndex,
          floatRect,
          _args14 = arguments;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              startIndex = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : 0;
              floatRect = new FSFloatRect();
              floatRect.set({
                uuid: floatRect.uuid,
                value: rect
              });
              _context14.next = 5;
              return this.Find(this, floatRect, startIndex);
            case 5:
              return _context14.abrupt("return", _context14.sent);
            case 6:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function find(_x14) {
        return _find.apply(this, arguments);
      }
      return find;
    }())
  }]);
}(JSFS_FloatRectArray_V1);

function _callSuper$X(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$X() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$X() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$X = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDColorState = /*#__PURE__*/function (_JSFPD_ColorState_V) {
  function FPDColorState() {
    _classCallCheck(this, FPDColorState);
    return _callSuper$X(this, FPDColorState, arguments);
  }
  _inherits(FPDColorState, _JSFPD_ColorState_V);
  return _createClass(FPDColorState, [{
    key: "new",
    value: (
    /**
     * 创建一个 FPDColorState 类
     * @returns {Promise<FPDColorState>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fpdColorState;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              fpdColorState = new FPDColorState();
              fpdColorState.set(result);
              return _context.abrupt("return", fpdColorState);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁一个 FPDColorState 类
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取填充颜色
     * @returns {Promise<FPDColor>} 返回一FPDColor实例，表示填充颜色
     */
    )
  }, {
    key: "getFillColor",
    value: (function () {
      var _getFillColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var result, fpdColor;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetFillColor(this);
            case 2:
              result = _context3.sent;
              fpdColor = new FPDColor();
              fpdColor.set(result);
              return _context3.abrupt("return", fpdColor);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getFillColor() {
        return _getFillColor.apply(this, arguments);
      }
      return getFillColor;
    }()
    /**
     * 设置填充颜色
     * @param {FPDColorSpace} clrSpace 填充颜色的颜色空间，定义了颜色的解释方式
     * @param {Array<number>} value 指向填充颜色值的浮点数指针
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFillColor",
    value: (function () {
      var _setFillColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(clrSpace, value) {
        var colorPointer, values;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              colorPointer = new FloatPointer$1();
              colorPointer.set({
                uuid: colorPointer.uuid,
                value: value
              });
              values = value.length;
              _context4.next = 5;
              return this.SetFillColor(this, clrSpace, colorPointer, values);
            case 5:
              return _context4.abrupt("return", _context4.sent);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setFillColor(_x, _x2) {
        return _setFillColor.apply(this, arguments);
      }
      return setFillColor;
    }()
    /**
     * 取描边颜色
     * @returns {Promise<FPDColor>} 返回FPDColor实例，表示描边颜色
     */
    )
  }, {
    key: "getStrokeColor",
    value: (function () {
      var _getStrokeColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var result, fpdColor;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetStrokeColor(this);
            case 2:
              result = _context5.sent;
              fpdColor = new FPDColor();
              fpdColor.set(result);
              return _context5.abrupt("return", fpdColor);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getStrokeColor() {
        return _getStrokeColor.apply(this, arguments);
      }
      return getStrokeColor;
    }()
    /**
     * 设置描边颜色
     * @param {FPDColorSpace} clrSpace 填充颜色的颜色空间，定义了颜色的解释方式
     * @param {Array<number>} value 指向填充颜色值的浮点数指针
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setStrokeColor",
    value: (function () {
      var _setStrokeColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(clrSpace, value) {
        var colorPointer, values;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              colorPointer = new FloatPointer$1();
              colorPointer.set({
                uuid: colorPointer.uuid,
                value: value
              });
              values = value.length;
              _context6.next = 5;
              return this.SetStrokeColor(this, clrSpace, colorPointer, values);
            case 5:
              return _context6.abrupt("return", _context6.sent);
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setStrokeColor(_x3, _x4) {
        return _setStrokeColor.apply(this, arguments);
      }
      return setStrokeColor;
    }()
    /**
     * 判断是否为空
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isNull",
    value: (function () {
      var _isNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.IsNull(this);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function isNull() {
        return _isNull.apply(this, arguments);
      }
      return isNull;
    }())
  }]);
}(JSFPD_ColorState_V1);

function _callSuper$W(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$W() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$W() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$W = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDTextState = /*#__PURE__*/function (_JSFPD_TextState_V) {
  function FPDTextState() {
    _classCallCheck(this, FPDTextState);
    return _callSuper$W(this, FPDTextState, arguments);
  }
  _inherits(FPDTextState, _JSFPD_TextState_V);
  return _createClass(FPDTextState, [{
    key: "new",
    value: (
    /**
     * 创建一个 FPDTextState 类
     * @returns {Promise<FPDTextState>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fpdTextState;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              fpdTextState = new FPDTextState();
              fpdTextState.set(result);
              return _context.abrupt("return", fpdTextState);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取字体
     * @returns {Promise<FPDFont>}
     */
    )
  }, {
    key: "getFont",
    value: (function () {
      var _getFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var _fpdFont, fpdFont;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetFont(this);
            case 2:
              _fpdFont = _context3.sent;
              fpdFont = new FPDFont();
              fpdFont.set(_fpdFont);
              return _context3.abrupt("return", fpdFont);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getFont() {
        return _getFont.apply(this, arguments);
      }
      return getFont;
    }()
    /**
     * 设置字体
     * @param {FPDFont} font 字体
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFont",
    value: (function () {
      var _setFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(font) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.SetFont(this, font);
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setFont(_x) {
        return _setFont.apply(this, arguments);
      }
      return setFont;
    }()
    /**
     * 获取字体大小
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontSize",
    value: (function () {
      var _getFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.GetFontSize(this);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getFontSize() {
        return _getFontSize.apply(this, arguments);
      }
      return getFontSize;
    }()
    /**
     * 设置字体大小
     * @param fontSize 字体大小，以像素(px)为单位的数字值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFontSize",
    value: (function () {
      var _setFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fontSize) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.SetFontSize(this, fontSize);
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setFontSize(_x2) {
        return _setFontSize.apply(this, arguments);
      }
      return setFontSize;
    }()
    /**
     * 获取字体大小
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontSizeV",
    value: (function () {
      var _getFontSizeV = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.GetFontSizeV(this);
            case 2:
              return _context7.abrupt("return", _context7.sent);
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getFontSizeV() {
        return _getFontSizeV.apply(this, arguments);
      }
      return getFontSizeV;
    }()
    /**
     * 获取字体高度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontSizeH",
    value: (function () {
      var _getFontSizeH = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.GetFontSizeH(this);
            case 2:
              return _context8.abrupt("return", _context8.sent);
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getFontSizeH() {
        return _getFontSizeH.apply(this, arguments);
      }
      return getFontSizeH;
    }()
    /**
     * 获取基线角度
     * @returns {Promise<number>} 基线角度（以度为单位）
     */
    )
  }, {
    key: "getBaselineAngle",
    value: (function () {
      var _getBaselineAngle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.GetBaselineAngle(this);
            case 2:
              return _context9.abrupt("return", _context9.sent);
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getBaselineAngle() {
        return _getBaselineAngle.apply(this, arguments);
      }
      return getBaselineAngle;
    }()
    /**
     * 获取剪切角度
     * @returns {Promise<number>} 剪切角度的数值
     */
    )
  }, {
    key: "getShearAngle",
    value: (function () {
      var _getShearAngle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.GetShearAngle(this);
            case 2:
              return _context10.abrupt("return", _context10.sent);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getShearAngle() {
        return _getShearAngle.apply(this, arguments);
      }
      return getShearAngle;
    }()
    /**
     * 设置字符间距
     * @param {number} charSpace 字符间距的值，用于调整文本的视觉效果
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setCharSpace",
    value: (function () {
      var _setCharSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(charSpace) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.SetCharSpace(this, charSpace);
            case 2:
              return _context11.abrupt("return", _context11.sent);
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setCharSpace(_x3) {
        return _setCharSpace.apply(this, arguments);
      }
      return setCharSpace;
    }()
    /**
     * 获取字符间距
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getCharSpace",
    value: (function () {
      var _getCharSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.GetCharSpace(this);
            case 2:
              return _context12.abrupt("return", _context12.sent);
            case 3:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getCharSpace() {
        return _getCharSpace.apply(this, arguments);
      }
      return getCharSpace;
    }()
    /**
     * 设置字间距
     * @param {number} wordSpace 字间距的值，用于设置文本中的字间距
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setWordSpace",
    value: (function () {
      var _setWordSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(wordSpace) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.SetWordSpace(this, wordSpace);
            case 2:
              return _context13.abrupt("return", _context13.sent);
            case 3:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function setWordSpace(_x4) {
        return _setWordSpace.apply(this, arguments);
      }
      return setWordSpace;
    }()
    /**
     * 获取字间距
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getWordSpace",
    value: (function () {
      var _getWordSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.GetWordSpace(this);
            case 2:
              return _context14.abrupt("return", _context14.sent);
            case 3:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getWordSpace() {
        return _getWordSpace.apply(this, arguments);
      }
      return getWordSpace;
    }()
    /**
     * 设置文本模式
     * @param {number} textMode 文本模式的数值表示，指示新的文本模式应该是何种类型
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setTextMode",
    value: (function () {
      var _setTextMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(textMode) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.SetTextMode(this, textMode);
            case 2:
              return _context15.abrupt("return", _context15.sent);
            case 3:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function setTextMode(_x5) {
        return _setTextMode.apply(this, arguments);
      }
      return setTextMode;
    }()
    /**
     * 获取文本模式
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getTextMode",
    value: (function () {
      var _getTextMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        var result;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.GetTextMode(this);
            case 2:
              result = _context16.sent;
              return _context16.abrupt("return", result);
            case 4:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getTextMode() {
        return _getTextMode.apply(this, arguments);
      }
      return getTextMode;
    }()
    /**
     * 检查当前对象是否为空
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isNull",
    value: (function () {
      var _isNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.IsNull(this);
            case 2:
              return _context17.abrupt("return", _context17.sent);
            case 3:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function isNull() {
        return _isNull.apply(this, arguments);
      }
      return isNull;
    }())
  }]);
}(JSFPD_TextState_V1);

function _callSuper$V(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$V() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$V() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$V = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDTextObject = /*#__PURE__*/function (_JSFPD_TextObject_V) {
  function FPDTextObject() {
    _classCallCheck(this, FPDTextObject);
    return _callSuper$V(this, FPDTextObject, arguments);
  }
  _inherits(FPDTextObject, _JSFPD_TextObject_V);
  return _createClass(FPDTextObject, [{
    key: "new",
    value: (
    /**
     * 创建一个 FPDTextObject 类
     * @returns {Promise<FPDTextObject>}
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, fpdTextObj;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              fpdTextObj = new FPDTextObject();
              fpdTextObj.set(result);
              return _context.abrupt("return", fpdTextObj);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context2.sent;
              _context2.next = 5;
              return this.Destroy(fpdPageObj);
            case 5:
              return _context2.abrupt("return", _context2.sent);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 计算条目数量
     * @returns {Promise<number>} 返回条目的数量
     */
    )
  }, {
    key: "countItems",
    value: (function () {
      var _countItems = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context3.sent;
              _context3.next = 5;
              return this.CountItems(fpdPageObj);
            case 5:
              return _context3.abrupt("return", _context3.sent);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function countItems() {
        return _countItems.apply(this, arguments);
      }
      return countItems;
    }()
    /**
     * 计算字符数量
     * @returns {Promise<number>} 返回字符的数量
     */
    )
  }, {
    key: "countChars",
    value: (function () {
      var _countChars = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context4.sent;
              _context4.next = 5;
              return this.CountChars(fpdPageObj);
            case 5:
              return _context4.abrupt("return", _context4.sent);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function countChars() {
        return _countChars.apply(this, arguments);
      }
      return countChars;
    }()
    /**
     * 获取字符信息
     * @param {number} index 字符的索引，用于指定要获取信息的字符
     * @returns {Promise<Object>} 解析为一个包含字符代码和字距的对象
     */
    )
  }, {
    key: "getCharInfo",
    value: (function () {
      var _getCharInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index) {
        var fpdPageObj, outCharCode, outKerning;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context5.sent;
              outCharCode = new IntPointer$1();
              outKerning = new FloatPointer$1();
              _context5.next = 7;
              return this.GetCharInfo(fpdPageObj, index, outCharCode, outKerning);
            case 7:
              return _context5.abrupt("return", {
                charCode: outCharCode === null || outCharCode === void 0 ? void 0 : outCharCode.value,
                kerning: outKerning === null || outKerning === void 0 ? void 0 : outKerning.value
              });
            case 8:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getCharInfo(_x) {
        return _getCharInfo.apply(this, arguments);
      }
      return getCharInfo;
    }()
    /**
     * 获取对象的X坐标
     * @returns {Promise<number>} 返回当前对象的X坐标
     */
    )
  }, {
    key: "getPosX",
    value: (function () {
      var _getPosX = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context6.sent;
              _context6.next = 5;
              return this.GetPosX(fpdPageObj);
            case 5:
              return _context6.abrupt("return", _context6.sent);
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getPosX() {
        return _getPosX.apply(this, arguments);
      }
      return getPosX;
    }()
    /**
     * 获取对象的y坐标
     * @returns {Promise<number>} 返回当前对象的y坐标
     */
    )
  }, {
    key: "getPosY",
    value: (function () {
      var _getPosY = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context7.sent;
              _context7.next = 5;
              return this.GetPosY(fpdPageObj);
            case 5:
              return _context7.abrupt("return", _context7.sent);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getPosY() {
        return _getPosY.apply(this, arguments);
      }
      return getPosY;
    }()
    /**
     * 获取文本对象变换矩阵
     * @returns {Promise<Object>} 返回当前对象的文本矩阵
     */
    )
  }, {
    key: "getTextMatrix",
    value: (function () {
      var _getTextMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var fpdPageObj, outMatrix;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context8.sent;
              outMatrix = new FSAffineMatrix();
              _context8.next = 6;
              return this.GetTextMatrix(fpdPageObj, outMatrix);
            case 6:
              return _context8.abrupt("return", outMatrix === null || outMatrix === void 0 ? void 0 : outMatrix.value);
            case 7:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getTextMatrix() {
        return _getTextMatrix.apply(this, arguments);
      }
      return getTextMatrix;
    }()
    /**
     * 获取文本对象使用的字体
     * @returns {Promise<FPDFont>} 返回当前文本对象的字体对象
     */
    )
  }, {
    key: "getFont",
    value: (function () {
      var _getFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var fpdPageObj, result, font;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context9.sent;
              _context9.next = 5;
              return this.GetFont(fpdPageObj);
            case 5:
              result = _context9.sent;
              font = new FPDFont();
              font.set(result);
              return _context9.abrupt("return", font);
            case 9:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getFont() {
        return _getFont.apply(this, arguments);
      }
      return getFont;
    }()
    /**
     * 获取文本对象使用的字体大小
     * @returns {Promise<number>} 返回当前文本对象的字体大小
     */
    )
  }, {
    key: "getFontSize",
    value: (function () {
      var _getFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context10.sent;
              _context10.next = 5;
              return this.GetFontSize(fpdPageObj);
            case 5:
              return _context10.abrupt("return", _context10.sent);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getFontSize() {
        return _getFontSize.apply(this, arguments);
      }
      return getFontSize;
    }()
    /**
     * 设置文本对象为空
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setEmpty",
    value: (function () {
      var _setEmpty = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context11.sent;
              _context11.next = 5;
              return this.SetEmpty(fpdPageObj);
            case 5:
              return _context11.abrupt("return", _context11.sent);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setEmpty() {
        return _setEmpty.apply(this, arguments);
      }
      return setEmpty;
    }()
    /**
     * 设置文本对象文本
     * @param {string} text 文本对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setText",
    value: (function () {
      var _setText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(text) {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context12.sent;
              _context12.next = 5;
              return this.SetText(fpdPageObj, text);
            case 5:
              return _context12.abrupt("return", _context12.sent);
            case 6:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function setText(_x2) {
        return _setText.apply(this, arguments);
      }
      return setText;
    }()
    /**
     * 设置文本对象文本
     * @param {FSByteStringArray} textArr 文本对象数组
     * @param {FloatPointer} kerning
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    // async setText2(textArr: FSByteStringArray, kerning: FloatPointer): Promise<void> {
    // const fpdPageObj = await this._translateToFPDPageObject();
    //     return await this.SetText2(fpdPageObj, textArr, kerning);
    // }
    /**
     * 设置文本对象位置
     * @param {number} x x坐标
     * @param {number} y y坐标
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPosition",
    value: (function () {
      var _setPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(x, y) {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context13.sent;
              _context13.next = 5;
              return this.SetPosition(fpdPageObj, x, y);
            case 5:
              return _context13.abrupt("return", _context13.sent);
            case 6:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function setPosition(_x3, _x4) {
        return _setPosition.apply(this, arguments);
      }
      return setPosition;
    }()
    /**
     * 设置文本对象文本状态
     * @param {FPDTextState} textState 文本状态
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setTextState",
    value: (function () {
      var _setTextState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(textState) {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context14.sent;
              _context14.next = 5;
              return this.SetTextState(fpdPageObj, textState);
            case 5:
              return _context14.abrupt("return", _context14.sent);
            case 6:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function setTextState(_x5) {
        return _setTextState.apply(this, arguments);
      }
      return setTextState;
    }()
    /**
     * 转换函数
     * @param {Object} matrix - 一个包含六个数值的矩阵对象，用于创建新的FSAffineMatrix实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "transform",
    value: (function () {
      var _transform = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(matrix) {
        var fpdPageObj, _matrix;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context15.sent;
              _matrix = new FSAffineMatrix();
              _matrix.set({
                uuid: _matrix.uuid,
                value: matrix
              });
              _context15.next = 7;
              return this.Transform(fpdPageObj, _matrix);
            case 7:
              return _context15.abrupt("return", _context15.sent);
            case 8:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function transform(_x6) {
        return _transform.apply(this, arguments);
      }
      return transform;
    }()
    /**
     * 重新计算位置数据
     * @returns {Promise<void>} 无返回值，但使用Promise来表示异步操作
     */
    )
  }, {
    key: "reCalcPositionData",
    value: (function () {
      var _reCalcPositionData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context16.sent;
              _context16.next = 5;
              return this.RecalcPositionData(fpdPageObj);
            case 5:
              return _context16.abrupt("return", _context16.sent);
            case 6:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function reCalcPositionData() {
        return _reCalcPositionData.apply(this, arguments);
      }
      return reCalcPositionData;
    }()
    /**
     * 获取字符位置
     * @param {number} index 字符索引
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getCharRect",
    value: (function () {
      var _getCharRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(index) {
        var fpdPageObj, rect;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context17.sent;
              rect = new FSFloatPoint();
              _context17.next = 6;
              return this.GetCharRect(fpdPageObj, index, rect);
            case 6:
              return _context17.abrupt("return", rect === null || rect === void 0 ? void 0 : rect.value);
            case 7:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getCharRect(_x7) {
        return _getCharRect.apply(this, arguments);
      }
      return getCharRect;
    }()
    /**
     * 获取索引
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getIndex",
    value: (function () {
      var _getIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context18.sent;
              _context18.next = 5;
              return this.GetIndex(fpdPageObj);
            case 5:
              return _context18.abrupt("return", _context18.sent);
            case 6:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function getIndex() {
        return _getIndex.apply(this, arguments);
      }
      return getIndex;
    }()
    /**
     * 设置索引
     * @param {number} index
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "setIndex",
    value: (function () {
      var _setIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(index) {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context19.sent;
              _context19.next = 5;
              return this.SetIndex(fpdPageObj, index);
            case 5:
              return _context19.abrupt("return", _context19.sent);
            case 6:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function setIndex(_x8) {
        return _setIndex.apply(this, arguments);
      }
      return setIndex;
    }()
    /**
     * 创建中日韩字体
     * @param {string} fontName 字体名称，用于指定所需的中日韩字体
     * @param {number} fontsize 字体大小，以点为单位，用于定义字体的显示大小
     * @param {FPDDoc} pdfDoc 一个FPDDoc对象，代表PDF文档，用于关联新创建的字体与特定的PDF文档
     * @returns {Promise<FPDFont>}
     */
    )
  }, {
    key: "createCJKFont",
    value: (function () {
      var _createCJKFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(fontName, fontsize, pdfDoc) {
        var result, fpdFont;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.CreateCJKFont(fontName, fontsize, pdfDoc);
            case 2:
              result = _context20.sent;
              fpdFont = new FPDFont();
              fpdFont.set(result);
              return _context20.abrupt("return", fpdFont);
            case 6:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function createCJKFont(_x9, _x10, _x11) {
        return _createCJKFont.apply(this, arguments);
      }
      return createCJKFont;
    }()
    /**
     * 设置页面上的中日韩文本
     * @param {string} text 要设置的中日韩文本
     * @param {FPDFont} font 用于渲染文本的FPDFont对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setCJKText",
    value: (function () {
      var _setCJKText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(text, font) {
        var fpdPageObj;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this._translateToFPDPageObject();
            case 2:
              fpdPageObj = _context21.sent;
              _context21.next = 5;
              return this.SetCJKText(fpdPageObj, text, font);
            case 5:
              return _context21.abrupt("return", _context21.sent);
            case 6:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function setCJKText(_x12, _x13) {
        return _setCJKText.apply(this, arguments);
      }
      return setCJKText;
    }()
    /**
     * 将当前 FPDTextObject 对象转换为 FPDPageObject 对象。
     * @param {FPDTextObject} fpdTextObject - 要转换的 FPDTextObject 对象 (可选，默认为当前对象)
     * @private
     * @ignore
     * @returns {Promise<FPDPageObject>} - 转换后的 FPDPageObject 对象
     */
    )
  }, {
    key: "_translateToFPDPageObject",
    value: (function () {
      var _translateToFPDPageObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(fpdTextObject) {
        var fpdPageObject;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              fpdPageObject = new FPDPageObject();
              fpdPageObject.set(fpdTextObject || this);
              return _context22.abrupt("return", fpdPageObject);
            case 3:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function _translateToFPDPageObject(_x14) {
        return _translateToFPDPageObject2.apply(this, arguments);
      }
      return _translateToFPDPageObject;
    }())
  }]);
}(JSFPD_TextObject_V1);

function _callSuper$U(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$U() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$U() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$U = function _isNativeReflectConstruct() { return !!t; })(); }
var FSPtrArray = /*#__PURE__*/function (_JSFS_PtrArray_V) {
  function FSPtrArray() {
    _classCallCheck(this, FSPtrArray);
    return _callSuper$U(this, FSPtrArray, arguments);
  }
  _inherits(FSPtrArray, _JSFS_PtrArray_V);
  return _createClass(FSPtrArray, [{
    key: "new",
    value: (
    /**
     * 创建并返回一个新的FSPtrArray实例 (主要是底层同步new)
     * @returns {Promise<FSPtrArray>} 返回一个FSPtrArray实例
     */
    function () {
      var _new2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var result, ptrArr;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.New();
            case 2:
              result = _context.sent;
              ptrArr = new FSPtrArray();
              ptrArr.set(result);
              return _context.abrupt("return", ptrArr);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _new() {
        return _new2.apply(this, arguments);
      }
      return _new;
    }()
    /**
     * 销毁当前实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.Destroy(this);
            case 2:
              return _context2.abrupt("return", _context2.sent);
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取当前数组的长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.GetSize(this);
            case 2:
              return _context3.abrupt("return", _context3.sent);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 获取当前数组的某个元素
     * @param index 索引
     * @returns {Promise<JSLPVOID>} 元素根据具体类型，再行构造，eg. JSFPD_Bookmark_V1
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {
        var result, obj;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.GetAt(this, index);
            case 2:
              result = _context4.sent;
              obj = new JSLPVOID();
              obj.set(result);
              return _context4.abrupt("return", obj);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getAt(_x) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }())
  }]);
}(JSFS_PtrArray_V1);

var _enum = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get FHTML_WEB_ERROR_CODE () { return FHTML_WEB_ERROR_CODE; },
  get FPDOCSP_PROCESSTYPE () { return FPDOCSP_PROCESSTYPE; },
  get FPDXFA_ATTRIBUTEENUM () { return FPDXFA_ATTRIBUTEENUM; },
  get FPDXFA_ELEMENT () { return FPDXFA_ELEMENT; },
  get FPDXFA_EVENTTYPE () { return FPDXFA_EVENTTYPE; },
  get FPDXFA_WIDGETORDER () { return FPDXFA_WIDGETORDER; },
  get FPD_AActionType () { return FPD_AActionType; },
  get FPD_AFRelationship () { return FPD_AFRelationship; },
  get FPD_ActionType () { return FPD_ActionType; },
  get FPD_AnnotAppearanceMode () { return FPD_AnnotAppearanceMode; },
  get FPD_BookmarkFontStyle () { return FPD_BookmarkFontStyle; },
  get FPD_BookmarkPosition () { return FPD_BookmarkPosition; },
  get FPD_CADESLEVEL () { return FPD_CADESLEVEL; },
  get FPD_CHAINROOTVERITY_RESULT () { return FPD_CHAINROOTVERITY_RESULT; },
  get FPD_CHARTYPE () { return FPD_CHARTYPE; },
  get FPD_CHECKRESULT () { return FPD_CHECKRESULT; },
  get FPD_CertInfoType () { return FPD_CertInfoType; },
  get FPD_CertStatus () { return FPD_CertStatus; },
  get FPD_CertificateStatus () { return FPD_CertificateStatus; },
  get FPD_ColorSpaceAbbr () { return FPD_ColorSpaceAbbr; },
  get FPD_ColorantType () { return FPD_ColorantType; },
  get FPD_ConvertOption () { return FPD_ConvertOption; },
  get FPD_ConvertResult () { return FPD_ConvertResult; },
  get FPD_DigestAlgorithm () { return FPD_DigestAlgorithm; },
  get FPD_DownLoadStatus () { return FPD_DownLoadStatus; },
  get FPD_EM_CODEENCODING () { return FPD_EM_CODEENCODING; },
  get FPD_EXTRACT_STATE () { return FPD_EXTRACT_STATE; },
  get FPD_EngineType () { return FPD_EngineType; },
  get FPD_EntityType () { return FPD_EntityType; },
  get FPD_EnumColorSpace () { return FPD_EnumColorSpace; },
  get FPD_FINDTEMPLATETYPE () { return FPD_FINDTEMPLATETYPE; },
  get FPD_FORMOPERATYPE () { return FPD_FORMOPERATYPE; },
  get FPD_FlattenCompression () { return FPD_FlattenCompression; },
  get FPD_FlattenQuality () { return FPD_FlattenQuality; },
  get FPD_FormCtrlHighlightingMode () { return FPD_FormCtrlHighlightingMode; },
  get FPD_FormFieldType () { return FPD_FormFieldType; },
  get FPD_IconScaleMethod () { return FPD_IconScaleMethod; },
  get FPD_LTVState () { return FPD_LTVState; },
  get FPD_LTVTYPE () { return FPD_LTVTYPE; },
  get FPD_LineCap () { return FPD_LineCap; },
  get FPD_LineJoin () { return FPD_LineJoin; },
  get FPD_MODIFYTYPE () { return FPD_MODIFYTYPE; },
  get FPD_MarkItemParamType () { return FPD_MarkItemParamType; },
  get FPD_MediaPermission () { return FPD_MediaPermission; },
  get FPD_MediaPlayParamType () { return FPD_MediaPlayParamType; },
  get FPD_MediaPlayerType () { return FPD_MediaPlayerType; },
  get FPD_OBJECTTYPE () { return FPD_OBJECTTYPE; },
  get FPD_OCC_UsageType () { return FPD_OCC_UsageType; },
  get FPD_OCGState () { return FPD_OCGState; },
  get FPD_OCSPSTATUS () { return FPD_OCSPSTATUS; },
  get FPD_OCSPSTATUSTYPE () { return FPD_OCSPSTATUSTYPE; },
  get FPD_ObjectType () { return FPD_ObjectType; },
  get FPD_PERRESULT () { return FPD_PERRESULT; },
  get FPD_Preview () { return FPD_Preview; },
  get FPD_ProgressiveStatus () { return FPD_ProgressiveStatus; },
  get FPD_REOVACATIONTEXT () { return FPD_REOVACATIONTEXT; },
  get FPD_REVOCATION_TYPE () { return FPD_REVOCATION_TYPE; },
  get FPD_RenderingIntent () { return FPD_RenderingIntent; },
  get FPD_RequestResult () { return FPD_RequestResult; },
  get FPD_ResponseInfoLocation () { return FPD_ResponseInfoLocation; },
  get FPD_ResponseType () { return FPD_ResponseType; },
  get FPD_RevocationReason () { return FPD_RevocationReason; },
  get FPD_Show () { return FPD_Show; },
  get FPD_SigTimeType () { return FPD_SigTimeType; },
  get FPD_SignatureHandlerType () { return FPD_SignatureHandlerType; },
  get FPD_StructElementInfo () { return FPD_StructElementInfo; },
  get FPD_TIMETYPE () { return FPD_TIMETYPE; },
  get FPD_TraverseCommand () { return FPD_TraverseCommand; },
  get FPD_VERIFYTIMETYPE () { return FPD_VERIFYTIMETYPE; },
  get FPD_VRICreatedTimeType () { return FPD_VRICreatedTimeType; },
  get FPD_VerifyMode () { return FPD_VerifyMode; },
  get FPD_VerifyResult () { return FPD_VerifyResult; },
  get FRActionWizardExcuteStatus () { return FRActionWizardExcuteStatus; },
  get FRActionWizardLogType () { return FRActionWizardLogType; },
  get FRAnnotEventType () { return FRAnnotEventType; },
  get FRAsstEmojiType () { return FRAsstEmojiType; },
  get FRCHANGE_PERMISSON () { return FRCHANGE_PERMISSON; },
  get FRCommentsAnnotIconState () { return FRCommentsAnnotIconState; },
  get FRCreateDocSource () { return FRCreateDocSource; },
  get FRDECMFileDialogType () { return FRDECMFileDialogType; },
  get FRDOCVIEW_LAYOUTMODE () { return FRDOCVIEW_LAYOUTMODE; },
  get FRDOCVIEW_ZOOMTYPE () { return FRDOCVIEW_ZOOMTYPE; },
  get FRDirectoryType () { return FRDirectoryType; },
  get FREnhancementAlogrithms () { return FREnhancementAlogrithms; },
  get FRFMTribool () { return FRFMTribool; },
  get FRFORMAT_ALIGN () { return FRFORMAT_ALIGN; },
  get FRFormatToolArrangeAlignInfo () { return FRFormatToolArrangeAlignInfo; },
  get FRFormatToolArrangeCenterInfo () { return FRFormatToolArrangeCenterInfo; },
  get FRFormatToolArrangeDistributeInfo () { return FRFormatToolArrangeDistributeInfo; },
  get FRFormatToolArrangeInfo () { return FRFormatToolArrangeInfo; },
  get FRFormatToolContextCategoryType () { return FRFormatToolContextCategoryType; },
  get FRFormatToolWritingDirection () { return FRFormatToolWritingDirection; },
  get FRMSGIMPORTANCE () { return FRMSGIMPORTANCE; },
  get FRMessageBarElementAlignment () { return FRMessageBarElementAlignment; },
  get FRMessageBarIconType () { return FRMessageBarIconType; },
  get FROriginalDocType () { return FROriginalDocType; },
  get FRPDFA_PDFVersion () { return FRPDFA_PDFVersion; },
  get FRPRINT_PERMISSON () { return FRPRINT_PERMISSON; },
  get FRPROPERTITY_PERMISSON () { return FRPROPERTITY_PERMISSON; },
  get FRPermReqObj () { return FRPermReqObj; },
  get FRPermReqOpr () { return FRPermReqOpr; },
  get FRPermReqStatus () { return FRPermReqStatus; },
  get FRRSA_UNDOTYPE () { return FRRSA_UNDOTYPE; },
  get FRRS_PASSWORD () { return FRRS_PASSWORD; },
  get FRRibbonBackStageViewItemXMoveType () { return FRRibbonBackStageViewItemXMoveType; },
  get FRRibbonBackStageViewItemXSizeType () { return FRRibbonBackStageViewItemXSizeType; },
  get FRRibbonStyleButtonType () { return FRRibbonStyleButtonType; },
  get FRRibbonStyleFlatType () { return FRRibbonStyleFlatType; },
  get FRRibbonStyleImageSide () { return FRRibbonStyleImageSide; },
  get FRRibbonStyleTextAlignType () { return FRRibbonStyleTextAlignType; },
  get FRSIG_MODIFYDETECTOR_RESULT () { return FRSIG_MODIFYDETECTOR_RESULT; },
  get FRSIG_MODIFYDETECTOR_TYPE () { return FRSIG_MODIFYDETECTOR_TYPE; },
  get FRStatusBarLocation () { return FRStatusBarLocation; },
  get FRSubscriptionFlowName () { return FRSubscriptionFlowName; },
  get FRThreshAlogrithm () { return FRThreshAlogrithm; },
  get FR_AUTOCOMPLETECHOICE () { return FR_AUTOCOMPLETECHOICE; },
  get FR_ActionWizardItmeDataType () { return FR_ActionWizardItmeDataType; },
  get FR_AnnotMsgType () { return FR_AnnotMsgType; },
  get FR_ButtonStyleSkinMode () { return FR_ButtonStyleSkinMode; },
  get FR_CURSORSTYLE () { return FR_CURSORSTYLE; },
  get FR_Common_Control_Type () { return FR_Common_Control_Type; },
  get FR_ContentChangeType () { return FR_ContentChangeType; },
  get FR_ConvertMediaErrorType () { return FR_ConvertMediaErrorType; },
  get FR_FLOATBAR_SIDE () { return FR_FLOATBAR_SIDE; },
  get FR_FormatType () { return FR_FormatType; },
  get FR_ImportType () { return FR_ImportType; },
  get FR_JSActionReturn () { return FR_JSActionReturn; },
  get FR_JSProcType () { return FR_JSProcType; },
  get FR_LOG_LEVEL () { return FR_LOG_LEVEL; },
  get FR_MailtoResult () { return FR_MailtoResult; },
  get FR_MsgBtnType () { return FR_MsgBtnType; },
  get FR_MsgType () { return FR_MsgType; },
  get FR_OtherToPDF () { return FR_OtherToPDF; },
  get FR_PACKAGELANG () { return FR_PACKAGELANG; },
  get FR_PDFAccessibilityCheckerState () { return FR_PDFAccessibilityCheckerState; },
  get FR_PDFToOther () { return FR_PDFToOther; },
  get FR_PIECE_INFO_KEY () { return FR_PIECE_INFO_KEY; },
  get FR_PrintOrientationType () { return FR_PrintOrientationType; },
  get FR_RETYPE () { return FR_RETYPE; },
  get FR_RIBBON_LISTBUTTON_ALIGNEDSIDE () { return FR_RIBBON_LISTBUTTON_ALIGNEDSIDE; },
  get FR_Ribbon_Element_Type () { return FR_Ribbon_Element_Type; },
  get FR_SGToolMode () { return FR_SGToolMode; },
  get FR_SG_HANDLE () { return FR_SG_HANDLE; },
  get FR_SG_ICONTYPE () { return FR_SG_ICONTYPE; },
  get FR_SG_PERMISSION () { return FR_SG_PERMISSION; },
  get FR_SG_TEXTDIR () { return FR_SG_TEXTDIR; },
  get FR_SIGHTYPE () { return FR_SIGHTYPE; },
  get FR_SIG_MODIFYDETECTOR_RESULT () { return FR_SIG_MODIFYDETECTOR_RESULT; },
  get FR_SIG_MODIFYDETECTOR_TYPE () { return FR_SIG_MODIFYDETECTOR_TYPE; },
  get FR_SIG_TYPE () { return FR_SIG_TYPE; },
  get FR_SIG_UPDATESTATE () { return FR_SIG_UPDATESTATE; },
  get FR_SKINSTYLE () { return FR_SKINSTYLE; },
  get FR_STARTPAGETABTYPE () { return FR_STARTPAGETABTYPE; },
  get FR_SUPPORT_FILE_TYPE () { return FR_SUPPORT_FILE_TYPE; },
  get FR_ScanShowDialogType () { return FR_ScanShowDialogType; },
  get FR_ScanType () { return FR_ScanType; },
  get FR_TabOrder () { return FR_TabOrder; },
  get FR_TagPDF_PanelType () { return FR_TagPDF_PanelType; },
  get FR_WINDOW_CORNER_TYPE () { return FR_WINDOW_CORNER_TYPE; },
  get FSCODEC_IMAGE_TYPE () { return FSCODEC_IMAGE_TYPE; },
  get FSMONOALRITHEMETIC () { return FSMONOALRITHEMETIC; },
  get FS_APPMODE () { return FS_APPMODE; },
  get FS_BTNSTATE () { return FS_BTNSTATE; },
  get FS_Child_Type () { return FS_Child_Type; },
  get FS_CounterStyleType () { return FS_CounterStyleType; },
  get FS_DIB_Channel () { return FS_DIB_Channel; },
  get FS_DIB_Format () { return FS_DIB_Format; },
  get FS_DIB_IMAGE_TYPE () { return FS_DIB_IMAGE_TYPE; },
  get FS_DIB_RESUNIT () { return FS_DIB_RESUNIT; },
  get FS_GLOG_Type () { return FS_GLOG_Type; },
  get FS_ICCCs () { return FS_ICCCs; },
  get FS_ICCWorkingSpace () { return FS_ICCWorkingSpace; },
  get FS_ICONSIZE () { return FS_ICONSIZE; },
  get FS_IMAGE_TYPE () { return FS_IMAGE_TYPE; },
  get FS_JP2_Color_Space () { return FS_JP2_Color_Space; },
  get FS_JPEG_FORMAT () { return FS_JPEG_FORMAT; },
  get FS_ListStyleType () { return FS_ListStyleType; },
  get FS_PNG_FILTER () { return FS_PNG_FILTER; },
  get FS_PrefixSuffixType () { return FS_PrefixSuffixType; },
  get FS_ProgressiveJpx_EncodeStatus () { return FS_ProgressiveJpx_EncodeStatus; },
  get FS_ProgressiveStatus () { return FS_ProgressiveStatus; }
});

function _callSuper$T(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$T() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$T() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$T = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRAppEventCallbacks 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRAppEventCallbacks = /*#__PURE__*/function (_FR_AppEventCallbacks) {
  // 这里都需要手动调用super，写好AppEventCallbacksType，否则 TSdoc 不会正常生成
  function FRAppEventCallbacks(appEventCallbacks) {
    _classCallCheck(this, FRAppEventCallbacks);
    return _callSuper$T(this, FRAppEventCallbacks, [appEventCallbacks]);
  }
  _inherits(FRAppEventCallbacks, _FR_AppEventCallbacks);
  return _createClass(FRAppEventCallbacks);
}(FR_AppEventCallbacks);

function _callSuper$S(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$S() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$S() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$S = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRDocEventCallbacks 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRDocEventCallbacks = /*#__PURE__*/function (_FR_DocEventCallbacks) {
  // 这里都需要手动调用super，写好DocEventCallbacksType，否则 TSdoc 不会正常生成
  function FRDocEventCallbacks(docEventCallbacks) {
    _classCallCheck(this, FRDocEventCallbacks);
    return _callSuper$S(this, FRDocEventCallbacks, [docEventCallbacks]);
  }
  _inherits(FRDocEventCallbacks, _FR_DocEventCallbacks);
  return _createClass(FRDocEventCallbacks);
}(FR_DocEventCallbacks);

function _callSuper$R(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$R() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$R() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$R = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRContextMenuPopUpProcCallbacks 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRContextMenuPopUpProcCallbacks = /*#__PURE__*/function (_FRContextMenuPopUpPr) {
  // 这里都需要手动调用super，写好ContextMenuPopUpProcCallbacksType，否则 TSdoc 不会正常生成
  function FRContextMenuPopUpProcCallbacks(contextMenuPopUpProcCallbacks) {
    _classCallCheck(this, FRContextMenuPopUpProcCallbacks);
    return _callSuper$R(this, FRContextMenuPopUpProcCallbacks, [contextMenuPopUpProcCallbacks]);
  }
  _inherits(FRContextMenuPopUpProcCallbacks, _FRContextMenuPopUpPr);
  return _createClass(FRContextMenuPopUpProcCallbacks);
}(FRContextMenuPopUpProc);

function _callSuper$Q(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$Q() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$Q() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$Q = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRDocEventCallbacks 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRDocSaveProcCallbacks = /*#__PURE__*/function (_FR_DocSaveProc) {
  // 这里都需要手动调用super，写好DocSaveProcType，否则 TSdoc 不会正常生成
  function FRDocSaveProcCallbacks(docSaveProcCallbacks) {
    _classCallCheck(this, FRDocSaveProcCallbacks);
    return _callSuper$Q(this, FRDocSaveProcCallbacks, [docSaveProcCallbacks]);
  }
  _inherits(FRDocSaveProcCallbacks, _FR_DocSaveProc);
  return _createClass(FRDocSaveProcCallbacks);
}(FR_DocSaveProc);

function _callSuper$P(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$P() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$P() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$P = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRExecuteProc 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRExecuteProc = /*#__PURE__*/function (_FR_ExecuteProc) {
  // 这里都需要手动调用super，写好FRExecuteProcType，否则 TSdoc 不会正常生成
  function FRExecuteProc(frExecuteProc) {
    _classCallCheck(this, FRExecuteProc);
    return _callSuper$P(this, FRExecuteProc, [frExecuteProc]);
  }
  _inherits(FRExecuteProc, _FR_ExecuteProc);
  return _createClass(FRExecuteProc);
}(FRExecuteProc$1);

function _callSuper$O(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$O() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$O() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$O = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRComputeEnabledProc 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRComputeEnabledProc = /*#__PURE__*/function (_FR_ComputeEnabledPro) {
  // 这里都需要手动调用super，写好FRComputeEnabledProcType，否则 TSdoc 不会正常生成
  function FRComputeEnabledProc(frComputeEnabledProc) {
    _classCallCheck(this, FRComputeEnabledProc);
    return _callSuper$O(this, FRComputeEnabledProc, [frComputeEnabledProc]);
  }
  _inherits(FRComputeEnabledProc, _FR_ComputeEnabledPro);
  return _createClass(FRComputeEnabledProc);
}(FRComputeEnabledProc$1);

function _callSuper$N(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$N() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$N() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$N = function _isNativeReflectConstruct() { return !!t; })(); }
var JSLPVOID = /*#__PURE__*/function (_JS_LPVOID) {
  function JSLPVOID() {
    _classCallCheck(this, JSLPVOID);
    return _callSuper$N(this, JSLPVOID, arguments);
  }
  _inherits(JSLPVOID, _JS_LPVOID);
  return _createClass(JSLPVOID);
}(JSLPVOID$1);

function _callSuper$M(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$M() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$M() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$M = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRRibbonElementImageInitProc 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRRibbonElementImageInitProc = /*#__PURE__*/function (_FR_RibbonElementImag) {
  // 这里都需要手动调用super，写好FRRibbonElementImageInitProcType，否则 TSdoc 不会正常生成
  function FRRibbonElementImageInitProc(frRibbonElementImageInitProc) {
    _classCallCheck(this, FRRibbonElementImageInitProc);
    return _callSuper$M(this, FRRibbonElementImageInitProc, [frRibbonElementImageInitProc]);
  }
  /**
   * 重写 getCallbackParams，并将其标记为私有且忽略 Typedoc 文档生成。因为继承的类和高级接口类不太一样，高级接口类的返回值的类是高级类
   * @private
   * @ignore
   */
  _inherits(FRRibbonElementImageInitProc, _FR_RibbonElementImag);
  return _createClass(FRRibbonElementImageInitProc, [{
    key: "getCallbackParams",
    value: function getCallbackParams(key) {
      return {
        FRRibbonElementImageInitProc: [['ribbonElement', FRRibbonElement], ['clientData', JSLPVOID]]
      }[key] || [];
    }
  }]);
}(FRRibbonElementImageInitProc$1);

function _callSuper$L(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$L() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$L() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$L = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRContextMenuPopUpProcJsCallbacks 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRContextMenuPopUpProcJsCallbacks = /*#__PURE__*/function (_BaseCallbacks) {
  function FRContextMenuPopUpProcJsCallbacks(contextMenuPopUpProcJsCallbacks) {
    _classCallCheck(this, FRContextMenuPopUpProcJsCallbacks);
    return _callSuper$L(this, FRContextMenuPopUpProcJsCallbacks, [contextMenuPopUpProcJsCallbacks]);
  }
  _inherits(FRContextMenuPopUpProcJsCallbacks, _BaseCallbacks);
  return _createClass(FRContextMenuPopUpProcJsCallbacks);
}(BaseCallbacks);

var jskey2CppKey$2 = {
  type: 'nType',
  pathName: 'lpwStrPathName',
  page: 'nPage',
  text: 'lpwStrText',
  fontName: 'lpwStrFontName',
  fontSize: 'fFontSize',
  textColor: 'crText',
  rotation: 'nRotation',
  opacity: 'fOpacity',
  scale: 'fScale',
  top: 'bTop',
  verticalDistance: 'fVerticalDistance',
  verticalDistanceFrom: 'nVerticalDistanceFrom',
  horizontalDistance: 'fHorizontalDistance',
  horizontalDistanceFrom: 'nHorizontalDistanceFrom',
  start: 'nStart',
  end: 'nEnd',
  even: 'bEven',
  odd: 'bOdd',
  onScreen: 'bOnScreen',
  onPrint: 'bOnPrint',
  fixedPrint: 'bFixedPrint',
  percentage: 'bPercentage',
  pontUnit: 'bPontUnit',
  specifyWatermarkDicValue: 'lpbSpecifyWatermarkDicValue'
};

function _callSuper$K(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$K() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$K() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$K = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 WatemarkElementInfo 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRWatermarkElementInfo = /*#__PURE__*/function (_FR_WatemarkElementIn) {
  // 这里都需要手动调用super，写好FRWatermarkElementInfoType，否则 TSdoc 不会正常生成
  function FRWatermarkElementInfo(watermarkElementInfo) {
    _classCallCheck(this, FRWatermarkElementInfo);
    var _watermarkElementInfo = {};
    for (var key in watermarkElementInfo) {
      if (jskey2CppKey$2[key]) {
        _watermarkElementInfo[jskey2CppKey$2[key]] = watermarkElementInfo[key];
      }
      _watermarkElementInfo[key] = watermarkElementInfo[key];
    }
    return _callSuper$K(this, FRWatermarkElementInfo, [_watermarkElementInfo]);
  }
  _inherits(FRWatermarkElementInfo, _FR_WatemarkElementIn);
  return _createClass(FRWatermarkElementInfo);
}(FR_WatemarkElementInfo);

var jskey2CppKey$1 = {
  fontSize: 'fFontSize',
  underLine: 'bUnderLine',
  embed: 'bEmbed',
  strFontName: 'lpwStrFontName',
  textColor: 'clrText',
  top: 'ftop',
  left: 'fleft',
  bottom: 'fbottom',
  right: 'fright',
  shrink: 'bshrink',
  fixedPrint: 'bfixedprint',
  headerLeftText: 'lpwsHeaderLeft',
  headerRightText: 'lpwsHeaderRight',
  headerCenterText: 'lpwsHeaderCenter',
  footerLeftText: 'lpwsFooterLeft',
  footerRightText: 'lpwsFooterRight',
  footerCenterText: 'lpwsFooterCenter',
  start: 'nStart',
  end: 'nEnd',
  even: 'bEven',
  odd: 'bOdd',
  specifyHeaderFooterDicValue: 'lpbSpecifyHeaderFooterDicValue'
};

function _callSuper$J(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$J() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$J() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$J = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 WatemarkElementInfo 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRHeaderFooterElementInfo = /*#__PURE__*/function (_FR_HeaderFooterEleme) {
  // 这里都需要手动调用super，写好FRHeaderFooterElementInfoType，否则 TSdoc 不会正常生成
  function FRHeaderFooterElementInfo(headerFooterElementInfo) {
    _classCallCheck(this, FRHeaderFooterElementInfo);
    var _headerFooterElementInfo = {};
    for (var key in headerFooterElementInfo) {
      if (jskey2CppKey$1[key]) {
        _headerFooterElementInfo[jskey2CppKey$1[key]] = headerFooterElementInfo[key];
        continue;
      }
      _headerFooterElementInfo[key] = headerFooterElementInfo[key];
    }
    return _callSuper$J(this, FRHeaderFooterElementInfo, [_headerFooterElementInfo]);
  }
  _inherits(FRHeaderFooterElementInfo, _FR_HeaderFooterEleme);
  return _createClass(FRHeaderFooterElementInfo);
}(FR_HeaderFooterElementInfo);

var jskey2CppKey = {
  saveAsTempFile: 'bSaveAsTempFile',
  showProgressBar: 'bShowProgressBar',
  docPDFOptimizer: 'bDocPDFOptimizer',
  promptInfo: 'bPromptInfo'
};

function _callSuper$I(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$I() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$I() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$I = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FRSaveDocOption 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FRSaveDocOption = /*#__PURE__*/function (_FR_SaveDocOption) {
  // 这里都需要手动调用super，写好FRSaveDocOptionType，否则 TSdoc 不会正常生成
  function FRSaveDocOption(saveDocOption) {
    _classCallCheck(this, FRSaveDocOption);
    var _saveDocOption = {};
    for (var key in saveDocOption) {
      if (jskey2CppKey[key]) {
        _saveDocOption[jskey2CppKey[key]] = saveDocOption[key];
      }
      _saveDocOption[key] = saveDocOption[key];
    }
    return _callSuper$I(this, FRSaveDocOption, [_saveDocOption]);
  }
  _inherits(FRSaveDocOption, _FR_SaveDocOption);
  return _createClass(FRSaveDocOption);
}(FR_SaveDocOption);

function _callSuper$H(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$H() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$H() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$H = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 FPDBookmarkDestinationInfo 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FPDBookmarkDestinationInfo = /*#__PURE__*/function (_FPD_BookmarkDestinat) {
  // 这里都需要手动调用super，写好FRHeaderFooterElementInfoType，否则 TSdoc 不会正常生成
  function FPDBookmarkDestinationInfo(bookmarkDestinationInfo) {
    _classCallCheck(this, FPDBookmarkDestinationInfo);
    var _bookmarkDestinationInfo = {};
    for (var key in bookmarkDestinationInfo) {
      if (key === 'pageIndex') {
        _bookmarkDestinationInfo['page_index'] = bookmarkDestinationInfo[key];
        continue;
      }
      if (key === 'zoomFactor') {
        _bookmarkDestinationInfo['zoom_factor'] = bookmarkDestinationInfo[key];
        continue;
      }
      _bookmarkDestinationInfo[key] = bookmarkDestinationInfo[key];
    }
    return _callSuper$H(this, FPDBookmarkDestinationInfo, [_bookmarkDestinationInfo]);
  }
  _inherits(FPDBookmarkDestinationInfo, _FPD_BookmarkDestinat);
  return _createClass(FPDBookmarkDestinationInfo);
}(FPD_BookmarkDestinationInfo);

function _callSuper$G(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$G() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$G() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$G = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 bookmarkProperty 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var FPDBookmarkProperty = /*#__PURE__*/function (_FPD_BookmarkProperty) {
  // 这里都需要手动调用super，写好 FPDBookmarkPropertyType TSdoc 不会正常生成
  function FPDBookmarkProperty(bookmarkProperty) {
    _classCallCheck(this, FPDBookmarkProperty);
    return _callSuper$G(this, FPDBookmarkProperty, [bookmarkProperty]);
  }
  _inherits(FPDBookmarkProperty, _FPD_BookmarkProperty);
  return _createClass(FPDBookmarkProperty);
}(FPD_BookmarkProperty);

function _callSuper$F(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$F() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$F() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$F = function _isNativeReflectConstruct() { return !!t; })(); }
var FSByteString = /*#__PURE__*/function (_FS_ByteString) {
  function FSByteString() {
    _classCallCheck(this, FSByteString);
    return _callSuper$F(this, FSByteString, arguments);
  }
  _inherits(FSByteString, _FS_ByteString);
  return _createClass(FSByteString);
}(FS_ByteString);

function _callSuper$E(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$E() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$E() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$E = function _isNativeReflectConstruct() { return !!t; })(); }
var FSWideString = /*#__PURE__*/function (_FS_WideString) {
  function FSWideString() {
    _classCallCheck(this, FSWideString);
    return _callSuper$E(this, FSWideString, arguments);
  }
  _inherits(FSWideString, _FS_WideString);
  return _createClass(FSWideString);
}(FS_WideString);

function _callSuper$D(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$D() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$D() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$D = function _isNativeReflectConstruct() { return !!t; })(); }
var IntPointer$1 = /*#__PURE__*/function (_Int_Pointer) {
  function IntPointer() {
    _classCallCheck(this, IntPointer);
    return _callSuper$D(this, IntPointer, arguments);
  }
  _inherits(IntPointer, _Int_Pointer);
  return _createClass(IntPointer);
}(IntPointer$2);

function _callSuper$C(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$C() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$C() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$C = function _isNativeReflectConstruct() { return !!t; })(); }
var FileAttachmentInfo$1 = /*#__PURE__*/function (_JSFileAttachmentInfo) {
  function FileAttachmentInfo() {
    _classCallCheck(this, FileAttachmentInfo);
    return _callSuper$C(this, FileAttachmentInfo, arguments);
  }
  _inherits(FileAttachmentInfo, _JSFileAttachmentInfo);
  return _createClass(FileAttachmentInfo);
}(JSFileAttachmentInfo);

function _callSuper$B(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$B() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$B() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$B = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDFontEncoding = /*#__PURE__*/function (_JSFPD_FontEncoding_V) {
  function FPDFontEncoding() {
    _classCallCheck(this, FPDFontEncoding);
    return _callSuper$B(this, FPDFontEncoding, arguments);
  }
  _inherits(FPDFontEncoding, _JSFPD_FontEncoding_V);
  return _createClass(FPDFontEncoding);
}(JSFPD_FontEncoding_V1);

function _callSuper$A(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$A() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$A() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$A = function _isNativeReflectConstruct() { return !!t; })(); }
var POSITION$1 = /*#__PURE__*/function (_FS_POSITION) {
  function POSITION() {
    _classCallCheck(this, POSITION);
    return _callSuper$A(this, POSITION, arguments);
  }
  _inherits(POSITION, _FS_POSITION);
  return _createClass(POSITION);
}(FS_POSITION);

function _callSuper$z(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$z() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$z() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$z = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDCRT_DATETIMEZONE = /*#__PURE__*/function (_JS_FPDCRT_DATETIMEZO) {
  function FPDCRT_DATETIMEZONE() {
    _classCallCheck(this, FPDCRT_DATETIMEZONE);
    return _callSuper$z(this, FPDCRT_DATETIMEZONE, arguments);
  }
  _inherits(FPDCRT_DATETIMEZONE, _JS_FPDCRT_DATETIMEZO);
  return _createClass(FPDCRT_DATETIMEZONE);
}(JS_FPDCRT_DATETIMEZONE);

function _callSuper$y(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$y() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$y() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$y = function _isNativeReflectConstruct() { return !!t; })(); }
var FSFloatRect = /*#__PURE__*/function (_JSFS_FloatRect_V) {
  function FSFloatRect() {
    _classCallCheck(this, FSFloatRect);
    return _callSuper$y(this, FSFloatRect, arguments);
  }
  _inherits(FSFloatRect, _JSFS_FloatRect_V);
  return _createClass(FSFloatRect);
}(JSFS_FloatRect_V1);

function _callSuper$x(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$x() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$x() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$x = function _isNativeReflectConstruct() { return !!t; })(); }
var FSAffineMatrix = /*#__PURE__*/function (_JSFS_AffineMatrix_V) {
  function FSAffineMatrix() {
    _classCallCheck(this, FSAffineMatrix);
    return _callSuper$x(this, FSAffineMatrix, arguments);
  }
  _inherits(FSAffineMatrix, _JSFS_AffineMatrix_V);
  return _createClass(FSAffineMatrix);
}(JSFS_AffineMatrix_V1);

function _callSuper$w(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$w() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$w() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$w = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDPageObject = /*#__PURE__*/function (_JSFPD_PageObject_V) {
  function FPDPageObject() {
    _classCallCheck(this, FPDPageObject);
    return _callSuper$w(this, FPDPageObject, arguments);
  }
  _inherits(FPDPageObject, _JSFPD_PageObject_V);
  return _createClass(FPDPageObject);
}(JSFPD_PageObject_V1);

function _callSuper$v(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$v() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$v() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$v = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDParseOptions = /*#__PURE__*/function (_JSFPD_ParseOptions_V) {
  function FPDParseOptions() {
    _classCallCheck(this, FPDParseOptions);
    return _callSuper$v(this, FPDParseOptions, arguments);
  }
  _inherits(FPDParseOptions, _JSFPD_ParseOptions_V);
  return _createClass(FPDParseOptions);
}(JSFPD_ParseOptions_V1);

function _callSuper$u(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$u() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$u() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$u = function _isNativeReflectConstruct() { return !!t; })(); }
var FSDIBitmap = /*#__PURE__*/function (_JSFS_DIBitmap_V) {
  function FSDIBitmap() {
    _classCallCheck(this, FSDIBitmap);
    return _callSuper$u(this, FSDIBitmap, arguments);
  }
  _inherits(FSDIBitmap, _JSFS_DIBitmap_V);
  return _createClass(FSDIBitmap);
}(JSFS_DIBitmap_V1);

function _callSuper$t(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$t() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$t() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$t = function _isNativeReflectConstruct() { return !!t; })(); }
var FSFloatPoint = /*#__PURE__*/function (_JSFS_FloatPoint_V) {
  function FSFloatPoint() {
    _classCallCheck(this, FSFloatPoint);
    return _callSuper$t(this, FSFloatPoint, arguments);
  }
  _inherits(FSFloatPoint, _JSFS_FloatPoint_V);
  return _createClass(FSFloatPoint);
}(JSFS_FloatPoint_V1);

function _callSuper$s(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$s() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$s() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$s = function _isNativeReflectConstruct() { return !!t; })(); }
var FSRect = /*#__PURE__*/function (_JSFS_Rect_V) {
  function FSRect() {
    _classCallCheck(this, FSRect);
    return _callSuper$s(this, FSRect, arguments);
  }
  _inherits(FSRect, _JSFS_Rect_V);
  return _createClass(FSRect);
}(JSFS_Rect_V1);

function _callSuper$r(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$r() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$r() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$r = function _isNativeReflectConstruct() { return !!t; })(); }
var FSDevicePoint = /*#__PURE__*/function (_JSFS_DevicePoint_V) {
  function FSDevicePoint() {
    _classCallCheck(this, FSDevicePoint);
    return _callSuper$r(this, FSDevicePoint, arguments);
  }
  _inherits(FSDevicePoint, _JSFS_DevicePoint_V);
  return _createClass(FSDevicePoint);
}(JSFS_DevicePoint_V1);

function _callSuper$q(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$q() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$q() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$q = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDColor = /*#__PURE__*/function (_JSFPD_Color_V) {
  function FPDColor() {
    _classCallCheck(this, FPDColor);
    return _callSuper$q(this, FPDColor, arguments);
  }
  _inherits(FPDColor, _JSFPD_Color_V);
  return _createClass(FPDColor);
}(JSFPD_Color_V1);

function _callSuper$p(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$p() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$p() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$p = function _isNativeReflectConstruct() { return !!t; })(); }
var FPDColorSpace = /*#__PURE__*/function (_FPD_ColorSpace) {
  function FPDColorSpace() {
    _classCallCheck(this, FPDColorSpace);
    return _callSuper$p(this, FPDColorSpace, arguments);
  }
  _inherits(FPDColorSpace, _FPD_ColorSpace);
  return _createClass(FPDColorSpace);
}(FPD_ColorSpace);

function _callSuper$o(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$o() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$o() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$o = function _isNativeReflectConstruct() { return !!t; })(); }
var FloatPointer$1 = /*#__PURE__*/function (_JS_FloatPointer) {
  function FloatPointer() {
    _classCallCheck(this, FloatPointer);
    return _callSuper$o(this, FloatPointer, arguments);
  }
  _inherits(FloatPointer, _JS_FloatPointer);
  return _createClass(FloatPointer);
}(FloatPointer$2);

var PageTextSearch = /*#__PURE__*/function () {
  function PageTextSearch(options) {
    _classCallCheck(this, PageTextSearch);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pageTextSearch", void 0);
    if (_$1.isEmpty(options) || options.textPage === null || options.textPage.$textPage === null) {
      var _console;
      (_console = console).log.apply(_console, _toConsumableArray(j([{
        content: 'ERROR: Options must be provided',
        padding: '4px',
        fontSize: '14px',
        fontWeight: 600,
        color: '#fff',
        cursor: 'pointer',
        backgroundImage: n$1.red
      }])));
      throw new Error('Options must be provided');
    }
    this.options = options || {};
    this.$pageTextSearch = null;
  }
  /**
   * 创建PageTextSearch实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PageTextSearchType>}
   */
  return _createClass(PageTextSearch, [{
    key: "destroy",
    value: (
    /**
     * 销毁 PageTextSearch
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(this.$pageTextSearch === null || _$1.isEmpty(this.$pageTextSearch.value))) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.$pageTextSearch.destroy();
              this.$pageTextSearch = null;
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 创建一个 PageTextSearch 对象
     * @param {TextPageType} textPage
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "_createPageTextSearch",
    value: (function () {
      var _createPageTextSearch2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(textPage) {
        var pageTextSearch, fpdPageTextSearch;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(textPage === null || textPage.$textPage === null)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              pageTextSearch = new FPDTextPageFind();
              _context2.next = 5;
              return pageTextSearch.new(textPage.$textPage);
            case 5:
              fpdPageTextSearch = _context2.sent;
              this.$pageTextSearch = fpdPageTextSearch;
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _createPageTextSearch(_x) {
        return _createPageTextSearch2.apply(this, arguments);
      }
      return _createPageTextSearch;
    }()
    /**
     * 查找给定文本中的第一个匹配项
     * @param {string} text 要查找的文本
     * @param {flags} flags 查找标志，可能包括大小写敏感、全局查找等
     * @param {startPos} startPos 开始查找的位置
     * @returns {Promise<boolean>} 表示是否成功找到了匹配项
     */
    )
  }, {
    key: "findFirst",
    value: (function () {
      var _findFirst = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(text, flags, startPos) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.$pageTextSearch === null || _$1.isEmpty(this.$pageTextSearch.value))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", false);
            case 2:
              _context3.next = 4;
              return this.$pageTextSearch.findFirst(text, flags, startPos);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function findFirst(_x2, _x3, _x4) {
        return _findFirst.apply(this, arguments);
      }
      return findFirst;
    }()
    /**
     * 继续查找下一项
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "findNext",
    value: (function () {
      var _findNext = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(this.$pageTextSearch === null || _$1.isEmpty(this.$pageTextSearch.value))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", false);
            case 2:
              _context4.next = 4;
              return this.$pageTextSearch.findNext();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function findNext() {
        return _findNext.apply(this, arguments);
      }
      return findNext;
    }()
    /**
     * 继续查找上一项
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "findPrev",
    value: (function () {
      var _findPrev = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.$pageTextSearch === null || _$1.isEmpty(this.$pageTextSearch.value))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", false);
            case 2:
              _context5.next = 4;
              return this.$pageTextSearch.findPrev();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function findPrev() {
        return _findPrev.apply(this, arguments);
      }
      return findPrev;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options) {
        var _console2, instance;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(options) || options.textPage === null || options.textPage.$textPage === null)) {
                _context6.next = 3;
                break;
              }
              (_console2 = console).log.apply(_console2, _toConsumableArray(j([{
                content: 'ERROR: Options must be provided',
                padding: '4px',
                fontSize: '14px',
                fontWeight: 600,
                color: '#fff',
                cursor: 'pointer',
                backgroundImage: n$1.red
              }])));
              throw new Error('Options must be provided');
            case 3:
              instance = new this(options);
              _context6.next = 6;
              return instance._createPageTextSearch(options.textPage);
            case 6:
              return _context6.abrupt("return", instance);
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function create(_x5) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var TextPage = /*#__PURE__*/function () {
  function TextPage(options) {
    _classCallCheck(this, TextPage);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$textPage", void 0);
    this.options = options || {};
    this.$textPage = new FPDTextPage();
  }
  /**
   * 创建TextPage实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<TextPageType>}
   */
  return _createClass(TextPage, [{
    key: "destroy",
    value: (
    /**
     * 销毁TextPage对象
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.$textPage && this.$textPage.destroy();
              this.$textPage = null;
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 创建一个 PageTextSearch 对象
     * @param {TextPageType} textPage
     * @returns {Promise<PageTextSearchType>}
     */
    )
  }, {
    key: "createPageTextSearch",
    value: (function () {
      var _createPageTextSearch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var pageTextSearch;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return PageTextSearch.create({
                textPage: this
              });
            case 2:
              pageTextSearch = _context2.sent;
              return _context2.abrupt("return", pageTextSearch);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function createPageTextSearch() {
        return _createPageTextSearch.apply(this, arguments);
      }
      return createPageTextSearch;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              instance = new this(options);
              return _context3.abrupt("return", instance);
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Page = /*#__PURE__*/function () {
  function Page(options) {
    _classCallCheck(this, Page);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "textPage", void 0);
    _defineProperty(this, "$fpdPage", void 0);
    this.options = options || {};
    this.$fpdPage = null;
    this.textPage = null;
  }
  /**
   * 创建Page实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PageType>}
   */
  return _createClass(Page, [{
    key: "destroy",
    value: (
    /**
     * 销毁Page对象
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.$fpdPage && this.$fpdPage.destroy();
              this.$fpdPage = null;
              this.textPage = null;
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 新建一个底层数据的FPDPage对象
     * @private
     * @ignore
     * @returns {Promise<FPDPage>}
     */
    )
  }, {
    key: "_createFPDPage",
    value: (function () {
      var _createFPDPage2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _fpdPage, fpdPage;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _fpdPage = new FPDPage();
              _context2.next = 3;
              return _fpdPage.new();
            case 3:
              fpdPage = _context2.sent;
              this.$fpdPage = fpdPage;
              return _context2.abrupt("return", fpdPage);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _createFPDPage() {
        return _createFPDPage2.apply(this, arguments);
      }
      return _createFPDPage;
    }()
    /**
     * 获取当前页面的边界框
     * @returns {Promise<Rect>} 解析为包含页面边界框的 Rect
     */
    )
  }, {
    key: "getBound",
    value: (function () {
      var _getBound = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var rect;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.$fpdPage === null || _$1.isEmpty(this.$fpdPage.value))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context3.next = 4;
              return this.$fpdPage.getPageBBox();
            case 4:
              rect = _context3.sent;
              return _context3.abrupt("return", rect);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getBound() {
        return _getBound.apply(this, arguments);
      }
      return getBound;
    }()
    /**
     * 获取文本页面对象
     * @param {number} flags 文本顺序或者显示的顺序, 0 为文本顺序，1 为显示顺序， 默认为0
     * const FPD_TEXT_STREAM_ORDER = 0; 文本顺序
     * const FPD_TEXT_DISPLAY_ORDER = 1; 显示顺序
     * @returns {Promise<TextPageType | null>} TextPageType实例或null
     */
    )
  }, {
    key: "getTextPage",
    value: (function () {
      var _getTextPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var flags,
          textPage,
          fpdTextPage,
          _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              flags = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 0;
              if (!(this.$fpdPage === null || _$1.isEmpty(this.$fpdPage.value))) {
                _context4.next = 3;
                break;
              }
              return _context4.abrupt("return", null);
            case 3:
              textPage = this.textPage;
              if (!(textPage === null || textPage.$textPage === null)) {
                _context4.next = 8;
                break;
              }
              _context4.next = 7;
              return TextPage.create();
            case 7:
              textPage = _context4.sent;
            case 8:
              if (!(textPage.$textPage === null)) {
                _context4.next = 10;
                break;
              }
              return _context4.abrupt("return", null);
            case 10:
              _context4.next = 12;
              return textPage.$textPage.new(this.$fpdPage, flags);
            case 12:
              fpdTextPage = _context4.sent;
              _context4.next = 15;
              return fpdTextPage.parseTextPage();
            case 15:
              textPage.$textPage = fpdTextPage;
              return _context4.abrupt("return", textPage);
            case 17:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getTextPage() {
        return _getTextPage.apply(this, arguments);
      }
      return getTextPage;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              instance = new this(options);
              _context5.next = 3;
              return instance._createFPDPage();
            case 3:
              return _context5.abrupt("return", instance);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PageView = /*#__PURE__*/function () {
  function PageView(options) {
    _classCallCheck(this, PageView);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "doc", void 0);
    _defineProperty(this, "docView", void 0);
    _defineProperty(this, "page", void 0);
    _defineProperty(this, "$frPageView", void 0);
    this.options = options || {};
    this.doc = null;
    this.docView = null;
    this.page = null;
    this.$frPageView = new FRPageView();
  }
  /**
   * 创建PageView实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PageViewType>}
   */
  return _createClass(PageView, [{
    key: "destroy",
    value: (
    /**
     * 销毁$frDocView对象
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.$frPageView = null;
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 将设备矩形转换为页面矩形
     * @param {Rect} deviceRect 设备矩形
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "deviceRectToPage",
    value: (function () {
      var _deviceRectToPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(deviceRect) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context2.next = 4;
              return this.$frPageView.deviceRectToPage(deviceRect);
            case 4:
              return _context2.abrupt("return", _context2.sent);
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function deviceRectToPage(_x) {
        return _deviceRectToPage.apply(this, arguments);
      }
      return deviceRectToPage;
    }()
    /**
     * 将页面矩形转换为设备矩形
     * @param {Rect} pageRect 待转换的矩形
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "rectToDevice",
    value: (function () {
      var _rectToDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(pageRect) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context3.next = 4;
              return this.$frPageView.rectToDevice(pageRect);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function rectToDevice(_x2) {
        return _rectToDevice.apply(this, arguments);
      }
      return rectToDevice;
    }()
    /**
     * 获取当前矩阵
     * @returns {Promise<Matrix>}
     */
    )
  }, {
    key: "getCurrentMatrix",
    value: (function () {
      var _getCurrentMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", {
                a: Infinity,
                b: Infinity,
                c: Infinity,
                d: Infinity,
                e: Infinity,
                f: Infinity
              });
            case 2:
              _context4.next = 4;
              return this.$frPageView.getCurrentMatrix();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getCurrentMatrix() {
        return _getCurrentMatrix.apply(this, arguments);
      }
      return getCurrentMatrix;
    }()
    /**
     * 获取文档
     * @returns {Promise<DocType | null>}
     */
    )
  }, {
    key: "getDoc",
    value: (function () {
      var _getDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var frDoc, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$frPageView.getDocument();
            case 4:
              frDoc = _context5.sent;
              _context5.next = 7;
              return frDoc.getPDDoc();
            case 7:
              fpdDoc = _context5.sent;
              if (!(this.doc === null || this.doc.$frDoc === null || _$1.isEmpty(this.doc.$frDoc.value))) {
                _context5.next = 12;
                break;
              }
              _context5.next = 11;
              return Doc.create();
            case 11:
              this.doc = _context5.sent;
            case 12:
              this.doc.$frDoc = frDoc;
              this.doc.$fpdDoc = fpdDoc;
              return _context5.abrupt("return", this.doc);
            case 15:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getDoc() {
        return _getDoc.apply(this, arguments);
      }
      return getDoc;
    }()
    /**
     * 获取文档视图
     * @returns {Promise<DocViewType | null>}
     */
    )
  }, {
    key: "getDocView",
    value: (function () {
      var _getDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var frDocView;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", null);
            case 2:
              _context6.next = 4;
              return this.$frPageView.getDocView();
            case 4:
              frDocView = _context6.sent;
              if (!(this.docView === null || this.docView.$frDocView === null || _$1.isEmpty(this.docView.$frDocView.value))) {
                _context6.next = 9;
                break;
              }
              _context6.next = 8;
              return DocView.create();
            case 8:
              this.docView = _context6.sent;
            case 9:
              this.docView.$frDocView = frDocView;
              return _context6.abrupt("return", this.docView);
            case 11:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getDocView() {
        return _getDocView.apply(this, arguments);
      }
      return getDocView;
    }()
    /**
     * 获取页码
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageIndex",
    value: (function () {
      var _getPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", -1);
            case 2:
              _context7.next = 4;
              return this.$frPageView.getPageIndex();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getPageIndex() {
        return _getPageIndex.apply(this, arguments);
      }
      return getPageIndex;
    }()
    /**
     * 获取当前页面的矩形
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "getPageRect",
    value: (function () {
      var _getPageRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var rect;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context8.next = 4;
              return this.$frPageView.getPageRect();
            case 4:
              rect = _context8.sent;
              return _context8.abrupt("return", rect);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getPageRect() {
        return _getPageRect.apply(this, arguments);
      }
      return getPageRect;
    }()
    /**
     * 获取当前页面的可见区域
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "getPageVisibleRect",
    value: (function () {
      var _getPageVisibleRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var rect;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context9.next = 4;
              return this.$frPageView.getPageVisibleRect();
            case 4:
              rect = _context9.sent;
              return _context9.abrupt("return", rect);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getPageVisibleRect() {
        return _getPageVisibleRect.apply(this, arguments);
      }
      return getPageVisibleRect;
    }()
    /**
     * 获取当前页面的缩放比例
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageScale",
    value: (function () {
      var _getPageScale = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var scale;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", -1);
            case 2:
              _context10.next = 4;
              return this.$frPageView.getPageScale();
            case 4:
              scale = _context10.sent;
              return _context10.abrupt("return", scale);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getPageScale() {
        return _getPageScale.apply(this, arguments);
      }
      return getPageScale;
    }()
    /**
     * 获取PDF page
     * @returns {Promise<PageType | null>}
     */
    )
  }, {
    key: "getPage",
    value: (function () {
      var _getPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var page, fpdPage, index, pageObj, parser;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!(this.doc === null || this.doc.$fpdDoc === null || _$1.isEmpty(this.doc.$fpdDoc.value))) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return", null);
            case 2:
              if (!(this.$frPageView === null || _$1.isEmpty(this.$frPageView.value))) {
                _context11.next = 4;
                break;
              }
              return _context11.abrupt("return", null);
            case 4:
              page = this.page;
              if (!(page === null || page.$fpdPage === null || _$1.isEmpty(page.$fpdPage.value))) {
                _context11.next = 9;
                break;
              }
              _context11.next = 8;
              return Page.create();
            case 8:
              page = _context11.sent;
            case 9:
              _context11.next = 11;
              return this.$frPageView.getPDPage();
            case 11:
              fpdPage = _context11.sent;
              _context11.next = 14;
              return this.getPageIndex();
            case 14:
              index = _context11.sent;
              _context11.next = 17;
              return this.doc.$fpdDoc.getPage(index);
            case 17:
              pageObj = _context11.sent;
              _context11.next = 20;
              return fpdPage.load({
                doc: this.doc.$fpdDoc,
                pageDict: pageObj,
                pageCache: true
              });
            case 20:
              _context11.next = 22;
              return fpdPage.isParsed();
            case 22:
              parser = _context11.sent;
              if (parser) {
                _context11.next = 26;
                break;
              }
              _context11.next = 26;
              return fpdPage.parseContent(new FPDParseOptions());
            case 26:
              page.$fpdPage = fpdPage;
              this.page = page;
              return _context11.abrupt("return", page);
            case 29:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getPage() {
        return _getPage.apply(this, arguments);
      }
      return getPage;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              instance = new this(options);
              return _context12.abrupt("return", instance);
            case 2:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function create(_x3) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Deg = {
  DEG_0: 0,
  DEG_90: 90,
  DEG_180: 180,
  DEG_270: 270
};
var Rotation;
(function (Rotation) {
  Rotation[Rotation["DEG_0"] = Deg.DEG_0] = "DEG_0";
  Rotation[Rotation["DEG_90"] = Deg.DEG_90] = "DEG_90";
  Rotation[Rotation["DEG_180"] = Deg.DEG_180] = "DEG_180";
  Rotation[Rotation["DEG_270"] = Deg.DEG_270] = "DEG_270";
})(Rotation || (Rotation = {}));

var DocView = /*#__PURE__*/function () {
  function DocView(options) {
    _classCallCheck(this, DocView);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "doc", void 0);
    _defineProperty(this, "$frDocView", void 0);
    this.options = options || {};
    this.$frDocView = new FRDocView();
    this.doc = null;
  }
  /**
   * 创建DocView实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<DocViewType>}
   */
  return _createClass(DocView, [{
    key: "destroy",
    value: (
    /**
     * 销毁$frDocView对象
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.$frDocView = null;
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取文档对象
     * @returns {Promise<DocType | null>} doc对象
     */
    )
  }, {
    key: "getDoc",
    value: (function () {
      var _getDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var frDoc, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.doc === null || this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$frDocView.getDocument();
            case 4:
              frDoc = _context2.sent;
              if (!(frDoc === null || _$1.isEmpty(frDoc.value))) {
                _context2.next = 7;
                break;
              }
              return _context2.abrupt("return", null);
            case 7:
              _context2.next = 9;
              return frDoc.getPDDoc();
            case 9:
              fpdDoc = _context2.sent;
              this.doc.$frDoc = frDoc;
              this.doc.$fpdDoc = fpdDoc;
              return _context2.abrupt("return", this.doc);
            case 13:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getDoc() {
        return _getDoc.apply(this, arguments);
      }
      return getDoc;
    }()
    /**
     * 获取pageView个数
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPageViewCount",
    value: (function () {
      var _getPageViewCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", 0);
            case 2:
              _context3.next = 4;
              return this.$frDocView.countPageViews();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getPageViewCount() {
        return _getPageViewCount.apply(this, arguments);
      }
      return getPageViewCount;
    }()
    /**
     * 获取pageView
     * @param {number} index 索引
     * @returns {Promise<PageView | null>}
     */
    )
  }, {
    key: "getPageView",
    value: (function () {
      var _getPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {
        var frPageView, pageView;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", null);
            case 2:
              _context4.next = 4;
              return this.$frDocView.getPageView(index);
            case 4:
              frPageView = _context4.sent;
              if (!_$1.isEmpty(frPageView.value)) {
                _context4.next = 7;
                break;
              }
              return _context4.abrupt("return", null);
            case 7:
              _context4.next = 9;
              return PageView.create();
            case 9:
              pageView = _context4.sent;
              pageView.$frPageView = frPageView;
              pageView.doc = this.doc;
              pageView.docView = this;
              return _context4.abrupt("return", pageView);
            case 14:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPageView(_x) {
        return _getPageView.apply(this, arguments);
      }
      return getPageView;
    }()
    /**
     * 根据坐标获取pageView
     * @param point 坐标
     * @returns {Promise<PageView | null>}
     */
    )
  }, {
    key: "getPageViewAtPoint",
    value: (function () {
      var _getPageViewAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(point) {
        var frPageView, pageView;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$frDocView.getPageViewAtPoint(point);
            case 4:
              frPageView = _context5.sent;
              if (!_$1.isEmpty(frPageView.value)) {
                _context5.next = 7;
                break;
              }
              return _context5.abrupt("return", null);
            case 7:
              _context5.next = 9;
              return PageView.create();
            case 9:
              pageView = _context5.sent;
              pageView.$frPageView = frPageView;
              pageView.doc = this.doc;
              pageView.docView = this;
              return _context5.abrupt("return", pageView);
            case 14:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getPageViewAtPoint(_x2) {
        return _getPageViewAtPoint.apply(this, arguments);
      }
      return getPageViewAtPoint;
    }()
    /**
     * 根据索引获取可见的pageView
     * @param {number} index 索引
     * @returns {Promise<PageView | null>}
     */
    )
  }, {
    key: "getVisiblePageView",
    value: (function () {
      var _getVisiblePageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(index) {
        var frPageView, pageView;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", null);
            case 2:
              _context6.next = 4;
              return this.$frDocView.getVisiblePageView(index);
            case 4:
              frPageView = _context6.sent;
              if (!_$1.isEmpty(frPageView.value)) {
                _context6.next = 7;
                break;
              }
              return _context6.abrupt("return", null);
            case 7:
              _context6.next = 9;
              return PageView.create();
            case 9:
              pageView = _context6.sent;
              pageView.$frPageView = frPageView;
              pageView.doc = this.doc;
              pageView.docView = this;
              return _context6.abrupt("return", pageView);
            case 14:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getVisiblePageView(_x3) {
        return _getVisiblePageView.apply(this, arguments);
      }
      return getVisiblePageView;
    }()
    /**
     * 跳转至指定页
     * @param {number} index 页码
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "gotoPageView",
    value: (function () {
      var _gotoPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$frDocView.gotoPageView(index);
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function gotoPageView(_x4) {
        return _gotoPageView.apply(this, arguments);
      }
      return gotoPageView;
    }()
    /**
     * 转到指定页面，将页面视图滚动到左侧指定的位置
     * @param {number} index 页码
     * @param {Point} point 坐标
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "gotoPageViewByPoint",
    value: (function () {
      var _gotoPageViewByPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index, point) {
        var left, top;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return");
            case 2:
              left = point.x;
              top = point.y;
              _context8.next = 6;
              return this.$frDocView.gotoPageViewByPoint({
                index: index,
                left: left,
                top: top
              });
            case 6:
              return _context8.abrupt("return", _context8.sent);
            case 7:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function gotoPageViewByPoint(_x5, _x6) {
        return _gotoPageViewByPoint.apply(this, arguments);
      }
      return gotoPageViewByPoint;
    }()
    /**
     * 跳转至指定页的指定矩形区域
     * @param {number} index 页码
     * @param {Object} rect 矩形区域
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "gotoPageViewByRect",
    value: (function () {
      var _gotoPageViewByRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index, rect) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return");
            case 2:
              _context9.next = 4;
              return this.$frDocView.gotoPageViewByRect(index, rect);
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function gotoPageViewByRect(_x7, _x8) {
        return _gotoPageViewByRect.apply(this, arguments);
      }
      return gotoPageViewByRect;
    }()
    /**
     * 获取当前页
     * @returns {Promise<PageView | null>}
     */
    )
  }, {
    key: "getCurrentPageView",
    value: (function () {
      var _getCurrentPageView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var frPageView, pageView;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", null);
            case 2:
              _context10.next = 4;
              return this.$frDocView.getCurrentPageView();
            case 4:
              frPageView = _context10.sent;
              if (!_$1.isEmpty(frPageView.value)) {
                _context10.next = 7;
                break;
              }
              return _context10.abrupt("return", null);
            case 7:
              _context10.next = 9;
              return PageView.create();
            case 9:
              pageView = _context10.sent;
              pageView.$frPageView = frPageView;
              pageView.doc = this.doc;
              pageView.docView = this;
              return _context10.abrupt("return", pageView);
            case 14:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getCurrentPageView() {
        return _getCurrentPageView.apply(this, arguments);
      }
      return getCurrentPageView;
    }()
    /**
     * 获取旋转角度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getRotation",
    value: (function () {
      var _getRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return", 0);
            case 2:
              _context11.next = 4;
              return this.$frDocView.getRotation();
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getRotation() {
        return _getRotation.apply(this, arguments);
      }
      return getRotation;
    }()
    /**
     * 设置旋转角度
     * @param {Rotation} rotation 旋转角度
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setRotation",
    value: (function () {
      var _setRotation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(rotation) {
        var _console;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return");
            case 2:
              if (Object.values(Deg).includes(rotation)) {
                _context12.next = 5;
                break;
              }
              (_console = console).log.apply(_console, _toConsumableArray(j([{
                content: "ERROR: rotation is not in: ".concat(Object.values(Deg)),
                padding: '4px',
                fontSize: '14px',
                fontWeight: 600,
                color: '#fff',
                cursor: 'pointer',
                backgroundImage: n$1.red
              }])));
              return _context12.abrupt("return");
            case 5:
              _context12.next = 7;
              return this.$frDocView.setRotation(rotation);
            case 7:
              return _context12.abrupt("return", _context12.sent);
            case 8:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function setRotation(_x9) {
        return _setRotation.apply(this, arguments);
      }
      return setRotation;
    }()
    /**
     * 获取Layout模式
     * @returns {Promise<Enum.FRDOCVIEW_LAYOUTMODE>} 返回值包含如下：
     *  FR_LAYOUTMODE_SINGLE = 0,
     *  FR_LAYOUTMODE_CONTINUOUS = 1,
     *  FR_LAYOUTMODE_FACING = 2,
     *  FR_LAYOUTMODE_CONTINUOUS_FACING = 3,
     *  FR_LAYOUTMODE_AUTOMATIC = 4,
     */
    )
  }, {
    key: "getLayoutMode",
    value: (function () {
      var _getLayoutMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return", Infinity);
            case 2:
              _context13.next = 4;
              return this.$frDocView.getLayoutMode();
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getLayoutMode() {
        return _getLayoutMode.apply(this, arguments);
      }
      return getLayoutMode;
    }()
    /**
     * 设置Layout模式
     * @param {Enum.FRDOCVIEW_LAYOUTMODE} mode 模式
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setLayoutMode",
    value: (function () {
      var _setLayoutMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(mode) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return");
            case 2:
              _context14.next = 4;
              return this.$frDocView.setLayoutMode(mode);
            case 4:
              return _context14.abrupt("return", _context14.sent);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function setLayoutMode(_x10) {
        return _setLayoutMode.apply(this, arguments);
      }
      return setLayoutMode;
    }()
    /**
     * 获取缩放比例
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getZoom",
    value: (function () {
      var _getZoom = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context15.next = 2;
                break;
              }
              return _context15.abrupt("return", Infinity);
            case 2:
              _context15.next = 4;
              return this.$frDocView.getZoom();
            case 4:
              return _context15.abrupt("return", _context15.sent);
            case 5:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getZoom() {
        return _getZoom.apply(this, arguments);
      }
      return getZoom;
    }()
    /**
     * 获取缩放类型
     * @returns {Promise<Enum.FRDOCVIEW_ZOOMTYPE>} 返回值包含如下：
     * FR_ZOOM_MODE_NONE = 0,
     *  FR_ZOOM_MODE_ACTUAL_SCALE = 1,
     *  FR_ZOOM_MODE_ACTUAL_SIZE = 2,
     *  FR_ZOOM_MODE_FIT_PAGE = 3,
     *  FR_ZOOM_MODE_FIT_WIDTH = 4,
     *  FR_ZOOM_MODE_FIT_HEIGHT = 5,
     *  FR_ZOOM_MODE_FIT_RECTANGLE = 6,
     *  FR_ZOOM_MODE_FIT_VISIBLE = 7,
     *  FR_ZOOM_MODE_AUTOMATIC = 8,
     */
    )
  }, {
    key: "getZoomType",
    value: (function () {
      var _getZoomType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context16.next = 2;
                break;
              }
              return _context16.abrupt("return", Infinity);
            case 2:
              _context16.next = 4;
              return this.$frDocView.getZoomType();
            case 4:
              return _context16.abrupt("return", _context16.sent);
            case 5:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getZoomType() {
        return _getZoomType.apply(this, arguments);
      }
      return getZoomType;
    }()
    /**
     * 缩放至
     * @param {number} scale 比例
     * @param {Enum.FRDOCVIEW_ZOOMTYPE} mode 缩放类型 可选，默认为当前模式
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "zoomTo",
    value: (function () {
      var _zoomTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(scale, mode) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context17.next = 2;
                break;
              }
              return _context17.abrupt("return");
            case 2:
              _context17.next = 4;
              return this.$frDocView.zoomTo(scale, mode);
            case 4:
              return _context17.abrupt("return", _context17.sent);
            case 5:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function zoomTo(_x11, _x12) {
        return _zoomTo.apply(this, arguments);
      }
      return zoomTo;
    }()
    /**
     * 跳转至上一位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "goBack",
    value: (function () {
      var _goBack = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context18.next = 2;
                break;
              }
              return _context18.abrupt("return");
            case 2:
              _context18.next = 4;
              return this.$frDocView.goBack();
            case 4:
              return _context18.abrupt("return", _context18.sent);
            case 5:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function goBack() {
        return _goBack.apply(this, arguments);
      }
      return goBack;
    }()
    /**
     * 跳转至下一位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "goForward",
    value: (function () {
      var _goForward = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              if (!(this.$frDocView === null || _$1.isEmpty(this.$frDocView.value))) {
                _context19.next = 2;
                break;
              }
              return _context19.abrupt("return");
            case 2:
              _context19.next = 4;
              return this.$frDocView.goForward();
            case 4:
              return _context19.abrupt("return", _context19.sent);
            case 5:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function goForward() {
        return _goForward.apply(this, arguments);
      }
      return goForward;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              instance = new this(options);
              return _context20.abrupt("return", instance);
            case 2:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function create(_x13) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

function decToHex(decColor) {
  var hexColor = decColor.toString(16);
  // 如果十六进制颜色值不足6位，补全
  while (hexColor.length < 6) {
    hexColor = '0' + hexColor;
  }
  return '#' + hexColor;
}

var Bookmark = /*#__PURE__*/function () {
  function Bookmark(options) {
    _classCallCheck(this, Bookmark);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$bookMark", void 0);
    this.options = options || {};
    this.$bookMark = new FPDBookmark();
  }
  /**
   * 创建Bookmark实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<BookmarkType>}
   */
  return _createClass(Bookmark, [{
    key: "destroy",
    value: (
    /**
     * 销毁 Bookmark
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.$bookMark.destroy();
              this.$bookMark = null;
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 插入书签
     * @param {FPDDoc} doc - 文档对象，表示要插入书签的文档
     * @param {string} title - 书签的标题
     * @param {BookmarkDestinationInfoType} dest - 书签的目的地信息，定义了书签点击时跳转到的位置
     * @param {Enum.FPD_BookmarkPosition} position - 书签的位置，相对于其他书签的枚举值
     * @returns {Promise<Bookmark | null>} 返回一个承诺，解析为新插入的FPDBookmark对象
     */
    )
  }, {
    key: "insertChild",
    value: (function () {
      var _insertChild = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {
        var doc, title, dest, position, fpdBookMark, bookmark;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              doc = _ref.doc, title = _ref.title, dest = _ref.dest, position = _ref.position;
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context2.next = 3;
                break;
              }
              return _context2.abrupt("return", null);
            case 3:
              if (!(doc === null || doc.$fpdDoc === null || _$1.isEmpty(doc.$fpdDoc.value))) {
                _context2.next = 5;
                break;
              }
              return _context2.abrupt("return", null);
            case 5:
              _context2.next = 7;
              return this.$bookMark.insertBookmark({
                doc: doc.$fpdDoc,
                title: title,
                dest: dest,
                position: position
              });
            case 7:
              fpdBookMark = _context2.sent;
              _context2.next = 10;
              return Bookmark.create();
            case 10:
              bookmark = _context2.sent;
              bookmark.$bookMark = fpdBookMark;
              return _context2.abrupt("return", bookmark);
            case 13:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function insertChild(_x) {
        return _insertChild.apply(this, arguments);
      }
      return insertChild;
    }()
    /**
     * 获取文档的书签子元素数组
     * @param {FPDDoc} doc FPDDoc类型的文档对象，代表要操作的文档
     * @returns {Promise<Array<Bookmark>>}
     */
    )
  }, {
    key: "children",
    value: (function () {
      var _children = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(doc) {
        var ptrArray, childrenArr, len, i, _child, bookMarkChild, child;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", []);
            case 2:
              if (!(doc === null || doc.$fpdDoc === null || _$1.isEmpty(doc.$fpdDoc.value))) {
                _context3.next = 4;
                break;
              }
              return _context3.abrupt("return", []);
            case 4:
              _context3.next = 6;
              return this.$bookMark.getChildren(doc.$fpdDoc);
            case 6:
              ptrArray = _context3.sent;
              childrenArr = [];
              _context3.next = 10;
              return ptrArray.getSize();
            case 10:
              len = _context3.sent;
              i = 0;
            case 12:
              if (!(i < len)) {
                _context3.next = 26;
                break;
              }
              _context3.next = 15;
              return ptrArray.getAt(i);
            case 15:
              _child = _context3.sent;
              bookMarkChild = new FPDBookmark();
              bookMarkChild.set(_child);
              _context3.next = 20;
              return Bookmark.create();
            case 20:
              child = _context3.sent;
              child.$bookMark = bookMarkChild;
              childrenArr.push(child);
            case 23:
              i++;
              _context3.next = 12;
              break;
            case 26:
              ptrArray.destroy();
              return _context3.abrupt("return", childrenArr);
            case 28:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function children(_x2) {
        return _children.apply(this, arguments);
      }
      return children;
    }()
    /**
     * 设置书签属性
     * @param {DocType} doc 代表当前操作的PDF文档
     * @param {BookmarkPropertyType} property BookmarkPropertyType 类型的对象，包含要设置的书签属性
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setProperty",
    value: (function () {
      var _setProperty = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(doc, property) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              if (!(doc === null || doc.$fpdDoc === null || _$1.isEmpty(doc.$fpdDoc.value))) {
                _context4.next = 4;
                break;
              }
              return _context4.abrupt("return");
            case 4:
              _context4.next = 6;
              return this.$bookMark.setProperty(doc.$fpdDoc, property);
            case 6:
              return _context4.abrupt("return", _context4.sent);
            case 7:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setProperty(_x3, _x4) {
        return _setProperty.apply(this, arguments);
      }
      return setProperty;
    }()
    /**
     * 获取书签的目标。
     * @param {FPDDoc} DocType - 当前文档对象
     * @returns {Promise<FPDDest | null>}
     */
    )
  }, {
    key: "destination",
    value: (function () {
      var _destination = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(doc) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              if (!(doc === null || doc.$fpdDoc === null || _$1.isEmpty(doc.$fpdDoc.value))) {
                _context5.next = 4;
                break;
              }
              return _context5.abrupt("return", null);
            case 4:
              _context5.next = 6;
              return this.$bookMark.getDest(doc.$fpdDoc);
            case 6:
              return _context5.abrupt("return", _context5.sent);
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function destination(_x5) {
        return _destination.apply(this, arguments);
      }
      return destination;
    }()
    /**
     * 获取书签颜色。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "color",
    value: (function () {
      var _color = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var decColor;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", '');
            case 2:
              _context6.next = 4;
              return this.$bookMark.getColorRef();
            case 4:
              decColor = _context6.sent;
              return _context6.abrupt("return", decToHex(decColor));
            case 6:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function color() {
        return _color.apply(this, arguments);
      }
      return color;
    }()
    /**
     * 获取书签的标题。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "title",
    value: (function () {
      var _title = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", '');
            case 2:
              _context7.next = 4;
              return this.$bookMark.getTitle();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function title() {
        return _title.apply(this, arguments);
      }
      return title;
    }()
    /**
     * 获取书签的字体样式。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "fontStyle",
    value: (function () {
      var _fontStyle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", -1);
            case 2:
              _context8.next = 4;
              return this.$bookMark.getFontStyle();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function fontStyle() {
        return _fontStyle.apply(this, arguments);
      }
      return fontStyle;
    }()
    /**
     * 删除书签。
     * @param {FPDDoc} doc - 当前文档对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeBookmark",
    value: (function () {
      var _removeBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(doc) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(this.$bookMark === null || _$1.isEmpty(this.$bookMark.value))) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return");
            case 2:
              if (!(doc === null || doc.$fpdDoc === null || _$1.isEmpty(doc.$fpdDoc.value))) {
                _context9.next = 4;
                break;
              }
              return _context9.abrupt("return");
            case 4:
              _context9.next = 6;
              return this.$bookMark.deleteBookmark(doc.$fpdDoc);
            case 6:
              return _context9.abrupt("return", _context9.sent);
            case 7:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function removeBookmark(_x6) {
        return _removeBookmark.apply(this, arguments);
      }
      return removeBookmark;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              instance = new this(options);
              return _context10.abrupt("return", instance);
            case 2:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function create(_x7) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Doc = /*#__PURE__*/function () {
  function Doc(options) {
    _classCallCheck(this, Doc);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$frDoc", void 0);
    _defineProperty(this, "$fpdDoc", void 0);
    this.options = options || {};
    this.$frDoc = new FRDoc();
    this.$fpdDoc = null;
  }
  return _createClass(Doc, [{
    key: "_getFpdDoc",
    value: function () {
      var _getFpdDoc2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var fpdDoc;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (this.$frDoc === null) {
                this.$frDoc = new FRDoc();
              }
              if (!_$1.isEmpty(this.$frDoc.value)) {
                _context.next = 4;
                break;
              }
              // const fpdDoc = await this._createFPDDoc();
              this.$fpdDoc = null;
              return _context.abrupt("return", null);
            case 4:
              _context.next = 6;
              return this.$frDoc.getPDDoc();
            case 6:
              fpdDoc = _context.sent;
              this.$fpdDoc = fpdDoc;
              return _context.abrupt("return", fpdDoc);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _getFpdDoc() {
        return _getFpdDoc2.apply(this, arguments);
      }
      return _getFpdDoc;
    }()
    /**
     * 新建一个底层数据的doc对象
     * @private
     * @ignore
     * @returns {Promise<FPDDoc>}
     */
    // private async _createFPDDoc(): Promise<FPDDoc> {
    //     const _fpdDoc = new FPDDoc();
    //     const fpdDoc = await _fpdDoc.new();
    //     this.$fpdDoc = fpdDoc;
    //     return fpdDoc;
    // }
    /**
     * 创建Doc实例。
     * @param {Options} options 所需的配置选项，包含必要的初始化信息。
     * @returns {Promise<DocType>}
     */
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁doc对象
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = this.$fpdDoc;
              if (!_context2.t0) {
                _context2.next = 4;
                break;
              }
              _context2.next = 4;
              return this.$fpdDoc.destroy();
            case 4:
              this.$frDoc = null;
              this.$fpdDoc = null;
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 打开文件 (私有函数，不建议直接调用，而是通过App调用)
     * @param {OpenFromFileOptions} options 打开文档参数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "_openFromFile",
    value: (function () {
      var _openFromFile2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {
        var frDoc, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context3.next = 4;
                break;
              }
              _context3.next = 3;
              return new FRDoc();
            case 3:
              this.$frDoc = _context3.sent;
            case 4:
              _context3.next = 6;
              return this.$frDoc.openFromFile(options);
            case 6:
              frDoc = _context3.sent;
              _context3.next = 9;
              return frDoc.getPDDoc();
            case 9:
              fpdDoc = _context3.sent;
              this.$frDoc = frDoc;
              this.$fpdDoc = fpdDoc;
            case 12:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function _openFromFile(_x) {
        return _openFromFile2.apply(this, arguments);
      }
      return _openFromFile;
    }()
    /**
     * 关闭doc对象
     * @param {CloseOptions} options 关闭参数, 默认值：{promptToSave: true, showCancel: true}
     * @returns {Promise<boolean>} 关闭结果
     */
    )
  }, {
    key: "close",
    value: (function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var options,
          state,
          _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {
                promptToSave: true,
                showCancel: true
              };
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context4.next = 3;
                break;
              }
              return _context4.abrupt("return", false);
            case 3:
              _context4.next = 5;
              return this.$frDoc.close(options);
            case 5:
              state = _context4.sent;
              this.$frDoc = null;
              this.$fpdDoc = null;
              return _context4.abrupt("return", state);
            case 9:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
    /**
     * 获取文件名
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getFileName",
    value: (function () {
      var _getFileName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", '');
            case 2:
              _context5.next = 4;
              return this.$frDoc.getFileName();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getFileName() {
        return _getFileName.apply(this, arguments);
      }
      return getFileName;
    }()
    /**
     * 文档另存为
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "doSaveAs",
    value: (function () {
      var _doSaveAs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$frDoc.doSaveAs();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function doSaveAs() {
        return _doSaveAs.apply(this, arguments);
      }
      return doSaveAs;
    }()
    /**
     * 打印文档
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "doPrint",
    value: (function () {
      var _doPrint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$frDoc.doPrint();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function doPrint() {
        return _doPrint.apply(this, arguments);
      }
      return doPrint;
    }()
    /**
     * 按pages起始页数打印文档
     * @param firstPage 起始页下标 0 开始
     * @param lastPage 结束页下标 0 开始
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "printPages",
    value: (function () {
      var _printPages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(firstPage, lastPage) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return");
            case 2:
              _context8.next = 4;
              return this.$frDoc.printPages(firstPage, lastPage);
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function printPages(_x2, _x3) {
        return _printPages.apply(this, arguments);
      }
      return printPages;
    }()
    /**
     * 设置打印，将显示系统打印对话框
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "printSetup",
    value: (function () {
      var _printSetup = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return");
            case 2:
              _context9.next = 4;
              return this.$frDoc.printSetup();
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function printSetup() {
        return _printSetup.apply(this, arguments);
      }
      return printSetup;
    }()
    /**
     * 获取文档分割视图数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getDocViewCount",
    value: (function () {
      var _getDocViewCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", 0);
            case 2:
              _context10.next = 4;
              return this.$frDoc.countDocViews();
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getDocViewCount() {
        return _getDocViewCount.apply(this, arguments);
      }
      return getDocViewCount;
    }()
    /**
     * 获取文档视图
     * @param viewIndex 索引
     * @returns {Promise<DocViewType | null>}
     */
    )
  }, {
    key: "getDocView",
    value: (function () {
      var _getDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(viewIndex) {
        var frDocView, docView;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return", null);
            case 2:
              _context11.next = 4;
              return this.$frDoc.getDocView(viewIndex);
            case 4:
              frDocView = _context11.sent;
              if (!_$1.isEmpty(frDocView.value)) {
                _context11.next = 7;
                break;
              }
              return _context11.abrupt("return", null);
            case 7:
              _context11.next = 9;
              return DocView.create();
            case 9:
              docView = _context11.sent;
              docView.$frDocView = frDocView;
              // 将当前Doc挂载到docView上，以方便docView获取当前文档对象
              // 后续 docView的接口如果改为通过底层获取，则删除
              docView.doc = this;
              return _context11.abrupt("return", docView);
            case 13:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getDocView(_x4) {
        return _getDocView.apply(this, arguments);
      }
      return getDocView;
    }()
    /**
     * 获取当前文档视图
     * @returns {Promise<DocViewType | null>}
     */
    )
  }, {
    key: "getCurrentDocView",
    value: (function () {
      var _getCurrentDocView = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var frDocView, docView;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", null);
            case 2:
              _context12.next = 4;
              return this.$frDoc.getCurrentDocView();
            case 4:
              frDocView = _context12.sent;
              if (!_$1.isEmpty(frDocView.value)) {
                _context12.next = 7;
                break;
              }
              return _context12.abrupt("return", null);
            case 7:
              _context12.next = 9;
              return DocView.create();
            case 9:
              docView = _context12.sent;
              docView.$frDocView = frDocView;
              // 将当前Doc挂载到docView上，以方便docView获取当前文档对象
              // 后续 docView的接口如果改为通过底层获取，则删除
              docView.doc = this;
              return _context12.abrupt("return", docView);
            case 13:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getCurrentDocView() {
        return _getCurrentDocView.apply(this, arguments);
      }
      return getCurrentDocView;
    }()
    /**
     * 获取文档权限
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPermissions",
    value: (function () {
      var _getPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return", Infinity);
            case 2:
              _context13.next = 4;
              return this.$frDoc.getPermissions();
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getPermissions() {
        return _getPermissions.apply(this, arguments);
      }
      return getPermissions;
    }()
    /**
     * 设置文档权限
     * @param permission 权限值 (FR_PERM_PRINT, FR_PERM_MODIFY_CONTENT, FR_PERM_EXTRACT_COPY, FR_PERM_EXTRACT_ACCESS, FR_PERM_ANNOTATE, FR_PERM_FILL_FORM, FR_PERM_ASSEMBLE, FR_PERM_PRINT_HIGN)
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPermissions",
    value: (function () {
      var _setPermissions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(permission) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return");
            case 2:
              _context14.next = 4;
              return this.$frDoc.setPermissions(permission);
            case 4:
              return _context14.abrupt("return", _context14.sent);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function setPermissions(_x5) {
        return _setPermissions.apply(this, arguments);
      }
      return setPermissions;
    }()
    /**
     * 静默打印文档
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "doPrintSilently",
    value: (function () {
      var _doPrintSilently = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context15.next = 2;
                break;
              }
              return _context15.abrupt("return");
            case 2:
              _context15.next = 4;
              return this.$frDoc.doPrintSilently();
            case 4:
              return _context15.abrupt("return", _context15.sent);
            case 5:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function doPrintSilently() {
        return _doPrintSilently.apply(this, arguments);
      }
      return doPrintSilently;
    }()
    /**
     * 清除文档修改标记
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "clearChangeMark",
    value: (function () {
      var _clearChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context16.next = 2;
                break;
              }
              return _context16.abrupt("return");
            case 2:
              _context16.next = 4;
              return this.$frDoc.clearChangeMark();
            case 4:
              return _context16.abrupt("return", _context16.sent);
            case 5:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function clearChangeMark() {
        return _clearChangeMark.apply(this, arguments);
      }
      return clearChangeMark;
    }()
    /**
     * 设置文档修改标记
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setChangeMark",
    value: (function () {
      var _setChangeMark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context17.next = 2;
                break;
              }
              return _context17.abrupt("return");
            case 2:
              _context17.next = 4;
              return this.$frDoc.setChangeMark();
            case 4:
              return _context17.abrupt("return", _context17.sent);
            case 5:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function setChangeMark() {
        return _setChangeMark.apply(this, arguments);
      }
      return setChangeMark;
    }()
    /**
     * 获取文档修改标记
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isDocModify",
    value: (function () {
      var _isDocModify = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context18.next = 2;
                break;
              }
              return _context18.abrupt("return", false);
            case 2:
              _context18.next = 4;
              return this.$frDoc.getChangeMark();
            case 4:
              return _context18.abrupt("return", _context18.sent);
            case 5:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function isDocModify() {
        return _isDocModify.apply(this, arguments);
      }
      return isDocModify;
    }()
    /**
     * 添加页眉页脚 不会更新文档视图
     * @param headerFooterInfo 页眉页脚设置信息
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "addHeaderFooter",
    value: (function () {
      var _addHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(headerFooterInfo) {
        var info;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context19.next = 2;
                break;
              }
              return _context19.abrupt("return", false);
            case 2:
              info = {
                fFontSize: headerFooterInfo.fontSize,
                bUnderLine: headerFooterInfo.underLine,
                bEmbed: headerFooterInfo.embed,
                lpwStrFontName: headerFooterInfo.fontName,
                clrText: headerFooterInfo.text,
                ftop: headerFooterInfo.top,
                fleft: headerFooterInfo.left,
                fbottom: headerFooterInfo.bottom,
                fright: headerFooterInfo.right,
                bshrink: headerFooterInfo.shrink,
                bfixedprint: headerFooterInfo.fixedPrint,
                lpwsHeaderLeft: headerFooterInfo.headerLeft,
                lpwsHeaderRight: headerFooterInfo.headerRight,
                lpwsHeaderCenter: headerFooterInfo.headerCenter,
                lpwsFooterLeft: headerFooterInfo.footerLeft,
                lpwsFooterRight: headerFooterInfo.footerRight,
                lpwsFooterCenter: headerFooterInfo.footerCenter,
                nStart: headerFooterInfo.start,
                nEnd: headerFooterInfo.end,
                bEven: headerFooterInfo.even,
                bOdd: headerFooterInfo.odd,
                lpbSpecifyHeaderFooterDicValue: headerFooterInfo.specifyHeaderFooterDicValue
              }; // 过滤掉值为 undefined 的属性
              Object.keys(info).forEach(function (key) {
                if (info[key] === undefined) {
                  delete info[key];
                }
              });
              _context19.next = 6;
              return this.$frDoc.addHeaderFooter(info);
            case 6:
              return _context19.abrupt("return", _context19.sent);
            case 7:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function addHeaderFooter(_x6) {
        return _addHeaderFooter.apply(this, arguments);
      }
      return addHeaderFooter;
    }()
    /**
     * 移除页眉页脚 不会更新文档视图
     * @param {string} specifyHeaderFooterDicValue 指定水印的 DictValue
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "removeHeaderFooter",
    value: (function () {
      var _removeHeaderFooter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(specifyHeaderFooterDicValue) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context20.next = 2;
                break;
              }
              return _context20.abrupt("return", false);
            case 2:
              _context20.next = 4;
              return this.$frDoc.removeHeaderFooter(specifyHeaderFooterDicValue);
            case 4:
              _context20.next = 6;
              return _context20.sent;
            case 6:
              return _context20.abrupt("return", _context20.sent);
            case 7:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function removeHeaderFooter(_x7) {
        return _removeHeaderFooter.apply(this, arguments);
      }
      return removeHeaderFooter;
    }()
    /**
     * 添加水印 不会更新文档视图
     * @param watermarkInfo 水印设置信息
     * @returns {Promise<boolean>} 1 成功 0 失败
     */
    )
  }, {
    key: "addWatermark",
    value: (function () {
      var _addWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(watermarkInfo) {
        var info;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context21.next = 2;
                break;
              }
              return _context21.abrupt("return", false);
            case 2:
              info = {
                nType: watermarkInfo.type,
                lpwStrPathName: watermarkInfo.pathName,
                nPage: watermarkInfo.page,
                lpwStrText: watermarkInfo.strText,
                lpwStrFontName: watermarkInfo.fontName,
                fFontSize: watermarkInfo.fontSize,
                crText: watermarkInfo.crText,
                nRotation: watermarkInfo.rotation,
                fOpacity: watermarkInfo.opacity,
                fScale: watermarkInfo.scale,
                bTop: watermarkInfo.top,
                fVerticalDistance: watermarkInfo.verticalDistance,
                nVerticalDistanceFrom: watermarkInfo.verticalDistanceFrom,
                fHorizontalDistance: watermarkInfo.horizontalDistance,
                nHorizontalDistanceFrom: watermarkInfo.horizontalDistanceFrom,
                nStart: watermarkInfo.start,
                nEnd: watermarkInfo.end,
                bEven: watermarkInfo.even,
                bOdd: watermarkInfo.odd,
                bOnScreen: watermarkInfo.onScreen,
                bOnPrint: watermarkInfo.onPrint,
                bFixedPrint: watermarkInfo.fixedPrint,
                bPercentage: watermarkInfo.percentage,
                bPontUnit: watermarkInfo.pontUnit,
                lpbSpecifyWatermarkDicValue: watermarkInfo.specifyWatermarkDicValue
              }; // 过滤掉值为 undefined 的属性
              Object.keys(info).forEach(function (key) {
                if (info[key] === undefined) {
                  delete info[key];
                }
              });
              _context21.next = 6;
              return this.$frDoc.addWatermark(info);
            case 6:
              _context21.next = 8;
              return _context21.sent;
            case 8:
              return _context21.abrupt("return", _context21.sent);
            case 9:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function addWatermark(_x8) {
        return _addWatermark.apply(this, arguments);
      }
      return addWatermark;
    }()
    /**
     * 移除水印 不会更新文档视图
     * @param {string} specifyWatermarkDicValue 指定水印的 DictValue
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "removeWatermark",
    value: (function () {
      var _removeWatermark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(specifyWatermarkDicValue) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context22.next = 2;
                break;
              }
              return _context22.abrupt("return", false);
            case 2:
              _context22.next = 4;
              return this.$frDoc.removeWatermark(specifyWatermarkDicValue);
            case 4:
              _context22.next = 6;
              return _context22.sent;
            case 6:
              return _context22.abrupt("return", _context22.sent);
            case 7:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function removeWatermark(_x9) {
        return _removeWatermark.apply(this, arguments);
      }
      return removeWatermark;
    }()
    /**
     * 获取指定页的Page对象
     * @param index 页码 文从0开始的索引
     * @returns {Promise<PageType | null>}
     */
    )
  }, {
    key: "getPage",
    value: (function () {
      var _getPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(index) {
        var docView, pageView;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.getCurrentDocView();
            case 2:
              docView = _context23.sent;
              if (!(docView === null || docView.$frDocView === null || _$1.isEmpty(docView.$frDocView.value))) {
                _context23.next = 5;
                break;
              }
              return _context23.abrupt("return", null);
            case 5:
              _context23.next = 7;
              return docView.getPageView(index);
            case 7:
              pageView = _context23.sent;
              if (!(pageView === null || pageView.$frPageView === null || _$1.isEmpty(pageView.$frPageView.value))) {
                _context23.next = 10;
                break;
              }
              return _context23.abrupt("return", null);
            case 10:
              _context23.next = 12;
              return pageView.getPage();
            case 12:
              return _context23.abrupt("return", _context23.sent);
            case 13:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function getPage(_x10) {
        return _getPage.apply(this, arguments);
      }
      return getPage;
    }()
    /**
     * 重新加载指定页面，用于刷新页面视图
     * @param pageIndex 指定的页面索引
     * @param disableGoto 是否阻止进入指定页面视图。底层默认设置为 false
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "reloadPage",
    value: (function () {
      var _reloadPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(pageIndex) {
        var disableGoto,
          _args24 = arguments;
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              disableGoto = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : false;
              if (!_$1.isEmpty(this.$frDoc)) {
                _context24.next = 3;
                break;
              }
              return _context24.abrupt("return", false);
            case 3:
              _context24.next = 5;
              return this.$frDoc.reloadPage(pageIndex, disableGoto);
            case 5:
              return _context24.abrupt("return", _context24.sent);
            case 6:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
      function reloadPage(_x11) {
        return _reloadPage.apply(this, arguments);
      }
      return reloadPage;
    }()
    /**
     * 获取根书签
     * @returns {Promise<BookmarkType | null>}
     */
    )
  }, {
    key: "getRootBookmark",
    value: (function () {
      var _getRootBookmark = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {
        var fpdBookMark, bookmark;
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              if (!(this.$fpdDoc === null || _$1.isEmpty(this.$fpdDoc.value))) {
                _context25.next = 2;
                break;
              }
              return _context25.abrupt("return", null);
            case 2:
              _context25.next = 4;
              return this.$fpdDoc.getRootBookmark();
            case 4:
              fpdBookMark = _context25.sent;
              _context25.next = 7;
              return Bookmark.create();
            case 7:
              bookmark = _context25.sent;
              bookmark.$bookMark = fpdBookMark;
              return _context25.abrupt("return", bookmark);
            case 10:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
      function getRootBookmark() {
        return _getRootBookmark.apply(this, arguments);
      }
      return getRootBookmark;
    }()
    /**
     * 调整页面大小
     * @param {ResizePageOptions} options
     * @returns {Promise<boolean>} 表示调整页面大小的操作是否成功
     */
    )
  }, {
    key: "resizePage",
    value: (function () {
      var _resizePage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(options) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              if (!(this.$frDoc === null || _$1.isEmpty(this.$frDoc.value))) {
                _context26.next = 2;
                break;
              }
              return _context26.abrupt("return", false);
            case 2:
              _context26.next = 4;
              return this.$frDoc.resizePage(options);
            case 4:
              return _context26.abrupt("return", _context26.sent);
            case 5:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
      function resizePage(_x12) {
        return _resizePage.apply(this, arguments);
      }
      return resizePage;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              instance = new this(options);
              _context27.next = 3;
              return instance._getFpdDoc();
            case 3:
              return _context27.abrupt("return", instance);
            case 4:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
      function create(_x13) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

function _callSuper$n(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$n() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$n() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$n = function _isNativeReflectConstruct() { return !!t; })(); }
var LPVOID = /*#__PURE__*/function (_JSLPVOID) {
  function LPVOID() {
    var _this;
    _classCallCheck(this, LPVOID);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper$n(this, LPVOID, [].concat(args));
    _defineProperty(_this, "$object", void 0);
    return _this;
  }
  _inherits(LPVOID, _JSLPVOID);
  return _createClass(LPVOID, null, [{
    key: "create",
    value: (
    /**
     * 创建 LPVOID 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<LPVOID>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(JSLPVOID);

var RibbonElement = /*#__PURE__*/function () {
  function RibbonElement(options) {
    _classCallCheck(this, RibbonElement);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$ribbonElement", void 0);
    this.options = options || {};
    this.$ribbonElement = new FRRibbonElement();
  }
  /**
   * 创建 RibbonElement 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<RibbonBarType>}
   */
  return _createClass(RibbonElement, [{
    key: "destroy",
    value: (
    /**
     * 销毁 RibbonElement
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonElement)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.$ribbonElement = null;
              return _context.abrupt("return");
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 添加子项到特定的元素类型中
     * @param {AddSubItemType} subItem 添加子项的选项, 包含以下属性
     *  @param {Enum.FR_Ribbon_Element_Type} elementType 子项的类型，决定了子项在界面上的显示方式
     *  @param {string} name 子项的唯一名称，用于内部识别
     *  @param {string} title 子项的标题，是用户在界面上看到的显示文本
     *  @param {number} pos 子项的位置，决定了它在父元素中的排列顺序
     *  @param {boolean} isOnTop 是否在顶部显示，true 表示子项将会在父元素的顶部显示
     *  @param {boolean} isChangeFun 是否改变功能，true 表示此子项的选择将改变父元素的功能
     *  @param {boolean} isChangeImage 是否改变图像，true 表示此子项的选择将改变父元素的图像
     * @returns {Promise<LPVOID | null>}
     */
    )
  }, {
    key: "addSubItem",
    value: (function () {
      var _addSubItem = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(subItem) {
        var jsLPVOID, lpvoid;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonElement)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$ribbonElement.addSubItem(subItem);
            case 4:
              jsLPVOID = _context2.sent;
              _context2.next = 7;
              return LPVOID.create();
            case 7:
              lpvoid = _context2.sent;
              lpvoid.set(jsLPVOID);
              return _context2.abrupt("return", lpvoid);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function addSubItem(_x) {
        return _addSubItem.apply(this, arguments);
      }
      return addSubItem;
    }()
    /**
     * 设置执行过程
     * @param {ExecuteProcType} proc - 描述执行过程的回调函数，用于创建 FRExecuteProc 实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setExecuteProc",
    value: (function () {
      var _setExecuteProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(proc) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_$1.isEmpty(this.$ribbonElement) || _$1.isEmpty(proc))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return");
            case 2:
              _context3.next = 4;
              return this.$ribbonElement.setExecuteProc(proc);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function setExecuteProc(_x2) {
        return _setExecuteProc.apply(this, arguments);
      }
      return setExecuteProc;
    }()
    /**
     * 设置计算功能是否启用的回调函数
     * @param {ComputeEnabledProcCallbacksType} proc - 计算功能启用的回调函数，当计算功能启用或禁用时会被调用
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setComputeEnabledProc",
    value: (function () {
      var _setComputeEnabledProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(proc) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$ribbonElement) || _$1.isEmpty(proc))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              _context4.next = 4;
              return this.$ribbonElement.setComputeEnabledProc(proc);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setComputeEnabledProc(_x3) {
        return _setComputeEnabledProc.apply(this, arguments);
      }
      return setComputeEnabledProc;
    }()
    /**
     * 设置提示信息
     * @param {string} tooltip 提示信息
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setTooltip",
    value: (function () {
      var _setTooltip = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(tooltip) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonElement)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              _context5.next = 4;
              return this.$ribbonElement.setTooltip(tooltip);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setTooltip(_x4) {
        return _setTooltip.apply(this, arguments);
      }
      return setTooltip;
    }()
    /**
     * 根据名称获取子元素
     * @param {string} name 子元素的名称，用于定位特定的子元素
     * @returns {Promise<RibbonElementType | null>}
     */
    )
  }, {
    key: "getSubElementByName",
    value: (function () {
      var _getSubElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(name) {
        var frRibbonElement, ribbonElement;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(this.$ribbonElement) || !_$1.isString(name) || _$1.isEmpty(name))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", null);
            case 2:
              _context6.next = 4;
              return this.$ribbonElement.getSubElementByName(name);
            case 4:
              frRibbonElement = _context6.sent;
              _context6.next = 7;
              return RibbonElement.create();
            case 7:
              ribbonElement = _context6.sent;
              ribbonElement.$ribbonElement = frRibbonElement;
              return _context6.abrupt("return", ribbonElement);
            case 10:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getSubElementByName(_x5) {
        return _getSubElementByName.apply(this, arguments);
      }
      return getSubElementByName;
    }()
    /**
     * 设置图像初始化处理函数
     * @param {RibbonElementImageInitProcCallbacksType} proc 图像初始化处理函数，用于在图像初始化时执行特定逻辑
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setImageInitProc",
    value: (function () {
      var _setImageInitProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(proc) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(_$1.isEmpty(this.$ribbonElement) || _$1.isEmpty(proc))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$ribbonElement.setImageInitProc(proc);
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setImageInitProc(_x6) {
        return _setImageInitProc.apply(this, arguments);
      }
      return setImageInitProc;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              return _context8.abrupt("return", instance);
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x7) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var RibbonPanel = /*#__PURE__*/function () {
  function RibbonPanel(options) {
    _classCallCheck(this, RibbonPanel);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$ribbonPanel", void 0);
    this.options = options || {};
    this.$ribbonPanel = new FRRibbonPanel();
  }
  /**
   * 创建 RibbonPanel 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<RibbonPanelType>}
   */
  return _createClass(RibbonPanel, [{
    key: "destroy",
    value: (
    /**
     * 销毁 RibbonPanel
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonPanel)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.$ribbonPanel = null;
              return _context.abrupt("return");
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 添加元素到功能区
     * @param {AddElementType} element - 添加元素的选项对象, 包括以下参数:
     *  @param {Enum.FR_Ribbon_Element_Type} elementType - 要添加的元素类型，如按钮、菜单等
     *  @param {string} name - 元素的唯一名称，用于标识该元素
     *  @param {string} title - 元素的标题，即显示在界面上的文本
     *  @param {number} pos - 元素在功能区中的位置，用于指定其显示顺序
     * @returns {Promise<LPVOID | null>}
     */
    )
  }, {
    key: "addElement",
    value: (function () {
      var _addElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(element) {
        var jsLPVOID, lpvoid;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonPanel)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$ribbonPanel.addElement(element);
            case 4:
              jsLPVOID = _context2.sent;
              _context2.next = 7;
              return LPVOID.create();
            case 7:
              lpvoid = _context2.sent;
              lpvoid.set(jsLPVOID);
              return _context2.abrupt("return", lpvoid);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function addElement(_x) {
        return _addElement.apply(this, arguments);
      }
      return addElement;
    }()
    /**
     * 获取指定名称的 RibbonElement元素
     * @param {string} elementName - 要获取的元素的名称，作为查找的依据
     * @returns {Promise<RibbonElementType | null>}
     */
    )
  }, {
    key: "getElementByName",
    value: (function () {
      var _getElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(elementName) {
        var frRibbonElement, ribbonElement;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_$1.isEmpty(this.$ribbonPanel) || !_$1.isString(elementName) || _$1.isEmpty(elementName))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", null);
            case 2:
              _context3.next = 4;
              return this.$ribbonPanel.getElementByName(elementName);
            case 4:
              frRibbonElement = _context3.sent;
              _context3.next = 7;
              return RibbonElement.create();
            case 7:
              ribbonElement = _context3.sent;
              ribbonElement.$ribbonElement = frRibbonElement;
              return _context3.abrupt("return", ribbonElement);
            case 10:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getElementByName(_x2) {
        return _getElementByName.apply(this, arguments);
      }
      return getElementByName;
    }()
    /**
     * 获取当前面板中元素的数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getElementCount",
    value: (function () {
      var _getElementCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonPanel)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", 0);
            case 2:
              _context4.next = 4;
              return this.$ribbonPanel.getElementCount();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getElementCount() {
        return _getElementCount.apply(this, arguments);
      }
      return getElementCount;
    }()
    /**
     * 获取指定索引位置的 RibbonElement 元素
     * @param {number} index - 元素索引位置
     * @returns {Promise<RibbonElementType | null>}
     */
    )
  }, {
    key: "getElementByIndex",
    value: (function () {
      var _getElementByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index) {
        var count, frRibbonElement, ribbonElement;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getElementCount();
            case 2:
              count = _context5.sent;
              if (!(_$1.isEmpty(this.$ribbonPanel) || !_$1.isNumber(index) || index < 0 || index >= count)) {
                _context5.next = 5;
                break;
              }
              return _context5.abrupt("return", null);
            case 5:
              _context5.next = 7;
              return this.$ribbonPanel.getElementByIndex(index);
            case 7:
              frRibbonElement = _context5.sent;
              _context5.next = 10;
              return RibbonElement.create();
            case 10:
              ribbonElement = _context5.sent;
              ribbonElement.$ribbonElement = frRibbonElement;
              return _context5.abrupt("return", ribbonElement);
            case 13:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getElementByIndex(_x3) {
        return _getElementByIndex.apply(this, arguments);
      }
      return getElementByIndex;
    }()
    /**
     * 设置面板的图标
     * @param {DIBitmap} smallBitmap - 小图标
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPanelImage",
    value: (function () {
      var _setPanelImage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(smallBitmap) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonPanel)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$ribbonPanel.setPanelImage(smallBitmap);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setPanelImage(_x4) {
        return _setPanelImage.apply(this, arguments);
      }
      return setPanelImage;
    }()
    /**
     * 获取面板名称
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonPanel)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", '');
            case 2:
              _context7.next = 4;
              return this.$ribbonPanel.getName();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              return _context8.abrupt("return", instance);
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x5) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var RibbonCategory = /*#__PURE__*/function () {
  function RibbonCategory(options) {
    _classCallCheck(this, RibbonCategory);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$ribbonCategory", void 0);
    this.options = options || {};
    this.$ribbonCategory = new FRRibbonCategory();
  }
  /**
   * 创建 RibbonCategory 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<RibbonCategoryType>}
   */
  return _createClass(RibbonCategory, [{
    key: "destroy",
    value: (
    /**
     * 销毁 RibbonCategory
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonCategory)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.$ribbonCategory = null;
              return _context.abrupt("return");
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 添加一个面板到功能区
     * @param {string} name 面板的名称，用于唯一标识该面板
     * @param {title} title 面板的标题，即显示在面板上的文字
     * @param {DIBitmap} btnBitmap 指定面板按钮的图标位图，用于显示自定义图标
     * @returns {Promise<RibbonPanelType | null>}
     */
    )
  }, {
    key: "addPanel",
    value: (function () {
      var _addPanel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, title, btnBitmap) {
        var frRibbonPanel, ribbonBar;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonCategory)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$ribbonCategory.addPanel(name, title, btnBitmap);
            case 4:
              frRibbonPanel = _context2.sent;
              _context2.next = 7;
              return RibbonPanel.create();
            case 7:
              ribbonBar = _context2.sent;
              ribbonBar.$ribbonPanel = frRibbonPanel;
              return _context2.abrupt("return", ribbonBar);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function addPanel(_x, _x2, _x3) {
        return _addPanel.apply(this, arguments);
      }
      return addPanel;
    }()
    /**
     * 获取面板数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getPanelCount",
    value: (function () {
      var _getPanelCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonCategory)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", 0);
            case 2:
              return _context3.abrupt("return", this.$ribbonCategory.getPanelCount());
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getPanelCount() {
        return _getPanelCount.apply(this, arguments);
      }
      return getPanelCount;
    }()
    /**
     * 根据索引异步获取面板
     * @param {number} index 面板的索引号，用于定位特定的面板
     * @returns {Promise<RibbonPanelType | null>}
     */
    )
  }, {
    key: "getPanelByIndex",
    value: (function () {
      var _getPanelByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {
        var frRibbonPanel, ribbonBar;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonCategory)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", null);
            case 2:
              _context4.next = 4;
              return this.$ribbonCategory.getPanelByIndex(index);
            case 4:
              frRibbonPanel = _context4.sent;
              _context4.next = 7;
              return RibbonPanel.create();
            case 7:
              ribbonBar = _context4.sent;
              ribbonBar.$ribbonPanel = frRibbonPanel;
              return _context4.abrupt("return", ribbonBar);
            case 10:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPanelByIndex(_x4) {
        return _getPanelByIndex.apply(this, arguments);
      }
      return getPanelByIndex;
    }()
    /**
     * 获取指定名称的面板对象
     * @param {string} panelName 面板名称，用于指定需要获取的面板
     * @returns {Promise<RibbonPanelType | null>}
     */
    )
  }, {
    key: "getPanelByName",
    value: (function () {
      var _getPanelByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(panelName) {
        var frRibbonPanel, ribbonBar;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonCategory)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$ribbonCategory.getPanelByName(panelName);
            case 4:
              frRibbonPanel = _context5.sent;
              _context5.next = 7;
              return RibbonPanel.create();
            case 7:
              ribbonBar = _context5.sent;
              ribbonBar.$ribbonPanel = frRibbonPanel;
              return _context5.abrupt("return", ribbonBar);
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getPanelByName(_x5) {
        return _getPanelByName.apply(this, arguments);
      }
      return getPanelByName;
    }()
    /**
     * 获取名称
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonCategory)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", '');
            case 2:
              _context6.next = 4;
              return this.$ribbonCategory.getName();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 重新计算布局
     * @param {boolean} reCalcPanels 是否重新计算面板布局 默认为true
     * @returns Promise<void>
     */
    )
  }, {
    key: "reCalcLayout",
    value: (function () {
      var _reCalcLayout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var reCalcPanels,
          _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              reCalcPanels = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : true;
              if (!_$1.isEmpty(this.$ribbonCategory)) {
                _context7.next = 3;
                break;
              }
              return _context7.abrupt("return");
            case 3:
              _context7.next = 5;
              return this.$ribbonCategory.reCalcLayout(reCalcPanels);
            case 5:
              return _context7.abrupt("return", _context7.sent);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function reCalcLayout() {
        return _reCalcLayout.apply(this, arguments);
      }
      return reCalcLayout;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              return _context8.abrupt("return", instance);
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x6) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var RibbonBar = /*#__PURE__*/function () {
  function RibbonBar(options) {
    _classCallCheck(this, RibbonBar);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$ribbonBar", void 0);
    this.options = options || {};
    this.$ribbonBar = new FRRibbonBar();
  }
  /**
   * 创建 RibbonBar 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<RibbonBarType>}
   */
  return _createClass(RibbonBar, [{
    key: "destroy",
    value: (
    /**
     * 销毁 RibbonBar
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.$ribbonBar = null;
              return _context.abrupt("return");
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 添加一个新的类别到功能区
     * @param {string} name 类别的名称，用于内部标识
     * @param {string} title 类别显示的标题，用户界面中显示
     * @returns {Promise<RibbonCategoryType | null>} 添加成功的 RibbonCategory 对象
     */
    )
  }, {
    key: "addCategory",
    value: (function () {
      var _addCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, title) {
        var frRibbonCategory, ribbonCategory;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$ribbonBar.addCategory(name, title);
            case 4:
              frRibbonCategory = _context2.sent;
              _context2.next = 7;
              return RibbonCategory.create();
            case 7:
              ribbonCategory = _context2.sent;
              ribbonCategory.$ribbonCategory = frRibbonCategory;
              return _context2.abrupt("return", ribbonCategory);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function addCategory(_x, _x2) {
        return _addCategory.apply(this, arguments);
      }
      return addCategory;
    }()
    /**
     * 获取分类数量
     * @returns {Promise<number>} 返回一个 Promise，解析为分类的数量
     */
    )
  }, {
    key: "getCategoryCount",
    value: (function () {
      var _getCategoryCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", 0);
            case 2:
              _context3.next = 4;
              return this.$ribbonBar.getCategoryCount();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getCategoryCount() {
        return _getCategoryCount.apply(this, arguments);
      }
      return getCategoryCount;
    }()
    /**
     * 根据索引异步获取类别
     * @param {number} index 类别的索引值，用于标识特定的类别
     * @returns {RibbonCategoryType | null} 该对象解析为包含类别信息的 RibbonCategory 实例
     */
    )
  }, {
    key: "getCategoryByIndex",
    value: (function () {
      var _getCategoryByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {
        var frRibbonCategory, ribbonCategory;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", null);
            case 2:
              _context4.next = 4;
              return this.$ribbonBar.getCategoryByIndex(index);
            case 4:
              frRibbonCategory = _context4.sent;
              _context4.next = 7;
              return RibbonCategory.create();
            case 7:
              ribbonCategory = _context4.sent;
              ribbonCategory.$ribbonCategory = frRibbonCategory;
              return _context4.abrupt("return", ribbonCategory);
            case 10:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getCategoryByIndex(_x3) {
        return _getCategoryByIndex.apply(this, arguments);
      }
      return getCategoryByIndex;
    }()
    /**
     * 根据类别名称异步获取 ribbon 类别对象
     * @param {string} categoryName - 要获取的 ribbon 类别的名称这是一个字符串参数，指定了要获取的类别名称
     * @returns {Promise<RibbonCategoryType | null>} - 该对象解析为 RibbonCategory 类型
     */
    )
  }, {
    key: "getCategoryByName",
    value: (function () {
      var _getCategoryByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(categoryName) {
        var frRibbonCategory, ribbonCategory;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$ribbonBar.getCategoryByName(categoryName);
            case 4:
              frRibbonCategory = _context5.sent;
              _context5.next = 7;
              return RibbonCategory.create();
            case 7:
              ribbonCategory = _context5.sent;
              ribbonCategory.$ribbonCategory = frRibbonCategory;
              return _context5.abrupt("return", ribbonCategory);
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getCategoryByName(_x4) {
        return _getCategoryByName.apply(this, arguments);
      }
      return getCategoryByName;
    }()
    /**
     * 查找名称对应的 Ribbon 元素
     * @param {string} categoryName - Ribbon 类别名，用于指定所需的 Ribbon 类别
     * @param {string} panelName - Ribbon 面板名，用于指定所需的面板
     * @param {string} btnName - 按钮名，用于指定所需的按钮
     * @returns {Promise<RibbonElementType | null>} - 该对象解析为包含 Ribbon 元素的 RibbonElement 对象
     */
    )
  }, {
    key: "findElementByName",
    value: (function () {
      var _findElementByName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(categoryName, panelName, btnName) {
        var frRibbonElement, ribbonElement;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", null);
            case 2:
              _context6.next = 4;
              return this.$ribbonBar.findElementByName(categoryName, panelName, btnName);
            case 4:
              frRibbonElement = _context6.sent;
              _context6.next = 7;
              return RibbonElement.create();
            case 7:
              ribbonElement = _context6.sent;
              ribbonElement.$ribbonElement = frRibbonElement;
              return _context6.abrupt("return", ribbonElement);
            case 10:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function findElementByName(_x5, _x6, _x7) {
        return _findElementByName.apply(this, arguments);
      }
      return findElementByName;
    }()
    /**
     * 重新计算布局
     * @param {boolean} reCalcPanels 是否重新计算面板布局 默认为 true
     * @returns 无返回值
     */
    )
  }, {
    key: "reCalcLayout",
    value: (function () {
      var _reCalcLayout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var reCalcPanels,
          _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              reCalcPanels = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : true;
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context7.next = 3;
                break;
              }
              return _context7.abrupt("return");
            case 3:
              _context7.next = 5;
              return this.$ribbonBar.reCalcLayout(reCalcPanels);
            case 5:
              return _context7.abrupt("return", _context7.sent);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function reCalcLayout() {
        return _reCalcLayout.apply(this, arguments);
      }
      return reCalcLayout;
    }()
    /**
     * 设置激活分类
     * @param {string} categoryName - 要设置为活跃状态的分类名称
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setActiveCategory",
    value: (function () {
      var _setActiveCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(categoryName) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(_$1.isEmpty(this.$ribbonBar) || !_$1.isString(categoryName) || _$1.isEmpty(categoryName))) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", false);
            case 2:
              _context8.next = 4;
              return this.$ribbonBar.setActiveCategory(categoryName);
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function setActiveCategory(_x8) {
        return _setActiveCategory.apply(this, arguments);
      }
      return setActiveCategory;
    }()
    /**
     * 获取当前活跃的分类
     * @returns {Promise<RibbonCategoryType | null>}
     */
    )
  }, {
    key: "getActiveCategory",
    value: (function () {
      var _getActiveCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var frRibbonCategory, ribbonCategory;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$ribbonBar)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", null);
            case 2:
              _context9.next = 4;
              return this.$ribbonBar.getActiveCategory();
            case 4:
              frRibbonCategory = _context9.sent;
              _context9.next = 7;
              return RibbonCategory.create();
            case 7:
              ribbonCategory = _context9.sent;
              ribbonCategory.$ribbonCategory = frRibbonCategory;
              return _context9.abrupt("return", ribbonCategory);
            case 10:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getActiveCategory() {
        return _getActiveCategory.apply(this, arguments);
      }
      return getActiveCategory;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              instance = new this(options);
              return _context10.abrupt("return", instance);
            case 2:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function create(_x9) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var App = /*#__PURE__*/function () {
  function App(options) {
    _classCallCheck(this, App);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$app", void 0);
    _defineProperty(this, "doc", void 0);
    if (_$1.isEmpty(options) || _$1.isEmpty(options.pluginInfo) || _$1.isEmpty(options.pluginInfo.id)) {
      var _console;
      var errorInfo = "\n                ERROR: Must set pluginId.\n                eg.\n                {\n                    pluginInfo: {\n                        id: string;\n                        name: string;\n                        version: string;\n                        description: string;\n                        author: string;\n                        license: string;\n                    }\n                }\n            ";
      (_console = console).log.apply(_console, _toConsumableArray(j([{
        content: errorInfo,
        padding: '4px',
        fontSize: '14px',
        fontWeight: 600,
        color: '#fff',
        cursor: 'pointer',
        backgroundImage: n$1.red
      }])));
      throw new Error(errorInfo);
    }
    this.options = options;
    this.$app = new App$1(options);
    this.doc = null;
  }
  /**
   * 创建应用程序实例。
   * @param {Options} options 创建应用程序所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<AppType>}
   */
  return _createClass(App, [{
    key: "destroy",
    value: (
    /**
     * 销毁doc对象
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.doc = null;
              // 不销毁app对象，因为app下可能打开了多份文档
              // this.$app = null;
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取当前应用的名字
     * @returns {Promise<string>} 返回当前应用的名字
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", '');
            case 2:
              _context2.next = 4;
              return this.$app.getName();
            case 4:
              return _context2.abrupt("return", _context2.sent);
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 获取当前应用的版本
     * @returns {Promise<string>} 返回当前应用的版本
     */
    )
  }, {
    key: "getVersion",
    value: (function () {
      var _getVersion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", '');
            case 2:
              _context3.next = 4;
              return this.$app.getVersion();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getVersion() {
        return _getVersion.apply(this, arguments);
      }
      return getVersion;
    }()
    /**
     * 获取当前应用的title
     * @returns {Promise<string>} 返回当前应用的title
     */
    )
  }, {
    key: "getAppTitle",
    value: (function () {
      var _getAppTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", '');
            case 2:
              _context4.next = 4;
              return this.$app.getAppTitle();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getAppTitle() {
        return _getAppTitle.apply(this, arguments);
      }
      return getAppTitle;
    }()
    /**
     * 获取当前应用路径
     * @returns {Promise<string>} 返回当前应用路径
     */
    )
  }, {
    key: "getAppDataPath",
    value: (function () {
      var _getAppDataPath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", '');
            case 2:
              _context5.next = 4;
              return this.$app.getAppDataPath();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getAppDataPath() {
        return _getAppDataPath.apply(this, arguments);
      }
      return getAppDataPath;
    }()
    /**
     * 打开文件
     * @param {OpenFromFileOptions} options 打开文档参数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "openFromFile",
    value: (function () {
      var _openFromFile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (_$1.isEmpty(this.$app)) {
                this.$app = new App$1();
              }
              if (!(this.doc === null)) {
                _context6.next = 5;
                break;
              }
              _context6.next = 4;
              return Doc.create();
            case 4:
              this.doc = _context6.sent;
            case 5:
              _context6.next = 7;
              return this.doc._openFromFile(options);
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function openFromFile(_x) {
        return _openFromFile.apply(this, arguments);
      }
      return openFromFile;
    }()
    /**
     * 关闭 当前active的doc对象
     * @param {CloseOptions} options 关闭参数, 默认值：{promptToSave: true, delay: false, showCancel: true}
     * @returns {Promise<boolean>} 关闭结果
     */
    )
  }, {
    key: "close",
    value: (function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var options,
          activeDoc,
          state,
          _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {
                promptToSave: true,
                showCancel: true
              };
              _context7.next = 3;
              return this.getActiveDoc();
            case 3:
              activeDoc = _context7.sent;
              if (!(activeDoc === null || activeDoc.$frDoc === null || _$1.isEmpty(activeDoc.$frDoc.value))) {
                _context7.next = 6;
                break;
              }
              return _context7.abrupt("return", false);
            case 6:
              _context7.next = 8;
              return activeDoc.close(options);
            case 8:
              state = _context7.sent;
              this.destroy();
              return _context7.abrupt("return", state);
            case 11:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
    /**
     * 当前打开的文档数量
     * @returns {Promise<number>} 返回当前打开的文档数量
     */
    )
  }, {
    key: "getDocsCount",
    value: (function () {
      var _getDocsCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", 0);
            case 2:
              _context8.next = 4;
              return this.$app.countDocsOfPDDoc();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getDocsCount() {
        return _getDocsCount.apply(this, arguments);
      }
      return getDocsCount;
    }()
    /**
     * 根据索引获取文档
     * @param {number} index 索引
     * @returns {Promise<DocType | null>} 返回文档
     */
    )
  }, {
    key: "getDoc",
    value: (function () {
      var _getDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {
        var frDoc, fpdDoc, doc;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", null);
            case 2:
              _context9.next = 4;
              return this.$app.getDocOfPDDoc(index);
            case 4:
              frDoc = _context9.sent;
              if (!_$1.isEmpty(frDoc.value)) {
                _context9.next = 7;
                break;
              }
              return _context9.abrupt("return", null);
            case 7:
              _context9.next = 9;
              return frDoc.getPDDoc();
            case 9:
              fpdDoc = _context9.sent;
              _context9.next = 12;
              return Doc.create();
            case 12:
              doc = _context9.sent;
              doc.$frDoc = frDoc;
              doc.$fpdDoc = fpdDoc;
              return _context9.abrupt("return", doc);
            case 16:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getDoc(_x2) {
        return _getDoc.apply(this, arguments);
      }
      return getDoc;
    }()
    /**
     * 获取当前active的文档
     * @returns {Promise<DocType | null>} 返回获取当前active的文档
     */
    )
  }, {
    key: "getActiveDoc",
    value: (function () {
      var _getActiveDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var frDoc, doc, fpdDoc;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", null);
            case 2:
              _context10.next = 4;
              return this.$app.getActiveDocOfPDDoc();
            case 4:
              frDoc = _context10.sent;
              if (!_$1.isEmpty(frDoc.value)) {
                _context10.next = 7;
                break;
              }
              return _context10.abrupt("return", null);
            case 7:
              doc = this.doc;
              if (!(doc === null)) {
                _context10.next = 17;
                break;
              }
              _context10.next = 11;
              return frDoc.getPDDoc();
            case 11:
              fpdDoc = _context10.sent;
              _context10.next = 14;
              return Doc.create();
            case 14:
              doc = _context10.sent;
              doc.$frDoc = frDoc;
              doc.$fpdDoc = fpdDoc;
            case 17:
              return _context10.abrupt("return", doc);
            case 18:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getActiveDoc() {
        return _getActiveDoc.apply(this, arguments);
      }
      return getActiveDoc;
    }()
    /**
     * 设置激活的文档
     * @param {DocType} doc
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setActiveDoc",
    value: (function () {
      var _setActiveDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(doc) {
        var state;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return", false);
            case 2:
              if (!(doc === null || doc.$frDoc === null || _$1.isEmpty(doc.$frDoc.value))) {
                _context11.next = 4;
                break;
              }
              return _context11.abrupt("return", false);
            case 4:
              _context11.next = 6;
              return this.$app.setActiveDocOfPDDoc(doc.$frDoc);
            case 6:
              state = _context11.sent;
              this.doc = doc;
              return _context11.abrupt("return", state);
            case 9:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setActiveDoc(_x3) {
        return _setActiveDoc.apply(this, arguments);
      }
      return setActiveDoc;
    }()
    /**
     * 根据索引设置激活的文档
     * @param {number} index
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setActiveDocByIndex",
    value: (function () {
      var _setActiveDocByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index) {
        var count, _console2, activeDoc, state;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", false);
            case 2:
              _context12.next = 4;
              return this.getDocsCount();
            case 4:
              count = _context12.sent;
              if (!(index < 0 || index >= count)) {
                _context12.next = 8;
                break;
              }
              // 超出索引边界
              (_console2 = console).log.apply(_console2, _toConsumableArray(j([{
                content: 'ERROR: index out of range',
                padding: '4px',
                fontSize: '14px',
                fontWeight: 600,
                color: '#fff',
                cursor: 'pointer',
                backgroundImage: n$1.red
              }])));
              return _context12.abrupt("return", false);
            case 8:
              _context12.next = 10;
              return this.getDoc(index);
            case 10:
              activeDoc = _context12.sent;
              if (!(activeDoc === null || activeDoc.$frDoc === null || _$1.isEmpty(activeDoc.$frDoc.value))) {
                _context12.next = 13;
                break;
              }
              return _context12.abrupt("return", false);
            case 13:
              _context12.next = 15;
              return this.$app.setActiveDocOfPDDoc(activeDoc.$frDoc);
            case 15:
              state = _context12.sent;
              this.doc = activeDoc;
              return _context12.abrupt("return", state);
            case 18:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function setActiveDocByIndex(_x4) {
        return _setActiveDocByIndex.apply(this, arguments);
      }
      return setActiveDocByIndex;
    }()
    /**
     * 获取ribbon栏
     * @param parentWnd 父窗口
     * @returns {Promise<RibbonBarType | null>}
     */
    )
  }, {
    key: "getRibbonBar",
    value: (function () {
      var _getRibbonBar = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(parentWnd) {
        var _ribbonBar, ribbonBar;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return", null);
            case 2:
              _context13.next = 4;
              return this.$app.getRibbonBar(parentWnd);
            case 4:
              _ribbonBar = _context13.sent;
              _context13.next = 7;
              return RibbonBar.create();
            case 7:
              ribbonBar = _context13.sent;
              ribbonBar.$ribbonBar = _ribbonBar;
              return _context13.abrupt("return", ribbonBar);
            case 10:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getRibbonBar(_x5) {
        return _getRibbonBar.apply(this, arguments);
      }
      return getRibbonBar;
    }())
  }, {
    key: "registerForContextMenuAdditionJs",
    value: function () {
      var _registerForContextMenuAdditionJs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(name, menus) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!_$1.isEmpty(this.$app)) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return", false);
            case 2:
              _context14.next = 4;
              return this.$app.registerForContextMenuAdditionJs(name, menus);
            case 4:
              return _context14.abrupt("return", _context14.sent);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function registerForContextMenuAdditionJs(_x6, _x7) {
        return _registerForContextMenuAdditionJs.apply(this, arguments);
      }
      return registerForContextMenuAdditionJs;
    }()
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(options) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", new this(options));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function create(_x8) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Action = /*#__PURE__*/function () {
  function Action(options) {
    _classCallCheck(this, Action);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$action", void 0);
    this.options = options || {};
    this.$action = null;
  }
  /**
   * 创建Action实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * 如果传入dict则是根据dict创建
   * 如果传入 doc和actionType(必须同时传)则是根据actionType创建
   * @returns {Promise<ActionType>}
   */
  return _createClass(Action, [{
    key: "destroy",
    value: (
    /**
     * 销毁doc对象
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$$action;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              (_this$$action = this.$action) === null || _this$$action === void 0 || _this$$action.destroy();
              this.$action = null;
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取 Action 对象的类型名称。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getTypeName",
    value: (function () {
      var _getTypeName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$action)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", '');
            case 2:
              return _context2.abrupt("return", this.$action.getTypeName());
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getTypeName() {
        return _getTypeName.apply(this, arguments);
      }
      return getTypeName;
    }()
    /**
     * 获取 Action 对象的类型。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getType",
    value: (function () {
      var _getType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$action)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", Infinity);
            case 2:
              return _context3.abrupt("return", this.$action.getType());
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getType() {
        return _getType.apply(this, arguments);
      }
      return getType;
    }()
    /**
     * 设置 Action 对象的目标。
     * @param {DestType} dest - 目标对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setDest",
    value: (function () {
      var _setDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dest) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$action)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              if (!_$1.isEmpty(dest.$dest)) {
                _context4.next = 4;
                break;
              }
              return _context4.abrupt("return");
            case 4:
              return _context4.abrupt("return", this.$action.setDest(dest.$dest));
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setDest(_x) {
        return _setDest.apply(this, arguments);
      }
      return setDest;
    }()
    /**
     * 获取文件路径
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getFilePath",
    value: (function () {
      var _getFilePath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$action)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", '');
            case 2:
              return _context5.abrupt("return", this.$action.getFilePath());
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getFilePath() {
        return _getFilePath.apply(this, arguments);
      }
      return getFilePath;
    }()
    /**
     * 设置文件路径。
     * @param {string} filePath - 文件路径字符串。
     * @param {boolean} isURL - 表示路径是否为 URL 的布尔值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFilePath",
    value: (function () {
      var _setFilePath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filePath, isURL) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$action)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.setFilePath(filePath, isURL);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setFilePath(_x2, _x3) {
        return _setFilePath.apply(this, arguments);
      }
      return setFilePath;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(options) {
        var instance, dict, _fpdAction, fpdAction, actionType, doc, fpdDoc, _fpdAction2, _fpdAction3;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              instance = new this(options);
              if (!(_$1.isEmpty(options) || _$1.isEmpty(options))) {
                _context7.next = 3;
                break;
              }
              return _context7.abrupt("return", instance);
            case 3:
              // 根据 dict: PDFObjectType 创建Action
              dict = options.dict;
              if (!(!_$1.isEmpty(dict) && !_$1.isEmpty(dict.$pdfObject))) {
                _context7.next = 11;
                break;
              }
              _fpdAction = new FPDAction();
              _context7.next = 8;
              return _fpdAction.new(dict.$pdfObject);
            case 8:
              fpdAction = _context7.sent;
              instance.$action = fpdAction;
              return _context7.abrupt("return", instance);
            case 11:
              // 根据 doc?: DocType; actionType?: Enum.FPD_ActionType 创建Action
              // doc 和 actionType必须同时传
              actionType = options.actionType;
              doc = options.doc;
              if (!(!_$1.isEmpty(actionType) && !_$1.isEmpty(doc) && !_$1.isEmpty(doc.$fpdDoc) && !_$1.isEmpty(doc.$fpdDoc.value))) {
                _context7.next = 21;
                break;
              }
              fpdDoc = doc.$fpdDoc;
              _fpdAction2 = new FPDAction(); // @ts-ignore
              _context7.next = 18;
              return _fpdAction2.new2(fpdDoc, actionType);
            case 18:
              _fpdAction3 = _context7.sent;
              instance.$action = _fpdAction3;
              return _context7.abrupt("return", instance);
            case 21:
              return _context7.abrupt("return", instance);
            case 22:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function create(_x4) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFObject = /*#__PURE__*/function () {
  function PDFObject(options) {
    _classCallCheck(this, PDFObject);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfObject", void 0);
    this.options = options || {};
    this.$pdfObject = new FPDObject();
  }
  /**
   * 创建PDFObject实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PDFObjectType>}
   */
  return _createClass(PDFObject, [{
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.$pdfObject.destroy();
              this.$pdfObject = null;
              return _context.abrupt("return");
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取对象类型
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getType",
    value: (function () {
      var _getType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", -1);
            case 2:
              _context2.next = 4;
              return this.$pdfObject.getType();
            case 4:
              return _context2.abrupt("return", _context2.sent);
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getType() {
        return _getType.apply(this, arguments);
      }
      return getType;
    }()
    /**
     * 获取对象编号
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getObjNum",
    value: (function () {
      var _getObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", -1);
            case 2:
              _context3.next = 4;
              return this.$pdfObject.getObjNum();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getObjNum() {
        return _getObjNum.apply(this, arguments);
      }
      return getObjNum;
    }()
    /**
     * 判断当前对象是否与另一个对象相同。
     * @param {PDFObjectType} otherObj - 另一个 `PDFObject` 对象。
     * @returns {Promise<boolean>} - 返回一个 Promise 对象，解析为布尔值，表示两个对象是否相同。
     */
    )
  }, {
    key: "isIdentical",
    value: (function () {
      var _isIdentical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(otherObj) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfObject) || _$1.isEmpty(otherObj) || _$1.isEmpty(otherObj.$pdfObject))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", false);
            case 2:
              _context4.next = 4;
              return this.$pdfObject.isIdentical(otherObj.$pdfObject);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function isIdentical(_x) {
        return _isIdentical.apply(this, arguments);
      }
      return isIdentical;
    }()
    /**
     * 获取对象的直接引用。
     * @returns {Promise<PDFObjectType | null>} - 返回一个 Promise 对象，解析为 `PDFObjectType` 实例。
     */
    )
  }, {
    key: "getDirect",
    value: (function () {
      var _getDirect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$pdfObject.getDirect();
            case 4:
              fpdObj = _context5.sent;
              _context5.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context5.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context5.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getDirect() {
        return _getDirect.apply(this, arguments);
      }
      return getDirect;
    }()
    /**
     * 获取对象字符串
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", '');
            case 2:
              _context6.next = 4;
              return this.$pdfObject.getString();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 设置对象Unicode文本
     * @param {string} str - 要设置的字符串
     * @param {number} len - 字符串长度 “len”是字符数，而不是字节数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setUnicodeText",
    value: (function () {
      var _setUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(str, len) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$pdfObject.setUnicodeText(str, len);
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setUnicodeText(_x2, _x3) {
        return _setUnicodeText.apply(this, arguments);
      }
      return setUnicodeText;
    }()
    /**
     *  获取对象Unicode文本
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getUnicodeText",
    value: (function () {
      var _getUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", '');
            case 2:
              _context8.next = 4;
              return this.$pdfObject.getUnicodeText();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getUnicodeText() {
        return _getUnicodeText.apply(this, arguments);
      }
      return getUnicodeText;
    }()
    /**
     * 获取对象数字
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", Infinity);
            case 2:
              _context9.next = 4;
              return this.$pdfObject.getNumber();
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getNumber() {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 获取对象整数
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", Infinity);
            case 2:
              _context10.next = 4;
              return this.$pdfObject.getInteger();
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getInteger() {
        return _getInteger.apply(this, arguments);
      }
      return getInteger;
    }()
    /**
     * 获取对象字典
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getDict",
    value: (function () {
      var _getDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return", null);
            case 2:
              _context11.next = 4;
              return this.$pdfObject.getDict();
            case 4:
              fpdObj = _context11.sent;
              _context11.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context11.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context11.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getDict() {
        return _getDict.apply(this, arguments);
      }
      return getDict;
    }()
    /**
     * 获取对象数组
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getArray",
    value: (function () {
      var _getArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", null);
            case 2:
              _context12.next = 4;
              return this.$pdfObject.getArray();
            case 4:
              fpdObj = _context12.sent;
              _context12.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context12.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context12.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getArray() {
        return _getArray.apply(this, arguments);
      }
      return getArray;
    }()
    /**
     * 获取对象直接类型
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getDirectType",
    value: (function () {
      var _getDirectType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return", -1);
            case 2:
              _context13.next = 4;
              return this.$pdfObject.getDirectType();
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getDirectType() {
        return _getDirectType.apply(this, arguments);
      }
      return getDirectType;
    }()
    /**
     * 判断对象是否被修改
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isModified",
    value: (function () {
      var _isModified = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return", false);
            case 2:
              _context14.next = 4;
              return this.$pdfObject.isModified();
            case 4:
              return _context14.abrupt("return", _context14.sent);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function isModified() {
        return _isModified.apply(this, arguments);
      }
      return isModified;
    }()
    /**
     * 设置对象是否被修改
     * @param modified - 是否被修改 默认为false
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setModified",
    value: (function () {
      var _setModified = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
        var modified,
          _args15 = arguments;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              modified = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : false;
              if (!_$1.isEmpty(this.$pdfObject)) {
                _context15.next = 3;
                break;
              }
              return _context15.abrupt("return");
            case 3:
              _context15.next = 5;
              return this.$pdfObject.setModified(modified);
            case 5:
              return _context15.abrupt("return", _context15.sent);
            case 6:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function setModified() {
        return _setModified.apply(this, arguments);
      }
      return setModified;
    }()
    /**
     * 获取常量字符串
     * @param {PDFObjectType} obj - 要获取的字符串对象
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getConstString",
    value: (function () {
      var _getConstString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(obj) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfObject) || _$1.isEmpty(obj) || _$1.isEmpty(obj.$pdfObject))) {
                _context16.next = 2;
                break;
              }
              return _context16.abrupt("return", '');
            case 2:
              _context16.next = 4;
              return this.$pdfObject.getConstString(obj.$pdfObject);
            case 4:
              return _context16.abrupt("return", _context16.sent);
            case 5:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getConstString(_x4) {
        return _getConstString.apply(this, arguments);
      }
      return getConstString;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              instance = new this(options);
              return _context17.abrupt("return", instance);
            case 2:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function create(_x5) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var AnnotList = /*#__PURE__*/function () {
  function AnnotList(options) {
    _classCallCheck(this, AnnotList);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$annotList", void 0);
    this.options = options || {};
    this.$annotList = null;
  }
  /**
   * 新建一个底层数据的AnnotList对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(AnnotList, [{
    key: "_createAnnotList",
    value: (function () {
      var _createAnnotList2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _annotList, annotList;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(this.options.page === undefined || this.options.page === null || this.options.page.$fpdPage === null || _$1.isEmpty(this.options.page.$fpdPage.value))) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              _annotList = new FPDAnnotList();
              _context.next = 5;
              return _annotList.new(this.options.page.$fpdPage);
            case 5:
              annotList = _context.sent;
              this.$annotList = annotList;
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createAnnotList() {
        return _createAnnotList2.apply(this, arguments);
      }
      return _createAnnotList;
    }()
    /**
     * 创建AnnotList实例。
     * @param {Options} options 所需的配置选项，包含必要的初始化信息。
     * @returns {Promise<AnnotListType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁对象
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this$$annotList;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (_this$$annotList = this.$annotList) === null || _this$$annotList === void 0 ? void 0 : _this$$annotList.destroy();
            case 2:
              this.$annotList = null;
              return _context2.abrupt("return");
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取指定索引的annot对象
     * @param {number} index 索引
     * @returns {Promise<AnnotType | null>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
        var fpdAnnot, annot;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$annotList)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", null);
            case 2:
              _context3.next = 4;
              return this.$annotList.getAt(index);
            case 4:
              fpdAnnot = _context3.sent;
              _context3.next = 7;
              return Annot.create();
            case 7:
              annot = _context3.sent;
              annot.$fpdAnnot = fpdAnnot;
              return _context3.abrupt("return", annot);
            case 10:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getAt(_x) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 获取annotList的长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getCount",
    value: (function () {
      var _getCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$annotList)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", 0);
            case 2:
              _context4.next = 4;
              return this.$annotList.count();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getCount() {
        return _getCount.apply(this, arguments);
      }
      return getCount;
    }()
    /**
     * 获取annot在annotList中的索引
     * @param {AnnotType} annot 注释对象
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getIndex",
    value: (function () {
      var _getIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(annot) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_$1.isEmpty(this.$annotList) || _$1.isEmpty(annot) || _$1.isEmpty(annot.$fpdAnnot))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", -1);
            case 2:
              _context5.next = 4;
              return this.$annotList.getIndex(annot.$fpdAnnot);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getIndex(_x2) {
        return _getIndex.apply(this, arguments);
      }
      return getIndex;
    }()
    /**
     * 在指定位置插入annot
     * @param {AnnotType} annot对象
     * @param {number} index 索引 默认为 annotList的长度
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "insert",
    value: (function () {
      var _insert = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(annot, index) {
        var _index;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(this.$annotList) || _$1.isEmpty(annot) || _$1.isEmpty(annot.$fpdAnnot))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              if (!((_index = index) !== null && _index !== void 0)) {
                _context6.next = 6;
                break;
              }
              _context6.next = 9;
              break;
            case 6:
              _context6.next = 8;
              return this.getCount();
            case 8:
              index = _context6.sent;
            case 9:
              _context6.next = 11;
              return this.$annotList.insert(annot.$fpdAnnot, index);
            case 11:
              return _context6.abrupt("return", _context6.sent);
            case 12:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function insert(_x3, _x4) {
        return _insert.apply(this, arguments);
      }
      return insert;
    }()
    /**
     * 删除所有annot
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$annotList)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$annotList.removeAll();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }()
    /**
     * 替换指定索引的annot
     * @param {number} index 索引
     * @param {AnnotType} annot对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "replace",
    value: (function () {
      var _replace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index, annot) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(_$1.isEmpty(this.$annotList) || _$1.isEmpty(annot) || _$1.isEmpty(annot.$fpdAnnot))) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return");
            case 2:
              _context8.next = 4;
              return this.$annotList.replace(index, annot.$fpdAnnot);
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function replace(_x5, _x6) {
        return _replace.apply(this, arguments);
      }
      return replace;
    }()
    /**
     * 删除指定索引的annot
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "remove",
    value: (function () {
      var _remove = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$annotList)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return");
            case 2:
              _context9.next = 4;
              return this.$annotList.remove(index);
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function remove(_x7) {
        return _remove.apply(this, arguments);
      }
      return remove;
    }()
    /**
     * 将指定索引的annot移动到最前面
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "moveToFirst",
    value: (function () {
      var _moveToFirst = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(index <= 0 || _$1.isEmpty(this.$annotList))) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return");
            case 2:
              _context10.next = 4;
              return this.$annotList.moveToFirst(index);
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function moveToFirst(_x8) {
        return _moveToFirst.apply(this, arguments);
      }
      return moveToFirst;
    }()
    /**
     * 将指定索引的annot移动到最后面
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "moveToLast",
    value: (function () {
      var _moveToLast = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(index) {
        var count;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.getCount();
            case 2:
              count = _context11.sent;
              if (!(index >= count)) {
                _context11.next = 5;
                break;
              }
              return _context11.abrupt("return");
            case 5:
              _context11.next = 7;
              return this.moveToLast(index);
            case 7:
              return _context11.abrupt("return", _context11.sent);
            case 8:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function moveToLast(_x9) {
        return _moveToLast.apply(this, arguments);
      }
      return moveToLast;
    }()
    /**
     * 将指定索引的annot移动到指定位置
     * @param {number} index 指定索引的annot对象
     * @param {number} newIndex 新的索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "moveTo",
    value: (function () {
      var _moveTo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index, newIndex) {
        var count;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.getCount();
            case 2:
              count = _context12.sent;
              if (!(_$1.isEmpty(this.$annotList) || index > count || index < 0 || newIndex > count || newIndex < 0 || index === newIndex)) {
                _context12.next = 5;
                break;
              }
              return _context12.abrupt("return");
            case 5:
              _context12.next = 7;
              return this.$annotList.moveTo(index, newIndex);
            case 7:
              return _context12.abrupt("return", _context12.sent);
            case 8:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function moveTo(_x10, _x11) {
        return _moveTo.apply(this, arguments);
      }
      return moveTo;
    }()
    /**
     * 获取 AnnotList 对应的文档对象
     * @returns {Promise<DocType | null>}
     */
    )
  }, {
    key: "getDoc",
    value: (function () {
      var _getDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        var doc, _frDoc, fpdDoc, frDoc;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return Doc.create();
            case 2:
              doc = _context13.sent;
              _frDoc = doc.$frDoc;
              if (!(_$1.isEmpty(this.$annotList) || _$1.isEmpty(_frDoc))) {
                _context13.next = 6;
                break;
              }
              return _context13.abrupt("return", null);
            case 6:
              _context13.next = 8;
              return this.$annotList.getDocument();
            case 8:
              fpdDoc = _context13.sent;
              doc.$fpdDoc = fpdDoc;
              _context13.next = 12;
              return _frDoc.fromPDDoc(fpdDoc);
            case 12:
              frDoc = _context13.sent;
              doc.$frDoc = frDoc;
              return _context13.abrupt("return", doc);
            case 15:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getDoc() {
        return _getDoc.apply(this, arguments);
      }
      return getDoc;
    }()
    /**
     * 获取annotList对应的页面对象
     * @returns {Promise<PageType | null>}
     */
    )
  }, {
    key: "getPage",
    value: (function () {
      var _getPage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        var fpdPage, page;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!_$1.isEmpty(this.$annotList)) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return", null);
            case 2:
              _context14.next = 4;
              return this.$annotList.getPage();
            case 4:
              fpdPage = _context14.sent;
              _context14.next = 7;
              return Page.create();
            case 7:
              page = _context14.sent;
              page.$fpdPage = fpdPage;
              return _context14.abrupt("return", page);
            case 10:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getPage() {
        return _getPage.apply(this, arguments);
      }
      return getPage;
    }()
    /**
     * 通过字典对象获取对应的注释对象
     * @param {number} pageIndex 页码
     * @param {PDFObjectType} annotDict annot字典对象
     * @returns {Promise<AnnotType | null>}
     */
    )
  }, {
    key: "getAnnotByDict",
    value: (function () {
      var _getAnnotByDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(pageIndex, annotDict) {
        var doc, fpdAnnot, annot, fpdObj, frAnnot;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.getDoc();
            case 2:
              doc = _context15.sent;
              if (!(_$1.isEmpty(this.$annotList) || _$1.isEmpty(annotDict) || _$1.isEmpty(annotDict.$pdfObject) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc) || _$1.isEmpty(doc.$frDoc))) {
                _context15.next = 5;
                break;
              }
              return _context15.abrupt("return", null);
            case 5:
              _context15.next = 7;
              return this.$annotList.getAnnotByDict(annotDict.$pdfObject);
            case 7:
              fpdAnnot = _context15.sent;
              _context15.next = 10;
              return Annot.create();
            case 10:
              annot = _context15.sent;
              annot.$fpdAnnot = fpdAnnot;
              _context15.next = 14;
              return fpdAnnot.getAnnotDict();
            case 14:
              fpdObj = _context15.sent;
              _context15.next = 17;
              return doc.$frDoc.getAnnotByDict(pageIndex, fpdObj);
            case 17:
              frAnnot = _context15.sent;
              annot.$frAnnot = frAnnot;
              return _context15.abrupt("return", annot);
            case 20:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getAnnotByDict(_x12, _x13) {
        return _getAnnotByDict.apply(this, arguments);
      }
      return getAnnotByDict;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              instance = new this(options);
              _context16.next = 3;
              return instance._createAnnotList();
            case 3:
              return _context16.abrupt("return", instance);
            case 4:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function create(_x14) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Annot = /*#__PURE__*/function () {
  function Annot(options) {
    _classCallCheck(this, Annot);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$frAnnot", void 0);
    _defineProperty(this, "$fpdAnnot", void 0);
    this.options = options || {};
    this.$frAnnot = null;
    this.$fpdAnnot = null;
  }
  /**
   * 创建Annot实例。
   * @param {Options} options 所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<AnnotType>}
   */
  return _createClass(Annot, [{
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$$fpdAnnot;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (_this$$fpdAnnot = this.$fpdAnnot) === null || _this$$fpdAnnot === void 0 ? void 0 : _this$$fpdAnnot.destroy();
            case 2:
              this.$frAnnot = null;
              this.$fpdAnnot = null;
              return _context.abrupt("return");
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取FPDAnnot
     * @returns {Promise<FPDAnnot | null>}
     */
    )
  }, {
    key: "getPDFAnnot",
    value: (function () {
      var _getPDFAnnot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$frAnnot)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$frAnnot.getPDFAnnot();
            case 4:
              return _context2.abrupt("return", _context2.sent);
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getPDFAnnot() {
        return _getPDFAnnot.apply(this, arguments);
      }
      return getPDFAnnot;
    }()
    /**
     * 获取类型
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getType",
    value: (function () {
      var _getType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$frAnnot)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", '');
            case 2:
              _context3.next = 4;
              return this.$frAnnot.getType();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getType() {
        return _getType.apply(this, arguments);
      }
      return getType;
    }()
    /**
     * 获取子类型
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getSubType",
    value: (function () {
      var _getSubType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$fpdAnnot)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", '');
            case 2:
              _context4.next = 4;
              return this.$fpdAnnot.getSubType();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getSubType() {
        return _getSubType.apply(this, arguments);
      }
      return getSubType;
    }()
    /**
     * 设置可见性
     * @param {boolean} show
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setVisible",
    value: (function () {
      var _setVisible = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(show) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$frAnnot)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              _context5.next = 4;
              return this.$frAnnot.setVisible(show);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setVisible(_x) {
        return _setVisible.apply(this, arguments);
      }
      return setVisible;
    }()
    /**
     * 获取是否选中
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isSelected",
    value: (function () {
      var _isSelected = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$frAnnot)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", false);
            case 2:
              _context6.next = 4;
              return this.$frAnnot.isSelected();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function isSelected() {
        return _isSelected.apply(this, arguments);
      }
      return isSelected;
    }()
    /**
     * 获取当前对象的字典。
     * @returns {Promise<PDFObjectType>}
     */
    )
  }, {
    key: "getAnnotDict",
    value: (function () {
      var _getAnnotDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var obj, fpdObj;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return PDFObject.create();
            case 2:
              obj = _context7.sent;
              if (!_$1.isEmpty(this.$fpdAnnot)) {
                _context7.next = 5;
                break;
              }
              return _context7.abrupt("return", obj);
            case 5:
              _context7.next = 7;
              return this.$fpdAnnot.getAnnotDict();
            case 7:
              fpdObj = _context7.sent;
              obj.$pdfObject = fpdObj;
              return _context7.abrupt("return", obj);
            case 10:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getAnnotDict() {
        return _getAnnotDict.apply(this, arguments);
      }
      return getAnnotDict;
    }()
    /**
     * 获取当前对象的矩形区域。
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$fpdAnnot)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context8.next = 4;
              return this.$fpdAnnot.getRect();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getRect() {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 获取当前对象的注释列表。
     * @returns {Promise<AnnotListType>}
     */
    )
  }, {
    key: "getAnnotList",
    value: (function () {
      var _getAnnotList = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var annotList, fpdAnnotList;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return AnnotList.create();
            case 2:
              annotList = _context9.sent;
              if (!_$1.isEmpty(this.$fpdAnnot)) {
                _context9.next = 5;
                break;
              }
              return _context9.abrupt("return", annotList);
            case 5:
              _context9.next = 7;
              return this.$fpdAnnot.getAnnotList();
            case 7:
              fpdAnnotList = _context9.sent;
              annotList.$annotList = fpdAnnotList;
              return _context9.abrupt("return", annotList);
            case 10:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getAnnotList() {
        return _getAnnotList.apply(this, arguments);
      }
      return getAnnotList;
    }()
    /**
     * 获取当前对象的标志。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFlags",
    value: (function () {
      var _getFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!_$1.isEmpty(this.$fpdAnnot)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", Infinity);
            case 2:
              _context10.next = 4;
              return this.$fpdAnnot.getFlags();
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getFlags() {
        return _getFlags.apply(this, arguments);
      }
      return getFlags;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              instance = new this(options);
              instance.$frAnnot = new FRAnnot();
              _context11.next = 4;
              return instance.getPDFAnnot();
            case 4:
              instance.$fpdAnnot = _context11.sent;
              return _context11.abrupt("return", instance);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function create(_x2) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

function _callSuper$m(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$m() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$m() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$m = function _isNativeReflectConstruct() { return !!t; })(); }
var POSITION = /*#__PURE__*/function (_FXPOSITION) {
  function POSITION() {
    _classCallCheck(this, POSITION);
    return _callSuper$m(this, POSITION, arguments);
  }
  _inherits(POSITION, _FXPOSITION);
  return _createClass(POSITION, null, [{
    key: "create",
    value: (
    /**
     * 创建 POSITION 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
     * @returns {Promise<POSITION>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(POSITION$1);

var PDFDictionary = /*#__PURE__*/function () {
  function PDFDictionary(options) {
    _classCallCheck(this, PDFDictionary);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfDictionary", void 0);
    _defineProperty(this, "$pdfObject", void 0);
    this.options = options || {};
    this.$pdfDictionary = null;
    this.$pdfObject = null;
  }
  /**
   * 创建 PDFDictionary 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PDFDictionaryType>}
   */
  return _createClass(PDFDictionary, [{
    key: "_createPdfDictionary",
    value: (
    /**
     * 新建一个底层数据的 PDFDictionary对象
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    function () {
      var _createPdfDictionary2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _dictionary, dictionary;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _dictionary = new FPDDictionary();
              _context.next = 3;
              return _dictionary.new();
            case 3:
              dictionary = _context.sent;
              this.$pdfDictionary = dictionary;
              this.$pdfObject = dictionary;
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createPdfDictionary() {
        return _createPdfDictionary2.apply(this, arguments);
      }
      return _createPdfDictionary;
    }()
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.release();
              this.$pdfDictionary = null;
              return _context2.abrupt("return");
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 从当前对象字典中获取元素。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getElement",
    value: (function () {
      var _getElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", null);
            case 2:
              _context3.next = 4;
              return this.$pdfDictionary.getElement(key);
            case 4:
              fpdObj = _context3.sent;
              _context3.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context3.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context3.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getElement(_x) {
        return _getElement.apply(this, arguments);
      }
      return getElement;
    }()
    /**
     * 从当前对象字典中获取元素的值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getElementValue",
    value: (function () {
      var _getElementValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key) {
        var fpdDict, pdfDict;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", null);
            case 2:
              _context4.next = 4;
              return this.$pdfDictionary.getElementValue(key);
            case 4:
              fpdDict = _context4.sent;
              _context4.next = 7;
              return PDFObject.create();
            case 7:
              pdfDict = _context4.sent;
              pdfDict.$pdfObject = fpdDict;
              return _context4.abrupt("return", pdfDict);
            case 10:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getElementValue(_x2) {
        return _getElementValue.apply(this, arguments);
      }
      return getElementValue;
    }()
    /**
     * 设置对象字典中的元素。
     * @param {string} key - 要设置的元素键名。
     * @param {PDFObjectType} obj - 要设置的元素值，类型为 PDFObjectType。
     * @param {FPDDoc} doc - 文档对象，类型为 FPDDoc。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAt",
    value: (function () {
      var _setAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, obj, doc) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(obj) || _$1.isEmpty(obj.$pdfObject) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              _context5.next = 4;
              return this.$pdfDictionary.setAt(key, obj.$pdfObject, doc.$fpdDoc);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setAt(_x3, _x4, _x5) {
        return _setAt.apply(this, arguments);
      }
      return setAt;
    }()
    /**
     * 设置当前对象字典中的元素名称。
     * @param {string} key - 元素键名
     * @param {string} name - 元素名称
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtName",
    value: (function () {
      var _setAtName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, name) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(name))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$pdfDictionary.setAtName(key, name);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setAtName(_x6, _x7) {
        return _setAtName.apply(this, arguments);
      }
      return setAtName;
    }()
    /**
     * 从当前对象字典中获取名称值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key) {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", null);
            case 2:
              _context7.next = 4;
              return this.$pdfDictionary.getName(key);
            case 4:
              fpdObj = _context7.sent;
              _context7.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context7.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context7.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getName(_x8) {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 设置对象字典中的元素为字符串。
     * @param {string} key - 要设置的元素键名
     * @param {string} str - 要设置的字符串值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtString",
    value: (function () {
      var _setAtString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(key, str) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(str))) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return");
            case 2:
              _context8.next = 4;
              return this.$pdfDictionary.setAtString(key, str);
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function setAtString(_x9, _x10) {
        return _setAtString.apply(this, arguments);
      }
      return setAtString;
    }()
    /**
     * 从当前对象字典中获取字符串值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(key) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", '');
            case 2:
              _context9.next = 4;
              return this.$pdfDictionary.getString(key);
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getString(_x11) {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 从当前对象字典中获取 Unicode 文本值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getUnicodeText",
    value: (function () {
      var _getUnicodeText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(key) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", '');
            case 2:
              _context10.next = 4;
              return this.$pdfDictionary.getUnicodeText(key);
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getUnicodeText(_x12) {
        return _getUnicodeText.apply(this, arguments);
      }
      return getUnicodeText;
    }()
    /**
     * 在当前对象字典中设置一个整数值。
     * @param {string} key - 要获取的元素键名。
     * @param {number} num - 要设置的整数值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtInteger",
    value: (function () {
      var _setAtInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(key, num) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || !_$1.isNumber(num))) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return");
            case 2:
              _context11.next = 4;
              return this.$pdfDictionary.setAtInteger(key, num);
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setAtInteger(_x13, _x14) {
        return _setAtInteger.apply(this, arguments);
      }
      return setAtInteger;
    }()
    /**
     * 从当前对象字典中获取整数值。
     * @param key - 要获取的元素键名。
     * @param defaultInt - 默认整数值。没有获取到则会返回默认值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger2",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(key, defaultInt) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || !_$1.isNumber(defaultInt))) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", Infinity);
            case 2:
              _context12.next = 4;
              return this.$pdfDictionary.getInteger2(key, defaultInt);
            case 4:
              return _context12.abrupt("return", _context12.sent);
            case 5:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getInteger2(_x15, _x16) {
        return _getInteger.apply(this, arguments);
      }
      return getInteger2;
    }()
    /**
     * 在当前对象字典中设置一个数字值。
     * @param {string} key - 要获取的元素键名。
     * @param {number} num - 要设置的数字值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtNumber",
    value: (function () {
      var _setAtNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(key, num) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || !_$1.isNumber(num))) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return");
            case 2:
              _context13.next = 4;
              return this.$pdfDictionary.setAtNumber(key, num);
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function setAtNumber(_x17, _x18) {
        return _setAtNumber.apply(this, arguments);
      }
      return setAtNumber;
    }()
    /**
     * 从当前对象字典中获取数字值。
     * @param {string} key - 要获取的元素键名。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(key) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return", Infinity);
            case 2:
              _context14.next = 4;
              return this.$pdfDictionary.getNumber(key);
            case 4:
              return _context14.abrupt("return", _context14.sent);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getNumber(_x19) {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 从当前对象字典中获取一个子对象。
     * @param {string} key - 要获取的子对象的键名。
     * @returns {Promise<PDFDictionaryType | null>}
     */
    )
  }, {
    key: "getDict",
    value: (function () {
      var _getDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(key) {
        var fpdDict, pdfDict;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context15.next = 2;
                break;
              }
              return _context15.abrupt("return", null);
            case 2:
              _context15.next = 4;
              return this.$pdfDictionary.getDict(key);
            case 4:
              fpdDict = _context15.sent;
              _context15.next = 7;
              return PDFDictionary.create();
            case 7:
              pdfDict = _context15.sent;
              pdfDict.$pdfDictionary = fpdDict;
              return _context15.abrupt("return", pdfDict);
            case 10:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getDict(_x20) {
        return _getDict.apply(this, arguments);
      }
      return getDict;
    }()
    /**
     * 从当前对象字典中获取一个数组。
     * @param {string} key - 要获取的数组的键名。
     * @returns {Promise<PDFArrayType | null>}
     */
    )
  }, {
    key: "getArray",
    value: (function () {
      var _getArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(key) {
        var fpdArr, pdfArr;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context16.next = 2;
                break;
              }
              return _context16.abrupt("return", null);
            case 2:
              _context16.next = 4;
              return this.$pdfDictionary.getArray(key);
            case 4:
              fpdArr = _context16.sent;
              _context16.next = 7;
              return PDFArray.create();
            case 7:
              pdfArr = _context16.sent;
              pdfArr.$pdfArray = fpdArr;
              return _context16.abrupt("return", pdfArr);
            case 10:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getArray(_x21) {
        return _getArray.apply(this, arguments);
      }
      return getArray;
    }()
    /**
     * 在当前对象字典中设置一个矩形值。
     * @param {string} key - 要设置的矩形的键名。
     * @param {Object} rect - 矩形对象，包含 top、right、bottom 和 left 属性。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtRect",
    value: (function () {
      var _setAtRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(key, rect) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(rect))) {
                _context17.next = 2;
                break;
              }
              return _context17.abrupt("return");
            case 2:
              _context17.next = 4;
              return this.$pdfDictionary.setAtRect(key, rect);
            case 4:
              return _context17.abrupt("return", _context17.sent);
            case 5:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function setAtRect(_x22, _x23) {
        return _setAtRect.apply(this, arguments);
      }
      return setAtRect;
    }()
    /**
     * 从当前对象字典中获取一个矩形值。
     * @param {string} key - 要获取的数组的键名。
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(key) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context18.next = 2;
                break;
              }
              return _context18.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context18.next = 4;
              return this.$pdfDictionary.getRect(key);
            case 4:
              return _context18.abrupt("return", _context18.sent);
            case 5:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function getRect(_x24) {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 在当前对象字典中设置一个矩阵值。
     * @param {string} key - 要设置的矩阵的键名。
     * @param {Matrix} matrix - 矩阵对象，包含 a、b、c、d、e 和 f 属性。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtMatrix",
    value: (function () {
      var _setAtMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(key, matrix) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(matrix))) {
                _context19.next = 2;
                break;
              }
              return _context19.abrupt("return");
            case 2:
              _context19.next = 4;
              return this.$pdfDictionary.setAtMatrix(key, matrix);
            case 4:
              return _context19.abrupt("return", _context19.sent);
            case 5:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function setAtMatrix(_x25, _x26) {
        return _setAtMatrix.apply(this, arguments);
      }
      return setAtMatrix;
    }()
    /**
     * 从当前对象字典中获取一个矩阵值。
     * @param {string} key          - 要获取的矩阵的键名。
     * @returns {Promise<Matrix>}
     */
    )
  }, {
    key: "getMatrix",
    value: (function () {
      var _getMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(key) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context20.next = 2;
                break;
              }
              return _context20.abrupt("return", {
                a: Infinity,
                b: Infinity,
                c: Infinity,
                d: Infinity,
                e: Infinity,
                f: Infinity
              });
            case 2:
              _context20.next = 4;
              return this.$pdfDictionary.getMatrix(key);
            case 4:
              return _context20.abrupt("return", _context20.sent);
            case 5:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function getMatrix(_x27) {
        return _getMatrix.apply(this, arguments);
      }
      return getMatrix;
    }()
    /**
     * 从当前对象字典中获取一个浮点数值。
     * @param {string} key          - 要获取的数值的键名。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFloat",
    value: (function () {
      var _getFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(key) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context21.next = 2;
                break;
              }
              return _context21.abrupt("return", Infinity);
            case 2:
              _context21.next = 4;
              return this.$pdfDictionary.getFloat(key);
            case 4:
              return _context21.abrupt("return", _context21.sent);
            case 5:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function getFloat(_x28) {
        return _getFloat.apply(this, arguments);
      }
      return getFloat;
    }()
    /**
     * 检查当前对象字典中是否存在某个键。
     * @param {string} key - 要检查的键名。
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "keyExist",
    value: (function () {
      var _keyExist = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(key) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context22.next = 2;
                break;
              }
              return _context22.abrupt("return", false);
            case 2:
              _context22.next = 4;
              return this.$pdfDictionary.keyExist(key);
            case 4:
              return _context22.abrupt("return", _context22.sent);
            case 5:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function keyExist(_x29) {
        return _keyExist.apply(this, arguments);
      }
      return keyExist;
    }()
    /**
     * 获取字典的开始位置。
     * @returns {Promise<POSITION | null>}
     */
    )
  }, {
    key: "getStartPosition",
    value: (function () {
      var _getStartPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {
        var pos, position;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfDictionary)) {
                _context23.next = 2;
                break;
              }
              return _context23.abrupt("return", null);
            case 2:
              _context23.next = 4;
              return this.$pdfDictionary.getStartPosition();
            case 4:
              pos = _context23.sent;
              _context23.next = 7;
              return POSITION.create();
            case 7:
              position = _context23.sent;
              position.set(pos);
              return _context23.abrupt("return", position);
            case 10:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function getStartPosition() {
        return _getStartPosition.apply(this, arguments);
      }
      return getStartPosition;
    }()
    /**
     * 在当前对象字典中设置一个指向文档的引用。
     * @param {string} key - 要设置引用的键名。
     * @param {DocType} doc - 文档对象，类型为 FPDDoc。
     * @param {number} objNum - 对象编号。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtReferenceToDoc",
    value: (function () {
      var _setAtReferenceToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(key, doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc) || _$1.isEmpty(objNum))) {
                _context24.next = 2;
                break;
              }
              return _context24.abrupt("return");
            case 2:
              _context24.next = 4;
              return this.$pdfDictionary.setAtReferenceToDoc(key, doc.$fpdDoc, objNum);
            case 4:
              return _context24.abrupt("return", _context24.sent);
            case 5:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
      function setAtReferenceToDoc(_x30, _x31, _x32) {
        return _setAtReferenceToDoc.apply(this, arguments);
      }
      return setAtReferenceToDoc;
    }()
    /**
     * 在当前对象字典中设置一个指向文档的引用。
     *  @param {string} key - 要设置引用的键名。
     *  @param {DocType} doc - 文档对象，类型为 FPDDoc。
     *  @param {PDFObjectType} obj - 要引用的对象，类型为 FPDObject。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtReference2ToDoc",
    value: (function () {
      var _setAtReference2ToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(key, doc, obj) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc) || _$1.isEmpty(obj) || _$1.isEmpty(obj.$pdfObject))) {
                _context25.next = 2;
                break;
              }
              return _context25.abrupt("return");
            case 2:
              _context25.next = 4;
              return this.$pdfDictionary.setAtReference2ToDoc(key, doc.$fpdDoc, obj.$pdfObject);
            case 4:
              return _context25.abrupt("return", _context25.sent);
            case 5:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
      function setAtReference2ToDoc(_x33, _x34, _x35) {
        return _setAtReference2ToDoc.apply(this, arguments);
      }
      return setAtReference2ToDoc;
    }()
    /**
     * 设置一个布尔值。
     * @param {string} key - 键名
     * @param {boolean} bool - 布尔值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAtBoolean",
    value: (function () {
      var _setAtBoolean = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(key, bool) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context26.next = 2;
                break;
              }
              return _context26.abrupt("return");
            case 2:
              _context26.next = 4;
              return this.$pdfDictionary.setAtBoolean(key, !!bool);
            case 4:
              return _context26.abrupt("return", _context26.sent);
            case 5:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
      function setAtBoolean(_x36, _x37) {
        return _setAtBoolean.apply(this, arguments);
      }
      return setAtBoolean;
    }()
    /**
     * 获取布尔值
     * @param {string} key - 键名
     * @param {boolean} defaultBool - 默认布尔值，如果没有获取到，则返回的是这个默认值
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "getBoolean2",
    value: (function () {
      var _getBoolean = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(key, defaultBool) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context27.next = 2;
                break;
              }
              return _context27.abrupt("return", false);
            case 2:
              _context27.next = 4;
              return this.$pdfDictionary.getBoolean2(key, !!defaultBool);
            case 4:
              return _context27.abrupt("return", _context27.sent);
            case 5:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
      function getBoolean2(_x38, _x39) {
        return _getBoolean.apply(this, arguments);
      }
      return getBoolean2;
    }()
    /**
     * 移除字典中的某个键。
     * @param key - 键名
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(key) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context28.next = 2;
                break;
              }
              return _context28.abrupt("return");
            case 2:
              _context28.next = 4;
              return this.$pdfDictionary.removeAt(key);
            case 4:
              return _context28.abrupt("return", _context28.sent);
            case 5:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
      function removeAt(_x40) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 替换字典中的键。
     * @param {string} oldKey - 旧的键名
     * @param {string} newKey - 新的键名
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "replaceKey",
    value: (function () {
      var _replaceKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(oldKey, newKey) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(oldKey) || _$1.isEmpty(newKey))) {
                _context29.next = 2;
                break;
              }
              return _context29.abrupt("return");
            case 2:
              _context29.next = 4;
              return this.$pdfDictionary.replaceKey(oldKey, newKey);
            case 4:
              return _context29.abrupt("return", _context29.sent);
            case 5:
            case "end":
              return _context29.stop();
          }
        }, _callee29, this);
      }));
      function replaceKey(_x41, _x42) {
        return _replaceKey.apply(this, arguments);
      }
      return replaceKey;
    }()
    /**
     * 判断另一个字典对象和当前字典是否相同。
     * @param {PDFDictionaryType} otherDict - 另一个对象字典
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(otherDict) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(otherDict) || _$1.isEmpty(otherDict.$pdfDictionary))) {
                _context30.next = 2;
                break;
              }
              return _context30.abrupt("return", false);
            case 2:
              _context30.next = 4;
              return this.$pdfDictionary.identical(otherDict.$pdfDictionary);
            case 4:
              return _context30.abrupt("return", _context30.sent);
            case 5:
            case "end":
              return _context30.stop();
          }
        }, _callee30, this);
      }));
      function identical(_x43) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 获取字典的长度。
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getCount",
    value: (function () {
      var _getCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfDictionary)) {
                _context31.next = 2;
                break;
              }
              return _context31.abrupt("return", 0);
            case 2:
              _context31.next = 4;
              return this.$pdfDictionary.getCount();
            case 4:
              return _context31.abrupt("return", _context31.sent);
            case 5:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this);
      }));
      function getCount() {
        return _getCount.apply(this, arguments);
      }
      return getCount;
    }()
    /**
     * 添加一个键值对到字典中。
     * @param {string} key - 键名
     * @param {AddValueObjType} obj - 要添加的对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addValue",
    value: (function () {
      var _addValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(key, obj) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || _$1.isEmpty(obj) || _$1.isEmpty(obj.$pdfObject))) {
                _context32.next = 2;
                break;
              }
              return _context32.abrupt("return");
            case 2:
              _context32.next = 4;
              return this.$pdfDictionary.addValue(key, obj.$pdfObject);
            case 4:
              return _context32.abrupt("return", _context32.sent);
            case 5:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
      function addValue(_x44, _x45) {
        return _addValue.apply(this, arguments);
      }
      return addValue;
    }()
    /**
     * 设置一个新键，并返回一个对象。
     * @param key - 键名
     * @param objectType - 对象类型
     *  FPD_OBJ_INVALID = 0;
     *  FPD_OBJ_BOOLEAN = 1;
     *  FPD_OBJ_NUMBER = 2;
     *  FPD_OBJ_STRING = 3;
     *  FPD_OBJ_NAME = 4;
     *  FPD_OBJ_ARRAY = 5;
     *  FPD_OBJ_DICTIONARY = 6;
     *  FPD_OBJ_STREAM = 7;
     *  FPD_OBJ_NULL = 8;
     *  FPD_OBJ_REFERENCE = 9;
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "setNewAt",
    value: (function () {
      var _setNewAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(key, objectType) {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key) || !_$1.isNumber(objectType))) {
                _context33.next = 2;
                break;
              }
              return _context33.abrupt("return", null);
            case 2:
              _context33.next = 4;
              return this.$pdfDictionary.setNewAt(key, objectType);
            case 4:
              fpdObj = _context33.sent;
              _context33.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context33.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context33.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context33.stop();
          }
        }, _callee33, this);
      }));
      function setNewAt(_x46, _x47) {
        return _setNewAt.apply(this, arguments);
      }
      return setNewAt;
    }()
    /**
     * 向当前对象字典中添加一个指向文档的引用。
     * @param {string} key - 要添加引用的键名。
     * @param {DocType} doc - 文档对象，类型为 FPDDoc。
     * @param {number} objNum - 对象编号。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addReference",
    value: (function () {
      var _addReference = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(key, doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc) || !_$1.isNumber(objNum))) {
                _context34.next = 2;
                break;
              }
              return _context34.abrupt("return");
            case 2:
              _context34.next = 4;
              return this.$pdfDictionary.addReference(key, doc.$fpdDoc, objNum);
            case 4:
              return _context34.abrupt("return", _context34.sent);
            case 5:
            case "end":
              return _context34.stop();
          }
        }, _callee34, this);
      }));
      function addReference(_x48, _x49, _x50) {
        return _addReference.apply(this, arguments);
      }
      return addReference;
    }()
    /**
     * 释放对象。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfDictionary)) {
                _context35.next = 2;
                break;
              }
              return _context35.abrupt("return");
            case 2:
              _context35.next = 4;
              return this.$pdfDictionary.release();
            case 4:
              return _context35.abrupt("return", _context35.sent);
            case 5:
            case "end":
              return _context35.stop();
          }
        }, _callee35, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }()
    /**
     * 从当前对象字典中获取一个 64 位整数值。
     * @param {string} key - 要获取的键名。
     * @returns {Promise<number>} 一个 Promise 对象，操作完成时解析为 64 位整数值。
     */
    )
  }, {
    key: "getInteger64",
    value: (function () {
      var _getInteger2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(key) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfDictionary) || _$1.isEmpty(key))) {
                _context36.next = 2;
                break;
              }
              return _context36.abrupt("return", Infinity);
            case 2:
              _context36.next = 4;
              return this.$pdfDictionary.getInteger64(key);
            case 4:
              return _context36.abrupt("return", _context36.sent);
            case 5:
            case "end":
              return _context36.stop();
          }
        }, _callee36, this);
      }));
      function getInteger64(_x51) {
        return _getInteger2.apply(this, arguments);
      }
      return getInteger64;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              instance = new this(options);
              _context37.next = 3;
              return instance._createPdfDictionary();
            case 3:
              return _context37.abrupt("return", instance);
            case 4:
            case "end":
              return _context37.stop();
          }
        }, _callee37, this);
      }));
      function create(_x52) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFArray = /*#__PURE__*/function () {
  function PDFArray(options) {
    _classCallCheck(this, PDFArray);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfArray", void 0);
    _defineProperty(this, "$pdfObject", void 0);
    this.options = options || {};
    this.$pdfArray = null;
    this.$pdfObject = null;
  }
  /**
   * 创建 PDFArray 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PDFArrayType>}
   */
  return _createClass(PDFArray, [{
    key: "_createPDFArray",
    value: (
    /**
     * 新建一个底层数据的 PDFArray 对象
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    function () {
      var _createPDFArray2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _array, array;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _array = new FPDArray();
              _context.next = 3;
              return _array.new();
            case 3:
              array = _context.sent;
              this.$pdfArray = array;
              this.$pdfObject = array;
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createPDFArray() {
        return _createPDFArray2.apply(this, arguments);
      }
      return _createPDFArray;
    }()
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "destroy",
    value: (function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.release();
              this.$pdfArray = null;
              this.$pdfObject = null;
              return _context2.abrupt("return");
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 根获取 PDFArray长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getCount",
    value: (function () {
      var _getCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", -1);
            case 2:
              _context3.next = 4;
              return this.$pdfArray.getCount();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getCount() {
        return _getCount.apply(this, arguments);
      }
      return getCount;
    }()
    /**
     * 向 PDFArray 实例中添加一个数字。
     * @param {number} num 要添加的数字
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addNumber",
    value: (function () {
      var _addNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(num) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              _context4.next = 4;
              return this.$pdfArray.addNumber(num);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function addNumber(_x) {
        return _addNumber.apply(this, arguments);
      }
      return addNumber;
    }()
    /**
     * 获取 PDFArray 实例中指定索引位置的元素。
     * @param {number} index 要获取的元素的索引位置
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getElement",
    value: (function () {
      var _getElement = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index) {
        var fpdObj, obj;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$pdfArray.getElement(index);
            case 4:
              fpdObj = _context5.sent;
              _context5.next = 7;
              return PDFObject.create();
            case 7:
              obj = _context5.sent;
              obj.$pdfObject = fpdObj;
              return _context5.abrupt("return", obj);
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getElement(_x2) {
        return _getElement.apply(this, arguments);
      }
      return getElement;
    }()
    /**
     * 获取 PDFArray 实例中指定索引位置的元素值。
     * @param {number} index 要获取的元素的索引位置
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getElementValue",
    value: (function () {
      var _getElementValue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(index) {
        var fpdObj, obj;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", null);
            case 2:
              _context6.next = 4;
              return this.$pdfArray.getElementValue(index);
            case 4:
              fpdObj = _context6.sent;
              _context6.next = 7;
              return PDFObject.create();
            case 7:
              obj = _context6.sent;
              obj.$pdfObject = fpdObj;
              return _context6.abrupt("return", obj);
            case 10:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getElementValue(_x3) {
        return _getElementValue.apply(this, arguments);
      }
      return getElementValue;
    }()
    /**
     * 获取实例对应的 matrix。
     * @returns {Promise<Matrix>}
     */
    )
  }, {
    key: "getMatrix",
    value: (function () {
      var _getMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", {
                a: Infinity,
                b: Infinity,
                c: Infinity,
                d: Infinity,
                e: Infinity,
                f: Infinity
              });
            case 2:
              _context7.next = 4;
              return this.$pdfArray.getMatrix();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getMatrix() {
        return _getMatrix.apply(this, arguments);
      }
      return getMatrix;
    }()
    /**
     * 获取实例对应的Rect。
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context8.next = 4;
              return this.$pdfArray.getRect();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getRect() {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 获取指定索引对应的字符串。
     * @param {number} index 要获取的字符串的索引位置
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", '');
            case 2:
              _context9.next = 4;
              return this.$pdfArray.getString(index);
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getString(_x4) {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 获取实例对应的整数。
     * @param {number} index 要获取的整数的索引位置
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", Infinity);
            case 2:
              _context10.next = 4;
              return this.$pdfArray.getInteger(index);
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getInteger(_x5) {
        return _getInteger.apply(this, arguments);
      }
      return getInteger;
    }()
    /**
     * 实例对应的数字。
     * @param {number} index 要获取的整数的索引位置
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(index) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return", Infinity);
            case 2:
              _context11.next = 4;
              return this.$pdfArray.getNumber(index);
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getNumber(_x6) {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 获取实例对应的字典。
     * @param {number} index 要获取的字典的索引位置
     * @returns {Promise<PDFDictionaryType | null>}
     */
    )
  }, {
    key: "getDict",
    value: (function () {
      var _getDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index) {
        var fpdDictionary, pdfDictionary;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", null);
            case 2:
              _context12.next = 4;
              return this.$pdfArray.getDict(index);
            case 4:
              fpdDictionary = _context12.sent;
              _context12.next = 7;
              return PDFDictionary.create();
            case 7:
              pdfDictionary = _context12.sent;
              pdfDictionary.$pdfDictionary = fpdDictionary;
              return _context12.abrupt("return", pdfDictionary);
            case 10:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getDict(_x7) {
        return _getDict.apply(this, arguments);
      }
      return getDict;
    }()
    /**
     * 获取实例对应的流。
     * @param {number} index 要获取的字典的索引位置
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getStream",
    value: (function () {
      var _getStream = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(index) {
        var fpdObj, obj;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return", null);
            case 2:
              _context13.next = 4;
              return this.$pdfArray.getStream(index);
            case 4:
              fpdObj = _context13.sent;
              _context13.next = 7;
              return PDFObject.create();
            case 7:
              obj = _context13.sent;
              obj.$pdfObject = fpdObj;
              return _context13.abrupt("return", obj);
            case 10:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getStream(_x8) {
        return _getStream.apply(this, arguments);
      }
      return getStream;
    }()
    /**
     * 获取 PDFArray 实例对应的数组。
     * @param {number} index 要获取的数组的索引位置
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getArray",
    value: (function () {
      var _getArray = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(index) {
        var fpdObj, obj;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return", null);
            case 2:
              _context14.next = 4;
              return this.$pdfArray.getArray(index);
            case 4:
              fpdObj = _context14.sent;
              _context14.next = 7;
              return PDFObject.create();
            case 7:
              obj = _context14.sent;
              obj.$pdfObject = fpdObj;
              return _context14.abrupt("return", obj);
            case 10:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getArray(_x9) {
        return _getArray.apply(this, arguments);
      }
      return getArray;
    }()
    /**
     * 获取实例对应的浮点数。
     * @param {number} index 要获取的字典的索引位置
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFloat",
    value: (function () {
      var _getFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(index) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context15.next = 2;
                break;
              }
              return _context15.abrupt("return", Infinity);
            case 2:
              _context15.next = 4;
              return this.$pdfArray.getFloat(index);
            case 4:
              return _context15.abrupt("return", _context15.sent);
            case 5:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getFloat(_x10) {
        return _getFloat.apply(this, arguments);
      }
      return getFloat;
    }()
    /**
     * 设置 PDFArray 实例中指定索引位置的元素。
     * @param {Object}
     *  index 要设置的元素的索引位置
     *  otherFpdObj 要设置的元素
     *  objs 间接对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAt",
    value: (function () {
      var _setAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(options) {
        var index, otherObj, objs, params;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              index = options.index;
              otherObj = options.otherObj;
              objs = options.objs;
              if (!(_$1.isEmpty(this.$pdfArray) || _$1.isEmpty(otherObj) || _$1.isEmpty(otherObj.$pdfObject))) {
                _context16.next = 5;
                break;
              }
              return _context16.abrupt("return");
            case 5:
              params = {
                index: index,
                otherObj: otherObj.$pdfObject,
                objs: objs
              };
              _context16.next = 8;
              return this.$pdfArray.setAt(params);
            case 8:
              return _context16.abrupt("return", _context16.sent);
            case 9:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function setAt(_x11) {
        return _setAt.apply(this, arguments);
      }
      return setAt;
    }()
    /**
     * 在 PDFArray 实例中指定索引位置插入元素。
     * @param {Object}
     *  index 要插入元素的索引位置
     *  otherObj 要插入的元素
     *  doc Doc 实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "insertAt",
    value: (function () {
      var _insertAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(_ref) {
        var index, otherObj, doc;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              index = _ref.index, otherObj = _ref.otherObj, doc = _ref.doc;
              if (!(_$1.isEmpty(this.$pdfArray) || _$1.isEmpty(otherObj) || _$1.isEmpty(otherObj.$pdfObject) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context17.next = 3;
                break;
              }
              return _context17.abrupt("return");
            case 3:
              _context17.next = 5;
              return this.$pdfArray.insertAt({
                index: index,
                otherObj: otherObj.$pdfObject,
                doc: doc.$fpdDoc
              });
            case 5:
              return _context17.abrupt("return", _context17.sent);
            case 6:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function insertAt(_x12) {
        return _insertAt.apply(this, arguments);
      }
      return insertAt;
    }()
    /**
     * 从 PDFArray 实例中删除指定索引位置的元素。
     * @param {number} index 要删除元素的索引位置
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(index) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context18.next = 2;
                break;
              }
              return _context18.abrupt("return");
            case 2:
              _context18.next = 4;
              return this.$pdfArray.removeAt(index);
            case 4:
              return _context18.abrupt("return", _context18.sent);
            case 5:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function removeAt(_x13) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 在 PDFArray 实例中添加元素。
     * @param {PDFObjectType} otherObj 要添加的元素
     * @param {DocType} doc Doc实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(otherObj, doc) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfArray) || _$1.isEmpty(otherObj) || _$1.isEmpty(otherObj.$pdfObject) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context19.next = 2;
                break;
              }
              return _context19.abrupt("return");
            case 2:
              _context19.next = 4;
              return this.$pdfArray.add(otherObj.$pdfObject, doc.$fpdDoc);
            case 4:
              return _context19.abrupt("return", _context19.sent);
            case 5:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function add(_x14, _x15) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 向指定的对象添加一个整数值。
     * @param {number} value - 要添加的整数值。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addInteger",
    value: (function () {
      var _addInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(value) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context20.next = 2;
                break;
              }
              return _context20.abrupt("return");
            case 2:
              _context20.next = 4;
              return this.$pdfArray.addInteger(value);
            case 4:
              return _context20.abrupt("return", _context20.sent);
            case 5:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function addInteger(_x16) {
        return _addInteger.apply(this, arguments);
      }
      return addInteger;
    }()
    /**
     * 向指定的对象添加一个字符串。
     * @param {string} str 要添加的字符串 默认为空
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addString",
    value: (function () {
      var _addString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {
        var str,
          _args21 = arguments;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              str = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : '';
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context21.next = 3;
                break;
              }
              return _context21.abrupt("return");
            case 3:
              _context21.next = 5;
              return this.$pdfArray.addString(str);
            case 5:
              return _context21.abrupt("return", _context21.sent);
            case 6:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function addString() {
        return _addString.apply(this, arguments);
      }
      return addString;
    }()
    /**
     * 向指定的对象添加一个名称。
     * @param {string} name - 要添加的名称，默认为空字符串 ''。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addName",
    value: (function () {
      var _addName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {
        var name,
          _args22 = arguments;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              name = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : '';
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context22.next = 3;
                break;
              }
              return _context22.abrupt("return");
            case 3:
              _context22.next = 5;
              return this.$pdfArray.addName(name);
            case 5:
              return _context22.abrupt("return", _context22.sent);
            case 6:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function addName() {
        return _addName.apply(this, arguments);
      }
      return addName;
    }()
    /**
     * 将一个对象引用添加到文档中。
     * @param {DocType} doc - 文档对象，类型为 Doc。
     * @param {number} objNum - 对象编号。
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addReferenceToDoc",
    value: (function () {
      var _addReferenceToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(doc, objNum) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfArray) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context23.next = 2;
                break;
              }
              return _context23.abrupt("return");
            case 2:
              _context23.next = 4;
              return this.$pdfArray.addReferenceToDoc(doc.$fpdDoc, objNum);
            case 4:
              return _context23.abrupt("return", _context23.sent);
            case 5:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function addReferenceToDoc(_x17, _x18) {
        return _addReferenceToDoc.apply(this, arguments);
      }
      return addReferenceToDoc;
    }()
    /**
     * 将一个对象引用添加到文档中。
     * @param {DocType} doc - 文档对象，类型为 DocType
     * @param {PDFObjectType} obj - 另一个需要引用的对象，类型为 PDFObjectType
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addReference2ToDoc",
    value: (function () {
      var _addReference2ToDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(doc, obj) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfArray) || _$1.isEmpty(obj) || _$1.isEmpty(obj.$pdfObject) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context24.next = 2;
                break;
              }
              return _context24.abrupt("return");
            case 2:
              _context24.next = 4;
              return this.$pdfArray.addReference2ToDoc(doc.$fpdDoc, obj.$pdfObject);
            case 4:
              return _context24.abrupt("return", _context24.sent);
            case 5:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
      function addReference2ToDoc(_x19, _x20) {
        return _addReference2ToDoc.apply(this, arguments);
      }
      return addReference2ToDoc;
    }()
    /**
     * 判断两个对象是否相同。
     * @param {PDFObjectType} obj PDFObjectType 实例
     * @param {PDFObjectType} otherObj PDFObjectType 实例
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isIdentical",
    value: (function () {
      var _isIdentical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(obj, otherObj) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfArray) || _$1.isEmpty(obj) || _$1.isEmpty(obj.$pdfObject) || _$1.isEmpty(otherObj) || _$1.isEmpty(otherObj.$pdfObject))) {
                _context25.next = 2;
                break;
              }
              return _context25.abrupt("return", false);
            case 2:
              _context25.next = 4;
              return this.$pdfArray.isIdentical(obj.$pdfObject, otherObj.$pdfObject);
            case 4:
              return _context25.abrupt("return", _context25.sent);
            case 5:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
      function isIdentical(_x21, _x22) {
        return _isIdentical.apply(this, arguments);
      }
      return isIdentical;
    }()
    /**
     * 添加一个新对象。
     * @param {PDFObjectType} obj PDFObjectType 实例
     * @param {number} PDFObjectType 对象类型
     *  FPD_PAGEOBJ_TEXT = 1;
     *  FPD_PAGEOBJ_PATH = 2;
     *  FPD_PAGEOBJ_IMAGE = 3;
     *  FPD_PAGEOBJ_SHADING = 4;
     *  FPD_PAGEOBJ_FORM = 5;
     *  FPD_PAGEOBJ_INLINES = 6;
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "addNew",
    value: (function () {
      var _addNew = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(obj, PDFObjectType) {
        var fpdObj, object;
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfArray) || _$1.isEmpty(obj) || _$1.isEmpty(obj.$pdfObject))) {
                _context26.next = 2;
                break;
              }
              return _context26.abrupt("return", null);
            case 2:
              _context26.next = 4;
              return this.$pdfArray.addNew(obj.$pdfObject, PDFObjectType);
            case 4:
              fpdObj = _context26.sent;
              _context26.next = 7;
              return PDFObject.create();
            case 7:
              object = _context26.sent;
              object.$pdfObject = fpdObj;
              return _context26.abrupt("return", object);
            case 10:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
      function addNew(_x23, _x24) {
        return _addNew.apply(this, arguments);
      }
      return addNew;
    }()
    /**
     * 释放 PDFArray
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfArray)) {
                _context27.next = 2;
                break;
              }
              return _context27.abrupt("return");
            case 2:
              _context27.next = 4;
              return this.$pdfArray.release();
            case 4:
              return _context27.abrupt("return", _context27.sent);
            case 5:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              instance = new this(options);
              _context28.next = 3;
              return instance._createPDFArray();
            case 3:
              return _context28.abrupt("return", instance);
            case 4:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
      function create(_x25) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFBoolean = /*#__PURE__*/function () {
  function PDFBoolean(options) {
    _classCallCheck(this, PDFBoolean);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfBoolean", void 0);
    _defineProperty(this, "$pdfObject", void 0);
    this.options = options || {};
    this.$pdfBoolean = null;
    this.$pdfObject = null;
  }
  /**
   * 新建一个底层数据的boolean对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(PDFBoolean, [{
    key: "_createBoolean",
    value: (function () {
      var _createBoolean2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _boolean, boolean;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _boolean = new FPDBoolean();
              _context.next = 3;
              return _boolean.new(!!this.options.bool);
            case 3:
              boolean = _context.sent;
              this.$pdfBoolean = boolean;
              this.$pdfObject = boolean;
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createBoolean() {
        return _createBoolean2.apply(this, arguments);
      }
      return _createBoolean;
    }()
    /**
     * 创建 PDFBoolean 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。bool 属性是选填的。不填默认为 false。
     * @returns {Promise<PDFBooleanType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.$pdfBoolean = null;
              this.$pdfObject = null;
              return _context2.abrupt("return");
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 检查另一个 PDFBoolean 和当前实例是否相同。
     * @param {PDFBooleanType} otherBool 第二个 PDFBoolean 实例
     * @returns {Promise<boolean>} 如果两个对象相同则返回 true，否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(otherBool) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfBoolean) || _$1.isEmpty(otherBool) || _$1.isEmpty(otherBool.$pdfBoolean))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", false);
            case 2:
              _context3.next = 4;
              return this.$pdfBoolean.identical(otherBool.$pdfBoolean);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function identical(_x) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              instance = new this(options);
              _context4.next = 3;
              return instance._createBoolean();
            case 3:
              return _context4.abrupt("return", instance);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function create(_x2) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var ColorState = /*#__PURE__*/function () {
  function ColorState(options) {
    _classCallCheck(this, ColorState);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$colorState", void 0);
    this.options = options || {};
    this.$colorState = null;
    this._createColorState();
  }
  /**
   * 新建一个底层数据的ColorState对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(ColorState, [{
    key: "_createColorState",
    value: (function () {
      var _createColorState2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _colorState, colorState;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _colorState = new FPDColorState();
              _context.next = 3;
              return _colorState.new();
            case 3:
              colorState = _context.sent;
              this.$colorState = colorState;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createColorState() {
        return _createColorState2.apply(this, arguments);
      }
      return _createColorState;
    }()
    /**
     * 创建 ColorState 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。bool 属性是选填的。不填默认为 false。
     * @returns {Promise<ColorStateType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁一个 FPDColorState 类
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$colorState)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              _context2.next = 4;
              return this.$colorState.destroy();
            case 4:
              this.$colorState = null;
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取填充颜色
     * @returns {Promise<Color | null>} 返回一Color实例，表示填充颜色
     */
    )
  }, {
    key: "getFillColor",
    value: (function () {
      var _getFillColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$colorState)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", null);
            case 2:
              _context3.next = 4;
              return this.$colorState.getFillColor();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getFillColor() {
        return _getFillColor.apply(this, arguments);
      }
      return getFillColor;
    }()
    /**
     * 设置填充颜色
     * @param {ColorSpace} clrSpace 填充颜色的颜色空间，定义了颜色的解释方式
     * @param {Array<number>} value 指向填充颜色值的浮点数指针
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFillColor",
    value: (function () {
      var _setFillColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(clrSpace, value) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$colorState)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              _context4.next = 4;
              return this.$colorState.setFillColor(clrSpace, value);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setFillColor(_x, _x2) {
        return _setFillColor.apply(this, arguments);
      }
      return setFillColor;
    }()
    /**
     * 取描边颜色
     * @returns {Promise<Color | null>} 返回Color实例，表示描边颜色
     */
    )
  }, {
    key: "getStrokeColor",
    value: (function () {
      var _getStrokeColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$colorState)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$colorState.getStrokeColor();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getStrokeColor() {
        return _getStrokeColor.apply(this, arguments);
      }
      return getStrokeColor;
    }()
    /**
     * 设置描边颜色
     * @param {ColorSpace} clrSpace 填充颜色的颜色空间，定义了颜色的解释方式
     * @param {Array<number>} value 指向填充颜色值的浮点数指针
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setStrokeColor",
    value: (function () {
      var _setStrokeColor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(clrSpace, value) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$colorState)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$colorState.setStrokeColor(clrSpace, value);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setStrokeColor(_x3, _x4) {
        return _setStrokeColor.apply(this, arguments);
      }
      return setStrokeColor;
    }()
    /**
     * 判断是否为空
     * @returns {Promise<boolean>} 返回一个布尔值，表示是否为空
     */
    )
  }, {
    key: "isNull",
    value: (function () {
      var _isNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$colorState)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", true);
            case 2:
              _context7.next = 4;
              return this.$colorState.isNull();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function isNull() {
        return _isNull.apply(this, arguments);
      }
      return isNull;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              _context8.next = 3;
              return instance._createColorState();
            case 3:
              return _context8.abrupt("return", instance);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x5) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Dest = /*#__PURE__*/function () {
  function Dest(options) {
    _classCallCheck(this, Dest);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$dest", void 0);
    this.options = options || {};
    this.$dest = null;
  }
  /**
   * 新建一个底层数据的Dest对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(Dest, [{
    key: "_createDest",
    value: (function () {
      var _createDest2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var pdfObject, _dest, dest;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              pdfObject = this.options.pdfObject;
              if (!(_$1.isEmpty(pdfObject) || _$1.isEmpty(pdfObject.$pdfObject))) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return");
            case 3:
              _dest = new FPDDest();
              _context.next = 6;
              return _dest.new(pdfObject.$pdfObject);
            case 6:
              dest = _context.sent;
              this.$dest = dest;
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createDest() {
        return _createDest2.apply(this, arguments);
      }
      return _createDest;
    }()
    /**
     * 创建 Dest 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<DestType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁目标位置
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$dest)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              _context2.next = 4;
              return this.$dest.destroy();
            case 4:
              this.$dest = null;
              return _context2.abrupt("return");
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取目标位置的页索引
     * @param {DocType} doc - 目标位置所在的文档对象
     * @returns {Promise<number>} - 目标位置的页索引
     */
    )
  }, {
    key: "getPageIndex",
    value: (function () {
      var _getPageIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(doc) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_$1.isEmpty(this.$dest) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", -1);
            case 2:
              _context3.next = 4;
              return this.$dest.getPageIndex(doc.$fpdDoc);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getPageIndex(_x) {
        return _getPageIndex.apply(this, arguments);
      }
      return getPageIndex;
    }()
    /**
     * 获取目标位置的页对象编号
     * @param {DocType} doc
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getPageObjNum",
    value: (function () {
      var _getPageObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(doc) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$dest) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", -1);
            case 2:
              _context4.next = 4;
              return this.$dest.getPageObjNum(doc.$fpdDoc);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPageObjNum(_x2) {
        return _getPageObjNum.apply(this, arguments);
      }
      return getPageObjNum;
    }()
    /**
     * 获取目标位置的缩放模式
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getZoomMode",
    value: (function () {
      var _getZoomMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$dest)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", -1);
            case 2:
              _context5.next = 4;
              return this.$dest.getZoomMode();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getZoomMode() {
        return _getZoomMode.apply(this, arguments);
      }
      return getZoomMode;
    }()
    /**
     * 检查目标位置的 PDF 对象是否为空
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "checkObjectIsNull",
    value: (function () {
      var _checkObjectIsNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$dest)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", true);
            case 2:
              _context6.next = 4;
              return this.$dest.checkObjectIsNull();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function checkObjectIsNull() {
        return _checkObjectIsNull.apply(this, arguments);
      }
      return checkObjectIsNull;
    }()
    /**
     * 获取目标位置的 PDF 对象
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getPDFObject2",
    value: (function () {
      var _getPDFObject = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var fpdPbj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$dest)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", null);
            case 2:
              _context7.next = 4;
              return this.$dest.getPDFObject2();
            case 4:
              fpdPbj = _context7.sent;
              _context7.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context7.sent;
              pdfObj.$pdfObject = fpdPbj;
              return _context7.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getPDFObject2() {
        return _getPDFObject.apply(this, arguments);
      }
      return getPDFObject2;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              _context8.next = 3;
              return instance._createDest();
            case 3:
              return _context8.abrupt("return", instance);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x3) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFFont = /*#__PURE__*/function () {
  function PDFFont(options) {
    _classCallCheck(this, PDFFont);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfFont", void 0);
    this.options = options || {};
    this.$pdfFont = new FPDFont();
  }
  /**
   * 创建 PDFFont 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PDFFontType>}
   */
  return _createClass(PDFFont, [{
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.$pdfFont = null;
              return _context.abrupt("return");
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取文档中的标准字体
     * @param {DocType} doc
     * @param {string} fontName
     * @returns {Promise<PDFFontType | null>}
     */
    )
  }, {
    key: "getStockFont",
    value: (function () {
      var _getStockFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(doc, fontName) {
        var fpdFont, pdfFont;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfFont) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$pdfFont.getStockFont(doc.$fpdDoc, fontName);
            case 4:
              fpdFont = _context2.sent;
              _context2.next = 7;
              return PDFFont.create();
            case 7:
              pdfFont = _context2.sent;
              pdfFont.$pdfFont = fpdFont;
              return _context2.abrupt("return", pdfFont);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getStockFont(_x, _x2) {
        return _getStockFont.apply(this, arguments);
      }
      return getStockFont;
    }()
    /**
     * 获取字体类型
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontType",
    value: (function () {
      var _getFontType = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfFont)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", -1);
            case 2:
              _context3.next = 4;
              return this.$pdfFont.getFontType();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getFontType() {
        return _getFontType.apply(this, arguments);
      }
      return getFontType;
    }()
    /**
     * 获取字体类型名称
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getFontTypeName",
    value: (function () {
      var _getFontTypeName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfFont)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", '');
            case 2:
              _context4.next = 4;
              return this.$pdfFont.getFontTypeName();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getFontTypeName() {
        return _getFontTypeName.apply(this, arguments);
      }
      return getFontTypeName;
    }()
    /**
     * 获取字体字典
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getFontDict",
    value: (function () {
      var _getFontDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfFont)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", null);
            case 2:
              _context5.next = 4;
              return this.$pdfFont.getFontDict();
            case 4:
              fpdObj = _context5.sent;
              _context5.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context5.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context5.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getFontDict() {
        return _getFontDict.apply(this, arguments);
      }
      return getFontDict;
    }()
    /**
     * 是否是标准字体
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isStandardFont",
    value: (function () {
      var _isStandardFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfFont)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", false);
            case 2:
              _context6.next = 4;
              return this.$pdfFont.isStandardFont();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function isStandardFont() {
        return _isStandardFont.apply(this, arguments);
      }
      return isStandardFont;
    }()
    /**
     * 获取给定Unicode字符的字符代码
     * @param {string} unicode Unicode字符串，表示一个或多个字符
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "charCodeFromUnicode",
    value: (function () {
      var _charCodeFromUnicode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(unicode) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfFont)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", Infinity);
            case 2:
              _context7.next = 4;
              return this.$pdfFont.charCodeFromUnicode(unicode);
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function charCodeFromUnicode(_x3) {
        return _charCodeFromUnicode.apply(this, arguments);
      }
      return charCodeFromUnicode;
    }()
    /**
     * 获取字体对应的文档
     * @returns {Promise<DocType | null>}
     */
    )
  }, {
    key: "getDoc",
    value: (function () {
      var _getDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var doc, _frDoc, fpdDoc, frDoc;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return Doc.create();
            case 2:
              doc = _context8.sent;
              _frDoc = doc.$frDoc;
              if (!(_$1.isEmpty(this.$pdfFont) || _$1.isEmpty(_frDoc))) {
                _context8.next = 6;
                break;
              }
              return _context8.abrupt("return", null);
            case 6:
              _context8.next = 8;
              return this.$pdfFont.getPDFDoc();
            case 8:
              fpdDoc = _context8.sent;
              doc.$fpdDoc = fpdDoc;
              _context8.next = 12;
              return _frDoc.fromPDDoc(fpdDoc);
            case 12:
              frDoc = _context8.sent;
              doc.$frDoc = frDoc;
              return _context8.abrupt("return", doc);
            case 15:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getDoc() {
        return _getDoc.apply(this, arguments);
      }
      return getDoc;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              instance = new this(options);
              return _context9.abrupt("return", instance);
            case 2:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function create(_x4) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFNumber = /*#__PURE__*/function () {
  function PDFNumber(options) {
    _classCallCheck(this, PDFNumber);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfNumber", void 0);
    _defineProperty(this, "$pdfObject", void 0);
    this.options = options || {};
    this.$pdfNumber = new FPDNumber();
    this.$pdfObject = this.$pdfNumber;
  }
  /**
   * 创建 PDFNumber 实例。
   * @param {PDFNumberOptions} options 创建所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PDFNumberType | null>}
   */
  return _createClass(PDFNumber, [{
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.$pdfNumber = null;
              this.$pdfObject = null;
              return _context.abrupt("return");
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 根据给定的整数值创建一个新的 PDFNumber 实例
     * @param {number} value 用于创建 PDFNumber 的整数值
     * @returns {Promise<PDFNumberType | null>}
     */
    )
  }, {
    key: "newByInt",
    value: (function () {
      var _newByInt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {
        var fpdNum;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfNumber) || !_$1.isNumber(value))) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", null);
            case 2:
              _context2.next = 4;
              return this.$pdfNumber.newByInt(value);
            case 4:
              fpdNum = _context2.sent;
              this.$pdfNumber = fpdNum;
              this.$pdfObject = fpdNum;
              return _context2.abrupt("return", this);
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function newByInt(_x) {
        return _newByInt.apply(this, arguments);
      }
      return newByInt;
    }()
    /**
     * 根据给定的浮点数值创建一个新的 PDFNumber 实例
     * @param {number} value 用于创建 PDFNumber 的浮点数值
     * @returns {Promise<PDFNumberType | null>}
     */
    )
  }, {
    key: "newByFloat",
    value: (function () {
      var _newByFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value) {
        var fpdNum;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfNumber) || !_$1.isNumber(value))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", null);
            case 2:
              _context3.next = 4;
              return this.$pdfNumber.newByFloat(value);
            case 4:
              fpdNum = _context3.sent;
              this.$pdfNumber = fpdNum;
              this.$pdfObject = fpdNum;
              return _context3.abrupt("return", this);
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function newByFloat(_x2) {
        return _newByFloat.apply(this, arguments);
      }
      return newByFloat;
    }()
    /**
     * 根据给定的字符串创建一个新的 PDFNumber 实例
     * @param {string} str 用于创建 PDFNumber 的字符串
     * @returns {Promise<PDFNumberType | null>}
     */
    )
  }, {
    key: "newByStr",
    value: (function () {
      var _newByStr = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(str) {
        var fpdNum;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfNumber) || !_$1.isString(str))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", null);
            case 2:
              _context4.next = 4;
              return this.$pdfNumber.newByStr(str);
            case 4:
              fpdNum = _context4.sent;
              this.$pdfNumber = fpdNum;
              this.$pdfObject = fpdNum;
              return _context4.abrupt("return", this);
            case 8:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function newByStr(_x3) {
        return _newByStr.apply(this, arguments);
      }
      return newByStr;
    }()
    /**
     * 检查 PDFNumber new的两个 PDFNumber 实例是否相等。
     * @param {PDFNumberType} otherNumber 第二个 PDFNumber 实例
     * @returns {Promise<boolean>} 如果两个对象相等，则返回 true；否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(otherNumber) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfNumber) || _$1.isEmpty(otherNumber) || _$1.isEmpty(otherNumber.$pdfNumber))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", false);
            case 2:
              _context5.next = 4;
              return this.$pdfNumber.identical(otherNumber.$pdfNumber);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function identical(_x4) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 获取 PDFNumber 对象的字符串表示形式
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfNumber)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", '');
            case 2:
              _context6.next = 4;
              return this.$pdfNumber.getString();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 设置 PDFNumber 对象的字符串表示形式
     * @param {string} str 字符串
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setString",
    value: (function () {
      var _setString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(str) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfNumber) || !_$1.isString(str))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$pdfNumber.setString(str);
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setString(_x5) {
        return _setString.apply(this, arguments);
      }
      return setString;
    }()
    /**
     *  判断 PDFNumber 对象是否为整数
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isInteger",
    value: (function () {
      var _isInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfNumber)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", false);
            case 2:
              _context8.next = 4;
              return this.$pdfNumber.isInteger();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function isInteger() {
        return _isInteger.apply(this, arguments);
      }
      return isInteger;
    }()
    /**
     * 获取 PDFNumber 对象的整数值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getInteger",
    value: (function () {
      var _getInteger = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfNumber)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", Infinity);
            case 2:
              _context9.next = 4;
              return this.$pdfNumber.getInteger();
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getInteger() {
        return _getInteger.apply(this, arguments);
      }
      return getInteger;
    }()
    /**
     * 获取 PDFNumber 对象的数值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getNumber",
    value: (function () {
      var _getNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfNumber)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", Infinity);
            case 2:
              _context10.next = 4;
              return this.$pdfNumber.getInteger();
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getNumber() {
        return _getNumber.apply(this, arguments);
      }
      return getNumber;
    }()
    /**
     * 设置 PDFNumber 对象的数值
     * @param value 值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setNumber",
    value: (function () {
      var _setNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(value) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfNumber) || !_$1.isNumber(value))) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return");
            case 2:
              _context11.next = 4;
              return this.$pdfNumber.setNumber(value);
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setNumber(_x6) {
        return _setNumber.apply(this, arguments);
      }
      return setNumber;
    }()
    /**
     * 获取 PDFNumber 对象的浮点数值
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFloat",
    value: (function () {
      var _getFloat = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfNumber)) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", Infinity);
            case 2:
              _context12.next = 4;
              return this.$pdfNumber.getFloat();
            case 4:
              return _context12.abrupt("return", _context12.sent);
            case 5:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getFloat() {
        return _getFloat.apply(this, arguments);
      }
      return getFloat;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              instance = new this(options);
              if (!(_$1.isEmpty(options) || _$1.isNil(options.int) && _$1.isNil(options.float) && _$1.isNil(options.str))) {
                _context13.next = 3;
                break;
              }
              return _context13.abrupt("return", instance);
            case 3:
              if (_$1.isNil(options.int)) {
                _context13.next = 7;
                break;
              }
              _context13.next = 6;
              return instance.newByInt(options.int);
            case 6:
              return _context13.abrupt("return", instance);
            case 7:
              if (_$1.isNil(options.float)) {
                _context13.next = 11;
                break;
              }
              _context13.next = 10;
              return instance.newByFloat(options.float);
            case 10:
              return _context13.abrupt("return", instance);
            case 11:
              if (_$1.isNil(options.str)) {
                _context13.next = 15;
                break;
              }
              _context13.next = 14;
              return instance.newByStr(options.str);
            case 14:
              return _context13.abrupt("return", instance);
            case 15:
              return _context13.abrupt("return", instance);
            case 16:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function create(_x7) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFName = /*#__PURE__*/function () {
  function PDFName(options) {
    _classCallCheck(this, PDFName);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfName", void 0);
    _defineProperty(this, "$pdfObject", void 0);
    this.options = options || {
      str: ''
    };
    this.$pdfName = null;
    this.$pdfObject = null;
  }
  /**
   * 新建一个底层数据的Name对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(PDFName, [{
    key: "_createName",
    value: (function () {
      var _createName2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$options$str;
        var _name, name;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _name = new FPDName();
              _context.next = 3;
              return _name.new((_this$options$str = this.options.str) !== null && _this$options$str !== void 0 ? _this$options$str : '');
            case 3:
              name = _context.sent;
              this.$pdfName = name;
              this.$pdfObject = name;
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createName() {
        return _createName2.apply(this, arguments);
      }
      return _createName;
    }()
    /**
     * 创建 PDFName 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
     * @returns {Promise<PDFNameType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.$pdfName = null;
              this.$pdfObject = null;
              return _context2.abrupt("return");
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取当前对象的字符串表示形式。
     * @returns {Promise<string>} 返回一个字符串，表示当前 FPDObject 的值
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfName)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", '');
            case 2:
              return _context3.abrupt("return", this.$pdfName.getString());
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 检查另一个 PDFName和当前实例是否相等。
     * @param {PDFNameType} otherPdfName 第二个 FPDName 实例
     * @returns {Promise<boolean>} 如果两个相等，则返回 true；否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(otherPdfName) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfName) || _$1.isEmpty(otherPdfName) || _$1.isEmpty(otherPdfName.$pdfName))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", false);
            case 2:
              return _context4.abrupt("return", this.$pdfName.identical(otherPdfName.$pdfName));
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function identical(_x) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              instance = new this(options);
              _context5.next = 3;
              return instance._createName();
            case 3:
              return _context5.abrupt("return", instance);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function create(_x2) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFLink = /*#__PURE__*/function () {
  function PDFLink(options) {
    _classCallCheck(this, PDFLink);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfLink", void 0);
    this.options = options || {};
    this.$pdfLink = null;
  }
  /**
   * 创建 PDFLink 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
   * @returns {Promise<PDFLinkType>}
   */
  return _createClass(PDFLink, [{
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$$pdfLink;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (_this$$pdfLink = this.$pdfLink) === null || _this$$pdfLink === void 0 ? void 0 : _this$$pdfLink.destroy();
            case 2:
              this.$pdfLink = null;
              return _context.abrupt("return");
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 新建一个底层数据的Link对象
     * @private
     * @ignore
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "_createLink",
    value: (function () {
      var _createLink2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this$options;
        var pdfObj, _link, link;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              pdfObj = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.pdfObject;
              if (!(_$1.isEmpty(this.options) || _$1.isEmpty(pdfObj) || _$1.isEmpty(pdfObj.$pdfObject))) {
                _context2.next = 5;
                break;
              }
              _context2.next = 4;
              return PDFObject.create();
            case 4:
              pdfObj = _context2.sent;
            case 5:
              _link = new FPDLink(); // @ts-ignore
              _context2.next = 8;
              return _link.new(pdfObj.$pdfObject);
            case 8:
              link = _context2.sent;
              this.$pdfLink = link;
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _createLink() {
        return _createLink2.apply(this, arguments);
      }
      return _createLink;
    }()
    /**
     * 获取指定点上的链接。
     * @param {LinkAtPointType}
     *  fpdDoc - 当前文档对象。
     *  fpdPage - 当前页面对象。
     *  x - 指定点的 X 坐标。
     *  y - 指定点的 Y 坐标。
     * @returns {Promise<PDFLinkType | null>}
     */
    )
  }, {
    key: "getLinkAtPoint",
    value: (function () {
      var _getLinkAtPoint = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref) {
        var doc, page, x, y, fpdLink, pdfLink;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              doc = _ref.doc, page = _ref.page, x = _ref.x, y = _ref.y;
              if (!(_$1.isEmpty(this.$pdfLink) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc) || _$1.isEmpty(page) || _$1.isEmpty(page.$fpdPage) || !_$1.isNumber(x) || !_$1.isNumber(y))) {
                _context3.next = 3;
                break;
              }
              return _context3.abrupt("return", null);
            case 3:
              _context3.next = 5;
              return this.$pdfLink.getLinkAtPoint({
                fpdDoc: doc.$fpdDoc,
                fpdPage: page.$fpdPage,
                x: x,
                y: y
              });
            case 5:
              fpdLink = _context3.sent;
              _context3.next = 8;
              return PDFLink.create();
            case 8:
              pdfLink = _context3.sent;
              pdfLink.$pdfLink = fpdLink;
              return _context3.abrupt("return", pdfLink);
            case 11:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getLinkAtPoint(_x) {
        return _getLinkAtPoint.apply(this, arguments);
      }
      return getLinkAtPoint;
    }()
    /**
     * 获取当前链接的数量。
     * @param {DocType} doc - 当前文档对象。
     * @param {PageType} page - 当前页面对象。
     * @returns {Promise<number>} - 返回链接的数量。
     */
    )
  }, {
    key: "getLinksCount",
    value: (function () {
      var _getLinksCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(doc, page) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfLink) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc) || _$1.isEmpty(page) || _$1.isEmpty(page.$fpdPage))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", 0);
            case 2:
              _context4.next = 4;
              return this.$pdfLink.countLinks(doc.$fpdDoc, page.$fpdPage);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getLinksCount(_x2, _x3) {
        return _getLinksCount.apply(this, arguments);
      }
      return getLinksCount;
    }()
    /**
     * 获取指定索引的链接。
     * @param {Object}
     *  fpdDoc - 当前文档对象。
     *  fpdPage - 当前页面对象。
     *  index - 链接的索引。
     * @returns {Promise<PDFLinkType | null>}
     */
    )
  }, {
    key: "getLink",
    value: (function () {
      var _getLink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {
        var doc, page, index, fpdLink, pdfLink;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              doc = _ref2.doc, page = _ref2.page, index = _ref2.index;
              if (!(_$1.isEmpty(this.$pdfLink) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc) || _$1.isEmpty(page) || _$1.isEmpty(page.$fpdPage) || !_$1.isNumber(index))) {
                _context5.next = 3;
                break;
              }
              return _context5.abrupt("return", null);
            case 3:
              _context5.next = 5;
              return this.$pdfLink.getLink({
                fpdDoc: doc.$fpdDoc,
                fpdPage: page.$fpdPage,
                index: index
              });
            case 5:
              fpdLink = _context5.sent;
              _context5.next = 8;
              return PDFLink.create();
            case 8:
              pdfLink = _context5.sent;
              pdfLink.$pdfLink = fpdLink;
              return _context5.abrupt("return", pdfLink);
            case 11:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getLink(_x4) {
        return _getLink.apply(this, arguments);
      }
      return getLink;
    }()
    /**
     * 获取当前链接的矩形区域。
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "getRect",
    value: (function () {
      var _getRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfLink)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context6.next = 4;
              return this.$pdfLink.getRect();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getRect() {
        return _getRect.apply(this, arguments);
      }
      return getRect;
    }()
    /**
     * 获取当前链接的目标。
     * @param {DocType} doc - 当前文档对象。
     * @returns {Promise<DestType | null>}
     */
    )
  }, {
    key: "getDest",
    value: (function () {
      var _getDest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(doc) {
        var fpdDest, dest;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfLink) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", null);
            case 2:
              _context7.next = 4;
              return this.$pdfLink.getDest(doc.$fpdDoc);
            case 4:
              fpdDest = _context7.sent;
              _context7.next = 7;
              return Dest.create();
            case 7:
              dest = _context7.sent;
              dest.$dest = fpdDest;
              return _context7.abrupt("return", dest);
            case 10:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getDest(_x5) {
        return _getDest.apply(this, arguments);
      }
      return getDest;
    }()
    /**
     * 获取当前链接的操作。
     * @returns {Promise<ActionType | null>}
     */
    )
  }, {
    key: "getAction",
    value: (function () {
      var _getAction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var fpdAction, action;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfLink)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", null);
            case 2:
              _context8.next = 4;
              return this.$pdfLink.getAction();
            case 4:
              fpdAction = _context8.sent;
              _context8.next = 7;
              return Action.create();
            case 7:
              action = _context8.sent;
              action.$action = fpdAction;
              return _context8.abrupt("return", action);
            case 10:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getAction() {
        return _getAction.apply(this, arguments);
      }
      return getAction;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              instance = new this(options);
              _context9.next = 3;
              return instance._createLink();
            case 3:
              return _context9.abrupt("return", instance);
            case 4:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function create(_x6) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Parser = /*#__PURE__*/function () {
  function Parser(options) {
    _classCallCheck(this, Parser);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$parser", void 0);
    this.options = options || {};
    this.$parser = null;
  }
  /**
   * 新建一个底层数据的Parser对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(Parser, [{
    key: "_createParser",
    value: (function () {
      var _createParser2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _parser, parser;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _parser = new FPDParser();
              _context.next = 3;
              return _parser.new();
            case 3:
              parser = _context.sent;
              this.$parser = parser;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createParser() {
        return _createParser2.apply(this, arguments);
      }
      return _createParser;
    }()
    /**
     * 创建 Parser 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
     * @returns {Promise<ParserType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this$$parser, _this$$parser2;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (_this$$parser = this.$parser) === null || _this$$parser === void 0 ? void 0 : _this$$parser.closeParser();
            case 2:
              _context2.next = 4;
              return (_this$$parser2 = this.$parser) === null || _this$$parser2 === void 0 ? void 0 : _this$$parser2.destroy();
            case 4:
              this.$parser = null;
              return _context2.abrupt("return");
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 开始解析文件
     * @param {string} fileName 文件名, 一般来说是 路径 eg. d://xxx.pdf
     * @param {boolean} reParse 是否重新解析 默认为false
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "startParse",
    value: (function () {
      var _startParse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(fileName) {
        var reParse,
          _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              reParse = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;
              if (!(_$1.isEmpty(this.$parser) || !_$1.isString(fileName) || !_$1.isBoolean(reParse))) {
                _context3.next = 3;
                break;
              }
              return _context3.abrupt("return", Infinity);
            case 3:
              _context3.next = 5;
              return this.$parser.startParse(fileName, reParse);
            case 5:
              return _context3.abrupt("return", _context3.sent);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function startParse(_x) {
        return _startParse.apply(this, arguments);
      }
      return startParse;
    }()
    /**
     * 开始解析文件
     * @param {string} fileName 文件名, 一般来说是 路径 eg. d://xxx.pdf
     * @param {boolean} reParse 是否重新解析 默认为false
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "startParseW",
    value: (function () {
      var _startParseW = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fileName) {
        var reParse,
          _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              reParse = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;
              if (!(_$1.isEmpty(this.$parser) || !_$1.isString(fileName) || !_$1.isBoolean(reParse))) {
                _context4.next = 3;
                break;
              }
              return _context4.abrupt("return", Infinity);
            case 3:
              _context4.next = 5;
              return this.$parser.startParseW(fileName, reParse);
            case 5:
              return _context4.abrupt("return", _context4.sent);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function startParseW(_x2) {
        return _startParseW.apply(this, arguments);
      }
      return startParseW;
    }()
    /**
     * 设置密码
     * @param {string} password 密码
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPassword",
    value: (function () {
      var _setPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(password) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_$1.isEmpty(this.$parser) || !_$1.isString(password))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              _context5.next = 4;
              return this.$parser.setPassword(password);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setPassword(_x3) {
        return _setPassword.apply(this, arguments);
      }
      return setPassword;
    }()
    /**
     * 获取密码
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getPassword",
    value: (function () {
      var _getPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$parser)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", '');
            case 2:
              _context6.next = 4;
              return this.$parser.getPassword();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getPassword() {
        return _getPassword.apply(this, arguments);
      }
      return getPassword;
    }()
    /**
     * 关闭解析器
     * @param {boolean} reParse 是否重新解析 默认为false
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "closeParser",
    value: (function () {
      var _closeParser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var reParse,
          _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              reParse = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : false;
              if (!(_$1.isEmpty(this.$parser) || !_$1.isBoolean(reParse))) {
                _context7.next = 3;
                break;
              }
              return _context7.abrupt("return");
            case 3:
              _context7.next = 5;
              return this.$parser.closeParser();
            case 5:
              return _context7.abrupt("return", _context7.sent);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function closeParser() {
        return _closeParser.apply(this, arguments);
      }
      return closeParser;
    }()
    /**
     * 是否拥有权限
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isOwner",
    value: (function () {
      var _isOwner = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$parser)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", false);
            case 2:
              _context8.next = 4;
              return this.$parser.isOwner();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function isOwner() {
        return _isOwner.apply(this, arguments);
      }
      return isOwner;
    }()
    /**
     * 获取文件尾部信息
     * @returns {Promise<PDFObjectType | null>}
     */
    )
  }, {
    key: "getTrailer",
    value: (function () {
      var _getTrailer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var fpdObj, pdfObj;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$parser)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", null);
            case 2:
              _context9.next = 4;
              return this.$parser.getTrailer();
            case 4:
              fpdObj = _context9.sent;
              _context9.next = 7;
              return PDFObject.create();
            case 7:
              pdfObj = _context9.sent;
              pdfObj.$pdfObject = fpdObj;
              return _context9.abrupt("return", pdfObj);
            case 10:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getTrailer() {
        return _getTrailer.apply(this, arguments);
      }
      return getTrailer;
    }()
    /**
     * 获取文档对象
     * @returns {Promise<DocType | null>}
     */
    )
  }, {
    key: "getDoc",
    value: (function () {
      var _getDoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var doc, _frDoc, fpdDoc, frDoc;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return Doc.create();
            case 2:
              doc = _context10.sent;
              _frDoc = doc.$frDoc;
              if (!(_$1.isEmpty(this.$parser) || _$1.isEmpty(_frDoc))) {
                _context10.next = 6;
                break;
              }
              return _context10.abrupt("return", null);
            case 6:
              _context10.next = 8;
              return this.$parser.getDocument();
            case 8:
              fpdDoc = _context10.sent;
              doc.$fpdDoc = fpdDoc;
              _context10.next = 12;
              return _frDoc.fromPDDoc(fpdDoc);
            case 12:
              frDoc = _context10.sent;
              doc.$frDoc = frDoc;
              return _context10.abrupt("return", doc);
            case 15:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getDoc() {
        return _getDoc.apply(this, arguments);
      }
      return getDoc;
    }()
    /**
     * 获取根对象编号
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getRootObjNum",
    value: (function () {
      var _getRootObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!_$1.isEmpty(this.$parser)) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return", Infinity);
            case 2:
              _context11.next = 4;
              return this.$parser.getRootObjNum();
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getRootObjNum() {
        return _getRootObjNum.apply(this, arguments);
      }
      return getRootObjNum;
    }()
    /**
     * 获取加密字典对象
     * @returns {Promise<PDFDictionaryType | null>}
     */
    )
  }, {
    key: "getEncryptDict",
    value: (function () {
      var _getEncryptDict = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var fpdDict, pdfDict;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!_$1.isEmpty(this.$parser)) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", null);
            case 2:
              _context12.next = 4;
              return this.$parser.getEncryptDict();
            case 4:
              fpdDict = _context12.sent;
              _context12.next = 7;
              return PDFDictionary.create();
            case 7:
              pdfDict = _context12.sent;
              pdfDict.$pdfDictionary = fpdDict;
              return _context12.abrupt("return", pdfDict);
            case 10:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getEncryptDict() {
        return _getEncryptDict.apply(this, arguments);
      }
      return getEncryptDict;
    }()
    /**
     * 获取最后一个对象编号
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getLastObjNum",
    value: (function () {
      var _getLastObjNum = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!_$1.isEmpty(this.$parser)) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return", Infinity);
            case 2:
              _context13.next = 4;
              return this.$parser.getLastObjNum();
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getLastObjNum() {
        return _getLastObjNum.apply(this, arguments);
      }
      return getLastObjNum;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              instance = new this(options);
              _context14.next = 3;
              return instance._createParser();
            case 3:
              return _context14.abrupt("return", instance);
            case 4:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function create(_x4) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PDFString = /*#__PURE__*/function () {
  function PDFString(options) {
    _classCallCheck(this, PDFString);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$pdfString", void 0);
    _defineProperty(this, "$pdfObject", void 0);
    this.options = options || {
      str: ''
    };
    this.$pdfString = null;
    this.$pdfObject = null;
  }
  /**
   * 新建一个底层数据的String对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(PDFString, [{
    key: "_createString",
    value: (function () {
      var _createString2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _str, str;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _str = new FPDString();
              _context.next = 3;
              return _str.newW(this.options.str);
            case 3:
              str = _context.sent;
              if (!_$1.isBoolean(this.options.isHex)) {
                _context.next = 8;
                break;
              }
              _context.next = 7;
              return _str.new(this.options.str, this.options.isHex);
            case 7:
              str = _context.sent;
            case 8:
              this.$pdfString = str;
              this.$pdfObject = str;
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createString() {
        return _createString2.apply(this, arguments);
      }
      return _createString;
    }()
    /**
     * 创建 Parser 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
     * - 如果isHex传了boolean类型，则使实际调用 .new() 否者调用 .newW()
     * @returns {Promise<ParserType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.$pdfString = null;
              this.$pdfObject = null;
              return _context2.abrupt("return");
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取字符串表示
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getString",
    value: (function () {
      var _getString = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfString)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", '');
            case 2:
              _context3.next = 4;
              return this.$pdfString.getString();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getString() {
        return _getString.apply(this, arguments);
      }
      return getString;
    }()
    /**
     * 判断两个字符串对象是否相等。
     * @param {PDFStringType} otherStr - 另一个对象
     * @returns {Promise<boolean>} - 如果两个对象相等，则返回 true，否则返回 false
     */
    )
  }, {
    key: "identical",
    value: (function () {
      var _identical = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(otherStr) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$pdfString) || _$1.isEmpty(otherStr) || _$1.isEmpty(otherStr.$pdfString))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", false);
            case 2:
              _context4.next = 4;
              return this.$pdfString.identical(otherStr.$pdfString);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function identical(_x) {
        return _identical.apply(this, arguments);
      }
      return identical;
    }()
    /**
     * 设置对象的十六进制表示形式。
     * @param isHex - 是否将字符串表示形式设置为十六进制 (可选，默认为 true)
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setHex",
    value: (function () {
      var _setHex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var isHex,
          _args5 = arguments;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              isHex = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : true;
              if (!_$1.isEmpty(this.$pdfString)) {
                _context5.next = 3;
                break;
              }
              return _context5.abrupt("return");
            case 3:
              _context5.next = 5;
              return this.$pdfString.setHex(isHex);
            case 5:
              return _context5.abrupt("return", _context5.sent);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setHex() {
        return _setHex.apply(this, arguments);
      }
      return setHex;
    }()
    /**
     * 判断对象是否为十六进制。
     * @returns {Promise<boolean>} - 如果对象为十六进制，则返回 true，否则返回 false
     */
    )
  }, {
    key: "isHex",
    value: (function () {
      var _isHex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$pdfString)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", false);
            case 2:
              _context6.next = 4;
              return this.$pdfString.isHex();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function isHex() {
        return _isHex.apply(this, arguments);
      }
      return isHex;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              instance = new this(options);
              _context7.next = 3;
              return instance._createString();
            case 3:
              return _context7.abrupt("return", instance);
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function create(_x2) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var TextObject = /*#__PURE__*/function () {
  function TextObject(options) {
    _classCallCheck(this, TextObject);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$textObject", void 0);
    this.options = options || {};
    this.$textObject = null;
  }
  /**
   * 新建一个底层数据的TextObject对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(TextObject, [{
    key: "_createTextObject",
    value: (function () {
      var _createTextObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _textObject, textObject;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _textObject = new FPDTextObject();
              _context.next = 3;
              return _textObject.new();
            case 3:
              textObject = _context.sent;
              this.$textObject = textObject;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createTextObject() {
        return _createTextObject2.apply(this, arguments);
      }
      return _createTextObject;
    }()
    /**
     * 创建 TextObject 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
     * @returns {Promise<TextObjectType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this$$textObject;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (_this$$textObject = this.$textObject) === null || _this$$textObject === void 0 ? void 0 : _this$$textObject.destroy();
            case 2:
              this.$textObject = null;
              return _context2.abrupt("return");
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 计算条目数量
     * @returns {Promise<number>} 返回条目的数量
     */
    )
  }, {
    key: "getItemCount",
    value: (function () {
      var _getItemCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", 0);
            case 2:
              _context3.next = 4;
              return this.$textObject.countItems();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getItemCount() {
        return _getItemCount.apply(this, arguments);
      }
      return getItemCount;
    }()
    /**
     * 计算字符数量
     * @returns {Promise<number>} 返回字符的数量
     */
    )
  }, {
    key: "getCharCount",
    value: (function () {
      var _getCharCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", 0);
            case 2:
              _context4.next = 4;
              return this.$textObject.countChars();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getCharCount() {
        return _getCharCount.apply(this, arguments);
      }
      return getCharCount;
    }()
    /**
     * 获取字符信息
     * @param {number} index 字符的索引，用于指定要获取信息的字符
     * @returns {Promise<CharInfo>} 解析为一个包含字符代码和字距的对象
     */
    )
  }, {
    key: "getCharInfo",
    value: (function () {
      var _getCharInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", {});
            case 2:
              _context5.next = 4;
              return this.$textObject.getCharInfo(index);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getCharInfo(_x) {
        return _getCharInfo.apply(this, arguments);
      }
      return getCharInfo;
    }()
    /**
     * 获取对象的X坐标
     * @returns {Promise<number>} 返回当前对象的X坐标
     */
    )
  }, {
    key: "getPosX",
    value: (function () {
      var _getPosX = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", Infinity);
            case 2:
              _context6.next = 4;
              return this.$textObject.getPosX();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getPosX() {
        return _getPosX.apply(this, arguments);
      }
      return getPosX;
    }()
    /**
     * 获取对象的y坐标
     * @returns {Promise<number>} 返回当前对象的y坐标
     */
    )
  }, {
    key: "getPosY",
    value: (function () {
      var _getPosY = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", Infinity);
            case 2:
              _context7.next = 4;
              return this.$textObject.getPosY();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getPosY() {
        return _getPosY.apply(this, arguments);
      }
      return getPosY;
    }()
    /**
     * 获取文本对象变换矩阵
     * @returns {Promise<Matrix>} 返回当前对象的文本矩阵
     */
    )
  }, {
    key: "getTextMatrix",
    value: (function () {
      var _getTextMatrix = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", {
                a: Infinity,
                b: Infinity,
                c: Infinity,
                d: Infinity,
                e: Infinity,
                f: Infinity
              });
            case 2:
              _context8.next = 4;
              return this.$textObject.getTextMatrix();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getTextMatrix() {
        return _getTextMatrix.apply(this, arguments);
      }
      return getTextMatrix;
    }()
    /**
     * 获取文本对象使用的字体
     * @returns {Promise<PDFFontType | null>} 返回当前文本对象的字体对象
     */
    )
  }, {
    key: "getFont",
    value: (function () {
      var _getFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var fpdFont, pdfFont;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", null);
            case 2:
              _context9.next = 4;
              return this.$textObject.getFont();
            case 4:
              fpdFont = _context9.sent;
              _context9.next = 7;
              return PDFFont.create();
            case 7:
              pdfFont = _context9.sent;
              pdfFont.$pdfFont = fpdFont;
              return _context9.abrupt("return", pdfFont);
            case 10:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getFont() {
        return _getFont.apply(this, arguments);
      }
      return getFont;
    }()
    /**
     * 获取文本对象使用的字体大小
     * @returns {Promise<number>} 返回当前文本对象的字体大小
     */
    )
  }, {
    key: "getFontSize",
    value: (function () {
      var _getFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", 0);
            case 2:
              _context10.next = 4;
              return this.$textObject.getFontSize();
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getFontSize() {
        return _getFontSize.apply(this, arguments);
      }
      return getFontSize;
    }()
    /**
     * 设置文本对象为空
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setEmpty",
    value: (function () {
      var _setEmpty = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return");
            case 2:
              _context11.next = 4;
              return this.$textObject.setEmpty();
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setEmpty() {
        return _setEmpty.apply(this, arguments);
      }
      return setEmpty;
    }()
    /**
     * 设置文本对象文本
     * @param {string} text 文本对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setText",
    value: (function () {
      var _setText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(text) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textObject) || !_$1.isString(text))) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return");
            case 2:
              _context12.next = 4;
              return this.$textObject.setText(text);
            case 4:
              return _context12.abrupt("return", _context12.sent);
            case 5:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function setText(_x2) {
        return _setText.apply(this, arguments);
      }
      return setText;
    }()
    /**
     * 设置文本对象位置
     * @param {number} x x坐标
     * @param {number} y y坐标
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setPosition",
    value: (function () {
      var _setPosition = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(x, y) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textObject) || !_$1.isNumber(x) || !_$1.isNumber(y))) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return");
            case 2:
              _context13.next = 4;
              return this.$textObject.setPosition(x, y);
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function setPosition(_x3, _x4) {
        return _setPosition.apply(this, arguments);
      }
      return setPosition;
    }()
    /**
     * 设置文本对象文本状态
     * @param {TextStateType} textState 文本状态
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setTextState",
    value: (function () {
      var _setTextState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(textState) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textObject) || _$1.isEmpty(textState) || _$1.isEmpty(textState.$textState))) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return");
            case 2:
              _context14.next = 4;
              return this.$textObject.setTextState(textState.$textState);
            case 4:
              return _context14.abrupt("return", _context14.sent);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function setTextState(_x5) {
        return _setTextState.apply(this, arguments);
      }
      return setTextState;
    }()
    /**
     * 转换函数
     * @param {Matrix} matrix - 一个包含六个数值的矩阵对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "transform",
    value: (function () {
      var _transform = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(matrix) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textObject) || _$1.isEmpty(matrix))) {
                _context15.next = 2;
                break;
              }
              return _context15.abrupt("return");
            case 2:
              _context15.next = 4;
              return this.$textObject.transform(matrix);
            case 4:
              return _context15.abrupt("return", _context15.sent);
            case 5:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function transform(_x6) {
        return _transform.apply(this, arguments);
      }
      return transform;
    }()
    /**
     * 重新计算位置数据
     * @returns {Promise<void>} 无返回值，但使用Promise来表示异步操作
     */
    )
  }, {
    key: "reCalcPositionData",
    value: (function () {
      var _reCalcPositionData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context16.next = 2;
                break;
              }
              return _context16.abrupt("return");
            case 2:
              _context16.next = 4;
              return this.$textObject.reCalcPositionData();
            case 4:
              return _context16.abrupt("return", _context16.sent);
            case 5:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function reCalcPositionData() {
        return _reCalcPositionData.apply(this, arguments);
      }
      return reCalcPositionData;
    }()
    /**
     * 获取字符位置
     * @param {number} index 字符索引
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "getCharRect",
    value: (function () {
      var _getCharRect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(index) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context17.next = 2;
                break;
              }
              return _context17.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 2:
              _context17.next = 4;
              return this.$textObject.getCharRect(index);
            case 4:
              return _context17.abrupt("return", _context17.sent);
            case 5:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getCharRect(_x7) {
        return _getCharRect.apply(this, arguments);
      }
      return getCharRect;
    }()
    /**
     * 获取索引
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getIndex",
    value: (function () {
      var _getIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context18.next = 2;
                break;
              }
              return _context18.abrupt("return", -1);
            case 2:
              _context18.next = 4;
              return this.$textObject.getIndex();
            case 4:
              return _context18.abrupt("return", _context18.sent);
            case 5:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function getIndex() {
        return _getIndex.apply(this, arguments);
      }
      return getIndex;
    }()
    /**
     * 设置索引
     * @param {number} index
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "setIndex",
    value: (function () {
      var _setIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(index) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              if (!_$1.isEmpty(this.$textObject)) {
                _context19.next = 2;
                break;
              }
              return _context19.abrupt("return");
            case 2:
              _context19.next = 4;
              return this.$textObject.setIndex(index);
            case 4:
              return _context19.abrupt("return", _context19.sent);
            case 5:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function setIndex(_x8) {
        return _setIndex.apply(this, arguments);
      }
      return setIndex;
    }()
    /**
     * 创建中日韩字体
     * @param {string} fontName 字体名称，用于指定所需的中日韩字体
     * @param {number} fontsize 字体大小，以点为单位，用于定义字体的显示大小
     * @param {DocType} doc 一个Doc对象，代表PDF文档，用于关联新创建的字体与特定的PDF文档
     * @returns {Promise<PDFFontType | null>}
     */
    )
  }, {
    key: "createCJKFont",
    value: (function () {
      var _createCJKFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(fontName, fontsize, doc) {
        var fpdFont, pdfFont;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textObject) || _$1.isEmpty(doc) || _$1.isEmpty(doc.$fpdDoc))) {
                _context20.next = 2;
                break;
              }
              return _context20.abrupt("return", null);
            case 2:
              _context20.next = 4;
              return this.$textObject.createCJKFont(fontName, fontsize, doc.$fpdDoc);
            case 4:
              fpdFont = _context20.sent;
              _context20.next = 7;
              return PDFFont.create();
            case 7:
              pdfFont = _context20.sent;
              pdfFont.$pdfFont = fpdFont;
              return _context20.abrupt("return", pdfFont);
            case 10:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function createCJKFont(_x9, _x10, _x11) {
        return _createCJKFont.apply(this, arguments);
      }
      return createCJKFont;
    }()
    /**
     * 设置页面上的中日韩文本
     * @param {string} text 要设置的中日韩文本
     * @param {PDFFontType} font 用于渲染文本的 PDFFont 对象
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setCJKText",
    value: (function () {
      var _setCJKText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(text, font) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textObject) || !_$1.isString(text) || _$1.isEmpty(font) || _$1.isEmpty(font.$pdfFont))) {
                _context21.next = 2;
                break;
              }
              return _context21.abrupt("return");
            case 2:
              _context21.next = 4;
              return this.$textObject.setCJKText(text, font.$pdfFont);
            case 4:
              return _context21.abrupt("return", _context21.sent);
            case 5:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function setCJKText(_x12, _x13) {
        return _setCJKText.apply(this, arguments);
      }
      return setCJKText;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              instance = new this(options);
              _context22.next = 3;
              return instance._createTextObject();
            case 3:
              return _context22.abrupt("return", instance);
            case 4:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function create(_x14) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var TextState = /*#__PURE__*/function () {
  function TextState(options) {
    _classCallCheck(this, TextState);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$textState", void 0);
    this.options = options || {};
    this.$textState = null;
  }
  /**
   * 新建一个底层数据的TextObject对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(TextState, [{
    key: "_createTextState",
    value: (function () {
      var _createTextState2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _textState, textState;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _textState = new FPDTextState();
              _context.next = 3;
              return _textState.new();
            case 3:
              textState = _context.sent;
              this.$textState = textState;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createTextState() {
        return _createTextState2.apply(this, arguments);
      }
      return _createTextState;
    }()
    /**
     * 创建 TextState 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息。
     * @returns {Promise<TextStateType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁当前对象。
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this$$textState;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (_this$$textState = this.$textState) === null || _this$$textState === void 0 ? void 0 : _this$$textState.destroy();
            case 2:
              this.$textState = null;
              return _context2.abrupt("return");
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取字体
     * @returns {Promise<PDFFontType | null>}
     */
    )
  }, {
    key: "getFont",
    value: (function () {
      var _getFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var fpdFont, pdfFont;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", null);
            case 2:
              _context3.next = 4;
              return this.$textState.getFont();
            case 4:
              fpdFont = _context3.sent;
              _context3.next = 7;
              return PDFFont.create();
            case 7:
              pdfFont = _context3.sent;
              pdfFont.$pdfFont = fpdFont;
              return _context3.abrupt("return", pdfFont);
            case 10:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getFont() {
        return _getFont.apply(this, arguments);
      }
      return getFont;
    }()
    /**
     * 设置字体
     * @param {PDFFontType} font 字体
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFont",
    value: (function () {
      var _setFont = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(font) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textState) || _$1.isEmpty(font) || _$1.isEmpty(font.$pdfFont))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              _context4.next = 4;
              return this.$textState.setFont(font.$pdfFont);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setFont(_x) {
        return _setFont.apply(this, arguments);
      }
      return setFont;
    }()
    /**
     * 获取字体大小
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontSize",
    value: (function () {
      var _getFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", 0);
            case 2:
              _context5.next = 4;
              return this.$textState.getFontSize();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getFontSize() {
        return _getFontSize.apply(this, arguments);
      }
      return getFontSize;
    }()
    /**
     * 设置字体大小
     * @param fontSize 字体大小，以像素(px)为单位的数字值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setFontSize",
    value: (function () {
      var _setFontSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fontSize) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textState) || !_$1.isNumber(fontSize))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$textState.setFontSize(fontSize);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setFontSize(_x2) {
        return _setFontSize.apply(this, arguments);
      }
      return setFontSize;
    }()
    /**
     * 获取字体大小
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontSizeV",
    value: (function () {
      var _getFontSizeV = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", 0);
            case 2:
              _context7.next = 4;
              return this.$textState.getFontSizeV();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getFontSizeV() {
        return _getFontSizeV.apply(this, arguments);
      }
      return getFontSizeV;
    }()
    /**
     * 获取字体高度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getFontSizeH",
    value: (function () {
      var _getFontSizeH = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", 0);
            case 2:
              _context8.next = 4;
              return this.$textState.getFontSizeH();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getFontSizeH() {
        return _getFontSizeH.apply(this, arguments);
      }
      return getFontSizeH;
    }()
    /**
     * 获取基线角度
     * @returns {Promise<number>} 基线角度（以度为单位）
     */
    )
  }, {
    key: "getBaselineAngle",
    value: (function () {
      var _getBaselineAngle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context9.next = 2;
                break;
              }
              return _context9.abrupt("return", -1);
            case 2:
              _context9.next = 4;
              return this.$textState.getBaselineAngle();
            case 4:
              return _context9.abrupt("return", _context9.sent);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function getBaselineAngle() {
        return _getBaselineAngle.apply(this, arguments);
      }
      return getBaselineAngle;
    }()
    /**
     * 获取剪切角度
     * @returns {Promise<number>} 剪切角度的数值
     */
    )
  }, {
    key: "getShearAngle",
    value: (function () {
      var _getShearAngle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context10.next = 2;
                break;
              }
              return _context10.abrupt("return", -1);
            case 2:
              _context10.next = 4;
              return this.$textState.getShearAngle();
            case 4:
              return _context10.abrupt("return", _context10.sent);
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function getShearAngle() {
        return _getShearAngle.apply(this, arguments);
      }
      return getShearAngle;
    }()
    /**
     * 设置字符间距
     * @param {number} charSpace 字符间距的值，用于调整文本的视觉效果
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setCharSpace",
    value: (function () {
      var _setCharSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(charSpace) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textState) || !_$1.isNumber(charSpace))) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return");
            case 2:
              _context11.next = 4;
              return this.$textState.setCharSpace(charSpace);
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function setCharSpace(_x3) {
        return _setCharSpace.apply(this, arguments);
      }
      return setCharSpace;
    }()
    /**
     * 获取字符间距
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getCharSpace",
    value: (function () {
      var _getCharSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context12.next = 2;
                break;
              }
              return _context12.abrupt("return", 0);
            case 2:
              _context12.next = 4;
              return this.$textState.getCharSpace();
            case 4:
              return _context12.abrupt("return", _context12.sent);
            case 5:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getCharSpace() {
        return _getCharSpace.apply(this, arguments);
      }
      return getCharSpace;
    }()
    /**
     * 设置字间距
     * @param {number} wordSpace 字间距的值，用于设置文本中的字间距
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setWordSpace",
    value: (function () {
      var _setWordSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(wordSpace) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textState) || !_$1.isNumber(wordSpace))) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return");
            case 2:
              _context13.next = 4;
              return this.$textState.setWordSpace(wordSpace);
            case 4:
              return _context13.abrupt("return", _context13.sent);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function setWordSpace(_x4) {
        return _setWordSpace.apply(this, arguments);
      }
      return setWordSpace;
    }())
  }, {
    key: "getWordSpace",
    value: (
    /**
     * 获取字间距
     * @returns {Promise<number>}
     */
    function () {
      var _getWordSpace = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return", 0);
            case 2:
              _context14.next = 4;
              return this.$textState.getWordSpace();
            case 4:
              return _context14.abrupt("return", _context14.sent);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getWordSpace() {
        return _getWordSpace.apply(this, arguments);
      }
      return getWordSpace;
    }()
    /**
     * 设置文本模式
     * @param {number} textMode 文本模式的数值表示，指示新的文本模式应该是何种类型
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setTextMode",
    value: (function () {
      var _setTextMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(textMode) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textState) || !_$1.isNumber(textMode))) {
                _context15.next = 2;
                break;
              }
              return _context15.abrupt("return");
            case 2:
              _context15.next = 4;
              return this.$textState.setTextMode(textMode);
            case 4:
              return _context15.abrupt("return", _context15.sent);
            case 5:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function setTextMode(_x5) {
        return _setTextMode.apply(this, arguments);
      }
      return setTextMode;
    }()
    /**
     * 获取文本模式
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getTextMode",
    value: (function () {
      var _getTextMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context16.next = 2;
                break;
              }
              return _context16.abrupt("return", -1);
            case 2:
              _context16.next = 4;
              return this.$textState.getTextMode();
            case 4:
              return _context16.abrupt("return", _context16.sent);
            case 5:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getTextMode() {
        return _getTextMode.apply(this, arguments);
      }
      return getTextMode;
    }()
    /**
     * 检查当前对象是否为空
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "isNull",
    value: (function () {
      var _isNull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              if (!_$1.isEmpty(this.$textState)) {
                _context17.next = 2;
                break;
              }
              return _context17.abrupt("return", true);
            case 2:
              _context17.next = 4;
              return this.$textState.isNull();
            case 4:
              return _context17.abrupt("return", _context17.sent);
            case 5:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function isNull() {
        return _isNull.apply(this, arguments);
      }
      return isNull;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              instance = new this(options);
              _context18.next = 3;
              return instance._createTextState();
            case 3:
              return _context18.abrupt("return", instance);
            case 4:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function create(_x6) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var Menu = /*#__PURE__*/function () {
  function Menu(options) {
    _classCallCheck(this, Menu);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$menu", void 0);
    this.options = options || {};
    this.$menu = null;
  }
  /**
   * 新建一个底层数据的Menu对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(Menu, [{
    key: "_createMenu",
    value: (function () {
      var _createMenu2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _menu, menu;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _menu = new FRMenu();
              _context.next = 3;
              return _menu.new();
            case 3:
              menu = _context.sent;
              this.$menu = menu;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createMenu() {
        return _createMenu2.apply(this, arguments);
      }
      return _createMenu;
    }()
    /**
     * 创建 Menu 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<MenuType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁 Menu
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$menu)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              _context2.next = 4;
              return this.release();
            case 4:
              this.$menu = null;
              return _context2.abrupt("return");
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 释放 Menu 实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$menu)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return");
            case 2:
              _context3.next = 4;
              return this.$menu.release();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }()
    /**
     * 获取菜单项数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getMenuItemCount",
    value: (function () {
      var _getMenuItemCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$menu)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", 0);
            case 2:
              _context4.next = 4;
              return this.$menu.getMenuItemCount();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getMenuItemCount() {
        return _getMenuItemCount.apply(this, arguments);
      }
      return getMenuItemCount;
    }()
    /**
     * 添加菜单项
     * @param {MenuItemType} menuItem 菜单项
     * @param {number} index 索引
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "addMenuItem",
    value: (function () {
      var _addMenuItem = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(menuItem, index) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_$1.isEmpty(this.$menu) || _$1.isEmpty(menuItem) || _$1.isEmpty(menuItem.$menuItem))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", false);
            case 2:
              _context5.next = 4;
              return this.$menu.addMenuItem(menuItem.$menuItem, index);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function addMenuItem(_x, _x2) {
        return _addMenuItem.apply(this, arguments);
      }
      return addMenuItem;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              instance = new this(options);
              _context6.next = 3;
              return instance._createMenu();
            case 3:
              return _context6.abrupt("return", instance);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function create(_x3) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var MenuItem = /*#__PURE__*/function () {
  function MenuItem(options) {
    _classCallCheck(this, MenuItem);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$menuItem", void 0);
    this.options = options || {};
    this.$menuItem = null;
  }
  /**
   * 新建一个底层数据的 MenuItem 对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(MenuItem, [{
    key: "_createMenuItem",
    value: (function () {
      var _createMenuItem2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var options, _menuItem, menuItem;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              options = this.options;
              if (!(options.subMenu === undefined || options.subMenu === null || options.subMenu.$menu === null)) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return");
            case 3:
              _menuItem = new FRMenuItem();
              _context.next = 6;
              return _menuItem.new({
                name: options.name,
                title: options.title,
                bmp: options.bmp,
                separator: options.separator,
                subMenu: options.subMenu.$menu
              });
            case 6:
              menuItem = _context.sent;
              this.$menuItem = menuItem;
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createMenuItem() {
        return _createMenuItem2.apply(this, arguments);
      }
      return _createMenuItem;
    }()
    /**
     * 创建 MenuItem 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<MenuItemType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁 MenuItem
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$menuItem)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              _context2.next = 4;
              return this.release();
            case 4:
              this.$menuItem = null;
              return _context2.abrupt("return");
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 释放此菜单项实例
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "release",
    value: (function () {
      var _release = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$menuItem)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return");
            case 2:
              _context3.next = 4;
              return this.$menuItem.release();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function release() {
        return _release.apply(this, arguments);
      }
      return release;
    }()
    /**
     * 获取此菜单项的标题
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getTitle",
    value: (function () {
      var _getTitle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$menuItem)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", '');
            case 2:
              _context4.next = 4;
              return this.$menuItem.getTitle();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getTitle() {
        return _getTitle.apply(this, arguments);
      }
      return getTitle;
    }()
    /**
     * 获取此菜单项的唯一name值
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getName",
    value: (function () {
      var _getName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$menuItem)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", '');
            case 2:
              _context5.next = 4;
              return this.$menuItem.getName();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getName() {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
    /**
     * 设置执行过程
     * @param {ExecuteProcCallbacksType} proc - 描述执行过程的回调函数，用于创建 FRExecuteProc 实例
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setExecuteProc",
    value: (function () {
      var _setExecuteProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(proc) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(this.$menuItem) || _$1.isEmpty(proc))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", false);
            case 2:
              _context6.next = 4;
              return this.$menuItem.setExecuteProc(proc);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setExecuteProc(_x) {
        return _setExecuteProc.apply(this, arguments);
      }
      return setExecuteProc;
    }()
    /**
     * 设置计算功能是否启用的回调函数
     * @param {ComputeEnabledProcCallbacksType} proc - 计算功能启用的回调函数，当计算功能启用或禁用时会被调用
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "setComputeEnabledProc",
    value: (function () {
      var _setComputeEnabledProc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(proc) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(_$1.isEmpty(this.$menuItem) || _$1.isEmpty(proc))) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", false);
            case 2:
              _context7.next = 4;
              return this.$menuItem.setComputeEnabledProc(proc);
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function setComputeEnabledProc(_x2) {
        return _setComputeEnabledProc.apply(this, arguments);
      }
      return setComputeEnabledProc;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              _context8.next = 3;
              return instance._createMenuItem();
            case 3:
              return _context8.abrupt("return", instance);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x3) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var TextSelectTool = /*#__PURE__*/function () {
  function TextSelectTool(options) {
    _classCallCheck(this, TextSelectTool);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$textSelectTool", void 0);
    this.options = options || {};
    this.$textSelectTool = null;
  }
  /**
   * 新建一个底层数据的TextSelectTool对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(TextSelectTool, [{
    key: "_createTextSelectTool",
    value: (function () {
      var _createTextSelectTool2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _textSelectTool, textSelectTool;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(this.options.doc === undefined || this.options.doc === null || this.options.doc.$frDoc === null)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              _textSelectTool = new FRTextSelectTool();
              _context.next = 5;
              return _textSelectTool.create(this.options.doc.$frDoc);
            case 5:
              textSelectTool = _context.sent;
              this.$textSelectTool = textSelectTool;
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createTextSelectTool() {
        return _createTextSelectTool2.apply(this, arguments);
      }
      return _createTextSelectTool;
    }()
    /**
     * 创建 TextSelectTool 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<TextSelectToolType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁 TextSelectTool
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$textSelectTool)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              this.$textSelectTool = null;
              return _context2.abrupt("return");
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取选中的文本
     * @returns {Promise<string>} 返回选中的文本
     */
    )
  }, {
    key: "getSelectedText",
    value: (function () {
      var _getSelectedText = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$textSelectTool)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", '');
            case 2:
              _context3.next = 4;
              return this.$textSelectTool.getSelectedText();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getSelectedText() {
        return _getSelectedText.apply(this, arguments);
      }
      return getSelectedText;
    }()
    /**
     * 清除选中
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "clearSelection",
    value: (function () {
      var _clearSelection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$textSelectTool)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              _context4.next = 4;
              return this.$textSelectTool.clearSelection();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function clearSelection() {
        return _clearSelection.apply(this, arguments);
      }
      return clearSelection;
    }()
    /**
     * 获取选中的文本，并设置换行符
     * @param {boolean} lineBreakBetweenPages 是否在页码之间插入换行符
     * @returns {Promise<string>} 返回选中的文本
     */
    )
  }, {
    key: "getSelectedText2",
    value: (function () {
      var _getSelectedText2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(lineBreakBetweenPages) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textSelectTool) || !_$1.isBoolean(lineBreakBetweenPages))) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", '');
            case 2:
              _context5.next = 4;
              return this.$textSelectTool.getSelectedText2(lineBreakBetweenPages);
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getSelectedText2(_x) {
        return _getSelectedText2.apply(this, arguments);
      }
      return getSelectedText2;
    }()
    /**
     * 添加选择区域
     * @param {PageViewType} pageView 页面视图对象，描述了页面的布局和元素它包含了页面上所有元素的几何信息，
     *                 是在进行页面元素选择和操作时的基础
     * @param {FloatRectArrayType} formRects 一组表单矩形的数组，每个矩形代表了一个表单元素的位置和大小这些矩形用于
     *                   指定哪些部分的页面应当被识别为可选择的区域
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "addSelect2",
    value: (function () {
      var _addSelect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(pageView, formRects) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(this.$textSelectTool) || _$1.isEmpty(pageView) || _$1.isEmpty(pageView.$frPageView) || _$1.isEmpty(formRects) || _$1.isEmpty(formRects.$floatRectArray))) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$textSelectTool.addSelect2(pageView.$frPageView, formRects.$floatRectArray);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function addSelect2(_x2, _x3) {
        return _addSelect.apply(this, arguments);
      }
      return addSelect2;
    }()
    /**
     * 取消所有选择区域
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "deSelectAll",
    value: (function () {
      var _deSelectAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$textSelectTool)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$textSelectTool.deSelectAll();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function deSelectAll() {
        return _deSelectAll.apply(this, arguments);
      }
      return deSelectAll;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              _context8.next = 3;
              return instance._createTextSelectTool();
            case 3:
              return _context8.abrupt("return", instance);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x4) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var ByteStringArray = /*#__PURE__*/function () {
  function ByteStringArray(options) {
    _classCallCheck(this, ByteStringArray);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$byteStringArray", void 0);
    this.options = options || {};
    this.$byteStringArray = null;
  }
  /**
   * 新建一个底层数据的ByteStringArray对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(ByteStringArray, [{
    key: "_createByteStringArray",
    value: (function () {
      var _createByteStringArray2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _byteStringArray, byteStringArray;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _byteStringArray = new FSByteStringArray();
              _context.next = 3;
              return _byteStringArray.new();
            case 3:
              byteStringArray = _context.sent;
              this.$byteStringArray = byteStringArray;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createByteStringArray() {
        return _createByteStringArray2.apply(this, arguments);
      }
      return _createByteStringArray;
    }()
    /**
     * 创建 ByteStringArray 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<ByteStringArrayType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁 ByteStringArray
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$byteStringArray)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              this.$byteStringArray.destroy();
              this.$byteStringArray = null;
              return _context2.abrupt("return");
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取指定索引的值
     * @param {number} index 索引
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$byteStringArray)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", '');
            case 2:
              _context3.next = 4;
              return this.$byteStringArray.getAt(index);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getAt(_x) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 添加元素
     * @param {string} item 待添加的元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(item) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_$1.isEmpty(this.$byteStringArray) || !_$1.isString(item) || _$1.isEmpty(item))) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              _context4.next = 4;
              return this.$byteStringArray.add(item);
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function add(_x2) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 获取数组长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$byteStringArray)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", 0);
            case 2:
              _context5.next = 4;
              return this.$byteStringArray.getSize();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 清空数组
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$byteStringArray)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$byteStringArray.removeAll();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }()
    /**
     * 删除指定索引的元素
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        var count;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.getSize();
            case 2:
              count = _context7.sent;
              if (!(_$1.isEmpty(this.$byteStringArray) || _$1.isNumber(index) || index < 0 || index >= count)) {
                _context7.next = 5;
                break;
              }
              return _context7.abrupt("return");
            case 5:
              _context7.next = 7;
              return this.$byteStringArray.removeAt(index);
            case 7:
              return _context7.abrupt("return", _context7.sent);
            case 8:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAt(_x3) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              instance = new this(options);
              _context8.next = 3;
              return instance._createByteStringArray();
            case 3:
              return _context8.abrupt("return", instance);
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function create(_x4) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var FloatRectArray = /*#__PURE__*/function () {
  function FloatRectArray(options) {
    _classCallCheck(this, FloatRectArray);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$floatRectArray", void 0);
    this.options = options || {};
    this.$floatRectArray = null;
  }
  /**
   * 新建一个底层数据的FloatRectArray对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(FloatRectArray, [{
    key: "_createFloatRectArray",
    value: (function () {
      var _createFloatRectArray2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _floatRectArray, floatRectArray;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _floatRectArray = new FSFloatRectArray();
              _context.next = 3;
              return _floatRectArray.new();
            case 3:
              floatRectArray = _context.sent;
              this.$floatRectArray = floatRectArray;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createFloatRectArray() {
        return _createFloatRectArray2.apply(this, arguments);
      }
      return _createFloatRectArray;
    }()
    /**
     * 创建 FloatRectArray 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<FloatRectArrayType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁 FloatRectArray
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$floatRectArray)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              this.$floatRectArray.destroy();
              this.$floatRectArray = null;
              return _context2.abrupt("return");
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 添加一个 FloatRect
     * @param {Rect} newItem 要添加的 FSFloatRect 对象
     * @returns {Promise<number>} The added element’s index.
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newItem) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$floatRectArray)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", -1);
            case 2:
              _context3.next = 4;
              return this.$floatRectArray.add(newItem);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function add(_x) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 获取数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$floatRectArray)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", 0);
            case 2:
              _context4.next = 4;
              return this.$floatRectArray.getSize();
            case 4:
              return _context4.abrupt("return", _context4.sent);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 用于获取 Array 的指定维度的上限
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getUpperBound",
    value: (function () {
      var _getUpperBound = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!_$1.isEmpty(this.$floatRectArray)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return", 0);
            case 2:
              _context5.next = 4;
              return this.$floatRectArray.getUpperBound();
            case 4:
              return _context5.abrupt("return", _context5.sent);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getUpperBound() {
        return _getUpperBound.apply(this, arguments);
      }
      return getUpperBound;
    }()
    /**
     * 设置集合的大小，并根据指定的增量增长
     * @param {number} size 集合的新大小
     * @param {number} growBy 集合增长的增量值
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setSize",
    value: (function () {
      var _setSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(size, growBy) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isNumber(size) || size < 0 || _$1.isNumber(growBy) || growBy < 0)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.next = 4;
              return this.$floatRectArray.setSize(size, growBy);
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function setSize(_x2, _x3) {
        return _setSize.apply(this, arguments);
      }
      return setSize;
    }()
    /**
     * 移除所有元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!_$1.isEmpty(this.$floatRectArray)) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              _context7.next = 4;
              return this.$floatRectArray.removeAll();
            case 4:
              return _context7.abrupt("return", _context7.sent);
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }()
    /**
     * 获取指定索引的元素
     * @param {number} index 索引
     * @returns {Promise<Rect>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index) {
        var count;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.getSize();
            case 2:
              count = _context8.sent;
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isNumber(index) || index < 0 || index >= count)) {
                _context8.next = 5;
                break;
              }
              return _context8.abrupt("return", {
                top: -Infinity,
                right: Infinity,
                bottom: Infinity,
                left: -Infinity
              });
            case 5:
              _context8.next = 7;
              return this.$floatRectArray.getAt(index);
            case 7:
              return _context8.abrupt("return", _context8.sent);
            case 8:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getAt(_x4) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 设置指定索引的元素
     * @param {number} index 索引
     * @param {Rect} newItem 要设置的元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "setAt",
    value: (function () {
      var _setAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index, newItem) {
        var count;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.getSize();
            case 2:
              count = _context9.sent;
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isNumber(index) || index < 0 || index >= count)) {
                _context9.next = 5;
                break;
              }
              return _context9.abrupt("return");
            case 5:
              _context9.next = 7;
              return this.$floatRectArray.setAt(index, newItem);
            case 7:
              return _context9.abrupt("return", _context9.sent);
            case 8:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function setAt(_x5, _x6) {
        return _setAt.apply(this, arguments);
      }
      return setAt;
    }()
    /**
     * 追加一个数组
     * @param {FloatRectArrayType} arr 要追加的数组
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "append",
    value: (function () {
      var _append = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(arr) {
        var count;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isEmpty(arr) || _$1.isEmpty(arr.$floatRectArray))) {
                _context10.next = 5;
                break;
              }
              _context10.next = 3;
              return this.getSize();
            case 3:
              count = _context10.sent;
              return _context10.abrupt("return", count);
            case 5:
              _context10.next = 7;
              return this.$floatRectArray.append(arr.$floatRectArray);
            case 7:
              return _context10.abrupt("return", _context10.sent);
            case 8:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function append(_x7) {
        return _append.apply(this, arguments);
      }
      return append;
    }()
    /**
     * 复制一个数组
     * @param {FloatRectArrayType} arr 要复制的数组
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "copy",
    value: (function () {
      var _copy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(arr) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isEmpty(arr) || _$1.isEmpty(arr.$floatRectArray))) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return");
            case 2:
              _context11.next = 4;
              return this.$floatRectArray.copy(arr.$floatRectArray);
            case 4:
              return _context11.abrupt("return", _context11.sent);
            case 5:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function copy(_x8) {
        return _copy.apply(this, arguments);
      }
      return copy;
    }()
    /**
     * 插入元素
     * @param {number} index 索引
     * @param {Rect} newItem 要插入的元素
     * @param {number} count 指定要插入的元素的计数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "insertAt",
    value: (function () {
      var _insertAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index, newItem, count) {
        var size;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.getSize();
            case 2:
              size = _context12.sent;
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isNumber(index) || index < 0 || index >= size || _$1.isNumber(count) || count < 0)) {
                _context12.next = 5;
                break;
              }
              return _context12.abrupt("return");
            case 5:
              _context12.next = 7;
              return this.$floatRectArray.insertAt(index, newItem, count);
            case 7:
              return _context12.abrupt("return", _context12.sent);
            case 8:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function insertAt(_x9, _x10, _x11) {
        return _insertAt.apply(this, arguments);
      }
      return insertAt;
    }()
    /**
     * 移除元素
     * @param {number} index 索引
     * @param {number} count 指定要移除的元素的计数
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(index, count) {
        var size;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.getSize();
            case 2:
              size = _context13.sent;
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isNumber(index) || index < 0 || index >= size)) {
                _context13.next = 5;
                break;
              }
              return _context13.abrupt("return");
            case 5:
              _context13.next = 7;
              return this.$floatRectArray.removeAt(index, count);
            case 7:
              return _context13.abrupt("return", _context13.sent);
            case 8:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function removeAt(_x12, _x13) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 查找元素的索引
     * @param {Rect} rect 要查找的元素
     * @param {number} startIndex 查找的起始索引
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "find",
    value: (function () {
      var _find = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(rect) {
        var startIndex,
          size,
          _args14 = arguments;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              startIndex = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : 0;
              _context14.next = 3;
              return this.getSize();
            case 3:
              size = _context14.sent;
              if (!(_$1.isEmpty(this.$floatRectArray) || _$1.isNumber(startIndex) || startIndex < 0 || startIndex >= size)) {
                _context14.next = 6;
                break;
              }
              return _context14.abrupt("return", -1);
            case 6:
              _context14.next = 8;
              return this.$floatRectArray.find(rect, startIndex);
            case 8:
              return _context14.abrupt("return", _context14.sent);
            case 9:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function find(_x14) {
        return _find.apply(this, arguments);
      }
      return find;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              instance = new this(options);
              _context15.next = 3;
              return instance._createFloatRectArray();
            case 3:
              return _context15.abrupt("return", instance);
            case 4:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function create(_x15) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var PtrArray = /*#__PURE__*/function () {
  function PtrArray(options) {
    _classCallCheck(this, PtrArray);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$ptrArray", void 0);
    this.options = options || {};
    this.$ptrArray = null;
  }
  /**
   * 新建一个底层数据的PtrArray对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(PtrArray, [{
    key: "_createPtrArray",
    value: (function () {
      var _createPtrArray2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _ptrArray, ptrArray;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ptrArray = new FSPtrArray();
              _context.next = 3;
              return _ptrArray.new();
            case 3:
              ptrArray = _context.sent;
              this.$ptrArray = ptrArray;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createPtrArray() {
        return _createPtrArray2.apply(this, arguments);
      }
      return _createPtrArray;
    }()
    /**
     * 创建 PtrArray 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<PtrArrayType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁 PtrArray
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$ptrArray)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              this.$ptrArray.destroy();
              this.$ptrArray = null;
              return _context2.abrupt("return");
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 获取当前数组的长度
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!_$1.isEmpty(this.$ptrArray)) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", 0);
            case 2:
              _context3.next = 4;
              return this.$ptrArray.getSize();
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 获取当前数组的某个元素
     * @param index 索引
     * @returns {Promise<LPVOID | null>} 元素根据具体类型，再行构造，eg. Bookmark
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {
        var _obj, ptr;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!_$1.isEmpty(this.$ptrArray)) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", null);
            case 2:
              _context4.next = 4;
              return this.$ptrArray.getAt(index);
            case 4:
              _obj = _context4.sent;
              _context4.next = 7;
              return LPVOID.create();
            case 7:
              ptr = _context4.sent;
              ptr.$object = _obj;
              return _context4.abrupt("return", ptr);
            case 10:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getAt(_x) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              instance = new this(options);
              _context5.next = 3;
              return instance._createPtrArray();
            case 3:
              return _context5.abrupt("return", instance);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function create(_x2) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

var WideStringArray = /*#__PURE__*/function () {
  function WideStringArray(options) {
    _classCallCheck(this, WideStringArray);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "$wideStringArray", void 0);
    this.options = options || {};
    this.$wideStringArray = null;
  }
  /**
   * 新建一个底层数据的WideStringArray对象
   * @private
   * @ignore
   * @returns {Promise<void>}
   */
  return _createClass(WideStringArray, [{
    key: "_createWideStringArray",
    value: (function () {
      var _createWideStringArray2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _wideStringArray, wideStringArray;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _wideStringArray = new FSWideStringArray();
              _context.next = 3;
              return _wideStringArray.new();
            case 3:
              wideStringArray = _context.sent;
              this.$wideStringArray = wideStringArray;
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _createWideStringArray() {
        return _createWideStringArray2.apply(this, arguments);
      }
      return _createWideStringArray;
    }()
    /**
     * 创建 WideStringArray 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<WideStringArrayType>}
     */
    )
  }, {
    key: "destroy",
    value: (
    /**
     * 销毁 WideStringArray
     * @returns {Promise<void>}
     */
    function () {
      var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!_$1.isEmpty(this.$wideStringArray)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              this.$wideStringArray.destroy();
              this.$wideStringArray = null;
              return _context2.abrupt("return");
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
    /**
     * 添加元素
     * @param {string} newItem 添加的元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "add",
    value: (function () {
      var _add = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newItem) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_$1.isEmpty(this.$wideStringArray) || _$1.isString(newItem))) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return");
            case 2:
              _context3.next = 4;
              return this.$wideStringArray.add(newItem);
            case 4:
              return _context3.abrupt("return", _context3.sent);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function add(_x) {
        return _add.apply(this, arguments);
      }
      return add;
    }()
    /**
     * 复制元素
     * @param {WideStringArrayType} srcArr 源数组
     * @param {number} start 开始位置
     * @param {number} count 数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "copy",
    value: (function () {
      var _copy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(srcArr, start, count) {
        var size;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return srcArr.getSize();
            case 2:
              size = _context4.sent;
              if (!(_$1.isEmpty(this.$wideStringArray) || _$1.isEmpty(srcArr) || _$1.isEmpty(srcArr.$wideStringArray) || _$1.isNumber(start) || _$1.isNumber(count) || start < 0 || start >= size || count < 0 || count > size)) {
                _context4.next = 5;
                break;
              }
              return _context4.abrupt("return", -1);
            case 5:
              _context4.next = 7;
              return this.$wideStringArray.copy(srcArr.$wideStringArray, start, count);
            case 7:
              return _context4.abrupt("return", _context4.sent);
            case 8:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function copy(_x2, _x3, _x4) {
        return _copy.apply(this, arguments);
      }
      return copy;
    }()
    /**
     * 获取元素
     * @param {number} index 索引
     * @returns {Promise<string>}
     */
    )
  }, {
    key: "getAt",
    value: (function () {
      var _getAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index) {
        var size;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getSize();
            case 2:
              size = _context5.sent;
              if (!(_$1.isEmpty(this.$wideStringArray) || _$1.isNumber(index) || index < 0 || index >= size)) {
                _context5.next = 5;
                break;
              }
              return _context5.abrupt("return", '');
            case 5:
              _context5.next = 7;
              return this.$wideStringArray.getAt(index);
            case 7:
              return _context5.abrupt("return", _context5.sent);
            case 8:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getAt(_x5) {
        return _getAt.apply(this, arguments);
      }
      return getAt;
    }()
    /**
     * 获取元素数量
     * @returns {Promise<number>}
     */
    )
  }, {
    key: "getSize",
    value: (function () {
      var _getSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!_$1.isEmpty(this.$wideStringArray)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return", 0);
            case 2:
              _context6.next = 4;
              return this.$wideStringArray.getSize();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getSize() {
        return _getSize.apply(this, arguments);
      }
      return getSize;
    }()
    /**
     * 删除元素
     * @param {number} index 索引
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAt",
    value: (function () {
      var _removeAt = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index) {
        var size;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.getSize();
            case 2:
              size = _context7.sent;
              if (!(_$1.isEmpty(this.$wideStringArray) || _$1.isNumber(index) || index < 0 || index >= size)) {
                _context7.next = 5;
                break;
              }
              return _context7.abrupt("return");
            case 5:
              _context7.next = 7;
              return this.$wideStringArray.removeAt(index);
            case 7:
              return _context7.abrupt("return", _context7.sent);
            case 8:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function removeAt(_x6) {
        return _removeAt.apply(this, arguments);
      }
      return removeAt;
    }()
    /**
     * 删除所有元素
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "removeAll",
    value: (function () {
      var _removeAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!_$1.isEmpty(this.$wideStringArray)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return");
            case 2:
              _context8.next = 4;
              return this.$wideStringArray.removeAll();
            case 4:
              return _context8.abrupt("return", _context8.sent);
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function removeAll() {
        return _removeAll.apply(this, arguments);
      }
      return removeAll;
    }())
  }], [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              instance = new this(options);
              _context9.next = 3;
              return instance._createWideStringArray();
            case 3:
              return _context9.abrupt("return", instance);
            case 4:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function create(_x7) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}();

function _callSuper$l(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$l() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$l() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$l = function _isNativeReflectConstruct() { return !!t; })(); }
var DIBitmap = /*#__PURE__*/function (_FSDIBitmap) {
  function DIBitmap() {
    _classCallCheck(this, DIBitmap);
    return _callSuper$l(this, DIBitmap, arguments);
  }
  _inherits(DIBitmap, _FSDIBitmap);
  return _createClass(DIBitmap, null, [{
    key: "create",
    value: (
    /**
     * 创建 DIBitmap 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<DIBitmap>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSDIBitmap);

function _callSuper$k(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$k() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$k() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$k = function _isNativeReflectConstruct() { return !!t; })(); }
var FloatPointer = /*#__PURE__*/function (_FXFloatPointer) {
  function FloatPointer() {
    _classCallCheck(this, FloatPointer);
    return _callSuper$k(this, FloatPointer, arguments);
  }
  _inherits(FloatPointer, _FXFloatPointer);
  return _createClass(FloatPointer, null, [{
    key: "create",
    value: (
    /**
     * 创建 FloatPointer 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<FloatPointer>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FloatPointer$1);

function _callSuper$j(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$j() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$j() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$j = function _isNativeReflectConstruct() { return !!t; })(); }
var ByteString = /*#__PURE__*/function (_FSByteString) {
  function ByteString() {
    _classCallCheck(this, ByteString);
    return _callSuper$j(this, ByteString, arguments);
  }
  _inherits(ByteString, _FSByteString);
  return _createClass(ByteString, null, [{
    key: "create",
    value: (
    /**
     * 创建 ByteString 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<ByteString>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSByteString);

function _callSuper$i(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$i() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$i() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$i = function _isNativeReflectConstruct() { return !!t; })(); }
var WideString = /*#__PURE__*/function (_FSWideString) {
  function WideString() {
    _classCallCheck(this, WideString);
    return _callSuper$i(this, WideString, arguments);
  }
  _inherits(WideString, _FSWideString);
  return _createClass(WideString, null, [{
    key: "create",
    value: (
    /**
     * 创建 WideString 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<WideString>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSWideString);

function _callSuper$h(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$h() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$h() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$h = function _isNativeReflectConstruct() { return !!t; })(); }
var IntPointer = /*#__PURE__*/function (_FXIntPointer) {
  function IntPointer() {
    _classCallCheck(this, IntPointer);
    return _callSuper$h(this, IntPointer, arguments);
  }
  _inherits(IntPointer, _FXIntPointer);
  return _createClass(IntPointer, null, [{
    key: "create",
    value: (
    /**
     * 创建 IntPointer 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<IntPointer>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(IntPointer$1);

function _callSuper$g(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$g() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$g() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$g = function _isNativeReflectConstruct() { return !!t; })(); }
var CRT_DATETIMEZONE = /*#__PURE__*/function (_FPDCRT_DATETIMEZONE) {
  function CRT_DATETIMEZONE() {
    _classCallCheck(this, CRT_DATETIMEZONE);
    return _callSuper$g(this, CRT_DATETIMEZONE, arguments);
  }
  _inherits(CRT_DATETIMEZONE, _FPDCRT_DATETIMEZONE);
  return _createClass(CRT_DATETIMEZONE, null, [{
    key: "create",
    value: (
    /**
     * 创建 CRT_DATETIMEZONE 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<CRT_DATETIMEZONE>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDCRT_DATETIMEZONE);

function _callSuper$f(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$f() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$f() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$f = function _isNativeReflectConstruct() { return !!t; })(); }
var FileAttachmentInfo = /*#__PURE__*/function (_FXFileAttachmentInfo) {
  function FileAttachmentInfo() {
    _classCallCheck(this, FileAttachmentInfo);
    return _callSuper$f(this, FileAttachmentInfo, arguments);
  }
  _inherits(FileAttachmentInfo, _FXFileAttachmentInfo);
  return _createClass(FileAttachmentInfo, null, [{
    key: "create",
    value: (
    /**
     * 创建 FileAttachmentInfo 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<FileAttachmentInfo>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FileAttachmentInfo$1);

function _callSuper$e(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$e() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$e() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$e = function _isNativeReflectConstruct() { return !!t; })(); }
var Color = /*#__PURE__*/function (_FPDColor) {
  function Color() {
    _classCallCheck(this, Color);
    return _callSuper$e(this, Color, arguments);
  }
  _inherits(Color, _FPDColor);
  return _createClass(Color, null, [{
    key: "create",
    value: (
    /**
     * 创建 Color 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<Color>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDColor);

function _callSuper$d(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$d() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$d() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$d = function _isNativeReflectConstruct() { return !!t; })(); }
var ColorSpace = /*#__PURE__*/function (_FPDColorSpace) {
  function ColorSpace() {
    _classCallCheck(this, ColorSpace);
    return _callSuper$d(this, ColorSpace, arguments);
  }
  _inherits(ColorSpace, _FPDColorSpace);
  return _createClass(ColorSpace, null, [{
    key: "create",
    value: (
    /**
     * 创建 ColorSpace 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<ColorSpace>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDColorSpace);

function _callSuper$c(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$c() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$c() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$c = function _isNativeReflectConstruct() { return !!t; })(); }
var FontEncoding = /*#__PURE__*/function (_FPDFontEncoding) {
  function FontEncoding() {
    _classCallCheck(this, FontEncoding);
    return _callSuper$c(this, FontEncoding, arguments);
  }
  _inherits(FontEncoding, _FPDFontEncoding);
  return _createClass(FontEncoding, null, [{
    key: "create",
    value: (
    /**
     * 创建 FontEncoding 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<FontEncoding>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDFontEncoding);

function _callSuper$b(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$b() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$b() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$b = function _isNativeReflectConstruct() { return !!t; })(); }
var PageObject = /*#__PURE__*/function (_FPDPageObject) {
  function PageObject() {
    _classCallCheck(this, PageObject);
    return _callSuper$b(this, PageObject, arguments);
  }
  _inherits(PageObject, _FPDPageObject);
  return _createClass(PageObject, null, [{
    key: "create",
    value: (
    /**
     * 创建 PageObject 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<PageObject>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDPageObject);

function _callSuper$a(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$a() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$a() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$a = function _isNativeReflectConstruct() { return !!t; })(); }
var ParseOptions = /*#__PURE__*/function (_FPDParseOptions) {
  function ParseOptions() {
    _classCallCheck(this, ParseOptions);
    return _callSuper$a(this, ParseOptions, arguments);
  }
  _inherits(ParseOptions, _FPDParseOptions);
  return _createClass(ParseOptions, null, [{
    key: "create",
    value: (
    /**
     * 创建 ParseOptions 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<ParseOptions>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDParseOptions);

function _callSuper$9(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$9() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$9() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$9 = function _isNativeReflectConstruct() { return !!t; })(); }
var AffineMatrix = /*#__PURE__*/function (_FSAffineMatrix) {
  function AffineMatrix() {
    _classCallCheck(this, AffineMatrix);
    return _callSuper$9(this, AffineMatrix, arguments);
  }
  _inherits(AffineMatrix, _FSAffineMatrix);
  return _createClass(AffineMatrix, null, [{
    key: "create",
    value: (
    /**
     * 创建 AffineMatrix 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<AffineMatrix>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSAffineMatrix);

function _callSuper$8(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$8() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$8() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct() { return !!t; })(); }
var DevicePoint = /*#__PURE__*/function (_FSDevicePoint) {
  function DevicePoint() {
    _classCallCheck(this, DevicePoint);
    return _callSuper$8(this, DevicePoint, arguments);
  }
  _inherits(DevicePoint, _FSDevicePoint);
  return _createClass(DevicePoint, null, [{
    key: "create",
    value: (
    /**
     * 创建 DevicePoint 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<DevicePoint>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSDevicePoint);

function _callSuper$7(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$7() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$7() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct() { return !!t; })(); }
var FloatPoint = /*#__PURE__*/function (_FSFloatPoint) {
  function FloatPoint() {
    _classCallCheck(this, FloatPoint);
    return _callSuper$7(this, FloatPoint, arguments);
  }
  _inherits(FloatPoint, _FSFloatPoint);
  return _createClass(FloatPoint, null, [{
    key: "create",
    value: (
    /**
     * 创建 FloatPoint 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<FloatPoint>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSFloatPoint);

function _callSuper$6(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$6() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$6() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct() { return !!t; })(); }
var FloatRect = /*#__PURE__*/function (_FSFloatRect) {
  function FloatRect() {
    _classCallCheck(this, FloatRect);
    return _callSuper$6(this, FloatRect, arguments);
  }
  _inherits(FloatRect, _FSFloatRect);
  return _createClass(FloatRect, null, [{
    key: "create",
    value: (
    /**
     * 创建 FloatRect 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<FloatRect>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSFloatRect);

function _callSuper$5(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$5() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$5() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct() { return !!t; })(); }
var Rect = /*#__PURE__*/function (_FSRect) {
  function Rect() {
    _classCallCheck(this, Rect);
    return _callSuper$5(this, Rect, arguments);
  }
  _inherits(Rect, _FSRect);
  return _createClass(Rect, null, [{
    key: "create",
    value: (
    /**
     * 创建 Rect 实例。
     * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
     * @returns {Promise<Rect>}
     */
    function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(options);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FSRect);

function _callSuper$4(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$4() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$4() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 BookmarkDestinationInfo 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 */
var BookmarkDestinationInfo = /*#__PURE__*/function (_FPDBookmarkDestinati) {
  // 这里都需要手动调用super，写好BookmarkDestinationInfoType，否则 TSdoc 不会正常生成
  function BookmarkDestinationInfo(bookmarkDestinationInfo) {
    _classCallCheck(this, BookmarkDestinationInfo);
    return _callSuper$4(this, BookmarkDestinationInfo, [bookmarkDestinationInfo]);
  }
  /**
   * 创建 BookmarkDestinationInfo 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<BookmarkDestinationInfo>}
   */
  _inherits(BookmarkDestinationInfo, _FPDBookmarkDestinati);
  return _createClass(BookmarkDestinationInfo, null, [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(bookmarkDestinationInfo) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(bookmarkDestinationInfo);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDBookmarkDestinationInfo);

function _callSuper$3(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$3() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$3() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 BookmarkProperty 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 */
var BookmarkProperty = /*#__PURE__*/function (_FPDBookmarkProperty) {
  // 这里都需要手动调用super，写好FPDBookmarkPropertyType，否则 TSdoc 不会正常生成
  function BookmarkProperty(bookmarkProperty) {
    _classCallCheck(this, BookmarkProperty);
    return _callSuper$3(this, BookmarkProperty, [bookmarkProperty]);
  }
  /**
   * 创建 BookmarkProperty 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<BookmarkProperty>}
   */
  _inherits(BookmarkProperty, _FPDBookmarkProperty);
  return _createClass(BookmarkProperty, null, [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(bookmarkProperty) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(bookmarkProperty);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FPDBookmarkProperty);

function _callSuper$2(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 HeaderFooterElementInfo 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 */
var HeaderFooterElementInfo = /*#__PURE__*/function (_FRHeaderFooterElemen) {
  // 这里都需要手动调用super，写好HeaderFooterElementInfoType，否则 TSdoc 不会正常生成
  function HeaderFooterElementInfo(headerFooterElementInfo) {
    _classCallCheck(this, HeaderFooterElementInfo);
    return _callSuper$2(this, HeaderFooterElementInfo, [headerFooterElementInfo]);
  }
  /**
   * 创建 HeaderFooterElementInfo 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<BookmarkDestinationInfo>}
   */
  _inherits(HeaderFooterElementInfo, _FRHeaderFooterElemen);
  return _createClass(HeaderFooterElementInfo, null, [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(headerFooterElementInfo) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(headerFooterElementInfo);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FRHeaderFooterElementInfo);

function _callSuper$1(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 SaveDocOption 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 */
var SaveDocOption = /*#__PURE__*/function (_FRSaveDocOption) {
  // 这里都需要手动调用super，写好SaveDocOptionType，否则 TSdoc 不会正常生成
  function SaveDocOption(saveDocOption) {
    _classCallCheck(this, SaveDocOption);
    return _callSuper$1(this, SaveDocOption, [saveDocOption]);
  }
  /**
   * 创建 SaveDocOption 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<BookmarkDestinationInfo>}
   */
  _inherits(SaveDocOption, _FRSaveDocOption);
  return _createClass(SaveDocOption, null, [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(saveDocOption) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(saveDocOption);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FRSaveDocOption);

function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * 创建一个 WatermarkElementInfo 实例，并将其标记为私有且忽略 Typedoc 文档生成。
 * @private
 * @ignore
 */
var WatermarkElementInfo = /*#__PURE__*/function (_FRWatermarkElementIn) {
  // 这里都需要手动调用super，写好WatermarkElementInfoType，否则 TSdoc 不会正常生成
  function WatermarkElementInfo(watermarkElementInfo) {
    _classCallCheck(this, WatermarkElementInfo);
    return _callSuper(this, WatermarkElementInfo, [watermarkElementInfo]);
  }
  /**
   * 创建 WatermarkElementInfo 实例。
   * @param {Options} options 创建所需的配置选项，包含必要的初始化信息
   * @returns {Promise<BookmarkDestinationInfo>}
   */
  _inherits(WatermarkElementInfo, _FRWatermarkElementIn);
  return _createClass(WatermarkElementInfo, null, [{
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(watermarkElementInfo) {
        var instance;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              instance = new this(watermarkElementInfo);
              return _context.abrupt("return", instance);
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function create(_x) {
        return _create.apply(this, arguments);
      }
      return create;
    }())
  }]);
}(FRWatermarkElementInfo);

export { Action, AffineMatrix, Annot, AnnotList, App, FRAppEventCallbacks as AppEventCallbacks, Bookmark, BookmarkDestinationInfo, BookmarkProperty, ByteString, ByteStringArray, CRT_DATETIMEZONE, Color, ColorSpace, ColorState, FRComputeEnabledProc as ComputeEnabledProcCallbacks, FRContextMenuPopUpProcCallbacks as ContextMenuPopUpProcCallbacks, DIBitmap, _const as DefineConst, Dest, DevicePoint, Doc, FRDocEventCallbacks as DocEventCallbacks, FRDocSaveProcCallbacks as DocSaveProcCallbacks, DocView, _enum as Enum, FRExecuteProc as ExecuteProcCallbacks, FileAttachmentInfo, FloatPoint, FloatPointer, FloatRect, FloatRectArray, FontEncoding, HeaderFooterElementInfo, IntPointer, LPVOID, Menu, MenuItem, PDFArray, PDFBoolean, PDFDictionary, PDFFont, PDFLink, PDFName, PDFNumber, PDFObject, PDFString, POSITION, Page, PageObject, PageTextSearch, PageView, ParseOptions, Parser, PtrArray, Rect, RibbonBar, RibbonCategory, RibbonElement, FRRibbonElementImageInitProc as RibbonElementImageInitProcCallbacks, RibbonPanel, SaveDocOption, TextObject, TextPage, TextSelectTool, TextState, WatermarkElementInfo, WideString, WideStringArray };
